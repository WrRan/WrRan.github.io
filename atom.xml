<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WrRan の 杂货铺</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://47.110.235.226/"/>
  <updated>2019-08-26T02:43:18.937Z</updated>
  <id>http://47.110.235.226/</id>
  
  <author>
    <name>WrRan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Action classes @ argparse</title>
    <link href="http://47.110.235.226//blog/2019/08/26/learn/python/stdlib/argparse/action_classes/"/>
    <id>http://47.110.235.226//blog/2019/08/26/learn/python/stdlib/argparse/action_classes/</id>
    <published>2019-08-26T02:34:02.000Z</published>
    <updated>2019-08-26T02:43:18.937Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ArgumentParser, parsing for arguments</p></blockquote><a id="more"></a><p>Action classes implement the Action API, a callable which returns a callable which processes arguments from the command-line. Any object which follows this API may be passed as the <code>action</code> parameter to <code>add_argument()</code>.</p><p>Action objects are used by an ArgumentParser to represent the information needed to parse a single argument from one or more strings from the command line. The Action class must accept the two positional arguments plus any keyword argument passed <code>ArgumentParser.add_argument()</code> except for the <code>action</code> itself.</p><p>Instances of Action (or return value of any callable to the <code>action</code> parameter) should have attributes “dest”, “option_strings”, “default”, “type”, “required”, “help”, etc. defined. The easiest way to ensure these attributes are defined is to call <code>Action.__init__</code>.</p><p>Action instances should be callable, so subclasses must override the <code>__call__</code> method, which should accept four parameters:</p><ul><li><code>parser</code> - The ArgumentParser object which contains this action.</li><li><code>namespace</code> - The <strong>Namespace</strong> object that will be returned by <code>parse_args()</code>. Most actions add an attribute to this object using <code>setattr()</code>.</li><li><code>values</code> - The associated command-line arguments, with any type conversions applied. Type conversions are specified with the <code>type</code> keyword argument to <code>add_argument()</code>.</li><li><code>option_string</code> - The option string that was used to invoke this action. The <code>option_string</code> argument is optional, and will be absent if the action is associated with a positional argument.</li></ul><p>The <code>__call__</code> method may perform arbitary actions, but will typically set attributes on the <code>namespace</code> based on <code>dest</code> and <code>values</code>.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#action-classes" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#action-classes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;ArgumentParser, parsing for arguments&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="python" scheme="http://47.110.235.226/categories/learn/python/"/>
    
      <category term="stdlib" scheme="http://47.110.235.226/categories/learn/python/stdlib/"/>
    
      <category term="argparse" scheme="http://47.110.235.226/categories/learn/python/stdlib/argparse/"/>
    
    
      <category term="ArgumentParser" scheme="http://47.110.235.226/tags/ArgumentParser/"/>
    
  </entry>
  
  <entry>
    <title>Creating and Editing Run/Debug Configurations</title>
    <link href="http://47.110.235.226//blog/2019/08/25/learn/pycharm/working_with_run_or_debug_config/"/>
    <id>http://47.110.235.226//blog/2019/08/25/learn/pycharm/working_with_run_or_debug_config/</id>
    <published>2019-08-25T02:00:02.000Z</published>
    <updated>2019-08-25T02:20:29.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学着用，用着学</p></blockquote><a id="more"></a><p>With the Navigation bar visible (<strong>View | Appearance | Navigation Bar</strong>), the available <a href="https://www.jetbrains.com/help/pycharm/run-debug-configuration.html" target="_blank" rel="noopener">run/debug configurations</a> are displayed in the run/debug configuration selector in the <strong>Run</strong> area:</p><p><img src="https://www.jetbrains.com/help/img/idea/2019.2/py_runConfigMenu.png" alt="py_runConfigMenu"></p><p>PyCharm provides the <a href="https://www.jetbrains.com/help/pycharm/run-debug-configuration-python.html" target="_blank" rel="noopener">Run/Debug Configuration</a> dialog as a tool for handling run/debug configurations: create configuration profiles or change the default ones.</p><p>NOTE: Do not set up a working directory for the default Run/Debug Configurations listed under the <strong>Templates</strong> node. This may lead to unresolved targets in newly created Run/Debug Configurations.</p><h1 id="Create-a-run-debug-configuration"><a href="#Create-a-run-debug-configuration" class="headerlink" title="Create a run/debug configuration"></a>Create a run/debug configuration</h1><p><strong>Step ONE</strong>: Open the <a href="https://www.jetbrains.com/help/pycharm/run-debug-configurations-dialog.html" target="_blank" rel="noopener">Run/Debug Configuration</a> dialog:</p><ul><li>Select <strong>Run | Edit Configurations</strong> from the main menu.</li><li>With the <a href="https://www.jetbrains.com/help/pycharm/guided-tour-around-the-user-interface.html#navigation-bar" target="_blank" rel="noopener">Navigation bar</a> visible (<strong>View | Appearance | Navigation Bar</strong>), choose <strong>Edit Configuration</strong> from the run/debug configuration selector.</li><li>Press <code>⌃⌥R</code>, then press <code>0</code> or select the configuration from the popup and press <code>⌘↓</code>.</li></ul><p><strong>Step TWO</strong>: In the <a href="https://www.jetbrains.com/help/pycharm/run-debug-configurations-dialog.html" target="_blank" rel="noopener">Run/Debug Configuration</a> dialog, click + on the toolbar or press <code>⌘N</code>. The list shows the default run/debug configurations. Select the desired configuration type. The fields that appear in the right-hand pane display the default settings for the selected configuration type.</p><p><img src="https://www.jetbrains.com/help/img/idea/2019.2/py_add_new_configuration.png" alt="py_add_new_configuration"></p><p>NOTE: To change the settings of a default run/debug configuration, expand the <strong>Templates</strong> node, select the desired configuration type, and modify it as required. See <a href="https://www.jetbrains.com/help/pycharm/changing-default-run-debug-configurations.html" target="_blank" rel="noopener">Changing Run/Debug Configuration Templates</a> for details.</p><p><strong>Step THREE</strong>: For a new run/debug configuration:</p><ul><li>Specify its name in the <strong>Name</strong> field. This name will be shown in the list of the available run/debug configurations.</li><li>Specify whether you want to make PyCharm check execution status of the instances of the same run/debug configuration. If you want to make sure that only one instance of the run/debug configuration is currently executed, select the checkbox <strong>Single instance only</strong>. In this case, a confirmation dialog will show up every time you try to launch run/debug configuration, when one instance of the same type is still runing. If you click <strong>OK</strong> in the confirmation dialog, the first instance of the runner will be stopped, and the next one will take its place. If this checkbox is not selected, you can launch as many instances of the runner as required. As the result, each runner will start in its own tab of the <strong>Run</strong> tool window.<blockquote><p>To use an existing configuration as a template, create its copy by clicking the <strong>Copy</strong> button on the tool bar, then chage it as required.</p></blockquote></li></ul><p><strong>Step FOUR</strong>: In the <strong>Configuration</strong> tab:</p><ul><li>From the <strong>Script path/Module name</strong> list select a type of target to run. Then, in the corresponding field, specify the path to the Python script or the module name to be excuted.</li><li>Specify the Python interpreter.</li><li>If needed, specify Python environment variables.</li></ul><p><strong>Step FIVE</strong>: In the <strong>Before launch</strong> section, define whether you want to execute some tools or scripts prior to launching the run/debug configuration.</p><p><strong>Step SIX</strong>: In the <strong>Execution</strong> section, you can select a method to run the script (<strong>Emulate terminal in output console</strong> or <strong>Run with Python console</strong>). If needed, enable redirecting data from a text file to standard input (<strong>Redirect input from</strong>).</p><p><strong>Step SEVEN</strong>: Specify additional parameters depending on the configuration type. For descriptions of run/debug configuration parameters, refer to the <a href="https://www.jetbrains.com/help/pycharm/run-debug-configurations-dialog.html" target="_blank" rel="noopener">Run/Debug Configurations Dialog</a> section.</p><p><strong>Step EIGHT</strong>: Apply the changes and close the dialog.</p><h1 id="Edit-and-exiting-run-debug-configuration"><a href="#Edit-and-exiting-run-debug-configuration" class="headerlink" title="Edit and exiting run/debug configuration"></a>Edit and exiting run/debug configuration</h1><p>See <a href="https://www.jetbrains.com/help/pycharm/creating-and-editing-run-debug-configurations.html#edit" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/creating-and-editing-run-debug-configurations.html#edit</a></p><h1 id="Enable-ther-Services-tool-window"><a href="#Enable-ther-Services-tool-window" class="headerlink" title="Enable ther Services tool window"></a>Enable ther Services tool window</h1><p>See <a href="https://www.jetbrains.com/help/pycharm/creating-and-editing-run-debug-configurations.html#services-tool-window" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/creating-and-editing-run-debug-configurations.html#services-tool-window</a>.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>Creating and Editing Run/Debug Configuratons: <a href="https://www.jetbrains.com/help/pycharm/creating-and-editing-run-debug-configurations.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/creating-and-editing-run-debug-configurations.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;学着用，用着学&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="pycharm" scheme="http://47.110.235.226/categories/learn/pycharm/"/>
    
    
  </entry>
  
  <entry>
    <title>Step 0 - Before you start &lt; Quick Start Guide @ PyCharm</title>
    <link href="http://47.110.235.226//blog/2019/08/25/learn/pycharm/index/"/>
    <id>http://47.110.235.226//blog/2019/08/25/learn/pycharm/index/</id>
    <published>2019-08-25T01:32:12.000Z</published>
    <updated>2019-09-10T23:25:19.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用着学，学着用</p></blockquote><a id="more"></a><p>This Quick Start Guide is designed to introduce the key concepts and help you make a quick start with the IDE.</p><h1 id="Step-0-Before-you-start"><a href="#Step-0-Before-you-start" class="headerlink" title="Step 0. Before you start"></a>Step 0. Before you start</h1><h2 id="Which-languages-does-PyCharm-support"><a href="#Which-languages-does-PyCharm-support" class="headerlink" title="Which languages does PyCharm support?"></a>Which languages does PyCharm support?</h2><p>With PyCharm you can develop applications in Python. In addition, in the Professional edition, one can develop Django, Flask and Pyramid applications. Also, it fully supports HTML (including HTML5), CSS, JavaScript, and XML; these languages and bundles in the IDE via plugins and are switched on for you by default. Support for the other languages and frameworks can also be added via plugins (go to <strong>Settings | Plugins</strong> or <strong>PyCharm | Preferences | Plugins</strong> for macOS users, to find out more or set them up during the first IDE launch).</p><h2 id="What-platforms-can-I-run-PyCharm-on"><a href="#What-platforms-can-I-run-PyCharm-on" class="headerlink" title="What platforms can I run PyCharm on?"></a>What platforms can I run PyCharm on?</h2><p>PyCharm is a cross-platform IDE that works on Windows, macOS, and Linux.</p><p>If you need assistance installing PyCharm, see the installation instuctions: <a href="https://www.jetbrains.com/help/pycharm/installation-guide.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/installation-guide.html</a></p><h2 id="What-do-I-need-to-start-with-PyCharm"><a href="#What-do-I-need-to-start-with-PyCharm" class="headerlink" title="What do I need to start with PyCharm?"></a>What do I need to start with PyCharm?</h2><p>In general to start developing in Python with PyCharm you need to download, install and start PyCharm (depending on your platform).</p><h1 id="Step-1-Open-Create-a-project-in-PyCharm"><a href="#Step-1-Open-Create-a-project-in-PyCharm" class="headerlink" title="Step 1. Open/Create a project in PyCharm"></a>Step 1. Open/Create a project in PyCharm</h1><p><strong>Why do I need a project?</strong><br>Everything you do in PyCharm is done within the context of a project. It serves as a basis for coding assistance, bulk refactoring, coding style consistency, and so on.</p><p>You have three options to start working on a project inside the IDE.</p><ol><li>open an existing project: <a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html#open-project" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html#open-project</a></li><li>check out an existing project from version control: <a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html#checkout-from-vcs" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html#checkout-from-vcs</a></li><li>create a project from scratch: <a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html#create-project-from-scratch" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html#create-project-from-scratch</a></li></ol><p>These infomations may be helpful.</p><ol><li>creating a Python file: <a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html#create-file" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html#create-file</a></li><li>configure project interpreter: <a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html#interpreter" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html#interpreter</a></li></ol><h1 id="Step-2-Look-around"><a href="#Step-2-Look-around" class="headerlink" title="Step 2. Look around"></a>Step 2. Look around</h1><p>When you launch PyCharm for the very first time, or when there are no open projects, you see the <a href="https://www.jetbrains.com/help/pycharm/welcome-screen.html" target="_blank" rel="noopener">Welcome screen</a>. It gives you the main entry points into the IDE: <a href="https://www.jetbrains.com/help/pycharm/creating-and-managing-projects.html" target="_blank" rel="noopener">creating or opening a project</a>, checking out a project from version control, <a href="https://www.jetbrains.com/help/pycharm/viewing-reference-information.html" target="_blank" rel="noopener">view documentation</a>, and <a href="https://www.jetbrains.com/help/pycharm/configuring-project-and-ide-settings.html" target="_blank" rel="noopener">configure the IDE</a>.</p><p>When a project is opened, you see the main window divided into several logical areas. Let’s take a moment to see the key UI elements here:</p><p><img src="https://www.jetbrains.com/help/img/idea/2019.2/py_QST_lookAroundThumb.png" alt title="Look Around Thumb"></p><ol><li><a href="https://www.jetbrains.com/help/pycharm/project-tool-window.html" target="_blank" rel="noopener">Project View</a> on the left side displays your project files.</li><li><a href="https://www.jetbrains.com/help/pycharm/using-code-editor.html" target="_blank" rel="noopener">Editor</a> on the right side, where you actually write your code. It has tabs for easy navigation between open files.</li><li>Navigation bar above the editor additionally allows you to quickly run and debug your application as well as do the basic <a href="https://www.jetbrains.com/help/pycharm/version-control-integration.html" target="_blank" rel="noopener">VCS actions</a>.</li><li><strong>Left gutter</strong>, the vertical stripe next to the editor, shows the breakpoints you have, and provides a convenient way to <a href>navigate through the code</a> hierarchy like going to definition/declaration. It also shows line numbers and per-line VCS history.</li><li><strong>Rigut gutter</strong>, on the right side of the editor. PyCharm constantly monitors the quality of your code and always shows the results of its <a href="https://www.jetbrains.com/help/pycharm/code-inspection.html" target="_blank" rel="noopener">code inspections</a> in the right gutter: errors, warnings, and so on. The indicator in the top right-hand corner shows the overall status of code insepctions for the entire file.</li><li><a href="https://www.jetbrains.com/help/pycharm/tool-windows.html" target="_blank" rel="noopener">Tool windows</a> are specialized windows attached to the bottom and sides of the workspace and provide access to typical tasks such as project management, source code search and navigation, integration with version control systems, and so on.</li><li><a href="https://www.jetbrains.com/help/pycharm/guided-tour-around-the-user-interface.html#status-bar" target="_blank" rel="noopener">The status bar</a> indicates the status of your project and the entire IDE, and shows various warnings and information messages like file encoding, line separator, inspection profile, and so on. It also provides quick access to the probject interpreter settings.</li></ol><p>Also, in the bottom-left corner of the PyCharm window, in the Status bar, you see the button. This button toggles the showing of the tool window bars. If you hover your mouse pointer over this button, the list of the currently available tool windows show up.</p><p>See the pages <a href="https://www.jetbrains.com/help/pycharm/guided-tour-around-the-user-interface.html" target="_blank" rel="noopener">Overview of the user interface</a> and <a href="https://www.jetbrains.com/help/pycharm/manipulating-the-tool-windows.html#show-all" target="_blank" rel="noopener">Hide or showing the tool window bars</a> to learn more about showing or hiding tool windows.</p><h1 id="Step-3-Customize-your-environment"><a href="#Step-3-Customize-your-environment" class="headerlink" title="Step 3. Customize your environment"></a>Step 3. Customize your environment</h1><p>Feel free to <a href="https://www.jetbrains.com/help/pycharm/configuring-project-and-ide-settings.html" target="_blank" rel="noopener">tweak the IDE</a> so it suits your needs perfectly and is as helpful and comfortable as it can be. Go to <a href="https://www.jetbrains.com/help/pycharm/settings-preferences-dialog.html" target="_blank" rel="noopener">File | Setting</a> (<strong>PyCharm | Perferences | Appearance and Behavior | Appearance</strong> for macOS user)</p><h2 id="Appearance"><a href="#Appearance" class="headerlink" title="Appearance"></a>Appearance</h2><p>The first thing to fine-tune is the general “look and feel.” More information please see <a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html#appearance" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html#appearance</a>.</p><h2 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h2><p>The many pages available under <a href="https://www.jetbrains.com/help/pycharm/settings-editor.html" target="_blank" rel="noopener">File | Settings | Editor</a> (<strong>PyCharm | Preferences | Editor</strong> for macOS users) help you adjust every aspect of the editor’s behavior. More info please see <a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html#editor" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html#editor</a>.</p><h2 id="Code-style"><a href="#Code-style" class="headerlink" title="Code style"></a>Code style</h2><p><a href>Code style</a> can be defined for each language under <a href="https://www.jetbrains.com/help/pycharm/settings-code-style.html" target="_blank" rel="noopener">File | Settings | Editor | Code Style</a> (<strong>PyCharm | Preferences | Editor | Code Style</strong> for macOS users). You can also create and save your own coding style scheme.</p><p>Refer to <a href="https://www.jetbrains.com/help/pycharm/configuring-code-style.html" target="_blank" rel="noopener">Configuring code style</a> and [Code Quality Assistance Tips and Tricks, or <a href="https://www.jetbrains.com/help/pycharm/tutorial-code-quality-assistance-tips-and-tricks.html" target="_blank" rel="noopener">How to Make Your Code Look Pretty?</a> for details.</p><h2 id="Keymap"><a href="#Keymap" class="headerlink" title="Keymap"></a>Keymap</h2><p>PyCharm uses the keyboard-centric approach, meaning that nearly all actions possible in the IDE are mapped to keyboard shortcuts.</p><p>The [set of keyboard shortcuts] you work with is one of your most intimate habits – your fingers “remember” certain combinations of keys, and changing this habit is easier said than done. PyCharms supplies you with a default keymap making you coding really productive and convenient. However, you can always <a href="https://www.jetbrains.com/help/pycharm/configuring-keyboard-and-mouse-shortcuts.html" target="_blank" rel="noopener">change it</a> going to <a href="https://www.jetbrains.com/help/pycharm/settings-keymap.html" target="_blank" rel="noopener">File | Settings | Keymap</a> (<strong>PyCharm | Preferences | Keymap</strong> for macOS users).</p><p>There are also some pre-defined keymaps (like Emacs, Visual Studio, Eclipse, NetBeans and so on), and you can also create your own keymap based on an existing one.</p><p>If you feel most productive with vi/vim, an emulation mode will give you the best of both worlds. Enable the IdeaVim plugin in the IDE and select the vim keymap.</p><p>Refer to the section <a href="https://www.jetbrains.com/help/pycharm/configuring-keyboard-and-mouse-shortcuts.html" target="_blank" rel="noopener">Configuring keyboard shortcuts</a> for details.</p><h1 id="Step-4-Code-with-smart-assistance"><a href="#Step-4-Code-with-smart-assistance" class="headerlink" title="Step 4. Code with smart assistance"></a>Step 4. Code with smart assistance</h1><p>PyCharm takes care of the routine so that you can focus on the important. Use the following coding capabilities to create error-free applications without wasting precious time.</p><h2 id="Code-completion"><a href="#Code-completion" class="headerlink" title="Code completion"></a>Code completion</h2><p><a href="https://www.jetbrains.com/help/pycharm/auto-completing-code.html" target="_blank" rel="noopener">Code completion</a> is a great time-saver, regardless of the type of file you’re working with.</p><p>Basic completion works as you type and completes any name instantly.</p><p>Smart type completion analyzes the context you’re currently working in and offers more accurate suggestions based on that analysis.</p><h2 id="Intention-actions"><a href="#Intention-actions" class="headerlink" title="Intention actions"></a>Intention actions</h2><p>PyCharm keeps an eye on what you are currently doing and makes smart suggestions, called <a href>intention actions</a>, to save more of your time. Indicated with a lightbulb, intention actions let you apply automatic changes to code that is <strong>correct</strong> (in contract to code inspections that provides quick-fixes for code that <strong>may be incorrect</strong>). Did you forget to add some parameters and field initializers to the constructor&gt; Not a problem with PyCharm. Clik the lightbuib and select one of the suggested options.</p><p>The full list of available intention actions can be found in <strong>File | Settings | Editor | Intentions</strong> or <strong>PyCharm | Preferences | Editor | Intentions</strong> for macOS users.</p><h1 id="Step-5-Keep-your-code-neat"><a href="#Step-5-Keep-your-code-neat" class="headerlink" title="Step 5. Keep your code neat"></a>Step 5. Keep your code neat</h1><p>PyCharm monitors your code and tries to keep it accurate and clean. It delects potential errors and problems and suggests <a href="https://www.jetbrains.com/help/pycharm/intention-actions.html" target="_blank" rel="noopener">quick-fixes</a> for them.</p><p>Every time the IDE finds unused codes, and endless loop, and many other things that likely require your attention, you’ll see a lightbulb. Click it to apply a fix.</p><p>The complete list of available <a href="https://www.jetbrains.com/help/pycharm/code-inspection.html" target="_blank" rel="noopener">inspections</a> can be found under <strong>Settings | Editor | Inspections</strong> (or <strong>PyCharm | Preferences | Editor | Inspections</strong> for macOS users). Disable some of them, or enable others, plus adjust the severity of each inspection. You decide whether it should be considered an error or just a warning.</p><h1 id="Step-6-Generate-some-code"><a href="#Step-6-Generate-some-code" class="headerlink" title="Step 6. Generate some code"></a>Step 6. Generate some code</h1><p>Writing code can be a lot easier and quicker when you use the <a href="https://www.jetbrains.com/help/pycharm/generating-code.html" target="_blank" rel="noopener">code generation options</a> available in PyCharm. The <strong>Code | Generate</strong> menu <code>N/A</code> will help you with creating symbols from usage, as well as suggest overriding/implementing some functions.</p><p>Use live templates (choose <strong>Code | Insert Live Templeate</strong>) to produce the entire code constructs. You can explore the available ready-to-use live templates in the <strong>Settings/Preferences</strong> dialog (<a href="https://www.jetbrains.com/help/pycharm/settings-live-templates.html" target="_blank" rel="noopener">Settings | Editor | Live templates</a> or <strong>PyCharm | Preferences | Editor | Live Templates</strong> if you are a macOS user).</p><p>If you see that you are lacking something especially important for your development, extend this set of templeates with your own. Also, consider quickly <a href="https://www.jetbrains.com/help/pycharm/generate-custom-code-constructs-using-live-templates.html" target="_blank" rel="noopener">surrounding</a> your code with complete constructs (choose <strong>Code | Surround With</strong>).</p><h1 id="Step-7-Find-you-way-through"><a href="#Step-7-Find-you-way-through" class="headerlink" title="Step 7. Find you way through"></a>Step 7. Find you way through</h1><p>When your project is big, or when you have to work with someone else’s code, it’s vital to be able to quickly find what you are looking for and dig into the code. This is why PyCharm comes with a set of <a href="https://www.jetbrains.com/help/pycharm/navigating-through-the-source-code.html" target="_blank" rel="noopener">navigation</a> and <a href="https://www.jetbrains.com/help/pycharm/finding-and-replacing-text-in-file.html" target="_blank" rel="noopener">search</a> features that help you find your way through any code no matter how tangled it is.</p><h2 id="Basic-search"><a href="#Basic-search" class="headerlink" title="Basic search"></a>Basic search</h2><p>With these search facilities, you can find and replace any fragment of code both in the <a href="https://www.jetbrains.com/help/pycharm/finding-and-replacing-text-in-file.html" target="_blank" rel="noopener">currentluy opened file</a>, or in an <a href="https://www.jetbrains.com/help/pycharm/finding-and-replacing-text-in-project.html" target="_blank" rel="noopener">entire project</a>.</p><h2 id="Search-for-usages"><a href="#Search-for-usages" class="headerlink" title="Search for usages"></a>Search for usages</h2><p>To find where a particular symbol is used, PyCharm suggests full-scale search via <a href="https://www.jetbrains.com/help/pycharm/finding-usages.html" target="_blank" rel="noopener">Find Usages</a>.</p><h2 id="Project-navigation"><a href="#Project-navigation" class="headerlink" title="Project navigation"></a>Project navigation</h2><p>You can tell a lot just looking at your File Structure, with its imports or call hierarchies.</p><p>Also, you can naviagte to:</p><ul><li><a href="https://www.jetbrains.com/help/pycharm/searching-everywhere.html" target="_blank" rel="noopener">Class, file, or symbol by its name.</a></li><li><a href="https://www.jetbrains.com/help/pycharm/navigating-through-the-source-code.html" target="_blank" rel="noopener">Declaration.</a></li><li><a href="https://www.jetbrains.com/help/pycharm/navigating-through-the-source-code.html#go_to_implementation" target="_blank" rel="noopener">Base class/base function.</a></li></ul><p>The icons in the left-hand gutter can also help you with navigation.</p><h2 id="Navigate-through-the-timeline"><a href="#Navigate-through-the-timeline" class="headerlink" title="Navigate through the timeline"></a>Navigate through the timeline</h2><p>Remembering all your activity in the project, PyCharm can easily navigate you to the <a href="https://www.jetbrains.com/help/pycharm/navigating-through-the-source-code.html#recent_files" target="_blank" rel="noopener">Recent Files</a> or <a href="https://www.jetbrains.com/help/pycharm/viewing-changes-information.html" target="_blank" rel="noopener">Recently Changed Files</a>.<br>To go through the history of changes, try using Back/Forward navigation and/or go to last edit location.</p><h2 id="Search-Everywhere"><a href="#Search-Everywhere" class="headerlink" title="Search Everywhere"></a>Search Everywhere</h2><p>If you have a general idea of what you’re looking for, you can always locate the corresponding element using one of the existing navigation features. But what if you really want to look for something in every look and cranny? The answer is to use <a href="https://www.jetbrains.com/help/pycharm/searching-everywhere.html" target="_blank" rel="noopener">Search Everywhere</a>!</p><p>To try it, click the magnifying glass button in the upper right-hand corner of the window, or invoke it with <strong>Double Shift</strong> (press Shift twice).</p><h1 id="Step-8-Run-debug-and-test"><a href="#Step-8-Run-debug-and-test" class="headerlink" title="Step 8. Run, debug and test"></a>Step 8. Run, debug and test</h1><p>TODO<br><a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html#step8" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html#step8</a></p><h1 id="Step-9-Kepp-your-source-code-under-Version-Control"><a href="#Step-9-Kepp-your-source-code-under-Version-Control" class="headerlink" title="Step 9. Kepp your source code under Version Control"></a>Step 9. Kepp your source code under Version Control</h1><h1 id="Step-10-Remote-development"><a href="#Step-10-Remote-development" class="headerlink" title="Step 10. Remote development"></a>Step 10. Remote development</h1><h1 id="Step-11-Databases"><a href="#Step-11-Databases" class="headerlink" title="Step 11. Databases"></a>Step 11. Databases</h1><h1 id="Step-12-That’s-it-Go-ahead-and-develope-with-pleasure"><a href="#Step-12-That’s-it-Go-ahead-and-develope-with-pleasure" class="headerlink" title="Step 12. That’s it! Go ahead and develope with pleasure!"></a>Step 12. That’s it! Go ahead and develope with pleasure!</h1><p>We hope this brief overview of essential PyCharm features will give you a quick start. There are many important features that make a developer’s life easier and more fun, and the source code neater and cleaner. Take these first few steps now, and then dig deeper when you fell the time is right. Enjoy PyCharm!</p><p>With any questions visit our <a href="https://www.jetbrains.com/support/community/#section=communities" target="_blank" rel="noopener">Discussion Forum</a>, <a href="https://twitter.com/jetbrains" target="_blank" rel="noopener">twitter</a>, and <a href="https://blog.jetbrains.com/" target="_blank" rel="noopener">blog</a>, where you can find news, updates, and useful tips and tricks. Also, don’t hesitate to report any problems to our <a href="https://intellij-support.jetbrains.com/hc/en-us" target="_blank" rel="noopener">support team</a> or the PyCharm <a href="https://youtrack.jetbrains.com/issues/" target="_blank" rel="noopener">issue tracker</a>.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>Quick Start Guide: <a href="https://www.jetbrains.com/help/pycharm/quick-start-guide.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/pycharm/quick-start-guide.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;用着学，学着用&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="pycharm" scheme="http://47.110.235.226/categories/learn/pycharm/"/>
    
    
      <category term="pycharm" scheme="http://47.110.235.226/tags/pycharm/"/>
    
  </entry>
  
  <entry>
    <title>Command Line@python</title>
    <link href="http://47.110.235.226//blog/2019/08/24/learn/python/command-line-and-env/"/>
    <id>http://47.110.235.226//blog/2019/08/24/learn/python/command-line-and-env/</id>
    <published>2019-08-24T10:54:54.000Z</published>
    <updated>2019-08-24T11:41:41.389Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用着学，学着用</p></blockquote><a id="more"></a><p>The CPython interpreter scans the command line and the environment for various settings.</p><p><strong>CPython implementation details</strong>: Other implementations’ command line schemes may differ.</p><h1 id="Command-Line"><a href="#Command-Line" class="headerlink" title="Command Line"></a>Command Line</h1><p>When invoking Python, you may specify any of these options:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python [-bBdEhiIOqsSuvVWx?] [-c <span class="built_in">command</span> | -m module-name | script | -] [args]</span><br></pre></td></tr></table></figure><p></p><p>The most common use case is, of course, a simple invocation of a script:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python myscript.py</span><br></pre></td></tr></table></figure><p></p><h1 id="Interface-options"><a href="#Interface-options" class="headerlink" title="Interface options"></a>Interface options</h1><p>The interpreter interface resembles that of the UNIX shell, but provides some additional methods of invocation:</p><ul><li>When called with standard input connected to a tty device, it prompts for commands and executes them until an EOF (an end-of file character, you can produce that with <code>Ctrl-D</code> on UNIX or <code>Ctrl-z, Enter</code> on Windows) is read.</li><li>When called with a file name argument or with a file as standard input, it reads and executes a script form that file.</li><li>When called with a firectory name argument, it reads and executes an appropriately named script from that directory.</li><li>When called with <code>-c command</code>, it executes the Python statement(s) given as <code>command</code>. Here <code>command</code> may contain multiple statements separated by newlines. Leading whitespace is significant in Python statements!</li><li>When called with <code>-m module-name</code>, the given module is located on the Python module path and executed as a script.</li></ul><p>In non-interactive mode, the entire input is parsed before it is executed.</p><p>An intervace option terminates the list of options consumed by the interpreter, all consecutive arguments will end up in <code>sys.argv</code> - note that the first element, subscript zero, is a string reflecting the program’s source.</p><p><code>-c &lt;command&gt;</code>: Execute the Python code in command. command can be one or more statements separated by newlines, with significant leading whitespace as in normal module code. NOTE If this option is given, the first element of <code>sys.argv</code> will be “-c” and the current directory will be added to the start of <code>sys.path</code> (allowing modules in that directory to be imported as top level modules).</p><p><code>-m &lt;module-name&gt;</code>: Search sys.path for the named module and execute its contents as the <code>__main__</code> module. See also: <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m" target="_blank" rel="noopener">https://docs.python.org/3/using/cmdline.html#cmdoption-m</a></p><p><code>-</code>: Read commands from standard input (<strong>sys.stdin</strong>). If standard input is a terminal, <code>-i</code> is implied. NOTE if this option is given, the first element of <code>sys.argv</code> will be “-“ and the current directory will be added to the start of <code>sys.path</code>.</p><p><code>&lt;script&gt;</code>: Execute the Python code contained in script, which must be a filesystem path (absolute or relative) referring to either a Python file, a directory containing a <code>__main__.py</code> file, or a zipfile containing a <code>__main__.py</code> file.</p><p>If no interface option is given, <code>-i</code> is implied, <code>sys.argv[0]</code> is an empty string (“”) and the current directory will be added to the start of <code>sys.path</code>. Also, tab-completion and history editing is automatically enabled, if available on your platform.</p><h1 id="Generic-options"><a href="#Generic-options" class="headerlink" title="Generic options"></a>Generic options</h1><p><code>-?</code>/<code>-h</code>/<code>--help</code>: Print a short desciption of all command line options.<br><code>-V</code>/<code>--version</code>: Print the Python version number and exit.</p><h1 id="Miscellaneous-options"><a href="#Miscellaneous-options" class="headerlink" title="Miscellaneous options"></a>Miscellaneous options</h1><p><code>-b</code>: Issue a warning when comparing <code>bytes</code> or <code>bytearray</code> with <code>str</code> or <code>bytes</code> with <code>int</code>. Issue an error when the options is given twice (<code>-bb</code>).</p><p><code>-B</code>: If given, Python won’t try to write <code>.pyc</code> files on the import of source modules.</p><p><code>--check-hash-based-pycs</code> (<em>default</em>|<em>always</em>|<em>never</em>): Control the validation behavior of hash-based <strong>.pyc</strong> files. When set to <strong>default</strong>, checked and unchecked hash-based bytecode cache files are validated according to their default semantics. When set to <strong>always</strong>, all hased-based <em>.pyc</em> files, whether checked or unchecked, are validated against their corresponding source file. When set to <strong>never</strong>, hash-based <em>.pyc</em> files are not validated against their corresponding source files. Note the semantics of timestampe-based <em>.pyc</em> files are unaffected by this option.</p><p><code>-d</code>: Turn on parser debugging output (for expert only, depending on compilation options).</p><p><code>-E</code>: Ignore all <strong>PYTHON*</strong> enironment variables.</p><p><code>-i</code>: When a script is passed as first argument or the <code>-c</code> option is used, enter interactive mode after executing the script or the command, even when <strong>sys.stdin</strong> does not appear to be a terminal. The <strong>PYTHONSTARTUP</strong> file is not read. NOTE this can be useful to inspect global variables or a stack trace when a script raises an exception.</p><p><code>-I</code>: Run Python in isolated mode. This also implies <code>-E</code> and <code>-s</code>. In isolated mode <strong>sys.path</strong> contains neither the script’s directory nor the user’s site-packages directory. All <strong>PYTHON*</strong> environment variables are ignored, too. Further restrictions may be imposed to prevent the user from injecting mallicious code.</p><p><code>-O</code>: Remove assert statements and any code conditional on the value of <strong><strong>debug</strong></strong>. Augment the filename for compiled files by adding <em>.opt-1</em> before the <em>.pyc</em> extension.</p><p><code>-OO</code>: Do <code>-O</code> and also discard docstrings. Augment the filename for compiled files by adding <em>.opt-2</em> before the <em>.pyc</em> extension.</p><p><code>-q</code>: Don’t display the copyright and version messages even in interactive mode.</p><p><code>-R</code>: Turn on hash randomization. This option only has an effect it the <strong>PYTHONHASHSEED</strong> environment variable is set to <em>0</em>, since hash randomization is enabled by default.</p><p><code>-s</code>: Don’t add the <em>user site-packages directory</em> to <em>sys.path</em>.</p><p><code>-S</code>: Disable the import of the module <strong>site</strong> and the site-dependent manipulations of <em>sys.path</em> that it entails. Also disable these manipulations if <strong>site</strong> is explicitly imported later (call site.main() if you want them to be triggered).</p><p><code>-u</code>: Force the stdout and stderr streams to be unbuffered. This option has no effect on the stdin stream.</p><p><code>-v</code>: Print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded. WHen given twice (<code>-vv</code>), print a message for each file that is checked for when searching for a module. Also provides information on module clenup at exit.</p><p><code>-W</code> (<em>arg</em>): Warning control. Details see also: <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-w" target="_blank" rel="noopener">https://docs.python.org/3/using/cmdline.html#cmdoption-w</a></p><p><code>-x</code>: Skip the first line of the source, allowing use of non-Unix forms of <code>#!cmd</code>. This is intended for a DOS specific hack only.</p><p><code>-X</code>: Reserved for various implementation-specific options. See also: <a href="https://docs.python.org/3/using/cmdline.html#id5" target="_blank" rel="noopener">https://docs.python.org/3/using/cmdline.html#id5</a></p><h1 id="Options-you-shouldn’t-use"><a href="#Options-you-shouldn’t-use" class="headerlink" title="Options you shouldn’t use"></a>Options you shouldn’t use</h1><p><code>-J</code>: Reserved for use by Jython.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>官方文档：<a href="https://docs.python.org/3/using/cmdline.html" target="_blank" rel="noopener">https://docs.python.org/3/using/cmdline.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;用着学，学着用&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="python" scheme="http://47.110.235.226/categories/learn/python/"/>
    
    
  </entry>
  
  <entry>
    <title>The add_argument() method@argparse</title>
    <link href="http://47.110.235.226//blog/2019/08/23/learn/python/stdlib/argparse/add_argument/"/>
    <id>http://47.110.235.226//blog/2019/08/23/learn/python/stdlib/argparse/add_argument/</id>
    <published>2019-08-23T01:17:05.000Z</published>
    <updated>2019-08-23T01:23:46.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ArgumentParser, parsing for arguments</p></blockquote><a id="more"></a><p>The <code>add_argument()</code> method defines how a single command-line argument should be parsed. Each parameter has its own more detailed description below, but in short they are:<br><em>name or flags</em> — Either a name or a list of option strings, e.g. <code>foo</code> or <code>-f, —foo</code>.<br><em>action</em> — The basic type of action to be taken when this argument is encountered at the command line.<br><em>nargs</em> — The number of command-line arguments that should be consumed.<br><em>const</em> — A constant value required by some action and nargs selections.<br><em>default</em> — The value produced if the argument is absent from the command line.<br><em>type</em> — The type to which the command-line argument should be converted.<br><em>choices</em> — A container of the allowable values for the arguments.<br><em>required</em> — Whether or not the command-line option may be omitted (optionals only).<br><em>help</em> — A brief description of what the argument does.<br><em>metavar</em> — A name for the argument in usage messages.<br><em>dest</em> — The name of the attribute to be added to the object returned by <code>parse_args()</code>.<br>The following sections describe how each of these are used.</p><h1 id="gt-name-of-flags-lt"><a href="#gt-name-of-flags-lt" class="headerlink" title="-&gt; name of flags &lt;-"></a>-&gt; name of flags &lt;-</h1><p>The <code>add_argument()</code> method must know whether an optional argument, like <code>-f</code> or <code>—foo</code>, or a positional argument, like a list of filenames, is expected. The first arguments passed to <code>add_argument()</code> must therefore be either a series of flags, or a simple argument name.</p><p>When <code>parse_args()</code> is called, optional arguments will be identified by the <code>-</code> prefix, and the remaining arguments will be assumed to be positional.</p><h1 id="gt-action-lt"><a href="#gt-action-lt" class="headerlink" title="-&gt; action &lt;-"></a>-&gt; action &lt;-</h1><p><code>ArgumentParser</code> objects associate command-line arguments with actions. These actions can do just about anything with the command-line arguments associated with them, though most actions simply add an attribute to the object returned by <code>parse_args()</code>. The <code>action</code> keyword argument specifies how the command-line arguments should be handled. The supplied actions are:<br><code>’store’</code> — This just stores the argument’s value. This is the default action.<br><code>’store_const’</code> — This stores the value specified by the <code>const</code> keyword argument. The <code>’store_const’</code> action is most commonly used with optional arguments that specify some sort of flag.<br><code>’store_true’</code> and <code>’store_false’</code> — These are special case of <code>’store_const’</code> used for storing the values <code>True</code> and <code>False</code> respectively. In addition, they create default values of <code>False</code> and <code>True</code> respectively.<br><code>’append’</code> — This stores a list, and appends each argument value to the list. This is useful to allow an option to be specified multiple times.<br><code>’append_const’</code> — This store a list, and appends the value specified by the <code>const</code> keyword argument to the list. (Note that the <code>const</code> keyword argument defaults to <code>None</code>.) The <code>append_const</code> action is typically useful when multiple arguments need to store constants to the same list.<br><code>’count’</code> — This counts the number of times a keyword argument occurs. For example, this is useful for increasing verbosity levels.<br><code>’help’</code> — This prints a complete help message for all the options in the current parser and then exits. By default a help action is automatically added to the parser.<br><code>’version’</code> — This expects a <code>version=</code> keyword argument in the <code>add_argument()</code> call, and prints version information and exits when invoked.<br>You may also specify an arbitrary action by passing an Action subclass or other object that implements the same interface. The recommended way to do this is to extend Action, overriding the <code>__call__</code> method and optionally the <code>__init__</code> method.</p><h1 id="gt-nargs-lt"><a href="#gt-nargs-lt" class="headerlink" title="-&gt; nargs &lt;-"></a>-&gt; nargs &lt;-</h1><p>ArgumentParser objects usually associate a single command-line argument with a single action to be taken. The <code>nargs</code> keyword argument associates a different number of command-line arguments with a single action. The supported values are:<br><code>N</code> (an integer). <code>N</code> arguments from the command line will be gathered together into a list.<br>Note the <code>nargs=1</code> produces a list of one item. This is different from the default, in which the item is produced by itself.<br><code>?</code>. One argument will be consumed from the command line if possible, and produced as a single item. If no command-line argument is present, the value from <code>default</code> will be produced. Note that for optional arguments, there is an additional case - the option string is present but not followed by a command-line argument. In this case the value from <code>const</code> will be produced. One of the more common uses of <code>nargs=‘?’</code> is to allow optional input and output files.<br><code>*</code>. All command-line arguments present are gathered into a list. Note that it generally doesn’t make much sense to have more than one positional argument with <code>nargs=‘*’</code>, but multiple optional arguments with <code>nargs=‘*’</code> is possible.<br><code>+</code>. Just like <code>*</code>, all command-line args present are gathered into a list. Additionally, an error message will be generated if there wasn’t at least on command-line argument present.<br><code>argparse.REMAINDER</code>. All the remaining command-line arguments are gathered into a list. This is commonly useful for command line utilities that dispatch to other command line utilities.<br>If the <code>nargs</code> keyword argument is not provided, the number of arguments consumed is determined by the action. Generally this means a single command-line argument will be consumed and a single item (not a list) will be produced.</p><h1 id="gt-const-lt"><a href="#gt-const-lt" class="headerlink" title="-&gt; const &lt;-"></a>-&gt; const &lt;-</h1><p>The <code>const</code> argument of <code>add_argument()</code> is used to hold constant values that are not read from the command line but are required for the various <strong>ArgumentParser</strong> actions. The two most common uses of it are:<br>When <code>add_argument()</code> is called with <code>action=’store_const’</code> or <code>action=‘append_const’</code>. These actions add the <code>const</code> value to one of the attributes of the object returned by <code>parse_args()</code>.<br>When <code>add_argument()</code> is called with option string (like <code>-f</code> or <code>—foo</code>) and <code>nargs=‘?’</code>. This creates an optional argument that can be followed by zero or one command-line arguments. When parsing the command line, if the option string is encountered with no command-line argument following it, the value of <code>const</code> will be assumed instead.<br>With the <code>’store_const’</code> and <code>’append_const’</code> actions, the <code>const</code> keyword argument must be given. For other actions, it defaults to <code>None</code>.</p><h1 id="gt-default-lt"><a href="#gt-default-lt" class="headerlink" title="-&gt; default &lt;-"></a>-&gt; default &lt;-</h1><p>All optional arguments and some positional arguments may be omitted at the command line. The <code>default</code> keyword argument of <code>add_argument()</code>, whose value defaults to <code>None</code>, specifies what value should be used if the command-line argument is not present. For optional arguments, the <code>default</code> value is used when the option string was not present at the command line.</p><p>If the <code>default</code> value is string, the parser parses the value as if it were a command-line argument. In particular, the parser applies any type conversion argument, if provide, before setting the attribute on the Namespace return value. Otherwise, the parser uses the value as is.</p><p>For positional arguments with <code>nargs</code> equal to <code>?</code> or <code>*</code>, the <code>default</code> value is used when no command-line argument was present.</p><p>Providing <code>default=argparse.SUPPRESS</code> cause no attribute to be added if the command-line argument was not present.</p><h1 id="gt-type-lt"><a href="#gt-type-lt" class="headerlink" title="-&gt; type &lt;-"></a>-&gt; type &lt;-</h1><p>By default, <strong>ArgumentParser</strong> objects read command-line arguments in as simple strings. However, quite often the command-line string should instead be interpreted as another type, like a float or int. The <code>type</code> keyword argument of <code>add_argument()</code> allows any necessary type-checking and type conversions to be performed. Common built-in types and functions can be used directly as the value of the <code>type</code> argument.</p><p>See the section on the <em>default</em> keyword argument for information on when the <code>type</code> argument is applied to default arguments.</p><p>To ease the use of various types of files, the argparse module provides the factory FileType which takes the <code>mode=</code>, <code>bufsize=</code>, <code>encoding=</code> and <code>errors=</code> arguments of the <em>open()</em> function.</p><p><code>type=</code> can take any callable that takes a single string argument and returns the converted value.</p><p>The <em>choices</em> keyword argument may be more convenient for type checkers that simply check against a range of values.</p><h1 id="gt-choice-lt"><a href="#gt-choice-lt" class="headerlink" title="-&gt; choice &lt;-"></a>-&gt; choice &lt;-</h1><p>Some command-line arguments should be selected from a restricted set fo values. These can be handled by passing a container object as the <em>choices</em> keyword argument to <strong>add_argument()</strong>. When the command line is parsed, argument values will be checked, and an error message will be displayed if the argument was not one of the acceptable values.</p><p>Note that inclusion in the <code>choices</code> container is checked after any <em>type</em> conversions have been performed, so the type of the objects in the <em>choices</em> container should match the <em>type</em> specified.</p><p>Any object that supports the <code>in</code> operator can be passed as the <code>choices</code> value, so <code>dict</code> objects, <code>set</code> objects, custom containers, etc. are all supported.</p><h1 id="gt-required-lt"><a href="#gt-required-lt" class="headerlink" title="-&gt; required &lt;-"></a>-&gt; required &lt;-</h1><p>In general, the argparse module assume that flags like <code>-f</code> and <code>—bar</code> indicate optional arguments, which can always be omitted at the command line. To make an option required, <code>True</code> can be specified for the <code>required=</code> keyword argument to <code>add_argument()</code>.</p><blockquote><p>Note: Required options are generally considered bad form because users expect options to be optional, and thus they should be avoided when possible.</p></blockquote><h1 id="gt-help-lt"><a href="#gt-help-lt" class="headerlink" title="-&gt; help &lt;-"></a>-&gt; help &lt;-</h1><p>The <code>help</code> value is a string containing a brief description of the argument. When a user requests help (usually by using <code>-h</code> or <code>—help</code> at the command line), these <code>help</code> descriptions will be displayed with each argument.</p><p>The <code>help</code> strings can include various format specifiers to avoid repetition of things like the program name or the argument default. The available specifiers include the program name, <code>%(prog)s</code> and most keyword arguments to <code>add_argument()</code>, e.g. <code>%(default)s</code>, <code>%(type)s</code>, etc.</p><p>As the help string supports %-formatting, if you want a literal <code>%</code> to appear in the help string, you must escape it as <code>%%</code>.</p><p>argparse supports silencing the help entry for certain options, by setting the <code>help</code> value to <code>argparse.SUPPRESS</code>.</p><h1 id="gt-metavar-lt"><a href="#gt-metavar-lt" class="headerlink" title="-&gt; metavar &lt;-"></a>-&gt; metavar &lt;-</h1><p>When <em>ArgumentParser</em> generates help message, it needs some way to refer to each expected argument. By default, ArgumentParser objects use the <code>dest</code> value as the “name” of each object. By default, for positional argument actions, the dest value is used directly, and for optional argument actions, the dest value is uppercased. So, a single positional argument with <code>dest=‘bar’</code> will be referred to as <code>bar</code>. A single optional argument <code>—foo</code> that should be followed by a single command-line argument will be referred to as <code>FOO</code>.</p><p>An alternative name can be specified with <code>metavar</code>.</p><p>Note that <code>metavar</code> only changes the <em>displayed</em> name - the name of the attribute on the parse_args() object is still determined by the dest value.</p><p>Different values of <code>nargs</code> may cause the metavar to be used multiple times, Providing a tuple to <code>metavar</code> specifies a different display for each of the arguments.</p><h1 id="gt-dest-lt"><a href="#gt-dest-lt" class="headerlink" title="-&gt; dest &lt;-"></a>-&gt; dest &lt;-</h1><p>Most <strong>ArgumentParser</strong> actions add some value as an attribute of the object returned by parse_args(). The name of this attribute is determined by the <code>dest</code> keyword argument of add_argument(). For positional argument actions, <code>dest</code> is normally supplied as the first argument to <em>add_argument()</em>.</p><p>For optional argument actions, the value of <code>dest</code> is normally inferred from the option strings. ArgumentParser generates the value of <code>dest</code> by taking the first long option string and stripping away the initial <code>—</code> string. If not long option strings were supplied, <code>dest</code> will be derived from the first short option string by stripping the initial <code>-</code> character. Any internal <code>-</code> characters will be converted to <code>_</code> characters to make sure the string is a valid attribute name.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#the-add-argument-method" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#the-add-argument-method</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;ArgumentParser, parsing for arguments&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="python" scheme="http://47.110.235.226/categories/learn/python/"/>
    
      <category term="stdlib" scheme="http://47.110.235.226/categories/learn/python/stdlib/"/>
    
      <category term="argparse" scheme="http://47.110.235.226/categories/learn/python/stdlib/argparse/"/>
    
    
      <category term="ArgumentParser" scheme="http://47.110.235.226/tags/ArgumentParser/"/>
    
  </entry>
  
  <entry>
    <title>ArgumentParser@argparse</title>
    <link href="http://47.110.235.226//blog/2019/08/22/learn/python/stdlib/argparse/argument_parser/"/>
    <id>http://47.110.235.226//blog/2019/08/22/learn/python/stdlib/argparse/argument_parser/</id>
    <published>2019-08-22T03:22:16.000Z</published>
    <updated>2019-08-22T03:25:32.007Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ArgumentParser, parsing for arguments</p></blockquote><a id="more"></a><p>The argparse module makes it easy to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments.</p><h1 id="ArgumentParser-objects"><a href="#ArgumentParser-objects" class="headerlink" title="ArgumentParser objects"></a>ArgumentParser objects</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#argumentparser-objects" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#argumentparser-objects</a></p><p>Create a new <strong>ArgumentParser</strong> object. All parameters should be passed as keyword arguments. Each parameter has its own more detailed description below, but in short they are:</p><ul><li>prog — The name of the program (default: sys.argv[0])</li><li>usage — the string describing the program usage (default: generated from arguments added to parser)</li><li>description — Text to display before the argument help (default: none)</li><li>epilog — Text to display after the argument help (default: none)</li><li>parents — A list of ArgumentParser objects whose arguments should also be included</li><li>formatter_class — A class for customizing the help output</li><li>prefix_chars — The set of characters the prefix optional arguments (default: ‘-‘)</li><li>fromfile_prefix_chars — The set of characters that prefix files from which additional arguments should be read (default: None)</li><li>argument_default — The global default value for arguments (default: None)</li><li>conflict_handler — The strategy for resolving conflicting options (usually unnecessary)</li><li>add_help — Add a -h/—help option to the parser (default: True)</li><li>allow_abbrev — Allow long options to be abbreviated if the abbreviation is unambiguous. (default: True)</li></ul><p>The following sections describe how each of these are used.</p><h1 id="gt-prog-lt"><a href="#gt-prog-lt" class="headerlink" title="-&gt; prog &lt;-"></a>-&gt; prog &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#prog" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#prog</a></p><p>By default, <strong>ArgumentParser</strong> objects use <code>sys.argv[0]</code> to determine how to display the name of the program in help messages. This default is almost always desirable because it will make the help messages match how the program was invoked on the command line.</p><p>Note that the program name, whether determined from <code>sys.argv[0]</code> or from the <code>prog=</code> argument, is available to help messages using the <code>%(prog)s</code> format specifier.</p><h1 id="gt-usage-lt"><a href="#gt-usage-lt" class="headerlink" title="-&gt; usage &lt;-"></a>-&gt; usage &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#usage" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#usage</a></p><p>By default, <strong>ArgumentParser</strong> calculates the usage message from the arguments it contains.</p><p>The default message can be overridden with the <code>usage=</code> keyword argument.<br>The <code>%(prog)s</code> format specifier is available to fill in the program name in your usage messages.</p><h1 id="gt-description-lt"><a href="#gt-description-lt" class="headerlink" title="-&gt; description &lt;-"></a>-&gt; description &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#description" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#description</a></p><p>Most calls to the <strong>ArgumentParser</strong> constructor will use the <code>description=</code> keyword argument. This argument give a brief description of what the program does and how it works. In help messages, the description is display between the command-line usage string and the help messages for the various arguments.</p><p>By default, the description will be line-wrapped so that it fits within the given space. To change this behavior, see the <code>formatter_class</code> argument.</p><h1 id="gt-epilog-lt"><a href="#gt-epilog-lt" class="headerlink" title="-&gt; epilog &lt;-"></a>-&gt; epilog &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#epilog" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#epilog</a></p><p>Some programs like to display additional description of the program after the description of the arguments. Such text can be specified using the <code>epilog=</code> argument to <strong>ArgumentParser</strong>.</p><p>As with the <code>description</code> argument, the <code>epilog=</code> text is by default line-wrapped, but this behavior can be adjusted with the <code>formatter_class</code> argument to <strong>ArgumentParser</strong>.</p><h1 id="gt-parents-lt"><a href="#gt-parents-lt" class="headerlink" title="-&gt; parents &lt;-"></a>-&gt; parents &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#parents" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#parents</a></p><p>Sometimes, several parsers share a common set of arguments. Rather than repeating the definitions of these arguments, a single parser with all the shared arguments and passed to <code>parents=</code> argument to <strong>ArgumentParser</strong> can be used. The <code>parents=</code> argument takes a list of <strong>ArgumentParser</strong> objects, collects all the positional and optional actions from them, and adds these actions to <strong>ArgumentParser</strong> object being constructed.</p><p>Note that most parent parsers will specify <code>add_help=False</code>. Otherwise, the ArgumentParser will see two <code>-h/—help</code> options (one in the parent and one in the child) and raise an error.</p><blockquote><p>NOTE: You must fully initialize the parsers before passing them via parents=. If you change the parents after the child parser, those changes will not reflected in the child.</p></blockquote><h1 id="gt-formatter-class-lt"><a href="#gt-formatter-class-lt" class="headerlink" title="-&gt; formatter_class &lt;-"></a>-&gt; formatter_class &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#formatter-class" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#formatter-class</a></p><p><strong>ArgumentParser</strong> objects allow the help formatting to be customized by specifying an alternate formatting class. Currently, there are four such classes:<br>class argparse.<strong>RawDescriptionHelpFormatter</strong><br>class argparse.<strong>RawTextHelpFormatter</strong><br>class argparse.<strong>ArgumentDefaultsHelpFormatter</strong><br>class argparse.<strong>MetavarTypeHelpFormatter</strong></p><p><strong>RawDescriptionHelpFormatter</strong> and <strong>RawTextHelpFormatter</strong> give more control over how textual descriptions are displayed. By default, <strong>ArgumentParser</strong> objects line-wrap the <code>description</code> and <code>epilog</code> texts in command-line help messages.</p><p>Passing <strong>RawDescriptionHelpFormatter</strong> as <code>formatter_class=</code> indicates that <strong>description</strong> and <strong>epilog</strong> are already correctly formatted and should not line-wrapped.</p><p><strong>RawTextHelpFormatter</strong> maintains whitespace for all sorts of help text, including argument descriptions. However, multiple new lines are replaced with one. If you wish to preserve multiple blank lines, add spaces between the newlines.</p><p><strong>ArgumentDefaultsHelpFormatter</strong> automatically adds information about default values to each of the argument help messages.</p><p><strong>MetavarTypeHelpFormatter</strong> uses the name of the type argument for each arguments as the replay name for its values (rather than using the dest as the regular formatter does).</p><h1 id="gt-prefix-chars-lt"><a href="#gt-prefix-chars-lt" class="headerlink" title="-&gt; prefix_chars &lt;-"></a>-&gt; prefix_chars &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#prefix-chars" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#prefix-chars</a></p><p>Most command-line options will use <code>-</code> as the prefix, e.g. <code>-f/—foo</code>. Parsers that need to support different or additional prefix characters, e.g. for options like <code>+f</code> or <code>/foo</code>, may specify them using the <code>prefix_chars=</code> argument to the ArgumentParser constructor.</p><p>The <code>prefix_chars=</code> argument defaults to <code>-</code>. Supplying a set of characters that does not include <code>-</code> will cause <code>-f/—foo</code> options to be disallowed.</p><h1 id="gt-from-file-prefix-char-lt"><a href="#gt-from-file-prefix-char-lt" class="headerlink" title="-&gt; from file_prefix_char &lt;-"></a>-&gt; from file_prefix_char &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#fromfile-prefix-chars" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#fromfile-prefix-chars</a></p><p>Sometimes, for example when dealing with a particularly long argument lists, it may make sense to keep the list of arguments in a file rather than typing it out at the command line. If the <code>fromfile_prefix_chars=</code> argument is given to the <code>ArgumentParser</code> constructor, then arguments that start with any of the specified characters will be treated as files, and will be replaced by the arguments they contain.</p><p>Arguments read from a file must by default be one per line (but see also <code>convert_arg_line_to_args()</code>) and are treated as if they were in the same place as the original file referencing argument on the command line. So in the example above, the expression <code>[‘-f’, ‘foo’, ‘@args.txt’]</code> is considered equivalent to the expression <code>[‘-f’, ‘foo’, ‘-f’, ’bar’]</code>.</p><p>The <code>from file_prefix_chars=</code> argument defaults to <code>None</code>, meaning that arguments will never be treated as file references.</p><h1 id="gt-argument-default-lt"><a href="#gt-argument-default-lt" class="headerlink" title="-&gt; argument_default &lt;-"></a>-&gt; argument_default &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#argument-default" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#argument-default</a></p><p>Generally, argument defaults are specified either by passing a default to <code>add_argument()</code> or by calling the <code>set_defaults()</code> methods with a specific set of name-values pairs. Sometimes however, it may be useful to specify a single parser-wide default for arguments. This can be accomplished by passing the <code>argument_default=</code> keyword argument to <code>ArgumentParser</code>. For example, to globally suppress attribute create on <code>parse_args()</code> calls, we supply <code>argument_default=SUPPRESS</code>.</p><h1 id="gt-allow-abbrev-lt"><a href="#gt-allow-abbrev-lt" class="headerlink" title="-&gt; allow_abbrev &lt;-"></a>-&gt; allow_abbrev &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#allow-abbrev" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#allow-abbrev</a></p><p>Normally, when you pass an argument list to the <code>parse_args()</code> method of an <code>ArgumentParser</code>, it <strong>recognizes abbreviations</strong> of long options.</p><p>This feature can be disabled by setting <code>allow_abbrev</code> to <code>False</code>.</p><h1 id="gt-conflict-handler-lt"><a href="#gt-conflict-handler-lt" class="headerlink" title="-&gt; conflict_handler &lt;-"></a>-&gt; conflict_handler &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#conflict-handler" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#conflict-handler</a></p><p><code>ArgumentParser</code> objects do not allow two actions with the same option string. By default, <code>ArgumentParser</code> objects raise an exception if an attempt is made to create an argument with an option string that is already in use.</p><p>Sometimes (e.g. when using <code>parents</code>) it may be useful to simply override any older arguments with the same option string. To get this behavior, the value <code>&#39;resolve’</code> can be supplied to the <code>conflict_handler=</code> argument of <code>ArgumentParser</code>.</p><p>Note that <code>ArgumentParser</code> objects only remove an action if all of its option strings are override. So, in the example above, the old <code>-f/—foo</code> action is retained as the <code>-f</code> action, because only the <code>—foo</code> option string was overridden.</p><h1 id="gt-add-help-lt"><a href="#gt-add-help-lt" class="headerlink" title="-&gt; add_help &lt;-"></a>-&gt; add_help &lt;-</h1><p><a href="https://docs.python.org/3.7/library/argparse.html#add-help" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html#add-help</a></p><p>By default, ArgumentParser objects add an option which simple displays the parser’s help message. If <code>-h</code> or <code>—help</code> is supplied at the command line, the ArgumentParser help will be printed.<br>Occasionally, it may be useful to disable the addition of this help option. This can be achieved by passing <code>False</code> as the <code>add_help=</code> argument to <code>ArgumentParser</code>.<br>The help option is typically <code>-h/—help</code>. The exception to this is if the <code>prefix_chars=</code> is specified and does not include <code>-</code>, in which case <code>-h</code> and <code>—help</code> are not valid options. In this case, the first character in <code>prefix_chars</code> is used to prefix the help options.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.python.org/3.7/library/argparse.html" target="_blank" rel="noopener">https://docs.python.org/3.7/library/argparse.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;ArgumentParser, parsing for arguments&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="python" scheme="http://47.110.235.226/categories/learn/python/"/>
    
      <category term="stdlib" scheme="http://47.110.235.226/categories/learn/python/stdlib/"/>
    
      <category term="argparse" scheme="http://47.110.235.226/categories/learn/python/stdlib/argparse/"/>
    
    
      <category term="ArgumentParser" scheme="http://47.110.235.226/tags/ArgumentParser/"/>
    
  </entry>
  
  <entry>
    <title>if语句@bash</title>
    <link href="http://47.110.235.226//blog/2019/08/19/learn/bash/statement-if/"/>
    <id>http://47.110.235.226//blog/2019/08/19/learn/bash/statement-if/</id>
    <published>2019-08-19T00:34:44.000Z</published>
    <updated>2019-08-19T01:32:57.008Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>if you jump, i push you :)</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>if语句让我们可以测试某种条件，然后根据测试结果改变程序执行流程。<br>其一般格式为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>其中，<code>command_test</code>是要要执行的命令，该命令的退出状态会被测试；如果退出状态为0，执行<code>then</code>和<code>fi</code>之间的命令；否则，跳过这些命令。</p><p>注意：命令正常执行会返回状态码<code>0</code>；管道的状态码是最后一个命令的状态码。</p><p>if语句也可以加入else，形如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>if语句也可以加入elif，形如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">elif</span> command_test2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p>变量<code>$?</code>被shell自动设置为最后一条命令的退出状态。</p><p>使用示例如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat on</span><br><span class="line">user=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> who | grep <span class="string">"^<span class="variable">$user</span> "</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$user</span> is logged on"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><h1 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h1><p><code>test</code>命令是shell环境中测试条件表达式的实用工具。其形如：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> expression</span><br></pre></td></tr></table></figure><p></p><p><code>test</code>会对<code>expression</code>求值，如果结果为真，则返回为0的退出状态码；如果结果为假，则返回非0的退出状态码。</p><p><code>test</code>字符操作符小抄如下：</p><table><thead><tr><th style="text-align:center">EXPRESSION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">str1 = str2</td><td style="text-align:left">str1等于str2</td></tr><tr><td style="text-align:center">str1 != str2</td><td style="text-align:left">str1不等于str2</td></tr><tr><td style="text-align:center">str</td><td style="text-align:left">str不为空</td></tr><tr><td style="text-align:center">-n str</td><td style="text-align:left">str不为空</td></tr><tr><td style="text-align:center">-z str</td><td style="text-align:left">str为空</td></tr></tbody></table><p>注意后两种情况即<code>-n str</code>及<code>-z str</code>，见下例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ blank=<span class="string">"    "</span></span><br><span class="line">$ <span class="built_in">test</span> <span class="variable">$blanks</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">test</span> <span class="string">"<span class="variable">$blanks</span>"</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p></p><p><code>test</code>整数操作符小抄如下：</p><table><thead><tr><th style="text-align:center">EXPRESSION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">int1 -eq int2</td><td style="text-align:left">int1等于int2</td></tr><tr><td style="text-align:center">int1 -ge int2</td><td style="text-align:left">int1大于或等于int2</td></tr><tr><td style="text-align:center">int1 -gt int2</td><td style="text-align:left">int1大于int2</td></tr><tr><td style="text-align:center">int1 -le int2</td><td style="text-align:left">int1小于或等于int2</td></tr><tr><td style="text-align:center">int1 -lt int2</td><td style="text-align:left">int1小于int2</td></tr><tr><td style="text-align:center">int1 -ne int2</td><td style="text-align:left">int1不等于int2</td></tr></tbody></table><p><code>test</code>文件操作符小抄如下：</p><table><thead><tr><th style="text-align:center">OPTION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">-e file</td><td style="text-align:left">存在</td></tr><tr><td style="text-align:center">-d file</td><td style="text-align:left">目录</td></tr><tr><td style="text-align:center">-s file</td><td style="text-align:left">非空文件</td></tr><tr><td style="text-align:center">-f file</td><td style="text-align:left">普通文件</td></tr><tr><td style="text-align:center">-L file</td><td style="text-align:left">符号链接</td></tr><tr><td style="text-align:center">-r file</td><td style="text-align:left">可读取</td></tr><tr><td style="text-align:center">-w file</td><td style="text-align:left">可写入</td></tr><tr><td style="text-align:center">-x file</td><td style="text-align:left">可执行</td></tr></tbody></table><p><strong>test</strong>的另外一种格式：<code>test</code>还有一个别名<code>[</code>，因此可以用另外一种格式来表示：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ expression ]</span><br></pre></td></tr></table></figure><p></p><p>其中<code>[</code>是命令名，但如果写成这种格式表达式结尾处<strong>必须</strong>有对应的<code>]</code>，并且<code>[</code>之后与<code>]</code>之前必须有空格。</p><p><strong>逻辑操作符</strong><br>一元逻辑否定操作符<code>!</code>可以放置在任意的<code>test</code>之前，否定该表达式的求值结果；<br>操作符<code>-a</code>在两个表达式之间执行逻辑与运算，求值满足短路规则；<br>操作符<code>-o</code>在两个表达式之间执行逻辑或运算，求值满足短路规则。</p><p>之外，<code>-o</code>优先级低于<code>-a</code>；也可以使用括号来改变求值顺序，但括号本身要被引用起来，因为它们对于shell有特殊的含义。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;if you jump, i push you :)&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="bash" scheme="http://47.110.235.226/categories/learn/bash/"/>
    
    
  </entry>
  
  <entry>
    <title>传参@bash</title>
    <link href="http://47.110.235.226//blog/2019/08/19/learn/bash/pass-arguments/"/>
    <id>http://47.110.235.226//blog/2019/08/19/learn/bash/pass-arguments/</id>
    <published>2019-08-19T00:05:53.000Z</published>
    <updated>2019-08-19T00:29:18.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>众志成城</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>流动的数据是程序的肉体。</p><h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><p>执行shell程序时，shell会自动将第一个参数保存在特殊的shell变量1中，并依次将后面参数保存到后面的变量上。这些特殊变量由于基于命令行所在的位置而命名为“位置参数”。</p><p><strong>位置参数</strong>是在shell完成正常的命令行处理之后（I/O重定向，变量替换，文件名替换）被赋值的。<br>注意：当提供给程序的参数多于9个时，没法直接访问到第10个及以后的参数的，必须使用格式<code>${n}</code>；否则如<code>$10</code>会被解析为第一个变量后加上字符<code>0</code>。</p><p>之外，命令<code>shift</code>可以左移位置参数。</p><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p>除了位置参数为，特殊shell变量<code>$#</code>包含了命令行中输入的参数个数；变量<code>$*</code>引用的是传给程序的所有参数。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat tshift</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"></span><br><span class="line">$ chmod +x ./tshift</span><br><span class="line">$ ./tshift a b c d e</span><br><span class="line">5 a b c d e</span><br><span class="line">4 b c d e</span><br><span class="line">3 c d e</span><br><span class="line">2 d e</span><br><span class="line">1 e</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;众志成城&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="bash" scheme="http://47.110.235.226/categories/learn/bash/"/>
    
    
      <category term="passing-arguments" scheme="http://47.110.235.226/tags/passing-arguments/"/>
    
  </entry>
  
  <entry>
    <title>Commonly Commands @ bash</title>
    <link href="http://47.110.235.226//blog/2019/08/19/cheatsheet/reference/bash-cmds/"/>
    <id>http://47.110.235.226//blog/2019/08/19/cheatsheet/reference/bash-cmds/</id>
    <published>2019-08-18T23:43:18.000Z</published>
    <updated>2019-08-19T04:31:34.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>他说风雨中这点痛算什么<br>@ 水手</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">EXAMPLE</th></tr></thead><tbody><tr><td style="text-align:center"><code>date</code></td><td style="text-align:left">显示日期和时间</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>who</code></td><td style="text-align:left">找出已登录的人员</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>echo</code></td><td style="text-align:left">回显字符</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ls</code></td><td style="text-align:left">列举文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cat</code></td><td style="text-align:left">显示文件内容</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>wc</code></td><td style="text-align:left">统计文件中单词数量</td></tr><tr><td style="text-align:center"><code>cp</code></td><td style="text-align:left">复制文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>mv</code></td><td style="text-align:left">文件重命名</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>rm</code></td><td style="text-align:left">删除文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>pwd</code></td><td style="text-align:left">显示工作目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cd</code></td><td style="text-align:left">更改目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>mkdir</code></td><td style="text-align:left">创建目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ln</code></td><td style="text-align:left">文件链接</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>rmdir</code></td><td style="text-align:left">删除目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ps</code></td><td style="text-align:left">显示系统中所运行的进程的信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cut</code></td><td style="text-align:left">从数据文件中提取出字段</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>paste</code></td><td style="text-align:left">合并多个字段</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>sed</code></td><td style="text-align:left">在管道或命令序列中编辑数据</td><td style="text-align:left"><strong>s</strong>tream <strong>ed</strong>itor</td></tr><tr><td style="text-align:center"><code>tr</code></td><td style="text-align:left">转换标准输入中的字符</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>grep</code></td><td style="text-align:left">在一个或多个文件中搜索指定模式</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>sort</code></td><td style="text-align:left">按照字母顺序排序并输出结果</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>uniq</code></td><td style="text-align:left">查找或删除文件中的重复行</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>shift</code></td><td style="text-align:left">左移位置参数</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>test</code></td><td style="text-align:left">测试条件表达式的实用工具</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exit</code></td><td style="text-align:left">终止shell程序的执行并返回退出状态码</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ssh-keygen</code></td><td style="text-align:left">ssh密钥生成</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ssh-copy-id</code></td><td style="text-align:left">ssh免密登录</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;他说风雨中这点痛算什么&lt;br&gt;@ 水手&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="bash" scheme="http://47.110.235.226/categories/learn/bash/"/>
    
    
      <category term="bash-cmds" scheme="http://47.110.235.226/tags/bash-cmds/"/>
    
  </entry>
  
  <entry>
    <title>Commonly Variables @ bash</title>
    <link href="http://47.110.235.226//blog/2019/08/19/cheatsheet/reference/bash-vars/"/>
    <id>http://47.110.235.226//blog/2019/08/19/cheatsheet/reference/bash-vars/</id>
    <published>2019-08-18T23:42:45.000Z</published>
    <updated>2019-08-19T01:56:21.338Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>bash虐我千百遍，我待其如初恋</p></blockquote><a id="more"></a><p><strong>传参的特殊变量</strong></p><table><thead><tr><th style="text-align:center">VARIABLE</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>${n}</code></td><td style="text-align:left">位置变量</td></tr><tr><td style="text-align:center"><code>$#</code></td><td style="text-align:left">参数个数</td></tr><tr><td style="text-align:center"><code>$*</code></td><td style="text-align:left">所有参数</td></tr></tbody></table><p>更多详情：<a href="http://wrran.com/blog/2019/08/19/learn/bash/pass-arguments/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/19/learn/bash/pass-arguments/</a></p><p><strong>其他</strong></p><table><thead><tr><th style="text-align:center">VARIABLE</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>#?</code></td><td style="text-align:left">上一次命令的退出码</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;bash虐我千百遍，我待其如初恋&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="bash" scheme="http://47.110.235.226/categories/learn/bash/"/>
    
    
  </entry>
  
  <entry>
    <title>函数@bash</title>
    <link href="http://47.110.235.226//blog/2019/08/18/learn/bash/function/"/>
    <id>http://47.110.235.226//blog/2019/08/18/learn/bash/function/</id>
    <published>2019-08-18T04:42:23.000Z</published>
    <updated>2019-08-18T23:43:29.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>复用，复用，复用：经济又安全</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>shell中的函数（function）是指命令序列（定义），可引用或重用（语用）。</p><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>一般格式如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">name</span></span>() &#123; <span class="built_in">command</span>; ... <span class="built_in">command</span>; &#125;</span><br></pre></td></tr></table></figure><p></p><p>调用函数就像执行普通命令一样，输入<strong>函数名称</strong>即可执行。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>函数的重要特性是：</p><blockquote><p>命令行上出现在函数后的参数会依次分配给位置参数<code>$1</code>,<code>p2</code>，<code>$3</code>…。</p></blockquote><p>之外，还有一些特性值得注意：</p><ol><li>「子shell」：函数仅存在于它所定义的shell中，无法传给子shell；</li><li>「变量&amp;目录」：函数对于当前目录或变量作出的修改在函数执行完毕之后依然会保留。</li></ol><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><p>函数的优势有：</p><ul><li>「速度更快」：是因为shell不需要搜索磁盘来查找程序、打开文件并将文件内容读入内存，只需要跳转到相应的位置；</li><li>「管理模块化」@&gt; 可以将相关的shell程序全都放进单个文件中。</li></ul><h1 id="函数的之外"><a href="#函数的之外" class="headerlink" title="函数的之外"></a>函数的之外</h1><p><strong>删除自定义的函数</strong>：使用带有<code>-f</code>选项的<code>unset</code>命令可以从shell中删除函数。</p><p><strong>从函数内部退出</strong>：</p><ul><li>命令<code>exit</code>：如果在函数内部使用<code>exit</code>，不仅会终止函数的执行，而且还会使得调用该函数的shell程序退出，返回到命令行。</li><li>命令<code>return</code>：如果您只是想退出函数，可以使用命令<code>return</code>，形如：<code>return n</code>，<code>n</code>作为该函数的「返回状态」。</li><li>缺省情况：如果忽略的话，则使用函数中最后执行的那条命令的「退出状态」，这种情况也适用于函数中没有包含<code>return</code>命令的时候。</li></ul><p>注意：返回状态在其他方面和退出状态一样：可以使用shell变量<code>$?</code>来访问它，也可以在<code>if</code>/<code>while</code>和<code>until</code>命令中对其进行测试。</p><p><strong>实践建议</strong>：可以将常用函数定义放入<code>.profile</code>中，或单独某文件如<code>myfuncs</code>，后在当前shell中执行该文件：<code>. myfuncs</code>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;复用，复用，复用：经济又安全&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="bash" scheme="http://47.110.235.226/categories/learn/bash/"/>
    
    
      <category term="function@bash" scheme="http://47.110.235.226/tags/function-bash/"/>
    
  </entry>
  
  <entry>
    <title>重定向@bash</title>
    <link href="http://47.110.235.226//blog/2019/08/18/learn/bash/redirect/"/>
    <id>http://47.110.235.226//blog/2019/08/18/learn/bash/redirect/</id>
    <published>2019-08-18T00:43:24.000Z</published>
    <updated>2019-08-18T04:31:19.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>暂且离开自己又返回自己，只是返回的位置略有不同。<br>@ 村上春树</p></blockquote><a id="more"></a><h1 id="数据重定向"><a href="#数据重定向" class="headerlink" title="数据重定向"></a>数据重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt; stdout</code></td><td style="text-align:left">标准输出重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt; stdin</code></td><td style="text-align:left">标准输入重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command 2&gt; stderr</code></td><td style="text-align:left">标准错误重定向</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="流重定向"><a href="#流重定向" class="headerlink" title="流重定向"></a>流重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&amp;2</code></td><td style="text-align:left">将标准输出重定向到标准错误</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command 2&gt;&amp;1</code></td><td style="text-align:left">将标准错误重定向到标准输出</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="动态重定向"><a href="#动态重定向" class="headerlink" title="动态重定向"></a>动态重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>exec &lt; datafile</code></td><td style="text-align:left">标准输入动态重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exec &gt; datafile</code></td><td style="text-align:left">标准输出动态重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exec 2&gt; datafile</code></td><td style="text-align:left">标准错误动态重定向</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="流行为重定向"><a href="#流行为重定向" class="headerlink" title="流行为重定向"></a>流行为重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&gt; stdout</code></td><td style="text-align:left">标准输出由默认覆写模式重定向为追加模式</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;word lines</code></td><td style="text-align:left">标准输入重定向为行内输入模式</td><td style="text-align:left">使用<code>lines</code>作为命令标准输入，直到碰到只含有<code>word</code>的行；并“附加操作”：进行参数替换、反引号命令执行，同时解析反斜杠的语义</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;\word lines</code></td><td style="text-align:left">标准输入重定向为原封行内输入模式</td><td style="text-align:left">类似“行内输入模式”，不同在于不进行“附加操作”</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;-word lines</code></td><td style="text-align:left">标准输入重定向为缩进行内输入模式</td><td style="text-align:left">类似“行内输出模式”，不同在于又“附加操作”：删除前导制表符</td></tr></tbody></table><h2 id="关闭流"><a href="#关闭流" class="headerlink" title="关闭流"></a>关闭流</h2><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&amp;-</code></td><td style="text-align:left">关闭标准输出</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt;&amp;-</code></td><td style="text-align:left">关闭标准输入(？)</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589。" target="_blank" rel="noopener">https://book.douban.com/subject/30410589。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;暂且离开自己又返回自己，只是返回的位置略有不同。&lt;br&gt;@ 村上春树&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="bash" scheme="http://47.110.235.226/categories/learn/bash/"/>
    
    
      <category term="redirect@bash" scheme="http://47.110.235.226/tags/redirect-bash/"/>
    
  </entry>
  
  <entry>
    <title>CS常用术语</title>
    <link href="http://47.110.235.226//blog/2019/08/18/cheatsheet/cs-terms/"/>
    <id>http://47.110.235.226//blog/2019/08/18/cheatsheet/cs-terms/</id>
    <published>2019-08-17T22:12:37.000Z</published>
    <updated>2019-08-19T03:26:49.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记住，是不可能记住的。</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">TERM</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center">avatar</td><td style="text-align:left">可移动图标</td><td style="text-align:left">如头像</td></tr><tr><td style="text-align:center">interoperability</td><td style="text-align:left">互操作性</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">fixture</td><td style="text-align:left">固定设施</td><td style="text-align:left">如测试套具（fixture）</td></tr><tr><td style="text-align:center">register</td><td style="text-align:left">注册表</td><td style="text-align:left">—</td></tr><tr><td style="text-align:center">archive</td><td style="text-align:left">归档</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">parameter</td><td style="text-align:left">形参</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">argument</td><td style="text-align:left">实参</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">redirect</td><td style="text-align:left">重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">cheatsheet</td><td style="text-align:left">小抄</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">dump</td><td style="text-align:left">转存</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">trackback</td><td style="text-align:left">回溯</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;记住，是不可能记住的。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="cheatsheet" scheme="http://47.110.235.226/categories/cheatsheet/"/>
    
    
      <category term="cs-terms" scheme="http://47.110.235.226/tags/cs-terms/"/>
    
  </entry>
  
  <entry>
    <title>The Python Standard Library</title>
    <link href="http://47.110.235.226//blog/2019/08/18/learn/python/stdlib/index/"/>
    <id>http://47.110.235.226//blog/2019/08/18/learn/python/stdlib/index/</id>
    <published>2019-08-17T19:35:46.000Z</published>
    <updated>2019-08-21T00:29:46.438Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>善工必先利其器</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>标准库意味着由官方维护，会随着语言的演变而演变；因而值得大下功夫，好好琢磨。</p><p>标准库非常庞大，所提供的组件涉及范围十分广泛。该库包含了多个内置模块 (以C编写)，Python 程序员必须依靠它们来实现<strong>系统级功能</strong>，例如文件 I/O；此外还有大量以Python编写的模块，提供了日常编程中许多问题的<strong>标准解决方案</strong>。<br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文将罗列出这些标准库，但鉴于数量众多、功能复杂。<br>因此，先根据模块所针对的目标人群进行分类：入门级、高手级、骨灰级；之后根据其处理的问题进行大致分类（部分重叠）。</p><p>但出于方便，单独列出一节简述常用标准库的功能。</p><h1 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h1><h1 id="完整目录"><a href="#完整目录" class="headerlink" title="完整目录"></a>完整目录</h1><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>这部分单独列出各个阶段玩家都会使用到的一些工具。</p><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><p>该部分主要用来支持调用操作系统的一些标准库。</p><h4 id="系统平台无关（通用操作系统服务）"><a href="#系统平台无关（通用操作系统服务）" class="headerlink" title="系统平台无关（通用操作系统服务）"></a>系统平台无关（通用操作系统服务）</h4><p>本章中描述的各模块提供了在（几乎）所有的操作系统上可用的操作系统特性的接口，例如文件和时钟。这些接口通常以 Unix 或 C 接口为参照对象设计，不过在大多数其他系统上也可用。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>os</code></td><td style="text-align:left">操作系统接口模块</td></tr><tr><td style="text-align:center"><code>io</code></td><td style="text-align:left">处理流的核心工具</td></tr><tr><td style="text-align:center"><code>time</code></td><td style="text-align:left">时间的访问和转换</td></tr><tr><td style="text-align:center"><code>argparse</code></td><td style="text-align:left">命令行选项、参数和子命令解析器</td></tr><tr><td style="text-align:center"><code>getopt</code></td><td style="text-align:left">C风格的命令行解析器</td></tr><tr><td style="text-align:center"><code>logging</code></td><td style="text-align:left">Python 的日志记录工具</td></tr><tr><td style="text-align:center"><code>logging.config</code></td><td style="text-align:left">日志记录配置</td></tr><tr><td style="text-align:center"><code>logging.handlers</code></td><td style="text-align:left">日志处理器</td></tr><tr><td style="text-align:center"><code>getpass</code></td><td style="text-align:left">便携式密码输入工具</td></tr><tr><td style="text-align:center"><code>curses</code></td><td style="text-align:left">终端字符单元显示的处理</td></tr><tr><td style="text-align:center"><code>platform</code></td><td style="text-align:left">获取底层平台的标识数据</td></tr><tr><td style="text-align:center"><code>errno</code></td><td style="text-align:left">标准errno系统符号</td></tr><tr><td style="text-align:center"><code>ctypes</code></td><td style="text-align:left">Python 的外部函数库</td></tr></tbody></table><h4 id="系统平台相关"><a href="#系统平台相关" class="headerlink" title="系统平台相关"></a>系统平台相关</h4><h5 id="Windows系统相关模块"><a href="#Windows系统相关模块" class="headerlink" title="Windows系统相关模块"></a>Windows系统相关模块</h5><h5 id="Unix专有模块"><a href="#Unix专有模块" class="headerlink" title="Unix专有模块"></a>Unix专有模块</h5><h2 id="入门级"><a href="#入门级" class="headerlink" title="入门级"></a>入门级</h2><h3 id="解释器相关"><a href="#解释器相关" class="headerlink" title="解释器相关"></a>解释器相关</h3><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p>Python 解释器内置了很多函数和类型，您可以在任何时候使用它们；具体目录参见<a href="https://docs.python.org/zh-cn/3/library/functions.html。" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/functions.html。</a></p><h4 id="内置常量"><a href="#内置常量" class="headerlink" title="内置常量"></a>内置常量</h4><p>有少数的常量存在于内置命名空间中。它们是：</p><ul><li><code>False</code></li><li><code>True</code></li><li><code>None</code></li><li><code>NotImplemented</code></li><li><code>Ellipsis</code>，等同于<code>...</code></li><li><code>__debug__</code></li></ul><p>注解：变量名<code>None</code>，<code>False</code>，<code>True</code> 和 <code>__debug__</code> 无法重新赋值（赋值给它们，即使是属性名，将引发<code>SyntaxError</code>），所以它们可以被认为是“真正的”常数。</p><p><code>site</code> 模块（在启动期间自动导入，除非给出 -S 命令行选项）将几个常量添加到内置命名空间。 它们对交互式解释器<code>shell</code>很有用，并且不应在程序中使用。</p><ul><li><code>quit(code=None)</code></li><li><code>exit(code=None)</code>：当打印此对象时，会打印出一条消息，例如“Use quit() or Ctrl-D (i.e. EOF) to exit”，当调用此对象时，将使用指定的退出代码来引发 SystemExit。</li><li><code>copyright</code></li><li><code>credits</code>：打印或调用的对象分别打印版权或作者的文本。</li><li><code>license</code>：当打印此对象时，会打印出一条消息“Type license() to see the full license text”，当调用此对象时，将以分页形式显示完整的许可证文本（每次显示一屏）。</li></ul><h4 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h4><p>主要内置类型有数字、序列、映射、类、实例和异常。<br>有些多项集类是可变的。它们用于添加、移除或重排其成员的方法将原地执行，并不返回特定的项，绝对不会返回多项集实例自身而是返回<code>None</code>。<br>有些操作受多种对象类型的支持；特别地，实际上所有对象都可以被比较、检测逻辑值，以及转换为字符串（使用<code>repr()</code>函数或略有差异的<code>str()</code>函数）。后一个函数是在对象由<code>print()</code>函数输出时被隐式地调用的。</p><h4 id="内置异常"><a href="#内置异常" class="headerlink" title="内置异常"></a>内置异常</h4><p>在Python中，所有异常必须为一个派生自<code>BaseException</code>的类的实例。在带有提及一个特定类的<code>except</code>子句的<code>try</code>语句中，该子句也会处理任何派生自该类的异常类（但不处理<strong>它所派生出的异常类</strong>）。 通过子类化创建的两个不相关异常类永远是不等效的，既使它们具有相同的名称。</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>本章节描述的模块提供了一系列专门的数据类型例如日期与时间、固定类型的数组、堆队列、同步队列与集合等。<br>Python同样提供一些内置的数据类型，特别的，<code>dict</code>，<code>list</code>，<code>set</code>与<code>frozenset</code> 以及<code>tuple</code>。 <code>str</code>类通常指<strong>Unicode 字符串</strong>，并且<code>bytes</code>通常指<strong>二进制数据</strong>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>datetime</code></td><td style="text-align:left">基本的日期和时间类型</td></tr><tr><td style="text-align:center"><code>calendar</code></td><td style="text-align:left">日历相关函数</td></tr><tr><td style="text-align:center"><code>collections</code></td><td style="text-align:left">容器数据类型</td></tr><tr><td style="text-align:center"><code>collections.abc</code></td><td style="text-align:left">容器的抽象基类</td></tr><tr><td style="text-align:center"><code>heapq</code></td><td style="text-align:left">堆队列算法</td></tr><tr><td style="text-align:center"><code>bisect</code></td><td style="text-align:left">数组二分查找算法</td></tr><tr><td style="text-align:center"><code>array</code></td><td style="text-align:left">处理数值类型高效的数组</td></tr><tr><td style="text-align:center"><code>weakref</code></td><td style="text-align:left">弱引用</td></tr><tr><td style="text-align:center"><code>types</code></td><td style="text-align:left">动态创建类型，为内建类型提供指代</td></tr><tr><td style="text-align:center"><code>copy</code></td><td style="text-align:left">浅层 (shallow) 和深层 (deep) 复制操作</td></tr><tr><td style="text-align:center"><code>pprint</code></td><td style="text-align:left">数据美化输出</td></tr><tr><td style="text-align:center"><code>reprlib</code></td><td style="text-align:left"><code>repr()</code>的可替换实现</td></tr><tr><td style="text-align:center"><code>enum</code></td><td style="text-align:left">对枚举（enumerations）进行支持</td></tr></tbody></table><h4 id="数学和数学模块"><a href="#数学和数学模块" class="headerlink" title="数学和数学模块"></a>数学和数学模块</h4><p>本章介绍的模块提供与数字和数学相关的函数和数据类型。<code>numbers</code>模块定义了数字类型的抽象层次结构。 <code>math</code>和<code>cmath</code>模块包含浮点数和复数的各种数学函数。<code>decimal</code>模块支持使用任意精度算术的十进制数的精确表示。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>numbers</code></td><td style="text-align:left">数字的抽象基类</td></tr><tr><td style="text-align:center"><code>math</code></td><td style="text-align:left">数学函数</td></tr><tr><td style="text-align:center"><code>decimal</code></td><td style="text-align:left">十进制定点和浮点运算</td></tr><tr><td style="text-align:center"><code>fractions</code></td><td style="text-align:left">分数</td></tr><tr><td style="text-align:center"><code>random</code></td><td style="text-align:left">生成伪随机数</td></tr><tr><td style="text-align:center"><code>statistics</code></td><td style="text-align:left">数学统计函数</td></tr></tbody></table><h4 id="文件和目录访问"><a href="#文件和目录访问" class="headerlink" title="文件和目录访问"></a>文件和目录访问</h4><p>本章中描述的模块处理磁盘文件和目录。 例如，有一些模块用于读取文件的属性，以可移植的方式操作路径以及创建临时文件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>pathlib</code></td><td style="text-align:left">面向对象的文件系统路径</td></tr><tr><td style="text-align:center"><code>os.path</code></td><td style="text-align:left">常见路径操作</td></tr><tr><td style="text-align:center"><code>fileinput</code></td><td style="text-align:left">提供多个输入流的迭代功能</td></tr><tr><td style="text-align:center"><code>stat</code></td><td style="text-align:left">解释<code>stat()</code>的结果</td></tr><tr><td style="text-align:center"><code>filecmp</code></td><td style="text-align:left">文件及目录的比较</td></tr><tr><td style="text-align:center"><code>tempfile</code></td><td style="text-align:left">产生临时文件及文件夹</td></tr><tr><td style="text-align:center"><code>glob</code></td><td style="text-align:left">Unix类型路径名扩展</td></tr><tr><td style="text-align:center"><code>fnmatch</code></td><td style="text-align:left">Unix类型文件名匹配</td></tr><tr><td style="text-align:center"><code>linecache</code></td><td style="text-align:left">随机访问文本行</td></tr><tr><td style="text-align:center"><code>shutil</code></td><td style="text-align:left">高层次文件操作接口</td></tr><tr><td style="text-align:center"><code>macpath</code></td><td style="text-align:left">Mac OS 9 路径操作函数</td></tr></tbody></table><p>更多：<br><strong>模块 os</strong>：操作系统接口，包括处理比<strong>Python文件对象</strong>更低级别文件的功能。<br><strong>模块 io</strong>：Python的内置 I/O 库，包括抽象类和一些具体的类，如文件 I/O 。<br><strong>内置函数 open()</strong>：使用 Python 打开文件进行读写的标准方法。</p><h2 id="高手级"><a href="#高手级" class="headerlink" title="高手级"></a>高手级</h2><h3 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h3><h4 id="函数式编程模块"><a href="#函数式编程模块" class="headerlink" title="函数式编程模块"></a>函数式编程模块</h4><p>本章里描述的模块提供了函数和类，以支持函数式编程风格和在可调用对象上的通用操作。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>itertools</code></td><td style="text-align:left">为高效循环而创建迭代器的函数</td></tr><tr><td style="text-align:center"><code>functools</code></td><td style="text-align:left">高阶函数和可调用对象上的操作</td></tr><tr><td style="text-align:center"><code>operator</code></td><td style="text-align:left">标准运算符替代函数</td></tr></tbody></table><h4 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h4><p>本章中描述的模块支持并发执行代码。 适当的工具选择取决于要执行的任务（CPU密集型或IO密集型）和偏好的开发风格（事件驱动的协作式多任务或抢占式多任务处理）。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>threading</code></td><td style="text-align:left">基于线程的并行</td></tr><tr><td style="text-align:center"><code>multiprocessing</code></td><td style="text-align:left">基于进程的并行</td></tr><tr><td style="text-align:center"><code>concurrent</code></td><td style="text-align:left">启动并行任</td></tr><tr><td style="text-align:center"><code>subprocess</code></td><td style="text-align:left">子进程管理</td></tr><tr><td style="text-align:center"><code>sched</code></td><td style="text-align:left">事件调度器</td></tr><tr><td style="text-align:center"><code>queue</code></td><td style="text-align:left">一个同步的队列类</td></tr><tr><td style="text-align:center"><code>_thread</code></td><td style="text-align:left">底层多线程 API</td></tr><tr><td style="text-align:center"><code>_dummy_thread</code></td><td style="text-align:left">_thread 的替代模块</td></tr><tr><td style="text-align:center"><code>dummy_threading</code></td><td style="text-align:left">可直接替代 threading 模块。</td></tr></tbody></table><h3 id="开发生命周期相关"><a href="#开发生命周期相关" class="headerlink" title="开发生命周期相关"></a>开发生命周期相关</h3><p>该部分主要是用来支撑软件工程的某些生命周期所需的功能。</p><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>本章中描述的各模块可帮你编写 Python 程序。例如，<code>pydoc</code> 模块接受一个模块并根据该模块的内容来生成文档。<code>doctest</code> 和 <code>unittest</code> 这两个模块包含了用于编写单元测试的框架，并可用于自动测试所编写的代码，验证预期的输出是否产生。<code>2to3</code> 程序能够将 Python 2.x 源代码翻译成有效的 Python 3.x 源代码。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>typing</code></td><td style="text-align:left">类型标注支持</td></tr><tr><td style="text-align:center"><code>pydoc</code></td><td style="text-align:left">文档生成器及在线求助系统</td></tr><tr><td style="text-align:center"><code>doctest</code></td><td style="text-align:left">测试交互性的Python示例</td></tr><tr><td style="text-align:center"><code>unittest</code></td><td style="text-align:left">单元测试框架</td></tr><tr><td style="text-align:center"><code>unittest.mock</code></td><td style="text-align:left">mock对象库</td></tr><tr><td style="text-align:center">`2to3 - 自动将 Python 2 代码转为 Python 3 代码</td></tr><tr><td style="text-align:center"><code>test</code></td><td style="text-align:left">支持 Python 回归测试</td></tr><tr><td style="text-align:center"><code>test.support</code></td><td style="text-align:left">Python 测试组曲的实用工具</td></tr><tr><td style="text-align:center"><code>test.support.script_helper</code></td><td style="text-align:left">Python执行测试的使用工具</td></tr></tbody></table><h4 id="调试和分析"><a href="#调试和分析" class="headerlink" title="调试和分析"></a>调试和分析</h4><p>这些库可以帮助你进行Python开发：调试器使你能够逐步执行代码，分析堆栈帧并设置断点等，而分析器运行代码并为你提供执行时间的详细分类，从而使你能够找出你程序中的瓶颈。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>bdb</code></td><td style="text-align:left">debugger框架</td></tr><tr><td style="text-align:center"><code>faulthandler</code></td><td style="text-align:left">转存 Python 错误回溯</td></tr><tr><td style="text-align:center"><code>pdb</code></td><td style="text-align:left">Python的调试器</td></tr><tr><td style="text-align:center"><code>timeit</code></td><td style="text-align:left">测量小代码片段的执行时间</td></tr><tr><td style="text-align:center"><code>trace</code></td><td style="text-align:left">追溯 Python 语句执行情况</td></tr><tr><td style="text-align:center"><code>tracemalloc</code></td><td style="text-align:left">跟踪内存分配</td></tr></tbody></table><h4 id="软件打包和分发"><a href="#软件打包和分发" class="headerlink" title="软件打包和分发"></a>软件打包和分发</h4><p>这些库可帮助你发布和安装 Python 软件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>distutils</code></td><td style="text-align:left">构建和安装 Python 模块</td></tr><tr><td style="text-align:center"><code>ensurepip</code></td><td style="text-align:left">引导 pip 安装器</td></tr><tr><td style="text-align:center"><code>venv</code></td><td style="text-align:left">创建虚拟环境</td></tr><tr><td style="text-align:center"><code>zipapp</code></td><td style="text-align:left">管理可执行的 Python zip压缩包</td></tr></tbody></table><h2 id="骨灰级"><a href="#骨灰级" class="headerlink" title="骨灰级"></a>骨灰级</h2><h3 id="Python运行时服务"><a href="#Python运行时服务" class="headerlink" title="Python运行时服务"></a>Python运行时服务</h3><p>本章里描述的模块提供了和Python解释器及其环境交互相关的广泛服务。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>sys</code></td><td style="text-align:left">系统相关的参数和函数</td></tr><tr><td style="text-align:center"><code>sysconfig</code></td><td style="text-align:left">访问 Python’s 配置信息</td></tr><tr><td style="text-align:center"><code>builtins</code></td><td style="text-align:left">内建对象</td></tr><tr><td style="text-align:center"><code>__main__</code></td><td style="text-align:left">顶层脚本环境</td></tr><tr><td style="text-align:center"><code>warnings</code></td><td style="text-align:left">警告控制</td></tr><tr><td style="text-align:center"><code>dataclasses</code></td><td style="text-align:left">数据类</td></tr><tr><td style="text-align:center"><code>contextlib</code></td><td style="text-align:left">with语句上下文的实用工具</td></tr><tr><td style="text-align:center"><code>abc</code></td><td style="text-align:left">抽象基类</td></tr><tr><td style="text-align:center"><code>atexit</code></td><td style="text-align:left">退出处理器</td></tr><tr><td style="text-align:center"><code>traceback</code></td><td style="text-align:left">打印或检索堆栈回溯</td></tr><tr><td style="text-align:center"><code>__future__</code></td><td style="text-align:left">Future 语句定义</td></tr><tr><td style="text-align:center"><code>gc</code></td><td style="text-align:left">垃圾回收器接口</td></tr><tr><td style="text-align:center"><code>inspect</code></td><td style="text-align:left">检查对象</td></tr><tr><td style="text-align:center"><code>site</code></td><td style="text-align:left">site配置钩子</td></tr></tbody></table><h3 id="自定义Python解释器"><a href="#自定义Python解释器" class="headerlink" title="自定义Python解释器"></a>自定义Python解释器</h3><p>本章中描述的模块允许编写类似于 Python 的交互式解释器的接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>code</code></td><td style="text-align:left">解释器基类</td></tr><tr><td style="text-align:center"><code>codeop</code></td><td style="text-align:left">编译Python代码</td></tr></tbody></table><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>本章中介绍的模块提供了导入其他Python模块和挂钩以自定义导入过程的新方法。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>zipimport</code></td><td style="text-align:left">从zip压缩包中导入模块</td></tr><tr><td style="text-align:center"><code>pkgutil</code></td><td style="text-align:left">包扩展的实用工具</td></tr><tr><td style="text-align:center"><code>modulefinder</code></td><td style="text-align:left">查找脚本使用的模块</td></tr><tr><td style="text-align:center"><code>runpy</code></td><td style="text-align:left">定位与执行 Python 模块</td></tr><tr><td style="text-align:center"><code>importlib</code></td><td style="text-align:left">import 的实现</td></tr></tbody></table><h3 id="Python语言服务"><a href="#Python语言服务" class="headerlink" title="Python语言服务"></a>Python语言服务</h3><p>Python 提供了许多模块来帮助使用 Python 语言。 这些模块支持标记化、解析、语法分析、字节码反汇编以及各种其他工具。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>parser</code></td><td style="text-align:left">访问 Python 解析树</td></tr><tr><td style="text-align:center"><code>ast</code></td><td style="text-align:left">抽象语法树</td></tr><tr><td style="text-align:center"><code>symtable</code></td><td style="text-align:left">访问 编译器的符号表</td></tr><tr><td style="text-align:center"><code>symbol</code></td><td style="text-align:left">与 Python 解析树一起使用的常量</td></tr><tr><td style="text-align:center"><code>token</code></td><td style="text-align:left">与Python解析树一起使用的常量</td></tr><tr><td style="text-align:center"><code>keyword</code></td><td style="text-align:left">检验Python关键字</td></tr><tr><td style="text-align:center"><code>tokenize</code></td><td style="text-align:left">Python源码的Tokenizer</td></tr><tr><td style="text-align:center"><code>tabnanny</code></td><td style="text-align:left">模糊缩进检测</td></tr><tr><td style="text-align:center"><code>pyclbr</code></td><td style="text-align:left">Python 类浏览器的支撑包</td></tr><tr><td style="text-align:center"><code>py_compile</code></td><td style="text-align:left">编译 Python 源码</td></tr><tr><td style="text-align:center"><code>compileall</code></td><td style="text-align:left">二进制编码 Python库</td></tr><tr><td style="text-align:center"><code>dis</code></td><td style="text-align:left">Python 字节码反汇编器</td></tr><tr><td style="text-align:center"><code>pickletools</code></td><td style="text-align:left">pickle开发者的工具箱</td></tr></tbody></table><h2 id="任务相关"><a href="#任务相关" class="headerlink" title="任务相关"></a>任务相关</h2><p>该部分罗列的是与需求域相关的一些标准库。</p><h3 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h3><h4 id="文本处理服务"><a href="#文本处理服务" class="headerlink" title="文本处理服务"></a>文本处理服务</h4><p>本小节介绍的模块提供了广泛的字符串操作和其他文本处理服务。<br>在<strong>二进制数据服务</strong>之下描述的<code>codecs</code>模块也与文本处理高度相关。此外也请参阅Python内置字符串类型的文档文本序列类型 – <code>str</code>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>string</code></td><td style="text-align:left">常见的字符串操作</td></tr><tr><td style="text-align:center"><code>re</code></td><td style="text-align:left">正则表达式操作</td></tr><tr><td style="text-align:center"><code>difflib</code></td><td style="text-align:left">计算差异的辅助工具</td></tr><tr><td style="text-align:center"><code>textwrap</code></td><td style="text-align:left">文本自动换行与填充</td></tr><tr><td style="text-align:center"><code>unicodedata</code></td><td style="text-align:left">Unicode 数据库</td></tr><tr><td style="text-align:center"><code>stringprep</code></td><td style="text-align:left">因特网字符串预备</td></tr><tr><td style="text-align:center"><code>readline</code></td><td style="text-align:left">GNU readline 接口</td></tr><tr><td style="text-align:center"><code>rlcompleter</code></td><td style="text-align:left">GNU readline 的补全函数</td></tr></tbody></table><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h4><p>本章中描述的模块解析各种不是标记语言且与电子邮件无关的杂项文件格式。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>csv</code></td><td style="text-align:left">CSV 文件读写</td></tr><tr><td style="text-align:center"><code>configparser</code></td><td style="text-align:left">Configuration file parser</td></tr><tr><td style="text-align:center"><code>netrc</code></td><td style="text-align:left">netrc file processing</td></tr><tr><td style="text-align:center"><code>xdrlib</code></td><td style="text-align:left">Encode and decode XDR data</td></tr><tr><td style="text-align:center"><code>plistlib</code></td><td style="text-align:left">Generate and parse Mac OS X .plist files</td></tr></tbody></table><h4 id="数据压缩和存档"><a href="#数据压缩和存档" class="headerlink" title="数据压缩和存档"></a>数据压缩和存档</h4><p>本章中描述的模块支持 zlib、gzip、bzip2 和 lzma 数据压缩算法，以及创建 ZIP 和 tar 格式的归档文件。参见由 shutil 模块提供的 Archiving operations 。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>zlib</code></td><td style="text-align:left">与 gzip 兼容的压缩</td></tr><tr><td style="text-align:center"><code>gzip</code></td><td style="text-align:left">对 gzip 格式的支持</td></tr><tr><td style="text-align:center"><code>bz2</code></td><td style="text-align:left">对 bzip2 压缩算法的支持</td></tr><tr><td style="text-align:center"><code>lzma</code></td><td style="text-align:left">用 LZMA 算法压缩</td></tr><tr><td style="text-align:center"><code>zipfile</code></td><td style="text-align:left">使用ZIP存档</td></tr><tr><td style="text-align:center"><code>tarfile</code></td><td style="text-align:left">读写tar归档文件</td></tr></tbody></table><h4 id="结构化标记处理工具"><a href="#结构化标记处理工具" class="headerlink" title="结构化标记处理工具"></a>结构化标记处理工具</h4><p>Python 支持各种模块，以处理各种形式的结构化数据标记。 这包括使用标准通用标记语言（SGML）和超文本标记语言（HTML）的模块，以及使用可扩展标记语言（XML）的几个接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>html</code></td><td style="text-align:left">超文本标记语言支持</td></tr><tr><td style="text-align:center"><code>html.parser</code></td><td style="text-align:left">简单的 HTML 和 XHTML 解析器</td></tr><tr><td style="text-align:center"><code>html.entities</code></td><td style="text-align:left">HTML 一般实体的定义</td></tr><tr><td style="text-align:center"><code>xml.etree.ElementTree</code></td><td style="text-align:left">The ElementTree XML API</td></tr><tr><td style="text-align:center"><code>xml.dom</code></td><td style="text-align:left">The Document Object Model API</td></tr><tr><td style="text-align:center"><code>xml.dom.minidom</code></td><td style="text-align:left">最小 DOM 实现</td></tr><tr><td style="text-align:center"><code>xml.dom.pulldom</code></td><td style="text-align:left">支持构建部分 DOM 树</td></tr><tr><td style="text-align:center"><code>xml.sax</code></td><td style="text-align:left">SAX2 解析器</td></tr><tr><td style="text-align:center"><code>xml.sax.handler</code></td><td style="text-align:left">SAX 处理器的基类</td></tr><tr><td style="text-align:center"><code>xml.sax.saxutils</code></td><td style="text-align:left">SAX 实用工具</td></tr><tr><td style="text-align:center"><code>xml.sax.xmlreader</code></td><td style="text-align:left">XML 解析器接口</td></tr><tr><td style="text-align:center"><code>xml.parsers.expat</code></td><td style="text-align:left">实用 Expat 实现的快速XML解析</td></tr></tbody></table><h4 id="二进制数据服务"><a href="#二进制数据服务" class="headerlink" title="二进制数据服务"></a>二进制数据服务</h4><p>本章介绍的模块提供了一些操作二进制数据的基本服务操作。 有关二进制数据的其他操作，特别是与文件格式和网络协议有关的操作，将在相关章节中介绍。<br>下面描述的一些库<strong>文本处理服务</strong>也可以使用<strong>ASCII</strong>兼容的二进制格式（例如<code>re</code>）或所有二进制数据（例如<code>difflib</code>）。<br>另外，请参阅Python的内置二进制数据类型的文档<strong>二进制序列类型</strong> — <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>struct</code></td><td style="text-align:left">将字节串解读为打包的二进制数据</td></tr><tr><td style="text-align:center"><code>codecs</code></td><td style="text-align:left">编解码器注册和相关基类</td></tr></tbody></table><h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><p>本章中描述的模块支持在磁盘上以持久形式存储 Python 数据。<code>pickle</code>和<code>marshal</code>模块可以将许多 Python 数据类型转换为字节流，然后从字节中重新创建对象。各种与 DBM 相关的模块支持一系列基于散列的文件格式，这些格式存储字符串到其他字符串的映射。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>pickle</code></td><td style="text-align:left">Python 对象序列化</td></tr><tr><td style="text-align:center"><code>copyreg</code></td><td style="text-align:left"><code>pickle</code>支撑函数的注册表</td></tr><tr><td style="text-align:center"><code>shelve</code></td><td style="text-align:left">Python 对象持久化</td></tr><tr><td style="text-align:center"><code>marshal</code></td><td style="text-align:left">内部 Python 对象序列化</td></tr><tr><td style="text-align:center"><code>dbm</code></td><td style="text-align:left">UNIX “数据库”的接口</td></tr><tr><td style="text-align:center"><code>sqlite3</code></td><td style="text-align:left">SQLite 数据库 DB-API 2.0 接口模块</td></tr></tbody></table><h3 id="网络开发"><a href="#网络开发" class="headerlink" title="网络开发"></a>网络开发</h3><h4 id="网络和进程间通信"><a href="#网络和进程间通信" class="headerlink" title="网络和进程间通信"></a>网络和进程间通信</h4><p>本章介绍的模块提供了网络和进程间通信的机制。</p><p>某些模块仅适用于同一台机器上的两个进程，例如<code>signal</code>和<code>mmap</code>。其他模块支持两个或多个进程可用于跨机器通信的网络协议。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>asyncio</code></td><td style="text-align:left">异步 I/O</td></tr><tr><td style="text-align:center"><code>socket</code></td><td style="text-align:left">底层网络接口</td></tr><tr><td style="text-align:center"><code>ssl</code></td><td style="text-align:left">socket对象的TLS/SSL包装器</td></tr><tr><td style="text-align:center"><code>select</code></td><td style="text-align:left">等待 I/O 完成</td></tr><tr><td style="text-align:center"><code>selectors</code></td><td style="text-align:left">高级 I/O 复用库</td></tr><tr><td style="text-align:center"><code>asyncore</code></td><td style="text-align:left">异步socket处理器</td></tr><tr><td style="text-align:center"><code>asynchat</code></td><td style="text-align:left">异步 socket 指令/响应 处理器</td></tr><tr><td style="text-align:center"><code>signal</code></td><td style="text-align:left">设置异步事件处理程序</td></tr><tr><td style="text-align:center"><code>mmap</code></td><td style="text-align:left">内存映射文件支持</td></tr></tbody></table><h4 id="互联网数据处理"><a href="#互联网数据处理" class="headerlink" title="互联网数据处理"></a>互联网数据处理</h4><p>本章介绍了支持处理互联网上常用数据格式的模块。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>email</code></td><td style="text-align:left">电子邮件与 MIME 处理包</td></tr><tr><td style="text-align:center"><code>json</code></td><td style="text-align:left">JSON 编码和解码器</td></tr><tr><td style="text-align:center"><code>mailcap</code></td><td style="text-align:left">处理Mailcap文件 file handling</td></tr><tr><td style="text-align:center"><code>mailbox</code></td><td style="text-align:left">管理不同格式的邮箱</td></tr><tr><td style="text-align:center"><code>mimetypes</code></td><td style="text-align:left">将文件名映射为MIME类型</td></tr><tr><td style="text-align:center"><code>base64</code></td><td style="text-align:left">Base16, Base32, Base64, Base85 数据编码</td></tr><tr><td style="text-align:center"><code>binhex</code></td><td style="text-align:left">对binhex4文件进行编码和解码</td></tr><tr><td style="text-align:center"><code>binascii</code></td><td style="text-align:left">二进制和 ASCII 码互转</td></tr><tr><td style="text-align:center"><code>quopri</code></td><td style="text-align:left">MIME 可打印字符引用编码数据（MIME quoted-printable data）的解码与编码</td></tr><tr><td style="text-align:center"><code>uu</code></td><td style="text-align:left">uuencode格式数据的编码与解码</td></tr></tbody></table><h4 id="互联网协议和支持"><a href="#互联网协议和支持" class="headerlink" title="互联网协议和支持"></a>互联网协议和支持</h4><p>本章介绍的模块实现了互联网协议并支持相关技术。 它们都是用 Python 实现的。 这些模块中的大多数都需要存在依赖于系统的模块 socket ，目前大多数流行平台都支持它。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>webbrowser</code></td><td style="text-align:left">方便的Web浏览器控制器</td></tr><tr><td style="text-align:center"><code>cgi</code></td><td style="text-align:left">支持<strong>C</strong>ommon <strong>G</strong>ateway <strong>I</strong>nterface</td></tr><tr><td style="text-align:center"><code>cgitb</code></td><td style="text-align:left">CGI脚本的追踪管理器</td></tr><tr><td style="text-align:center"><code>wsgiref</code></td><td style="text-align:left">WSGI实用工具及参考实现</td></tr><tr><td style="text-align:center"><code>urllib</code></td><td style="text-align:left">URL 处理模块</td></tr><tr><td style="text-align:center"><code>urllib.request</code></td><td style="text-align:left">用于打开 URL 的可扩展库</td></tr><tr><td style="text-align:center"><code>urllib.response</code></td><td style="text-align:left">urllib 使用的 Response 类</td></tr><tr><td style="text-align:center"><code>urllib.parse</code></td><td style="text-align:left">将 URLs 解析为各组件</td></tr><tr><td style="text-align:center"><code>urllib.error</code></td><td style="text-align:left">urllib.request 引发的异常类</td></tr><tr><td style="text-align:center"><code>urllib.robotparser</code></td><td style="text-align:left">robots.txt 语法分析程序</td></tr><tr><td style="text-align:center"><code>http.client</code></td><td style="text-align:left">HTTP 协议客户端</td></tr><tr><td style="text-align:center"><code>ftplib</code></td><td style="text-align:left">FTP 协议客户端</td></tr><tr><td style="text-align:center"><code>poplib</code></td><td style="text-align:left">POP3 协议客户端</td></tr><tr><td style="text-align:center"><code>imaplib</code></td><td style="text-align:left">IMAP4 协议客户端</td></tr><tr><td style="text-align:center"><code>nntplib</code></td><td style="text-align:left">NNTP 协议客户端</td></tr><tr><td style="text-align:center"><code>smtplib</code></td><td style="text-align:left">SMTP 协议客户端</td></tr><tr><td style="text-align:center"><code>smtpd</code></td><td style="text-align:left">SMTP 服务端</td></tr><tr><td style="text-align:center"><code>telnetlib</code></td><td style="text-align:left">Telnet 客户端</td></tr><tr><td style="text-align:center"><code>uuid</code></td><td style="text-align:left">UUID（RFC 4122） 对象</td></tr><tr><td style="text-align:center"><code>socketserver</code></td><td style="text-align:left">网络服务器框架</td></tr><tr><td style="text-align:center"><code>http.server</code></td><td style="text-align:left">HTTP 服务器</td></tr><tr><td style="text-align:center"><code>http.cookies</code></td><td style="text-align:left">HTTP 状态管理</td></tr><tr><td style="text-align:center"><code>http.cookiejar</code></td><td style="text-align:left">HTTP 客户端的 Cookie 处理</td></tr><tr><td style="text-align:center"><code>xmlrpc</code></td><td style="text-align:left">XMLRPC 服务端与客户端模块</td></tr><tr><td style="text-align:center"><code>xmlrpc.client</code></td><td style="text-align:left">XML-RPC 客户端</td></tr><tr><td style="text-align:center"><code>xmlrpc.server</code></td><td style="text-align:left">基础的 XML-RPC 服务器</td></tr><tr><td style="text-align:center"><code>ipaddress</code></td><td style="text-align:left">IPv4/IPv6 操作库</td></tr></tbody></table><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p>本章中介绍的模块通过提供选择要在程序信息中使用的语言的机制或通过定制输出以匹配本地约定来帮助你编写不依赖于语言和区域设置的软件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>gettext</code></td><td style="text-align:left">多语种国际化服务</td></tr><tr><td style="text-align:center"><code>locale</code></td><td style="text-align:left">国际化服务</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="多媒体服务"><a href="#多媒体服务" class="headerlink" title="多媒体服务"></a>多媒体服务</h4><p>本章描述的模块实现了主要用于多媒体应用的各种算法或接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>audioop</code></td><td style="text-align:left">操作原始音频数据</td></tr><tr><td style="text-align:center"><code>aifc</code></td><td style="text-align:left">读写AIFF/AIFC文件</td></tr><tr><td style="text-align:center"><code>sunau</code></td><td style="text-align:left">读写 Sun AU 文件</td></tr><tr><td style="text-align:center"><code>wave</code></td><td style="text-align:left">读写WAV格式文件</td></tr><tr><td style="text-align:center"><code>chunk</code></td><td style="text-align:left">读写IFF块文件</td></tr><tr><td style="text-align:center"><code>colorsys</code></td><td style="text-align:left">颜色系统间的转换</td></tr><tr><td style="text-align:center"><code>imghdr</code></td><td style="text-align:left">推测图像类型</td></tr><tr><td style="text-align:center"><code>sndhdr</code></td><td style="text-align:left">推测声音文件的类型</td></tr><tr><td style="text-align:center"><code>ossaudiodev</code></td><td style="text-align:left">访问兼容OSS的音频设备</td></tr></tbody></table><h4 id="加密服务"><a href="#加密服务" class="headerlink" title="加密服务"></a>加密服务</h4><p>本章中描述的模块实现了加密性质的各种算法。 它们可由安装人员自行决定。 在Unix系统上，<code>crypt</code>模块也可以使用。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>hashlib</code></td><td style="text-align:left">安全哈希与消息摘要</td></tr><tr><td style="text-align:center"><code>hmac</code></td><td style="text-align:left">基于密钥的消息验证</td></tr><tr><td style="text-align:center"><code>secrets</code></td><td style="text-align:left">为密钥生成安全的随机数</td></tr></tbody></table><h4 id="程序框架界面"><a href="#程序框架界面" class="headerlink" title="程序框架界面"></a>程序框架界面</h4><p>本章中描述的模块是很大程度上决定程序结构的框架。 目前，这里描述的模块都面向编写命令行接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>turtle</code></td><td style="text-align:left">海龟绘图</td></tr><tr><td style="text-align:center"><code>cmd</code></td><td style="text-align:left">支持面向行的命令解释器</td></tr><tr><td style="text-align:center"><code>shlex</code></td><td style="text-align:left">简单词法分析器</td></tr></tbody></table><h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><p>Tk图形用户界面：<a href="https://docs.python.org/zh-cn/3/library/tk.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/tk.html</a><br>formatter (已移除，通用的输出排版）：<a href="https://docs.python.org/zh-cn/3/library/formatter.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/formatter.html</a><br>contextvars（上下文变量管理）：<a href="https://docs.python.org/zh-cn/3/library/contextvars.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/contextvars.html</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Python3官方文档：<a href="https://docs.python.org/3/library/" target="_blank" rel="noopener">https://docs.python.org/3/library/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;善工必先利其器&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="python" scheme="http://47.110.235.226/categories/learn/python/"/>
    
      <category term="stdlib" scheme="http://47.110.235.226/categories/learn/python/stdlib/"/>
    
    
      <category term="python-stdlib" scheme="http://47.110.235.226/tags/python-stdlib/"/>
    
  </entry>
  
  <entry>
    <title>python@cs-lang</title>
    <link href="http://47.110.235.226//blog/2019/08/18/learn/python/index/"/>
    <id>http://47.110.235.226//blog/2019/08/18/learn/python/index/</id>
    <published>2019-08-17T19:03:34.000Z</published>
    <updated>2019-08-17T19:05:36.842Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有牙齿的<code>python</code>更厉害</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;有牙齿的&lt;code&gt;python&lt;/code&gt;更厉害&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="python" scheme="http://47.110.235.226/categories/learn/python/"/>
    
    
      <category term="python" scheme="http://47.110.235.226/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tag Plugins@hexo</title>
    <link href="http://47.110.235.226//blog/2019/08/18/learn/hexo/tag_plugins/"/>
    <id>http://47.110.235.226//blog/2019/08/18/learn/hexo/tag_plugins/</id>
    <published>2019-08-17T17:44:23.000Z</published>
    <updated>2019-08-17T18:13:49.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>授人以鱼不如授人以渔</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>hexo中的<code>tag plugins</code>给了我们在markdown中使用“局部函数”的能力。同时注意“标签插件”和“Front-matter”中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><h1 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h1><p>在文章中插入引言，可包含作者、来源和标题。<br></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">blockquote</span> [author[, <span class="name">source</span>]] [link] [source_link_title] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>在文章中插入代码。<br></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock <span class="string">[title]</span> <span class="string">[lang:language]</span> <span class="string">[url]</span> <span class="string">[link text]</span> %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p></p><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。<br>``` [language] [title] [url] [link text] code snippet ```</p><h1 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h1><p>在文章中插入“Pull quote”。<br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">pullquote</span> [class] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endpullquote</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h1><blockquote><p>jsFiddle 是一个Web开发人员的练习场，可在线编辑和测试 HTML、CSS、JavaScript代码片段。在 jsFiddle 编辑的代码，可以保存，也可分享给其他人，还可嵌入到网站中。</p></blockquote><p>在文章中嵌入“jsFiddle”。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h1><blockquote><p>Gist 是 Github 推出的基于 Git 的代码片段管理服务。用户可以提交自己的代码片段或任意的文本，可以作为个人的代码管理库、文档管理库等。</p></blockquote><p>在文章中嵌入 Gist。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><p>在文章中插入“iframe”。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><p>在文章中插入指定大小的图片。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] <span class="string">"title text 'alt text'"</span> %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>在文章中插入链接，并自动给外部链接添加<code>target=&quot;_blank&quot;</code>属性。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h1><p>插入<code>source/downloads/code</code>文件夹内的代码文件。<code>source/downloads/code</code>不是固定的，取决于你在配置文件中<code>code_dir</code>的配置。<br></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [<span class="keyword">lan</span><span class="variable">g:language</span>] path/<span class="keyword">to</span>/<span class="keyword">file</span> %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h1><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">youtube</span> video_id %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h1><blockquote><p>Vimeo 是一个高清视频播客网站，与大多数类似的视频分享网站不同，Vimeo允许上传1280X700的高清视频，上传后Vimeo会自动转码为高清视频，源视频文件可以自由下载，它达到了真正的高清视频标准。</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">vimeo</span> video_id %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h1><p>如果您想在文章中插入<code>Swig</code>标签，可以尝试使用”Raw”标签，以免发生解析异常。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> raw </span>%&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h1><p>在文章中使用<code>&lt;!-- more --&gt;</code>，那么<code>&lt;!-- more --&gt;</code>之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。<br>注意，摘要可能会被<code>Front Matter</code>中的<code>excerpt</code>覆盖。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>官方文档：<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;授人以鱼不如授人以渔&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="hexo" scheme="http://47.110.235.226/categories/learn/hexo/"/>
    
    
      <category term="tag-plugin" scheme="http://47.110.235.226/tags/tag-plugin/"/>
    
  </entry>
  
  <entry>
    <title>Using Cases@argparse</title>
    <link href="http://47.110.235.226//blog/2019/08/18/learn/argparse/using_case/"/>
    <id>http://47.110.235.226//blog/2019/08/18/learn/argparse/using_case/</id>
    <published>2019-08-17T17:23:34.000Z</published>
    <updated>2019-08-17T18:21:29.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔头虽烂可不要贪用哦</p></blockquote><a id="more"></a><h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.parse_args()</span><br></pre></td></tr></table></figure><p>将上述文件保存为<code>prog.py</code>，并在文件对应目录执行下述命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line">python prog.py --verbose</span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: --verbose</span></span><br><span class="line">python prog.py foo</span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: foo</span></span><br></pre></td></tr></table></figure><p></p><p>要点：</p><blockquote><p>The <code>--help</code> option, which can also be shortened to <code>-h</code>, is the only option we get for free (i.e. no need to specify it). Specifying anything else results in an error.</p></blockquote><h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'echo'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.echo)</span><br></pre></td></tr></table></figure><p>保存上述文件为<code>prog.py</code>，并在其目录下执行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: echo</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line">python prog.py foo</span><br><span class="line"><span class="comment"># foo</span></span><br></pre></td></tr></table></figure><p></p><p>向<strong>位置参数</strong>添加帮助信息：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'echo'</span>, help=<span class="string">'echo the string you use here'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.echo</span><br></pre></td></tr></table></figure><p></p><p>此时执行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python prog.py -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   echo        echo the string you use here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br></pre></td></tr></table></figure><p></p><p>指定<strong>位置参数</strong>类型：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'square'</span>, help=<span class="string">'display a square of a given number'</span>,</span><br><span class="line">                    type=int)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.square**<span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>并执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py four</span><br><span class="line"><span class="comment"># usage: prog.py [-h] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument square: invalid int value: 'four'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h1><p>先添加一个<strong>选项参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--verbosity'</span>, help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --verbosity 1</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbosity VERBOSITY]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#  -h, --help            show this help message and exit</span></span><br><span class="line"><span class="comment">#  --verbosity VERBOSITY</span></span><br><span class="line"><span class="comment">#                        increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>限定上述中的<code>--verbosity</code>只能接受指定或者不指定：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                    action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --verbose</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py --verbose 1</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbose]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: 1</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbose]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line"><span class="comment">#   --verbose   increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>注意上述执行<code>python prog.py --help</code>时提示信息的不同。</p><p>加入对应的“短”<strong>选项参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                    action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python prog.py -v</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help     show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbose  increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><h1 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h1><p>将<strong>位置参数</strong>与<strong>选项参数</strong>结合使用：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_arugument(<span class="string">'square'</span>, type=int,</span><br><span class="line">                     help=<span class="string">'display a square of a given number'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">                    help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'the square of &#123;&#125; equals &#123;&#125;'</span>.format(arg.square, answer))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: square</span></span><br><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 --verbose</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py --verbose 4</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br></pre></td></tr></table></figure><p></p><p>更复杂的实例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 -v</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v VERBOSITY] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -v/--verbosity: expected one argument</span></span><br><span class="line"><span class="comment"># python prog.py 4 -v 1</span></span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 -v 2</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -v 3</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p></p><p>注意到上例中<code>python prog.py 4 -v 3</code>并没有如我们所期望一样：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int, choices=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 -v 3</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v &#123;0,1,2&#125;] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)</span></span><br><span class="line">python prog.py 4 -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v &#123;0,1,2&#125;] square</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   square                display a square of a given number</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help            show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v &#123;0,1,2&#125;, --verbosity &#123;0,1,2&#125;</span></span><br><span class="line"><span class="comment">#                         increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>另外一种常见的设定参数的方式：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display the square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 -v</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 -vv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 --verbosity --verbosity</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -v 1</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: 1</span></span><br><span class="line">python prog.py 4 -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   square           display a square of a given number</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help       show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbosity  increase output verbosity</span></span><br><span class="line">python prog.py 4 -vvv</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p></p><p>同样在指令<code>python prog.py 4 -vvv</code>表现不对：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bugfix: replace == with &gt;=</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 -vvv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -vvvv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#  File "prog.py", line 11, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     if args.verbosity &gt;= 2:</span></span><br><span class="line"><span class="comment"># TypeError: unorderable types: NoneType() &gt;= int()</span></span><br></pre></td></tr></table></figure><p></p><p>通过为<strong>选项参数</strong>设定默认值，修复上述bug：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><h1 id="综合实例-1"><a href="#综合实例-1" class="headerlink" title="综合实例+"></a>综合实例+</h1><p>基于上例，这次我们让程序可以指定指数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: x, y</span></span><br><span class="line">python prog.py -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] x y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   x                the base</span></span><br><span class="line"><span class="comment">#   y                the exponent</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help       show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbosity</span></span><br><span class="line">python prog.py 4 2 -v</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br></pre></td></tr></table></figure><p></p><h1 id="实际使用示例"><a href="#实际使用示例" class="headerlink" title="实际使用示例"></a>实际使用示例</h1><p>在实际使用过程中，发现要使用的功能在下段代码中都有体现：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'CNN sentiment classificer'</span>)</span><br><span class="line"><span class="comment"># learning</span></span><br><span class="line">parser.add_argument(<span class="string">'-lr'</span>, type=float, default=<span class="number">0.001</span>,</span><br><span class="line">                    help=<span class="string">'initial learning rate [default: 0.001]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-epochs'</span>, type=int, default=<span class="number">256</span>,</span><br><span class="line">                    help=<span class="string">'number of epochs for train [default: 256]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-batch-size'</span>, type=int, default=<span class="number">64</span>,</span><br><span class="line">                    help=<span class="string">'batch size for training [default: 64]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-log-interval'</span>,  type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before logging training status [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-test-interval'</span>, type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before testing [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-save-interval'</span>, type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before saving [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-save-dir'</span>, type=str, default=<span class="string">'snapshot'</span>,</span><br><span class="line">                    help=<span class="string">'where to save the snapshot'</span>)</span><br><span class="line"><span class="comment"># data </span></span><br><span class="line">parser.add_argument(<span class="string">'-shuffle'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'shuffle the data every epoch'</span> )</span><br><span class="line"><span class="comment"># model</span></span><br><span class="line">parser.add_argument(<span class="string">'-dropout'</span>, type=float, default=<span class="number">0.5</span>,</span><br><span class="line">                    help=<span class="string">'the probability for dropout [default: 0.5]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-max-norm'</span>, type=float, default=<span class="number">3.0</span>,</span><br><span class="line">                    help=<span class="string">'l2 constraint of parameters [default: 3.0]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-embed-dim'</span>, type=int, default=<span class="number">300</span>,</span><br><span class="line">                    help=<span class="string">'number of embedding dimension [default: 300]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-filter-stopwords'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'whether to filter out stop words [default: False]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-embed-pretrain'</span>, type=str, default=<span class="string">'./other/glove.840B.300d.filtered.npy'</span>,</span><br><span class="line">                    help=<span class="string">'path of pretrained word embedding [default: ./other/glove.840B.300d.filtered.npy]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-kernel-num'</span>, type=int, default=<span class="number">32</span>,</span><br><span class="line">                    help=<span class="string">'number of each kind of kernel [default: 32]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-kernel-sizes'</span>, type=str, default=<span class="string">'3,4,5'</span>,</span><br><span class="line">                    help=<span class="string">'comma-separated kernel size to use for convolution'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-static'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'fix the embedding'</span>)</span><br><span class="line"><span class="comment"># device</span></span><br><span class="line">parser.add_argument(<span class="string">'-device'</span>, type=int, default=<span class="number">-1</span>,</span><br><span class="line">                    help=<span class="string">'device to use for iterate data, -1 mean cpu [default: -1]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-no-cuda'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'disable the gpu'</span> )</span><br><span class="line"><span class="comment"># option</span></span><br><span class="line">parser.add_argument(<span class="string">'-snapshot'</span>, type=str, default=<span class="literal">None</span>,</span><br><span class="line">                    help=<span class="string">'filename of model snapshot [default: None]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-predict'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'predict the given textdata'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-predict-dir'</span>, type=str, default=<span class="string">'prediction'</span>,</span><br><span class="line">                    help=<span class="string">"where to save the prediction [default: prediction]"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-test'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'train or test'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># update args about data &amp; device &amp; option</span></span><br><span class="line">args.save_dir = os.path.join(</span><br><span class="line">    args.save_dir,</span><br><span class="line">    datetime.datetime.now().strftime(<span class="string">'%Y%m%d_%H%M%S'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.predict <span class="keyword">and</span> <span class="keyword">not</span> os.path.isdir(args.save_dir):</span><br><span class="line">    os.makedirs(args.save_dir)</span><br><span class="line">args.cuda = (<span class="keyword">not</span> args.no_cuda) <span class="keyword">and</span> torch.cuda.is_available(); <span class="keyword">del</span> args.no_cuda</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nParameters:'</span>)</span><br><span class="line"><span class="keyword">for</span> attr, value <span class="keyword">in</span> sorted(args.__dict__.items()):</span><br><span class="line">    print(<span class="string">'\t&#123;&#125;=&#123;&#125;'</span>.format(attr.upper(), value))</span><br></pre></td></tr></table></figure><p></p><h1 id="互斥的选项参数"><a href="#互斥的选项参数" class="headerlink" title="互斥的选项参数"></a>互斥的选项参数</h1><p>该节再引入一个方法<code>add_mutually_exclusive_group()</code>，该方法用来解决两个相斥的参数，如<code>--quiet</code>和<code>--verbose</code>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 2</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 2 -q</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 2 -v</span><br><span class="line"><span class="comment"># 4 to the power 2 equals 16</span></span><br><span class="line">python prog.py 4 2 -vq</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span></span><br><span class="line">python prog.py 4 2 -v --quiet</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span></span><br></pre></td></tr></table></figure><p></p><p>最后，我们还可以通过如下方式告诉使用者程序的用途：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"calculate X to the power of Y"</span>)</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># calculate X to the power of Y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   x              the base</span></span><br><span class="line"><span class="comment">#   y              the exponent</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help     show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbose</span></span><br><span class="line"><span class="comment">#   -q, --quiet</span></span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>想更多的了解<code>argparse</code>的内部机制而非仅限于使用，可以参阅<a href="http://wrran.com/blog/2019/08/18/learn/argparse/using_case/" target="_blank" rel="noopener">argparse@python</a>。</p><p><a href="https://docs.python.org/2/howto/argparse.html" target="_blank" rel="noopener">Argparse Tutorial</a><br><a href="http://www.jianshu.com/p/fef2d215b91d" target="_blank" rel="noopener">python argparse用法总结</a><br><a href="https://docs.python.org/2/library/argparse.html#module-argparse" target="_blank" rel="noopener">argparse - Python Software Foundation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;笔头虽烂可不要贪用哦&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://47.110.235.226/categories/python/"/>
    
      <category term="argparse" scheme="http://47.110.235.226/categories/python/argparse/"/>
    
    
      <category term="argparse" scheme="http://47.110.235.226/tags/argparse/"/>
    
  </entry>
  
  <entry>
    <title>argparse@python</title>
    <link href="http://47.110.235.226//blog/2019/08/18/learn/argparse/index/"/>
    <id>http://47.110.235.226//blog/2019/08/18/learn/argparse/index/</id>
    <published>2019-08-17T16:00:00.000Z</published>
    <updated>2019-08-17T18:58:25.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>argparse</code>, Parser for command-line options, arguments and sub-commands.</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>命令行是一个程序软件的界面；设计良好的命令行界面可以提升软件的易使用性。<code>argparse</code>是python中一个负责解析命令、子命令、参数与选项的工具。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>此处主要介绍一些相关的基本概念，特别是“命令”、“子命令”、“参数”与“选项”。</p><p><strong>命令</strong>是软件实体的主入口；<br><strong>子命令</strong>则是负责该软件实体中更细节的一些功能。</p><p>软件实体需要输入以确定自己的行为，输入根据变更的频度顺次为：</p><ul><li>参数（经常）</li><li>选项（有时）</li><li>配置文件（偶尔）</li><li>数据文件（极少）</li></ul><p>之外，变更频次越低的越能更大程度改变软件实体的行为；因此对频次越低的输入进行修改的用户往往是使用经验也十分丰富。</p><!-- 对应这些概念，可见以下实例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ls pypy</span><br><span class="line">ls -l</span><br><span class="line">ls --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>如上所示，程序会包含以下几部分：</p><ul><li>程序名</li><li>位置参数</li><li>默认参数（如，执行命令<code>ls</code>等效于<code>ls .</code>）</li><li>选项参数（如，命令<code>ls -l</code>和<code>ls --help</code>）<br>–&gt;</li></ul><p><code>argparse</code>对于这些不同的指令解析提供了很好的技术支持，更多详情可以参见<a href="http://wrran.com/blog/2019/08/18/learn/argparse/using_case/">Using Cases@argparse</a>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Python3官方文档：<a href="https://docs.python.org/3/library/argparse.html">https://docs.python.org/3/library/argparse.html</a></p>-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;argparse&lt;/code&gt;, Parser for command-line options, arguments and sub-commands.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="python" scheme="http://47.110.235.226/categories/learn/python/"/>
    
    
      <category term="argparse" scheme="http://47.110.235.226/tags/argparse/"/>
    
  </entry>
  
  <entry>
    <title>bash入门@linux</title>
    <link href="http://47.110.235.226//blog/2019/08/17/learn/bash/index/"/>
    <id>http://47.110.235.226//blog/2019/08/17/learn/bash/index/</id>
    <published>2019-08-17T14:21:55.000Z</published>
    <updated>2019-08-18T04:22:41.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>B</strong>ourne-<strong>A</strong>gain <strong>SH</strong>ell; <strong>B</strong>orn <strong>A</strong>gain <strong>SH</strong>ell</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>入门指的是由<em>使用</em>驱动的学习。</p><h1 id="Six-Core-Responsibility"><a href="#Six-Core-Responsibility" class="headerlink" title="Six Core Responsibility"></a>Six Core Responsibility</h1><p>Shell的责任（responsibility，职责是duty）有：</p><ol><li>程序执行：负责执行终端中指定的所有程序；</li><li>变量及其替换：只要在命令行中将变量名放置在<code>$</code>之后，就会被bash替换为对应的变量值；</li><li>I/O重定向：负责处理输入/输出的重定向；指令有<code>&gt;</code>（写入），<code>&lt;</code>（读入），<code>&gt;&gt;</code>（追写），<code>&lt;&lt;</code>（？）；</li><li>管道：负责将前一个命令的标准输出连接到之后命令的标准输入；管道符号为<code>|</code>，如<code>who | wc -l</code>；</li><li>环境控制：定制个人环境的命令；个人环境包括主目录（<code>~</code>）、命令行提示符及用于搜索待执行程序的目录列表；</li><li>解释型编程语言：内建的解释型编程语言；分析所遇到的每一条语句，然后执行所发现的有效命令。</li></ol><h1 id="Variable-amp-its-Replacement"><a href="#Variable-amp-its-Replacement" class="headerlink" title="Variable &amp; its Replacement"></a>Variable &amp; its Replacement</h1><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>匹配变量的正则表达式为<code>[a-zA-Z_][a-zA-Z0-9_]*</code>。<br><strong>变量赋值</strong>形如<code>variable=value</code>；<br><strong>显示变量值</strong>形如<code>echo $variable</code>.</p><p>bash在执行指令时，按照如下顺序进行操作：</p><ol start="0"><li><strong>命令分割</strong>：依据空格字符（一个或多个）分割命令与参数；</li><li><strong>变量替换</strong>：扫描命令行，用变量值替换变量名；</li><li><strong>引用字符替换</strong>：扫描上一步的输出，将<em>引用字符</em>替换为其语义所指表示；</li><li><strong>命令执行</strong>：执行上一步的输出。</li></ol><p>特殊字符有<code>*</code>，代表当前目录下的所有文件及文件名；之外，还有四种不同的引用字符：<code>&#39;</code>（单引号）/<code>&quot;</code>（双引号）/<code>\</code>/ <strong>`</strong>（反引号）;<br>其中除斜杠外，其他引用字符都需要成对出现。</p><p><code>&#39;</code>（单引号）：被单引号包裹的特殊字符将被忽略；<br><code>&quot;</code>（双引号）：被双引号包裹的字符大部分都会被保护，除了三种字符<code>$</code>（美元字符）/<code>\</code>（反斜线）/ <strong>`</strong>（反引号）；<br><code>\</code>（反斜线）：反斜线大部分情况下相当于在单个字符周围放置单引号；当反斜线出现在输入行的最后一个，起到续行符的作用；<br><strong>`</strong>（反引号）：反引号一般包裹待执行的命令；命令输出会被插入到它的当前所在位置上；但注意更提倡使用与之等价的 <code>$(command)</code>。</p><p>示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;&lt;&lt; echo \$x &gt;&gt;&gt; displays the value of x, which is <span class="variable">$x</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;&lt;&lt; echo \$x &gt;&gt;&gt; displays the value of x, which is'</span> <span class="variable">$x</span></span><br><span class="line"><span class="built_in">echo</span> Your current working directory is $(<span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure><p></p><h1 id="Passing"><a href="#Passing" class="headerlink" title="Passing"></a>Passing</h1><h1 id="Everyday-Commands"><a href="#Everyday-Commands" class="headerlink" title="Everyday Commands"></a>Everyday Commands</h1><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><blockquote><p>别名是shell提供的一种可以用于自定义命令的快捷记法。</p></blockquote><p>shell保存了一个别名列表，在命令输入之后，会在执行其他替换操作之前首先搜索该列表。如果命令行的第一个单词是别名，将该别名替换成对应的文本。</p><p>其形式如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> name=string</span><br></pre></td></tr></table></figure><p></p><p>示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>重定向：<a href="http://wrran.com/blog/2019/08/18/learn/bash/redirect/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/18/learn/bash/redirect/</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt;ourne-&lt;strong&gt;A&lt;/strong&gt;gain &lt;strong&gt;SH&lt;/strong&gt;ell; &lt;strong&gt;B&lt;/strong&gt;orn &lt;strong&gt;A&lt;/strong&gt;gain &lt;strong&gt;SH&lt;/strong&gt;ell&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="bash" scheme="http://47.110.235.226/categories/learn/bash/"/>
    
    
      <category term="bash" scheme="http://47.110.235.226/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>pytest@python</title>
    <link href="http://47.110.235.226//blog/2019/08/16/learn/pytest/index/"/>
    <id>http://47.110.235.226//blog/2019/08/16/learn/pytest/index/</id>
    <published>2019-08-16T11:16:15.000Z</published>
    <updated>2019-08-17T18:36:17.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不失败即成功</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <code>pytest</code> framework makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries.</p><p><strong>Features</strong><br>该测试框架有以下特征：</p><ul><li>详细的测试失败日志；</li><li>自动发现需要测试的组件和/或方法；</li><li>提供模块化的设施，可支持或小或大或参数化的复杂场景；</li><li>支持测试框架<code>unittest</code>及<code>nose</code>；</li><li>支持插件，已有315+外部插件；社区良好。</li></ul><p><strong>Documentation</strong><br><a href="http://docs.pytest.org/en/latest/contents.html#toc" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/contents.html#toc</a></p><h1 id="Modular-Fixtures"><a href="#Modular-Fixtures" class="headerlink" title="Modular Fixtures"></a>Modular Fixtures</h1><p>More info sees <a href="http://docs.pytest.org/en/latest/fixture.html#fixture" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/fixture.html#fixture</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://docs.pytest.org/en/latest/" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;不失败即成功&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://47.110.235.226/categories/learn/"/>
    
      <category term="pytest" scheme="http://47.110.235.226/categories/learn/pytest/"/>
    
    
      <category term="pytest" scheme="http://47.110.235.226/tags/pytest/"/>
    
  </entry>
  
</feed>
