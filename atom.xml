<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WrRan の 杂货铺</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wrran.com/"/>
  <updated>2019-08-18T04:07:03.180Z</updated>
  <id>http://www.wrran.com/</id>
  
  <author>
    <name>WrRan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重定向@bash</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/bash/redirect/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/bash/redirect/</id>
    <published>2019-08-18T00:43:24.000Z</published>
    <updated>2019-08-18T04:07:03.180Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>暂且离开自己又返回自己，只是返回的位置略有不同。<br>@ 村上春树</p></blockquote><a id="more"></a><h1 id="数据重定向"><a href="#数据重定向" class="headerlink" title="数据重定向"></a>数据重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt; stdout</code></td><td style="text-align:left">标准输出重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt; stdin</code></td><td style="text-align:left">标准输入重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command 2&gt; stderr</code></td><td style="text-align:left">标准错误重定向</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="流重定向"><a href="#流重定向" class="headerlink" title="流重定向"></a>流重定向</h1><p>|COMMAND|DESCRIPTION|DETAILS|<br>|:-:|:-|:-|z<br>|<code>command &gt;&amp;2</code>|将标准输出重定向到标准错误|-|<br>|<code>command 2&gt;&amp;1</code>|将标准错误重定向到标准输出|-|</p><h1 id="动态重定向"><a href="#动态重定向" class="headerlink" title="动态重定向"></a>动态重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>exec &lt; datafile</code></td><td style="text-align:left">标准输入动态重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exec &gt; datafile</code></td><td style="text-align:left">标准输出动态重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exec 2&gt; datafile</code></td><td style="text-align:left">标准错误动态重定向</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="流行为重定向"><a href="#流行为重定向" class="headerlink" title="流行为重定向"></a>流行为重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&gt; stdout</code></td><td style="text-align:left">标准输出由默认覆写模式重定向为追加模式</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;word lines</code></td><td style="text-align:left">标准输入重定向为行内输入模式</td><td style="text-align:left">使用<code>lines</code>作为命令标准输入，直到碰到只含有<code>word</code>的行；并“附加操作”：进行参数替换、反引号命令执行，同时解析反斜杠的语义</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;\word lines</code></td><td style="text-align:left">标准输入重定向为原封行内输入模式</td><td style="text-align:left">类似“行内输入模式”，不同在于不进行“附加操作”</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;-word lines</code></td><td style="text-align:left">标准输入重定向为缩进行内输入模式</td><td style="text-align:left">类似“行内输出模式”，不同在于又“附加操作”：删除前导制表符</td></tr></tbody></table><h2 id="关闭流"><a href="#关闭流" class="headerlink" title="关闭流"></a>关闭流</h2><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&amp;-</code></td><td style="text-align:left">关闭标准输出</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt;&amp;-</code></td><td style="text-align:left">关闭标准输入(？)</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589。" target="_blank" rel="noopener">https://book.douban.com/subject/30410589。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;暂且离开自己又返回自己，只是返回的位置略有不同。&lt;br&gt;@ 村上春树&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
      <category term="redirect@bash" scheme="http://www.wrran.com/tags/redirect-bash/"/>
    
  </entry>
  
  <entry>
    <title>CS常用术语</title>
    <link href="http://www.wrran.com//blog/2019/08/18/cheatsheet/cs-terms/"/>
    <id>http://www.wrran.com//blog/2019/08/18/cheatsheet/cs-terms/</id>
    <published>2019-08-17T22:12:37.000Z</published>
    <updated>2019-08-18T00:40:26.878Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记住，是不可能记住的。</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">TERM</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center">avatar</td><td style="text-align:left">可移动图标</td><td style="text-align:left">如头像</td></tr><tr><td style="text-align:center">interoperability</td><td style="text-align:left">互操作性</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">fixture</td><td style="text-align:left">固定设施</td><td style="text-align:left">如测试套具（fixture）</td></tr><tr><td style="text-align:center">register</td><td style="text-align:left">注册表</td><td style="text-align:left">—</td></tr><tr><td style="text-align:center">archive</td><td style="text-align:left">归档</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">parameter</td><td style="text-align:left">形参</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">argument</td><td style="text-align:left">实参</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">redirect</td><td style="text-align:left">重定向</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;记住，是不可能记住的。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="cheatsheet" scheme="http://www.wrran.com/categories/cheatsheet/"/>
    
    
      <category term="cs-terms" scheme="http://www.wrran.com/tags/cs-terms/"/>
    
  </entry>
  
  <entry>
    <title>The Python Standard Library</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/python/stdlib/index/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/python/stdlib/index/</id>
    <published>2019-08-17T19:35:46.000Z</published>
    <updated>2019-08-17T22:10:25.695Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>善工必先利其器</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>标准库意味着由官方维护，会随着语言的演变而演变；因而值得大下功夫，好好琢磨。</p><p>标准库非常庞大，所提供的组件涉及范围十分广泛。该库包含了多个内置模块 (以C编写)，Python 程序员必须依靠它们来实现<strong>系统级功能</strong>，例如文件 I/O；此外还有大量以Python编写的模块，提供了日常编程中许多问题的<strong>标准解决方案</strong>。<br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文将罗列出这些标准库，但鉴于数量众多、功能复杂。<br>因此，先根据模块所针对的目标人群进行分类：入门级、高手级、骨灰级；之后根据其处理的问题进行大致分类（部分重叠）。</p><p>但出于方便，单独列出一节简述常用标准库的功能。</p><h1 id="常用标注库"><a href="#常用标注库" class="headerlink" title="常用标注库"></a>常用标注库</h1><h1 id="完整目录"><a href="#完整目录" class="headerlink" title="完整目录"></a>完整目录</h1><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>这部分单独列出各个阶段玩家都会使用到的一些工具。</p><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><p>该部分主要用来支持调用操作系统的一些标准库。</p><h4 id="系统平台无关（通用操作系统服务）"><a href="#系统平台无关（通用操作系统服务）" class="headerlink" title="系统平台无关（通用操作系统服务）"></a>系统平台无关（通用操作系统服务）</h4><h4 id="系统平台相关"><a href="#系统平台相关" class="headerlink" title="系统平台相关"></a>系统平台相关</h4><h5 id="Windows系统相关模块"><a href="#Windows系统相关模块" class="headerlink" title="Windows系统相关模块"></a>Windows系统相关模块</h5><h5 id="Unix专有模块"><a href="#Unix专有模块" class="headerlink" title="Unix专有模块"></a>Unix专有模块</h5><h2 id="入门级"><a href="#入门级" class="headerlink" title="入门级"></a>入门级</h2><h3 id="解释器相关"><a href="#解释器相关" class="headerlink" title="解释器相关"></a>解释器相关</h3><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p>Python 解释器内置了很多函数和类型，您可以在任何时候使用它们；具体目录参见<a href="https://docs.python.org/zh-cn/3/library/functions.html。" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/functions.html。</a></p><h4 id="内置常量"><a href="#内置常量" class="headerlink" title="内置常量"></a>内置常量</h4><p>有少数的常量存在于内置命名空间中。它们是：</p><ul><li><code>False</code></li><li><code>True</code></li><li><code>None</code></li><li><code>NotImplemented</code></li><li><code>Ellipsis</code>，等同于<code>...</code></li><li><code>__debug__</code></li></ul><p>注解：变量名<code>None</code>，<code>False</code>，<code>True</code> 和 <code>__debug__</code> 无法重新赋值（赋值给它们，即使是属性名，将引发<code>SyntaxError</code>），所以它们可以被认为是“真正的”常数。</p><p><code>site</code> 模块（在启动期间自动导入，除非给出 -S 命令行选项）将几个常量添加到内置命名空间。 它们对交互式解释器<code>shell</code>很有用，并且不应在程序中使用。</p><ul><li><code>quit(code=None)</code></li><li><code>exit(code=None)</code>：当打印此对象时，会打印出一条消息，例如“Use quit() or Ctrl-D (i.e. EOF) to exit”，当调用此对象时，将使用指定的退出代码来引发 SystemExit。</li><li><code>copyright</code></li><li><code>credits</code>：打印或调用的对象分别打印版权或作者的文本。</li><li><code>license</code>：当打印此对象时，会打印出一条消息“Type license() to see the full license text”，当调用此对象时，将以分页形式显示完整的许可证文本（每次显示一屏）。</li></ul><h4 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h4><p>主要内置类型有数字、序列、映射、类、实例和异常。<br>有些多项集类是可变的。它们用于添加、移除或重排其成员的方法将原地执行，并不返回特定的项，绝对不会返回多项集实例自身而是返回<code>None</code>。<br>有些操作受多种对象类型的支持；特别地，实际上所有对象都可以被比较、检测逻辑值，以及转换为字符串（使用<code>repr()</code>函数或略有差异的<code>str()</code>函数）。后一个函数是在对象由<code>print()</code>函数输出时被隐式地调用的。</p><h4 id="内置异常"><a href="#内置异常" class="headerlink" title="内置异常"></a>内置异常</h4><p>在Python中，所有异常必须为一个派生自<code>BaseException</code>的类的实例。在带有提及一个特定类的<code>except</code>子句的<code>try</code>语句中，该子句也会处理任何派生自该类的异常类（但不处理<strong>它所派生出的异常类</strong>）。 通过子类化创建的两个不相关异常类永远是不等效的，既使它们具有相同的名称。</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>本章节描述的模块提供了一系列专门的数据类型例如日期与时间、固定类型的数组、堆队列、同步队列与集合等。<br>Python同样提供一些内置的数据类型，特别的，<code>dict</code>，<code>list</code>，<code>set</code>与<code>frozenset</code> 以及<code>tuple</code>。 <code>str</code>类通常指<strong>Unicode 字符串</strong>，并且<code>bytes</code>通常指<strong>二进制数据</strong>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>datetime</code></td><td style="text-align:left">基本的日期和时间类型</td></tr><tr><td style="text-align:center"><code>calendar</code></td><td style="text-align:left">日历相关函数</td></tr><tr><td style="text-align:center"><code>collections</code></td><td style="text-align:left">容器数据类型</td></tr><tr><td style="text-align:center"><code>collections.abc</code></td><td style="text-align:left">容器的抽象基类</td></tr><tr><td style="text-align:center"><code>heapq</code></td><td style="text-align:left">堆队列算法</td></tr><tr><td style="text-align:center"><code>bisect</code></td><td style="text-align:left">数组二分查找算法</td></tr><tr><td style="text-align:center"><code>array</code></td><td style="text-align:left">处理数值类型高效的数组</td></tr><tr><td style="text-align:center"><code>weakref</code></td><td style="text-align:left">弱引用</td></tr><tr><td style="text-align:center"><code>types</code></td><td style="text-align:left">动态创建类型，为内建类型提供指代</td></tr><tr><td style="text-align:center"><code>copy</code></td><td style="text-align:left">浅层 (shallow) 和深层 (deep) 复制操作</td></tr><tr><td style="text-align:center"><code>pprint</code></td><td style="text-align:left">数据美化输出</td></tr><tr><td style="text-align:center"><code>reprlib</code></td><td style="text-align:left"><code>repr()</code>的可替换实现</td></tr><tr><td style="text-align:center"><code>enum</code></td><td style="text-align:left">对枚举（enumerations）进行支持</td></tr></tbody></table><h4 id="数学和数学模块"><a href="#数学和数学模块" class="headerlink" title="数学和数学模块"></a>数学和数学模块</h4><p>本章介绍的模块提供与数字和数学相关的函数和数据类型。<code>numbers</code>模块定义了数字类型的抽象层次结构。 <code>math</code>和<code>cmath</code>模块包含浮点数和复数的各种数学函数。<code>decimal</code>模块支持使用任意精度算术的十进制数的精确表示。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>numbers</code></td><td style="text-align:left">数字的抽象基类</td></tr><tr><td style="text-align:center"><code>math</code></td><td style="text-align:left">数学函数</td></tr><tr><td style="text-align:center"><code>decimal</code></td><td style="text-align:left">十进制定点和浮点运算</td></tr><tr><td style="text-align:center"><code>fractions</code></td><td style="text-align:left">分数</td></tr><tr><td style="text-align:center"><code>random</code></td><td style="text-align:left">生成伪随机数</td></tr><tr><td style="text-align:center"><code>statistics</code></td><td style="text-align:left">数学统计函数</td></tr></tbody></table><h4 id="文件和目录访问"><a href="#文件和目录访问" class="headerlink" title="文件和目录访问"></a>文件和目录访问</h4><p>本章中描述的模块处理磁盘文件和目录。 例如，有一些模块用于读取文件的属性，以可移植的方式操作路径以及创建临时文件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>pathlib</code></td><td style="text-align:left">面向对象的文件系统路径</td></tr><tr><td style="text-align:center"><code>os.path</code></td><td style="text-align:left">常见路径操作</td></tr><tr><td style="text-align:center"><code>fileinput</code></td><td style="text-align:left">提供多个输入流的迭代功能</td></tr><tr><td style="text-align:center"><code>stat</code></td><td style="text-align:left">解释<code>stat()</code>的结果</td></tr><tr><td style="text-align:center"><code>filecmp</code></td><td style="text-align:left">文件及目录的比较</td></tr><tr><td style="text-align:center"><code>tempfile</code></td><td style="text-align:left">产生临时文件及文件夹</td></tr><tr><td style="text-align:center"><code>glob</code></td><td style="text-align:left">Unix类型路径名扩展</td></tr><tr><td style="text-align:center"><code>fnmatch</code></td><td style="text-align:left">Unix类型文件名匹配</td></tr><tr><td style="text-align:center"><code>linecache</code></td><td style="text-align:left">随机访问文本行</td></tr><tr><td style="text-align:center"><code>shutil</code></td><td style="text-align:left">高层次文件操作接口</td></tr><tr><td style="text-align:center"><code>macpath</code></td><td style="text-align:left">Mac OS 9 路径操作函数</td></tr></tbody></table><p>更多：<br><strong>模块 os</strong>：操作系统接口，包括处理比<strong>Python文件对象</strong>更低级别文件的功能。<br><strong>模块 io</strong>：Python的内置 I/O 库，包括抽象类和一些具体的类，如文件 I/O 。<br><strong>内置函数 open()</strong>：使用 Python 打开文件进行读写的标准方法。</p><h2 id="高手级"><a href="#高手级" class="headerlink" title="高手级"></a>高手级</h2><h3 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h3><h4 id="函数式编程模块"><a href="#函数式编程模块" class="headerlink" title="函数式编程模块"></a>函数式编程模块</h4><p>本章里描述的模块提供了函数和类，以支持函数式编程风格和在可调用对象上的通用操作。<br>|LIBRARY|DESCRIPTION|<br>|:-:|:-|<br>|<code>itertools</code>|为高效循环而创建迭代器的函数|<br>|<code>functools</code>|高阶函数和可调用对象上的操作|<br>|<code>operator</code>|标准运算符替代函数|</p><h4 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h4><h3 id="开发生命周期相关"><a href="#开发生命周期相关" class="headerlink" title="开发生命周期相关"></a>开发生命周期相关</h3><p>该部分主要是用来支撑软件工程的某些生命周期所需的功能。</p><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><h4 id="调试和分析"><a href="#调试和分析" class="headerlink" title="调试和分析"></a>调试和分析</h4><h4 id="软件打包和分发"><a href="#软件打包和分发" class="headerlink" title="软件打包和分发"></a>软件打包和分发</h4><h2 id="骨灰级"><a href="#骨灰级" class="headerlink" title="骨灰级"></a>骨灰级</h2><h3 id="Python运行时服务"><a href="#Python运行时服务" class="headerlink" title="Python运行时服务"></a>Python运行时服务</h3><h3 id="自定义Python解释器"><a href="#自定义Python解释器" class="headerlink" title="自定义Python解释器"></a>自定义Python解释器</h3><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><h3 id="Python语言运行时服务"><a href="#Python语言运行时服务" class="headerlink" title="Python语言运行时服务"></a>Python语言运行时服务</h3><h2 id="任务相关"><a href="#任务相关" class="headerlink" title="任务相关"></a>任务相关</h2><p>该部分罗列的是与需求域相关的一些标准库。</p><h3 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h3><h4 id="文本处理服务"><a href="#文本处理服务" class="headerlink" title="文本处理服务"></a>文本处理服务</h4><p>本小节介绍的模块提供了广泛的字符串操作和其他文本处理服务。<br>在<strong>二进制数据服务</strong>之下描述的<code>codecs</code>模块也与文本处理高度相关。此外也请参阅Python内置字符串类型的文档文本序列类型 – <code>str</code>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>string</code></td><td style="text-align:left">常见的字符串操作</td></tr><tr><td style="text-align:center"><code>re</code></td><td style="text-align:left">正则表达式操作</td></tr><tr><td style="text-align:center"><code>difflib</code></td><td style="text-align:left">计算差异的辅助工具</td></tr><tr><td style="text-align:center"><code>textwrap</code></td><td style="text-align:left">文本自动换行与填充</td></tr><tr><td style="text-align:center"><code>unicodedata</code></td><td style="text-align:left">Unicode 数据库</td></tr><tr><td style="text-align:center"><code>stringprep</code></td><td style="text-align:left">因特网字符串预备</td></tr><tr><td style="text-align:center"><code>readline</code></td><td style="text-align:left">GNU readline 接口</td></tr><tr><td style="text-align:center"><code>rlcompleter</code></td><td style="text-align:left">GNU readline 的补全函数</td></tr></tbody></table><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h4><h4 id="数据压缩和存档"><a href="#数据压缩和存档" class="headerlink" title="数据压缩和存档"></a>数据压缩和存档</h4><h4 id="结构化标记处理工具"><a href="#结构化标记处理工具" class="headerlink" title="结构化标记处理工具"></a>结构化标记处理工具</h4><h4 id="二进制数据服务"><a href="#二进制数据服务" class="headerlink" title="二进制数据服务"></a>二进制数据服务</h4><p>本章介绍的模块提供了一些操作二进制数据的基本服务操作。 有关二进制数据的其他操作，特别是与文件格式和网络协议有关的操作，将在相关章节中介绍。<br>下面描述的一些库<strong>文本处理服务</strong>也可以使用<strong>ASCII</strong>兼容的二进制格式（例如<code>re</code>）或所有二进制数据（例如<code>difflib</code>）。<br>另外，请参阅Python的内置二进制数据类型的文档<strong>二进制序列类型</strong> — <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>struct</code></td><td style="text-align:left">将字节串解读为打包的二进制数据</td></tr><tr><td style="text-align:center"><code>codecs</code></td><td style="text-align:left">编解码器注册和相关基类</td></tr></tbody></table><h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><p>本章中描述的模块支持在磁盘上以持久形式存储 Python 数据。<code>pickle</code>和<code>marshal</code>模块可以将许多 Python 数据类型转换为字节流，然后从字节中重新创建对象。各种与 DBM 相关的模块支持一系列基于散列的文件格式，这些格式存储字符串到其他字符串的映射。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>pickle</code></td><td style="text-align:left">Python 对象序列化</td></tr><tr><td style="text-align:center"><code>copyreg</code></td><td style="text-align:left"><code>pickle</code>支撑函数的注册表</td></tr><tr><td style="text-align:center"><code>shelve</code></td><td style="text-align:left">Python 对象持久化</td></tr><tr><td style="text-align:center"><code>marshal</code></td><td style="text-align:left">Internal Python object serialization</td></tr><tr><td style="text-align:center"><code>dbm</code></td><td style="text-align:left">Interfaces to Unix “databases”</td></tr><tr><td style="text-align:center"><code>dbm.gnu</code></td><td style="text-align:left">GNU’s reinterpretation of dbm</td></tr><tr><td style="text-align:center"><code>dbm.ndbm</code></td><td style="text-align:left">Interface based on ndbm</td></tr><tr><td style="text-align:center"><code>dbm.dumb</code></td><td style="text-align:left">Portable DBM implementation</td></tr><tr><td style="text-align:center"><code>sqlite3</code></td><td style="text-align:left">SQLite 数据库 DB-API 2.0 接口模块</td></tr></tbody></table><h3 id="网络开发"><a href="#网络开发" class="headerlink" title="网络开发"></a>网络开发</h3><h4 id="网络和进程间通信"><a href="#网络和进程间通信" class="headerlink" title="网络和进程间通信"></a>网络和进程间通信</h4><h4 id="互联网数据处理"><a href="#互联网数据处理" class="headerlink" title="互联网数据处理"></a>互联网数据处理</h4><h4 id="互联网协议和支持"><a href="#互联网协议和支持" class="headerlink" title="互联网协议和支持"></a>互联网协议和支持</h4><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="多媒体服务"><a href="#多媒体服务" class="headerlink" title="多媒体服务"></a>多媒体服务</h4><h4 id="Tk图形用户"><a href="#Tk图形用户" class="headerlink" title="Tk图形用户"></a>Tk图形用户</h4><h4 id="加密服务"><a href="#加密服务" class="headerlink" title="加密服务"></a>加密服务</h4><h4 id="contextvars"><a href="#contextvars" class="headerlink" title="contextvars"></a>contextvars</h4><h4 id="程序框架界面"><a href="#程序框架界面" class="headerlink" title="程序框架界面"></a>程序框架界面</h4><h4 id="杂项服务"><a href="#杂项服务" class="headerlink" title="杂项服务"></a>杂项服务</h4><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Python3官方文档：<a href="https://docs.python.org/3/library/" target="_blank" rel="noopener">https://docs.python.org/3/library/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;善工必先利其器&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/learn/python/"/>
    
      <category term="stdlib" scheme="http://www.wrran.com/categories/learn/python/stdlib/"/>
    
    
      <category term="python-stdlib" scheme="http://www.wrran.com/tags/python-stdlib/"/>
    
  </entry>
  
  <entry>
    <title>python@cs-lang</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/python/index/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/python/index/</id>
    <published>2019-08-17T19:03:34.000Z</published>
    <updated>2019-08-17T19:05:36.842Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有牙齿的<code>python</code>更厉害</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;有牙齿的&lt;code&gt;python&lt;/code&gt;更厉害&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/learn/python/"/>
    
    
      <category term="python" scheme="http://www.wrran.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tag Plugins@hexo</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/hexo/tag_plugins/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/hexo/tag_plugins/</id>
    <published>2019-08-17T17:44:23.000Z</published>
    <updated>2019-08-17T18:13:49.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>授人以鱼不如授人以渔</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>hexo中的<code>tag plugins</code>给了我们在markdown中使用“局部函数”的能力。同时注意“标签插件”和“Front-matter”中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><h1 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h1><p>在文章中插入引言，可包含作者、来源和标题。<br></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">blockquote</span> [author[, <span class="name">source</span>]] [link] [source_link_title] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>在文章中插入代码。<br></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock <span class="string">[title]</span> <span class="string">[lang:language]</span> <span class="string">[url]</span> <span class="string">[link text]</span> %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p></p><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。<br>``` [language] [title] [url] [link text] code snippet ```</p><h1 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h1><p>在文章中插入“Pull quote”。<br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">pullquote</span> [class] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endpullquote</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h1><blockquote><p>jsFiddle 是一个Web开发人员的练习场，可在线编辑和测试 HTML、CSS、JavaScript代码片段。在 jsFiddle 编辑的代码，可以保存，也可分享给其他人，还可嵌入到网站中。</p></blockquote><p>在文章中嵌入“jsFiddle”。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h1><blockquote><p>Gist 是 Github 推出的基于 Git 的代码片段管理服务。用户可以提交自己的代码片段或任意的文本，可以作为个人的代码管理库、文档管理库等。</p></blockquote><p>在文章中嵌入 Gist。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><p>在文章中插入“iframe”。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><p>在文章中插入指定大小的图片。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] <span class="string">"title text 'alt text'"</span> %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>在文章中插入链接，并自动给外部链接添加<code>target=&quot;_blank&quot;</code>属性。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h1><p>插入<code>source/downloads/code</code>文件夹内的代码文件。<code>source/downloads/code</code>不是固定的，取决于你在配置文件中<code>code_dir</code>的配置。<br></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [<span class="keyword">lan</span><span class="variable">g:language</span>] path/<span class="keyword">to</span>/<span class="keyword">file</span> %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h1><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">youtube</span> video_id %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h1><blockquote><p>Vimeo 是一个高清视频播客网站，与大多数类似的视频分享网站不同，Vimeo允许上传1280X700的高清视频，上传后Vimeo会自动转码为高清视频，源视频文件可以自由下载，它达到了真正的高清视频标准。</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">vimeo</span> video_id %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h1><p>如果您想在文章中插入<code>Swig</code>标签，可以尝试使用”Raw”标签，以免发生解析异常。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> raw </span>%&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h1><p>在文章中使用<code>&lt;!-- more --&gt;</code>，那么<code>&lt;!-- more --&gt;</code>之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。<br>注意，摘要可能会被<code>Front Matter</code>中的<code>excerpt</code>覆盖。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>官方文档：<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;授人以鱼不如授人以渔&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="hexo" scheme="http://www.wrran.com/categories/learn/hexo/"/>
    
    
      <category term="tag-plugin" scheme="http://www.wrran.com/tags/tag-plugin/"/>
    
  </entry>
  
  <entry>
    <title>Using Cases@argparse</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/argparse/using_case/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/argparse/using_case/</id>
    <published>2019-08-17T17:23:34.000Z</published>
    <updated>2019-08-17T18:21:29.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔头虽烂可不要贪用哦</p></blockquote><a id="more"></a><h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.parse_args()</span><br></pre></td></tr></table></figure><p>将上述文件保存为<code>prog.py</code>，并在文件对应目录执行下述命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line">python prog.py --verbose</span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: --verbose</span></span><br><span class="line">python prog.py foo</span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: foo</span></span><br></pre></td></tr></table></figure><p></p><p>要点：</p><blockquote><p>The <code>--help</code> option, which can also be shortened to <code>-h</code>, is the only option we get for free (i.e. no need to specify it). Specifying anything else results in an error.</p></blockquote><h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'echo'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.echo)</span><br></pre></td></tr></table></figure><p>保存上述文件为<code>prog.py</code>，并在其目录下执行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: echo</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line">python prog.py foo</span><br><span class="line"><span class="comment"># foo</span></span><br></pre></td></tr></table></figure><p></p><p>向<strong>位置参数</strong>添加帮助信息：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'echo'</span>, help=<span class="string">'echo the string you use here'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.echo</span><br></pre></td></tr></table></figure><p></p><p>此时执行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python prog.py -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   echo        echo the string you use here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br></pre></td></tr></table></figure><p></p><p>指定<strong>位置参数</strong>类型：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'square'</span>, help=<span class="string">'display a square of a given number'</span>,</span><br><span class="line">                    type=int)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.square**<span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>并执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py four</span><br><span class="line"><span class="comment"># usage: prog.py [-h] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument square: invalid int value: 'four'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h1><p>先添加一个<strong>选项参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--verbosity'</span>, help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --verbosity 1</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbosity VERBOSITY]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#  -h, --help            show this help message and exit</span></span><br><span class="line"><span class="comment">#  --verbosity VERBOSITY</span></span><br><span class="line"><span class="comment">#                        increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>限定上述中的<code>--verbosity</code>只能接受指定或者不指定：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                    action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --verbose</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py --verbose 1</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbose]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: 1</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbose]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line"><span class="comment">#   --verbose   increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>注意上述执行<code>python prog.py --help</code>时提示信息的不同。</p><p>加入对应的“短”<strong>选项参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                    action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python prog.py -v</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help     show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbose  increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><h1 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h1><p>将<strong>位置参数</strong>与<strong>选项参数</strong>结合使用：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_arugument(<span class="string">'square'</span>, type=int,</span><br><span class="line">                     help=<span class="string">'display a square of a given number'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">                    help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'the square of &#123;&#125; equals &#123;&#125;'</span>.format(arg.square, answer))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: square</span></span><br><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 --verbose</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py --verbose 4</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br></pre></td></tr></table></figure><p></p><p>更复杂的实例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 -v</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v VERBOSITY] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -v/--verbosity: expected one argument</span></span><br><span class="line"><span class="comment"># python prog.py 4 -v 1</span></span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 -v 2</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -v 3</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p></p><p>注意到上例中<code>python prog.py 4 -v 3</code>并没有如我们所期望一样：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int, choices=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 -v 3</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v &#123;0,1,2&#125;] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)</span></span><br><span class="line">python prog.py 4 -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v &#123;0,1,2&#125;] square</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   square                display a square of a given number</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help            show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v &#123;0,1,2&#125;, --verbosity &#123;0,1,2&#125;</span></span><br><span class="line"><span class="comment">#                         increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>另外一种常见的设定参数的方式：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display the square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 -v</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 -vv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 --verbosity --verbosity</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -v 1</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: 1</span></span><br><span class="line">python prog.py 4 -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   square           display a square of a given number</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help       show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbosity  increase output verbosity</span></span><br><span class="line">python prog.py 4 -vvv</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p></p><p>同样在指令<code>python prog.py 4 -vvv</code>表现不对：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bugfix: replace == with &gt;=</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 -vvv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -vvvv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#  File "prog.py", line 11, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     if args.verbosity &gt;= 2:</span></span><br><span class="line"><span class="comment"># TypeError: unorderable types: NoneType() &gt;= int()</span></span><br></pre></td></tr></table></figure><p></p><p>通过为<strong>选项参数</strong>设定默认值，修复上述bug：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><h1 id="综合实例-1"><a href="#综合实例-1" class="headerlink" title="综合实例+"></a>综合实例+</h1><p>基于上例，这次我们让程序可以指定指数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: x, y</span></span><br><span class="line">python prog.py -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] x y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   x                the base</span></span><br><span class="line"><span class="comment">#   y                the exponent</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help       show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbosity</span></span><br><span class="line">python prog.py 4 2 -v</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br></pre></td></tr></table></figure><p></p><h1 id="实际使用示例"><a href="#实际使用示例" class="headerlink" title="实际使用示例"></a>实际使用示例</h1><p>在实际使用过程中，发现要使用的功能在下段代码中都有体现：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'CNN sentiment classificer'</span>)</span><br><span class="line"><span class="comment"># learning</span></span><br><span class="line">parser.add_argument(<span class="string">'-lr'</span>, type=float, default=<span class="number">0.001</span>,</span><br><span class="line">                    help=<span class="string">'initial learning rate [default: 0.001]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-epochs'</span>, type=int, default=<span class="number">256</span>,</span><br><span class="line">                    help=<span class="string">'number of epochs for train [default: 256]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-batch-size'</span>, type=int, default=<span class="number">64</span>,</span><br><span class="line">                    help=<span class="string">'batch size for training [default: 64]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-log-interval'</span>,  type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before logging training status [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-test-interval'</span>, type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before testing [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-save-interval'</span>, type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before saving [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-save-dir'</span>, type=str, default=<span class="string">'snapshot'</span>,</span><br><span class="line">                    help=<span class="string">'where to save the snapshot'</span>)</span><br><span class="line"><span class="comment"># data </span></span><br><span class="line">parser.add_argument(<span class="string">'-shuffle'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'shuffle the data every epoch'</span> )</span><br><span class="line"><span class="comment"># model</span></span><br><span class="line">parser.add_argument(<span class="string">'-dropout'</span>, type=float, default=<span class="number">0.5</span>,</span><br><span class="line">                    help=<span class="string">'the probability for dropout [default: 0.5]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-max-norm'</span>, type=float, default=<span class="number">3.0</span>,</span><br><span class="line">                    help=<span class="string">'l2 constraint of parameters [default: 3.0]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-embed-dim'</span>, type=int, default=<span class="number">300</span>,</span><br><span class="line">                    help=<span class="string">'number of embedding dimension [default: 300]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-filter-stopwords'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'whether to filter out stop words [default: False]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-embed-pretrain'</span>, type=str, default=<span class="string">'./other/glove.840B.300d.filtered.npy'</span>,</span><br><span class="line">                    help=<span class="string">'path of pretrained word embedding [default: ./other/glove.840B.300d.filtered.npy]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-kernel-num'</span>, type=int, default=<span class="number">32</span>,</span><br><span class="line">                    help=<span class="string">'number of each kind of kernel [default: 32]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-kernel-sizes'</span>, type=str, default=<span class="string">'3,4,5'</span>,</span><br><span class="line">                    help=<span class="string">'comma-separated kernel size to use for convolution'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-static'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'fix the embedding'</span>)</span><br><span class="line"><span class="comment"># device</span></span><br><span class="line">parser.add_argument(<span class="string">'-device'</span>, type=int, default=<span class="number">-1</span>,</span><br><span class="line">                    help=<span class="string">'device to use for iterate data, -1 mean cpu [default: -1]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-no-cuda'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'disable the gpu'</span> )</span><br><span class="line"><span class="comment"># option</span></span><br><span class="line">parser.add_argument(<span class="string">'-snapshot'</span>, type=str, default=<span class="literal">None</span>,</span><br><span class="line">                    help=<span class="string">'filename of model snapshot [default: None]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-predict'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'predict the given textdata'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-predict-dir'</span>, type=str, default=<span class="string">'prediction'</span>,</span><br><span class="line">                    help=<span class="string">"where to save the prediction [default: prediction]"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-test'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'train or test'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># update args about data &amp; device &amp; option</span></span><br><span class="line">args.save_dir = os.path.join(</span><br><span class="line">    args.save_dir,</span><br><span class="line">    datetime.datetime.now().strftime(<span class="string">'%Y%m%d_%H%M%S'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.predict <span class="keyword">and</span> <span class="keyword">not</span> os.path.isdir(args.save_dir):</span><br><span class="line">    os.makedirs(args.save_dir)</span><br><span class="line">args.cuda = (<span class="keyword">not</span> args.no_cuda) <span class="keyword">and</span> torch.cuda.is_available(); <span class="keyword">del</span> args.no_cuda</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nParameters:'</span>)</span><br><span class="line"><span class="keyword">for</span> attr, value <span class="keyword">in</span> sorted(args.__dict__.items()):</span><br><span class="line">    print(<span class="string">'\t&#123;&#125;=&#123;&#125;'</span>.format(attr.upper(), value))</span><br></pre></td></tr></table></figure><p></p><h1 id="互斥的选项参数"><a href="#互斥的选项参数" class="headerlink" title="互斥的选项参数"></a>互斥的选项参数</h1><p>该节再引入一个方法<code>add_mutually_exclusive_group()</code>，该方法用来解决两个相斥的参数，如<code>--quiet</code>和<code>--verbose</code>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 2</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 2 -q</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 2 -v</span><br><span class="line"><span class="comment"># 4 to the power 2 equals 16</span></span><br><span class="line">python prog.py 4 2 -vq</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span></span><br><span class="line">python prog.py 4 2 -v --quiet</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span></span><br></pre></td></tr></table></figure><p></p><p>最后，我们还可以通过如下方式告诉使用者程序的用途：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"calculate X to the power of Y"</span>)</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># calculate X to the power of Y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   x              the base</span></span><br><span class="line"><span class="comment">#   y              the exponent</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help     show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbose</span></span><br><span class="line"><span class="comment">#   -q, --quiet</span></span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>想更多的了解<code>argparse</code>的内部机制而非仅限于使用，可以参阅<a href="http://wrran.com/blog/2019/08/18/learn/argparse/using_case/" target="_blank" rel="noopener">argparse@python</a>。</p><p><a href="https://docs.python.org/2/howto/argparse.html" target="_blank" rel="noopener">Argparse Tutorial</a><br><a href="http://www.jianshu.com/p/fef2d215b91d" target="_blank" rel="noopener">python argparse用法总结</a><br><a href="https://docs.python.org/2/library/argparse.html#module-argparse" target="_blank" rel="noopener">argparse - Python Software Foundation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;笔头虽烂可不要贪用哦&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.wrran.com/categories/python/"/>
    
      <category term="argparse" scheme="http://www.wrran.com/categories/python/argparse/"/>
    
    
      <category term="argparse" scheme="http://www.wrran.com/tags/argparse/"/>
    
  </entry>
  
  <entry>
    <title>argparse@python</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/argparse/index/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/argparse/index/</id>
    <published>2019-08-17T16:00:00.000Z</published>
    <updated>2019-08-17T18:58:25.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>argparse</code>, Parser for command-line options, arguments and sub-commands.</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>命令行是一个程序软件的界面；设计良好的命令行界面可以提升软件的易使用性。<code>argparse</code>是python中一个负责解析命令、子命令、参数与选项的工具。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>此处主要介绍一些相关的基本概念，特别是“命令”、“子命令”、“参数”与“选项”。</p><p><strong>命令</strong>是软件实体的主入口；<br><strong>子命令</strong>则是负责该软件实体中更细节的一些功能。</p><p>软件实体需要输入以确定自己的行为，输入根据变更的频度顺次为：</p><ul><li>参数（经常）</li><li>选项（有时）</li><li>配置文件（偶尔）</li><li>数据文件（极少）</li></ul><p>之外，变更频次越低的越能更大程度改变软件实体的行为；因此对频次越低的输入进行修改的用户往往是使用经验也十分丰富。</p><!-- 对应这些概念，可见以下实例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ls pypy</span><br><span class="line">ls -l</span><br><span class="line">ls --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>如上所示，程序会包含以下几部分：</p><ul><li>程序名</li><li>位置参数</li><li>默认参数（如，执行命令<code>ls</code>等效于<code>ls .</code>）</li><li>选项参数（如，命令<code>ls -l</code>和<code>ls --help</code>）<br>–&gt;</li></ul><p><code>argparse</code>对于这些不同的指令解析提供了很好的技术支持，更多详情可以参见<a href="http://wrran.com/blog/2019/08/18/learn/argparse/using_case/">Using Cases@argparse</a>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Python3官方文档：<a href="https://docs.python.org/3/library/argparse.html">https://docs.python.org/3/library/argparse.html</a></p>-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;argparse&lt;/code&gt;, Parser for command-line options, arguments and sub-commands.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/learn/python/"/>
    
    
      <category term="argparse" scheme="http://www.wrran.com/tags/argparse/"/>
    
  </entry>
  
  <entry>
    <title>bash入门@linux</title>
    <link href="http://www.wrran.com//blog/2019/08/17/learn/bash/index/"/>
    <id>http://www.wrran.com//blog/2019/08/17/learn/bash/index/</id>
    <published>2019-08-17T14:21:55.000Z</published>
    <updated>2019-08-18T04:11:37.188Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>B</strong>ourne-<strong>A</strong>gain <strong>SH</strong>ell; <strong>B</strong>orn <strong>A</strong>gain <strong>SH</strong>ell</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>入门指的是由<em>使用</em>驱动的学习。</p><h1 id="Six-Core-Responsibility"><a href="#Six-Core-Responsibility" class="headerlink" title="Six Core Responsibility"></a>Six Core Responsibility</h1><p>Shell的责任（responsibility，职责是duty）有：</p><ol><li>程序执行：负责执行终端中指定的所有程序；</li><li>变量及其替换：只要在命令行中将变量名放置在<code>$</code>之后，就会被bash替换为对应的变量值；</li><li>I/O重定向：负责处理输入/输出的重定向；指令有<code>&gt;</code>（写入），<code>&lt;</code>（读入），<code>&gt;&gt;</code>（追写），<code>&lt;&lt;</code>（？）；</li><li>管道：负责将前一个命令的标准输出连接到之后命令的标准输入；管道符号为<code>|</code>，如<code>who | wc -l</code>；</li><li>环境控制：定制个人环境的命令；个人环境包括主目录（<code>~</code>）、命令行提示符及用于搜索待执行程序的目录列表；</li><li>解释型编程语言：内建的解释型编程语言；分析所遇到的每一条语句，然后执行所发现的有效命令。</li></ol><h1 id="Variable-amp-its-Replacement"><a href="#Variable-amp-its-Replacement" class="headerlink" title="Variable &amp; its Replacement"></a>Variable &amp; its Replacement</h1><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>匹配变量的正则表达式为<code>[a-zA-Z_][a-zA-Z0-9_]*</code>。<br><strong>变量赋值</strong>形如<code>variable=value</code>；<br><strong>显示变量值</strong>形如<code>echo $variable</code>.</p><p>bash在执行指令时，按照如下顺序进行操作：</p><ol start="0"><li><strong>命令分割</strong>：依据空格字符（一个或多个）分割命令与参数；</li><li><strong>变量替换</strong>：扫描命令行，用变量值替换变量名；</li><li><strong>引用字符替换</strong>：扫描上一步的输出，将<em>引用字符</em>替换为其语义所指表示；</li><li><strong>命令执行</strong>：执行上一步的输出。</li></ol><p>特殊字符有<code>*</code>，代表当前目录下的所有文件及文件名；之外，还有四种不同的引用字符：<code>&#39;</code>（单引号）/<code>&quot;</code>（双引号）/<code>\</code>/ <strong>`</strong>（反引号）;<br>其中除斜杠外，其他引用字符都需要成对出现。</p><p><code>&#39;</code>（单引号）：被单引号包裹的特殊字符将被忽略；<br><code>&quot;</code>（双引号）：被双引号包裹的字符大部分都会被保护，除了三种字符<code>$</code>（美元字符）/<code>\</code>（反斜线）/ <strong>`</strong>（反引号）；<br><code>\</code>（反斜线）：反斜线大部分情况下相当于在单个字符周围放置单引号；当反斜线出现在输入行的最后一个，起到续行符的作用；<br><strong>`</strong>（反引号）：反引号一般包裹待执行的命令；命令输出会被插入到它的当前所在位置上；但注意更提倡使用与之等价的 <code>$(command)</code>。</p><p>示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;&lt;&lt; echo \$x &gt;&gt;&gt; displays the value of x, which is <span class="variable">$x</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;&lt;&lt; echo \$x &gt;&gt;&gt; displays the value of x, which is'</span> <span class="variable">$x</span></span><br><span class="line"><span class="built_in">echo</span> Your current working directory is $(<span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure><p></p><h1 id="Passing"><a href="#Passing" class="headerlink" title="Passing"></a>Passing</h1><h1 id="Everyday-Commands"><a href="#Everyday-Commands" class="headerlink" title="Everyday Commands"></a>Everyday Commands</h1><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><blockquote><p>别名是shell提供的一种可以用于自定义命令的快捷记法。</p></blockquote><p>shell保存了一个别名列表，在命令输入之后，会在执行其他替换操作之前首先搜索该列表。如果命令行的第一个单词是别名，将该别名替换成对应的文本。</p><p>其形式如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> name=string</span><br></pre></td></tr></table></figure><p></p><p>示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt;ourne-&lt;strong&gt;A&lt;/strong&gt;gain &lt;strong&gt;SH&lt;/strong&gt;ell; &lt;strong&gt;B&lt;/strong&gt;orn &lt;strong&gt;A&lt;/strong&gt;gain &lt;strong&gt;SH&lt;/strong&gt;ell&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
      <category term="bash" scheme="http://www.wrran.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>pytest@python</title>
    <link href="http://www.wrran.com//blog/2019/08/16/learn/pytest/index/"/>
    <id>http://www.wrran.com//blog/2019/08/16/learn/pytest/index/</id>
    <published>2019-08-16T11:16:15.000Z</published>
    <updated>2019-08-17T18:36:17.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不失败即成功</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <code>pytest</code> framework makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries.</p><p><strong>Features</strong><br>该测试框架有以下特征：</p><ul><li>详细的测试失败日志；</li><li>自动发现需要测试的组件和/或方法；</li><li>提供模块化的设施，可支持或小或大或参数化的复杂场景；</li><li>支持测试框架<code>unittest</code>及<code>nose</code>；</li><li>支持插件，已有315+外部插件；社区良好。</li></ul><p><strong>Documentation</strong><br><a href="http://docs.pytest.org/en/latest/contents.html#toc" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/contents.html#toc</a></p><h1 id="Modular-Fixtures"><a href="#Modular-Fixtures" class="headerlink" title="Modular Fixtures"></a>Modular Fixtures</h1><p>More info sees <a href="http://docs.pytest.org/en/latest/fixture.html#fixture" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/fixture.html#fixture</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://docs.pytest.org/en/latest/" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;不失败即成功&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="pytest" scheme="http://www.wrran.com/categories/learn/pytest/"/>
    
    
      <category term="pytest" scheme="http://www.wrran.com/tags/pytest/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Hexo</title>
    <link href="http://www.wrran.com//blog/2019/08/16/learn/hexo/index/"/>
    <id>http://www.wrran.com//blog/2019/08/16/learn/hexo/index/</id>
    <published>2019-08-16T05:40:00.000Z</published>
    <updated>2019-08-17T17:52:32.282Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="Structure-of-Workspace"><a href="#Structure-of-Workspace" class="headerlink" title="Structure of Workspace"></a>Structure of Workspace</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p></p><p>新建完成后，指定文件夹的目录如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p></p><p>文件或文件夹的功能如下：</p><table><thead><tr><th style="text-align:center">ITEM</th><th style="text-align:left">NOTE</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center">_config.yml</td><td style="text-align:left">配置文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">package.json</td><td style="text-align:left">应用程序的信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">scaffolds</td><td style="text-align:left">模版文件夹</td><td style="text-align:left">新建文章时，将根据scaffold来建立文件，填充指定内容。</td></tr><tr><td style="text-align:center">source</td><td style="text-align:left">资源文件夹</td><td style="text-align:left">除<code>_posts</code>文件夹之外，开头命名为<code>_</code>的文件/文件夹和隐藏的文件将会被忽略。<code>Markdown</code>和<code>HTML</code>文件会被解析并放到 <code>public</code>文件夹，而其他文件会被拷贝过去。</td></tr><tr><td style="text-align:center">themes</td><td style="text-align:left">主题文件夹</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">db.json</td><td style="text-align:left"><strong>生成</strong>的缓存文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">public</td><td style="text-align:left"><strong>生成</strong>的静态文件夹</td><td style="text-align:left">?</td></tr></tbody></table><p>More Info see <a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup</a>.</p><h1 id="Structure-of-Configure"><a href="#Structure-of-Configure" class="headerlink" title="Structure of Configure"></a>Structure of Configure</h1><p>More info see <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a>.</p><p>您可以在<code>_config.yml</code>中修改大部分的配置；配置往往与命令相关；暂略详情。<br></p><h1 id="Interface-of-Commands"><a href="#Interface-of-Commands" class="headerlink" title="Interface of Commands"></a>Interface of Commands</h1><p>More info see <a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands</a>.</p><table><thead><tr><th style="text-align:left">COMMANDS</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th><th style="text-align:center">DEMO</th><th style="text-align:left">NOTE</th></tr></thead><tbody><tr><td style="text-align:left"><strong>init</strong></td><td style="text-align:left">新建一个网站</td><td style="text-align:left">默认在当前文件夹建立网站</td><td style="text-align:center"><code>hexo init [folder=.]</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>new</strong></td><td style="text-align:left">新建一篇文章</td><td style="text-align:left">如果<code>title</code>包含空格的话，请使用引号括起来</td><td style="text-align:center"><code>hexo new [layout=default_layout@config] &lt;title&gt;</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#new" target="_blank" rel="noopener">path/replace/slug</a></td></tr><tr><td style="text-align:left"><strong>generate</strong></td><td style="text-align:left">生成静态文件</td><td style="text-align:left">简写为<code>hexo g</code></td><td style="text-align:center"><code>hexo generate</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#generate" target="_blank" rel="noopener">deploy/watch/bail/force</a></td></tr><tr><td style="text-align:left"><strong>publish</strong></td><td style="text-align:left">发表草稿</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo publish [layout] &lt;filename&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>server</strong></td><td style="text-align:left">启动服务器</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo server [--port=4000]</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#server" target="_blank" rel="noopener">port/static/log</a></td></tr><tr><td style="text-align:left"><strong>deploy</strong></td><td style="text-align:left">部署网站</td><td style="text-align:left">简写为<code>hexo g</code></td><td style="text-align:center"><code>hexo deploy</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#deploy" target="_blank" rel="noopener">generate</a></td></tr><tr><td style="text-align:left"><strong>render</strong></td><td style="text-align:left">渲染文件</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo render &lt;file1&gt; [file2] ...</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#render" target="_blank" rel="noopener">output</a></td></tr><tr><td style="text-align:left"><strong>migrate</strong></td><td style="text-align:left">从其他博客系统迁移内容</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo migrate &lt;type&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>clean</strong></td><td style="text-align:left">清除缓存文件和已生成的静态文件</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo clean</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>list</strong></td><td style="text-align:left">列出网站资料</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo list &lt;type&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>version</strong></td><td style="text-align:left">显示Hexo版本</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo version</code></td><td style="text-align:left">-</td></tr></tbody></table><table><thead><tr><th style="text-align:center">OPTIONS</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>--safe</code></td><td style="text-align:left">在安全模式下，不会载入插件和脚本</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--debug</code></td><td style="text-align:left">在终端中显示调试信息并记录到<code>debug.log</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--silent</code></td><td style="text-align:left">隐藏终端信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--config</code></td><td style="text-align:left">覆写配置文件的路径</td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#自定义配置文件的路径" target="_blank" rel="noopener">细则</a></td></tr><tr><td style="text-align:center"><code>--cwd /path/to/cwd</code></td><td style="text-align:left">自定义当前工作目录</td><td style="text-align:left"><strong>C</strong>urrent <strong>W</strong>orking <strong>D</strong>irectory</td></tr><tr><td style="text-align:center"><code>--draft</code></td><td style="text-align:left">显示<code>source/_drafts</code>文件夹中的草稿文章</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="Interoperability-of-Frameworks"><a href="#Interoperability-of-Frameworks" class="headerlink" title="Interoperability of Frameworks"></a>Interoperability of Frameworks</h1><p>非核心功能。该部分主要是将其他框架的博客转换成合法的hexo结构，多通过其他包来完成该功能；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/migration</a>.</p><h1 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h1><p>该部分是面向终端用户的教程。</p><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>可以通过修改<code>_config.yml</code>中的<code>default_layout</code>参数来指定默认布局。<br>More info see <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a>.</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p><code>Front-matter</code>是文件最上方以<code>---</code>分隔的区域，用于指定个别文件的变量。<br>More info see <a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a>.</p><h3 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins"></a>Tag Plugins</h3><p>标签插件和<code>Front-matter</code>中的标签不同，它们是用于在文章中快速插入特定内容的插件。<br>More info see <a href="http://wrran.com/blog/2019/08/18/learn/hexo/tag_plugins/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/18/learn/hexo/tag_plugins/</a>.</p><h3 id="Asset-Folders"><a href="#Asset-Folders" class="headerlink" title="Asset Folders"></a>Asset Folders</h3><p>资源（Asset）代表<code>source</code>文件夹中除了文章以外的所有文件。如将少量图片放在<code>source/images</code>文件夹中，后通过<code>![](/images/image.jpg)</code>访问。<br>More info see <a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a>.</p><h3 id="Data-Files"><a href="#Data-Files" class="headerlink" title="Data Files"></a>Data Files</h3><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用<strong>Hexo 3.</strong>新增的「数据文件」功能。<br>此功能会载入<code>source/_data</code>内的YAML或JSON文件，如此一来您便能在网站中复用这些文件了。<br>More info see <a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a>.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>该部分阐述<code>hexo server</code>相关问题，已移植到单独的模块中进行开发；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/server" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/server</a>.</p><h2 id="Generating"><a href="#Generating" class="headerlink" title="Generating"></a>Generating</h2><p>生成静态文件；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/generating" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/generating</a>.</p><h2 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h2><p>部署网站；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/deployment" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/deployment</a>.</p><h1 id="Customization"><a href="#Customization" class="headerlink" title="Customization"></a>Customization</h1><p>More info see <a href="https://hexo.io/docs/permalinks" target="_blank" rel="noopener">https://hexo.io/docs/permalinks</a>.<br></p><h2 id="Permalinks"><a href="#Permalinks" class="headerlink" title="Permalinks"></a>Permalinks</h2><p>您可以在<code>_config.yml</code>配置中调整网站的永久链接或者在每篇文章的Front-matter中指定。<br>More info see <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/permalinks</a>.</p><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><p>创建Hexo主题；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/themes</a>.</p><h2 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h2><p>高级用户如何通过模板来定制网站内容的呈现方式；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/templates" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/templates</a>.</p><h3 id="Helpers"><a href="#Helpers" class="headerlink" title="Helpers"></a>Helpers</h3><p>辅助函数帮助您在模版中快速插入内容。辅助函数不能在源文件中使用。<br>More info see <a href="https://hexo.io/zh-cn/docs/helpers" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/helpers</a>.</p><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>骨灰级用户的变量索引表。<br>More info see <a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/variables</a>.</p><h2 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h2><p>常见需求；若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/internationalization" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/internationalization</a>.</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>面向将入开发级用户；Hexo有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/plugins</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo.io</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="hexo" scheme="http://www.wrran.com/categories/learn/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.wrran.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>functools @ python</title>
    <link href="http://www.wrran.com//blog/2019/08/16/cheatsheet/reference/python-functools/"/>
    <id>http://www.wrran.com//blog/2019/08/16/cheatsheet/reference/python-functools/</id>
    <published>2019-08-16T05:30:00.000Z</published>
    <updated>2019-08-16T09:28:43.365Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The <code>functools</code> module is for higher-order functions.</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <code>functools</code> module is for higher-order functions: functions that act on or return other functions. In general, any callable object can be treated as a function for the purposes of this module</p><p>The functools module defines the following functions:</p><h1 id="cmp-to-key-func"><a href="#cmp-to-key-func" class="headerlink" title="cmp_to_key(func)"></a>cmp_to_key(func)</h1><blockquote><p>Transform an old-style comparison function to a <em>key function</em>.</p></blockquote><p>Used with tools that accept key functions (such as <code>sorted()</code>, <code>min()</code>, <code>max()</code>, <code>heapq.nlargest()</code>, <code>heapq.nsmallest()</code>, <code>itertools.groupby()</code>). This function is primarily used as a transition tool for programs being converted to Python 3 where comparison functions are no longer supported.</p><p>A <em>comparison function</em> is any callable that accept two arguments, compares them, and returns a negative number for less-than, zero for equality, or a positive number for greater-than. A key function is a callable that accepts one argument and returns another value to be used as the sort key.</p><p>A <a href="https://docs.python.org/2/glossary.html#term-key-function" target="_blank" rel="noopener"><em>key function</em></a> or collation function is a callable that returns a value used for sorting or ordering.</p><h1 id="total-ordering-cls"><a href="#total-ordering-cls" class="headerlink" title="total_ordering(cls)"></a>total_ordering(cls)</h1><blockquote><p>Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.</p></blockquote><p>This simplifies the effort involved in specifying all of the possible rich comparison operations:</p><p>The class must define one of <code>__lt__()</code>, <code>__le__()</code>, <code>__gt__()</code>, or <code>__ge__()</code>. In addition, the class should supply an <code>__eq__()</code> method.</p><h1 id="reduce-function-iterable-initializer"><a href="#reduce-function-iterable-initializer" class="headerlink" title="reduce(function, iterable [, initializer])"></a>reduce(function, iterable [, initializer])</h1><blockquote><p>This is the same function as <a href="https://docs.python.org/2/library/functions.html#reduce" target="_blank" rel="noopener">reduce()</a>.</p></blockquote><p>It is made available in this module to allow writing code mode forward-compatible with Python 3.</p><h1 id="partial-fun-args-keywords"><a href="#partial-fun-args-keywords" class="headerlink" title="partial(fun [,*args] [, **keywords])"></a>partial(fun [,*args] [, **keywords])</h1><blockquote><p>Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords. If more arguments are supplied to the call, they are appended to args. If additional keyword arguments are supplied, they extend and override keywords. Roughly equivalent to:</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(func, *args, **keywords)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span><span class="params">(*fargs, **fkeywords)</span>:</span></span><br><span class="line">        newkeywords = keywords.copy()</span><br><span class="line">        newkeywords.update(fkeywords)</span><br><span class="line">        <span class="keyword">return</span> func(*(args + fargs), **newkeywords)</span><br><span class="line">    newfunc.func = func</span><br><span class="line">    newfunc.args = args</span><br><span class="line">    newfunc.keywords = keywords</span><br><span class="line">    <span class="keyword">return</span> newfunc</span><br></pre></td></tr></table></figure><h2 id="partial-objects"><a href="#partial-objects" class="headerlink" title="partial objects"></a>partial objects</h2><p>partial objects are callable objects created by <code>partial()</code>. They have three read-only attributes:</p><ul><li><code>func</code> - A callable object or function. Calls to the partial object will be forwarded to func with new arguments and keywords.</li><li><code>args</code> - The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.</li><li><code>keywords</code> - The keyword arguments that will be supplied when the partial object is called.</li></ul><p><strong>partial objects</strong> are like <em>function objects</em> in that they are callable, weak referencable, and can have attributes. There are some important differences:</p><ul><li>For instance, the <code>__name__</code> and <code>__doc__</code> attributes are not created automatically.</li><li>Also, partial objects defined in classes behave like static methods and do not transform into bound methods during instance attribute look-up</li></ul><h1 id="update-wrapper-wrapper-wrapped-assigned-updated"><a href="#update-wrapper-wrapper-wrapped-assigned-updated" class="headerlink" title="update_wrapper(wrapper, wrapped [, assigned] [, updated])"></a>update_wrapper(wrapper, wrapped [, assigned] [, updated])</h1><blockquote><p>Update a <em>wrapper</em> function to look like the <em>wrapped</em> function.</p></blockquote><p>The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants <code>WRAPPER_ASSIGNMENTS</code> (which assigns to the wrapper function’s <code>__name__</code>, <code>__module__</code> and <code>__doc__</code>, the documentation string) and <code>WRAPPER_UPDATES</code> (which updates the wrapper function’s <code>__dict__</code>, i.e. the instance dictionary).</p><h1 id="wraps-wrapped-assigned-updated"><a href="#wraps-wrapped-assigned-updated" class="headerlink" title="wraps(wrapped [, assigned] [, updated])"></a>wraps(wrapped [, assigned] [, updated])</h1><blockquote><p>This is a convenienve function for invokeing <code>update_wrapper()</code> as a function decorator when defining a wrapper function.</p></blockquote><p>It is equivalent to <code>partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)</code>. For example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Calling decorated funcion'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwds)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    """<span class="title">Docstring</span>"""</span></span><br><span class="line"><span class="function">    <span class="title">print</span> '<span class="title">Called</span> <span class="title">example</span> <span class="title">function</span>'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span><span class="params">()</span></span></span><br><span class="line"><span class="function"># <span class="title">Calling</span> <span class="title">decorated</span> <span class="title">function</span></span></span><br><span class="line"><span class="function"># <span class="title">Called</span> <span class="title">example</span> <span class="title">function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span>.<span class="title">__name__</span></span></span><br><span class="line"><span class="function"># '<span class="title">example</span>'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span>.<span class="title">__doc__</span></span></span><br><span class="line"><span class="function"># '<span class="title">Docstring</span>'</span></span><br></pre></td></tr></table></figure><p>Withoud the use of this decorator factory, the name of the example function would have been <code>wrapper</code>, and the docstring of the original <code>example()</code> would have been lost.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://docs.python.org/2/library/functools.html" target="_blank" rel="noopener">functools - Higher-order functions and operations on callable objects</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;The &lt;code&gt;functools&lt;/code&gt; module is for higher-order functions.&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://www.wrran.com/categories/tools/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/tools/python/"/>
    
    
      <category term="cheatsheet" scheme="http://www.wrran.com/tags/cheatsheet/"/>
    
      <category term="functools" scheme="http://www.wrran.com/tags/functools/"/>
    
  </entry>
  
  <entry>
    <title>itertools @ python</title>
    <link href="http://www.wrran.com//blog/2019/08/16/cheatsheet/reference/python-itertools/"/>
    <id>http://www.wrran.com//blog/2019/08/16/cheatsheet/reference/python-itertools/</id>
    <published>2019-08-16T03:30:00.000Z</published>
    <updated>2019-08-16T09:31:28.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. Each has been recast in a form suitable for Python.<br>@<code>itertools</code></p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p><h1 id="Infinite-Iterators"><a href="#Infinite-Iterators" class="headerlink" title="Infinite Iterators"></a>Infinite Iterators</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th><th style="text-align:left">Example</th><th style="text-align:left">Result</th></tr></thead><tbody><tr><td style="text-align:left">count(start [, step])</td><td style="text-align:left">start, start+step, start+2*step, …</td><td style="text-align:left"><code>count(10)</code></td><td style="text-align:left"><code>10 11 12 ...</code></td></tr><tr><td style="text-align:left">cycle(p)</td><td style="text-align:left">p0, p1, …plast, p0, p1, …</td><td style="text-align:left"><code>cycle(&#39;ABCD&#39;)</code></td><td style="text-align:left"><code>A B C D A B C D ...</code></td></tr><tr><td style="text-align:left">repeat(elem [, n])</td><td style="text-align:left">elem, elem, elem, … endlessly or up to n times</td><td style="text-align:left"><code>repeat(10, 3)</code></td><td style="text-align:left"><code>10, 10, 10</code></td></tr></tbody></table><h1 id="Iterators-terminating-on-the-shortest"><a href="#Iterators-terminating-on-the-shortest" class="headerlink" title="Iterators terminating on the shortest"></a>Iterators terminating on the shortest</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th><th style="text-align:left">Example</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">chain(p, q, …)</td><td style="text-align:left">p0, p1, …, plast, q0, q1, …</td><td style="text-align:left"><code>chain(&#39;ABC&#39;, &#39;DEF&#39;)</code></td><td style="text-align:left"><code>A B C D E F</code></td></tr><tr><td style="text-align:left">compress(data, selectors)</td><td style="text-align:left">(d[0] if s[0]), (d[1] if s[1]), …</td><td style="text-align:left"><code>compress(&#39;ABCDEF&#39;, [1,0,1,0,1,1]</code>)</td><td style="text-align:left"><code>A C E F</code></td></tr><tr><td style="text-align:left">dropwhile(pred, seq)</td><td style="text-align:left">seq[n], seq[n+1], … starting when pred fails</td><td style="text-align:left"><code>dropwhile(lambda x: x&lt;5, [1,4,6,4,1])</code></td><td style="text-align:left"><code>6 4 1</code></td></tr><tr><td style="text-align:left">takewhile(pred, seq)</td><td style="text-align:left">seq[0], seq[1], … until pred fails</td><td style="text-align:left"><code>takewhile(lambda x: x&lt;5, [1,4,6,4,1])</code></td><td style="text-align:left"><code>1 4</code></td></tr><tr><td style="text-align:left">groupby(iterable [, keyfun])</td><td style="text-align:left">sub-iterators grouped by value of keyfunc(v)</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">ifilter(pred, seq)</td><td style="text-align:left">elements of seq where pred(elem) is true</td><td style="text-align:left"><code>ifilter(lambda x: x%2, range(10))</code></td><td style="text-align:left"><code>1 3 5 7 9</code></td></tr><tr><td style="text-align:left">ifilterfalse(pred, seq)</td><td style="text-align:left">elements of seq where pred(elem) is false</td><td style="text-align:left"><code>ifilterfalse(lambda x: x%2, range(10))</code></td><td style="text-align:left"><code>0 2 4 6 8</code></td></tr><tr><td style="text-align:left">islice(seq [, start,] stop [, step])</td><td style="text-align:left">elements from seq[start:stop:step]</td><td style="text-align:left"><code>islice(&#39;ABCDEFG&#39;, 2, None)</code></td><td style="text-align:left"><code>C D E F G</code></td></tr><tr><td style="text-align:left">imap(fun, p, q, …)</td><td style="text-align:left">func(p0, q0, …), func(p1, q1, …)</td><td style="text-align:left"><code>imap(pow, (2,3,10), (5,2,3))</code></td><td style="text-align:left"><code>32 9 1000</code></td></tr><tr><td style="text-align:left">starmap(func, seq)</td><td style="text-align:left">func(<em>seq[0]), func(</em>seq[1]), …</td><td style="text-align:left"><code>starmap(pow, [(2,5), (3,2), (10,3)])</code></td><td style="text-align:left"><code>32 9 1000</code></td></tr><tr><td style="text-align:left">tee(it, n)</td><td style="text-align:left">it1, it2, … itn splits one iterator into n</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">izip(p, q, …)</td><td style="text-align:left">(p[0],q[0]), (p[1], q[1]), …</td><td style="text-align:left"><code>izip(&#39;ABCD&#39;, &#39;xy&#39;)</code></td><td style="text-align:left"><code>Ax By</code></td></tr><tr><td style="text-align:left">izip_longest(p, q, …)</td><td style="text-align:left">(p[0],q[0]), (p[1],q[1]), …</td><td style="text-align:left"><code>izip\_longest(&#39;ABCD&#39;, &#39;xy&#39;, fillvalue=&#39;-&#39;)</code></td><td style="text-align:left"><code>Ax By C- D-</code></td></tr></tbody></table><h1 id="Combination-generators"><a href="#Combination-generators" class="headerlink" title="Combination generators"></a>Combination generators</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">product(p, q, … [repeat=1])</td><td style="text-align:left">cartesian prduct, equivalent to a nested for-loop</td></tr><tr><td style="text-align:left">product(‘ABCD’, repeat=2)</td><td style="text-align:left">AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</td></tr><tr><td style="text-align:left">permutations(p [, r])</td><td style="text-align:left">r-length tuples, all possible orderings, no repeated elements</td></tr><tr><td style="text-align:left">permutations(‘ABCD’, 2)</td><td style="text-align:left">AB AC AD BA BC BD CA CB CD DA DB DC</td></tr><tr><td style="text-align:left">combinations(p, r)</td><td style="text-align:left">r-length tuples, in sorted order, no repeated elements</td></tr><tr><td style="text-align:left">combinations(‘ABCD’, 2)</td><td style="text-align:left">AB AC AD BC BD CD</td></tr><tr><td style="text-align:left">combinations_with_replacement(p [, r])</td><td style="text-align:left">r-length tuples, in sorted order, with repeated elements</td></tr><tr><td style="text-align:left">combinations_with_replacement(‘ABCD’, 2)</td><td style="text-align:left">AA AB AC AD BB BC BD CC CD DD</td></tr></tbody></table><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://docs.python.org/2/library/itertools.html" target="_blank" rel="noopener">itertools - Functions creating iterators for efficient looping</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. Each has been recast in a form suitable for Python.&lt;br&gt;@&lt;code&gt;itertools&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://www.wrran.com/categories/tools/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/tools/python/"/>
    
    
      <category term="cheatsheet" scheme="http://www.wrran.com/tags/cheatsheet/"/>
    
      <category term="itertools" scheme="http://www.wrran.com/tags/itertools/"/>
    
  </entry>
  
  <entry>
    <title>政治生活没有银弹</title>
    <link href="http://www.wrran.com//blog/2019/08/14/people-say/me/190814-01/"/>
    <id>http://www.wrran.com//blog/2019/08/14/people-say/me/190814-01/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2019-08-16T09:51:59.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>政治生活没有银弹，不要指望依靠某种制度得到优胜，制度改革永不会止步。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;政治生活没有银弹，不要指望依靠某种制度得到优胜，制度改革永不会止步。&lt;/p&gt;&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="people-say" scheme="http://www.wrran.com/categories/people-say/"/>
    
    
      <category term="me" scheme="http://www.wrran.com/tags/me/"/>
    
  </entry>
  
  <entry>
    <title>Read the Docs @python</title>
    <link href="http://www.wrran.com//blog/2019/08/14/learn/read-the-docs/index/"/>
    <id>http://www.wrran.com//blog/2019/08/14/learn/read-the-docs/index/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2019-08-16T09:28:22.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Read the Docs</code> simplifies software documentation by automating building, versioning, and hosting of your docs for you. Think of it as <strong>Coninuous Documentation</strong>.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Read the Docs</code>如前言所述，主要是用来简化软件的文档工作，支持自动构建、版本控制及文档托管。可以将之考虑为<strong>持续文档</strong>，支持以下特点：</p><ul><li>Never out of sync: 同步，一时不停；</li><li>Multiple versions: 多版本控制；</li><li>Free and open source: 免费开源。</li></ul><h1 id="婴儿学步"><a href="#婴儿学步" class="headerlink" title="婴儿学步"></a><a href="https://docs.readthedocs.io/en/stable/index.html#first-steps" target="_blank" rel="noopener">婴儿学步</a></h1><p><code>Read-the-Docs</code>支持<code>Sphinx</code>及<code>MkDocs</code>，此处仅介绍<code>MkDocs</code>。</p><h2 id="Getting-started-with-MkDocs"><a href="#Getting-started-with-MkDocs" class="headerlink" title="Getting started with MkDocs"></a><a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-mkdocs.html" target="_blank" rel="noopener">Getting started with MkDocs</a></h2><p><code>MkDocs</code>是一个集中速度与简洁的文档生成器。它具有如下特点：</p><ul><li>边编写边预览；</li><li>主题和扩展易于扩展；</li><li>文档使用<code>Markdown</code>语法。</li></ul><p><strong>Quick Start</strong>：</p><ol><li>安装<code>MkDocs</code>：<code>conda install mkdocs</code>；</li><li>部署<code>MkDocs</code>项目：<code>mkdir demo &amp;&amp; mkdocs new .</code>；其中，<code>mkdocs.yml</code>是<code>MkDocs</code>配置文件，<code>docs/index.md</code>是文档的入口；</li><li>启动开发服务器：<code>mkdocs serve</code>。</li></ol><p>当修订好文档后可以参阅内容<a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html" target="_blank" rel="noopener">Importing your existing documentation</a>。<br><strong>External Resources</strong>，下列是一些相关资源：</p><ul><li><a href="https://www.mkdocs.org/" target="_blank" rel="noopener">MkDocs Documentation</a></li><li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown Syntax Guide</a></li><li><a href="https://www.mkdocs.org/user-guide/writing-your-docs/" target="_blank" rel="noopener">Writing Your Docs with MkDocs</a></li></ul><h2 id="Importing-your-existing-documentation"><a href="#Importing-your-existing-documentation" class="headerlink" title="Importing your existing documentation"></a><a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html" target="_blank" rel="noopener">Importing your existing documentation</a></h2><p>导入公共文档仓库的内容，可以访问<a href="https://readthedocs.org/dashboard" target="_blank" rel="noopener">Read the Docs dashboard</a>并点击<a href="https://readthedocs.org/dashboard/import" target="_blank" rel="noopener">Import</a>。私有的文档仓库请使用<a href="https://docs.readthedocs.io/en/stable/commercial/index.html" target="_blank" rel="noopener">Read the Docs for Business</a>。</p><p>如果我们将账号关联到Github/Bitbucket/GitLab的话，就可以直接导入一些公共文档仓库。</p><p><a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html#manually-import-your-docs" target="_blank" rel="noopener"><strong>Manually Import Your Docs</strong></a>: 倘若没有关联账号，则需要手动导入文档仓库，细节参见原文。<br><strong>Building Your Documentation</strong>：完成导入文档的过程之后，文档代码将被自动导入并构建；构建的细节请参见<a href="https://docs.readthedocs.io/en/stable/builds.html" target="_blank" rel="noopener">Build Process</a>；配置信息可在<code>readthedocs.yml</code>中进行制定，规则参见<a href="https://docs.readthedocs.io/en/stable/config-file/index.html" target="_blank" rel="noopener">Configuration File</a>；版本控制的功能参见<a href="https://docs.readthedocs.io/en/stable/versions.html" target="_blank" rel="noopener">Versions</a>；帮助信息可参见<a href="https://docs.readthedocs.io/en/stable/support.html" target="_blank" rel="noopener">Support</a>。</p><h1 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a><a href="https://docs.readthedocs.io/en/stable/index.html#getting-started-with-read-the-docs" target="_blank" rel="noopener">入门指南</a></h1><p>该部分介绍<code>Read the Docs</code>的一些核心功能、常用配置、版本控制等。</p><h2 id="Overview-of-core-features"><a href="#Overview-of-core-features" class="headerlink" title="Overview of core features"></a><a href="https://docs.readthedocs.io/en/stable/features.html" target="_blank" rel="noopener">Overview of core features</a></h2><p>该部分主要是罗列<code>Read the Docs</code>的核心特征。</p><p><strong>GitHub, Bitbucket and GitLab Integration</strong>：支持这三个平台的集成，参见<a href="https://docs.readthedocs.io/en/stable/guides/vcs.html" target="_blank" rel="noopener">Version Control System Integration</a>；<br><strong>Auto-updating</strong>：借助<a href="https://docs.readthedocs.io/en/stable/webhooks.html" target="_blank" rel="noopener">Webhooks</a>可以自动构建文档；<br><strong>Internationalization</strong>：支持多语言，更多信息参见<a href="https://docs.readthedocs.io/en/stable/localization.html" target="_blank" rel="noopener">Localization of Documentation</a>及<a href="https://docs.readthedocs.io/en/stable/development/i18n.html" target="_blank" rel="noopener">Internationalization</a>；<br><strong>Canonical URLs</strong>：支持经典URLs，更多信息参见<a href="https://docs.readthedocs.io/en/stable/guides/canonical.html" target="_blank" rel="noopener">Canonical URLs</a>；<br><strong>Versions</strong>：支持多版本文档；<br><strong>Version Control Support Matrix</strong>：此处主要看Git这块，支持tags/branches，默认分支为<code>master</code>；<br><strong>PDF Generation</strong>：当使用RTD时，亦可生成PDF文档；<br><strong>Search</strong>：支持全文搜索；<br><strong>Alternate Domains</strong>：支持自定义域名、子域名及shorturl，详情参见<a href="https://docs.readthedocs.io/en/stable/custom_domains.html" target="_blank" rel="noopener">Custom Domains</a>。</p><h2 id="Configure-your-documentation"><a href="#Configure-your-documentation" class="headerlink" title="Configure your documentation"></a>Configure your documentation</h2><h2 id="Connecting-with-Github-BitBucket-or-GitLab"><a href="#Connecting-with-Github-BitBucket-or-GitLab" class="headerlink" title="Connecting with Github, BitBucket, or GitLab"></a><a href="https://docs.readthedocs.io/en/stable/connected-accounts.html" target="_blank" rel="noopener">Connecting with Github, BitBucket, or GitLab</a></h2><h2 id="Read-the-Docs-build-and-versioning-process"><a href="#Read-the-Docs-build-and-versioning-process" class="headerlink" title="Read the Docs build and versioning process"></a>Read the Docs build and versioning process</h2><h2 id="Troubleshooting-Support"><a href="#Troubleshooting-Support" class="headerlink" title="Troubleshooting - Support"></a><a href="https://docs.readthedocs.io/en/stable/support.html" target="_blank" rel="noopener">Troubleshooting - Support</a></h2><h2 id="Troubleshooting-Frequently-asked-questions"><a href="#Troubleshooting-Frequently-asked-questions" class="headerlink" title="Troubleshooting - Frequently asked questions"></a><a href="https://docs.readthedocs.io/en/stable/faq.html" target="_blank" rel="noopener">Troubleshooting - Frequently asked questions</a></h2><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a><a href="https://docs.readthedocs.io/en/stable/index.html#advanced-features-of-read-the-docs" target="_blank" rel="noopener">高级特性</a></h1><p>这部分还没怎么用着，先罗列如下：</p><ul><li><a href="https://docs.readthedocs.io/en/stable/subprojects.html" target="_blank" rel="noopener">子项目配置</a></li><li><a href="https://docs.readthedocs.io/en/stable/single_version.html" target="_blank" rel="noopener">单版本配置</a></li><li><a href="https://docs.readthedocs.io/en/stable/privacy.html" target="_blank" rel="noopener">权限文档控制</a></li><li><a href="https://docs.readthedocs.io/en/stable/localization.html" target="_blank" rel="noopener">多语言文档</a></li><li><a href="https://docs.readthedocs.io/en/stable/user-defined-redirects.html" target="_blank" rel="noopener">自定义重定向</a></li><li><a href="https://docs.readthedocs.io/en/stable/automatic-redirects.html" target="_blank" rel="noopener">自动化重定向</a></li><li><a href="https://docs.readthedocs.io/en/stable/guides/index.html" target="_blank" rel="noopener">主题指南</a></li><li><a href="https://docs.readthedocs.io/en/stable/api/index.html" target="_blank" rel="noopener">扩展Read the Docs</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.readthedocs.io/en/stable/index.html#read-the-docs-documentation-simplified" target="_blank" rel="noopener">@ReadTheDocs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;Read the Docs&lt;/code&gt; simplifies software documentation by automating building, versioning, and hosting of your docs for you. Think of it as &lt;strong&gt;Coninuous Documentation&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://www.wrran.com/categories/tools/"/>
    
      <category term="dev-docs" scheme="http://www.wrran.com/categories/tools/dev-docs/"/>
    
    
      <category term="tools" scheme="http://www.wrran.com/tags/tools/"/>
    
      <category term="read-the-docs" scheme="http://www.wrran.com/tags/read-the-docs/"/>
    
  </entry>
  
  <entry>
    <title>Learning to Ask Question in Open-domain Conversational Systems with Typed Decoders</title>
    <link href="http://www.wrran.com//blog/2018/09/16/note/paper-reading/question%20and%20answering/question%20generation/2018-09-16/"/>
    <id>http://www.wrran.com//blog/2018/09/16/note/paper-reading/question and answering/question generation/2018-09-16/</id>
    <published>2018-09-16T08:43:24.000Z</published>
    <updated>2019-08-15T19:59:16.507Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ask question with type information</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文动机明确，模型简单有效，值得学习其解决问题的思路。<br>作者认为在开放域的对话系统中的问题生成任务与传统的问题生成任务有着以下两点不同之处：</p><ol><li>对相同的输入（背景知识）可能有不同的提问模式，如Yes-No或者Wh-,How-类型的问题</li><li>对给定的输入，问题的提出往往需要有一定的场景知识，进而推动对话的发展。如，针对“我跟朋友去吃饭”，就可以提出一些关于朋友、地点、价格、味道等主题的问题；而传统的问题生成可能更多的在于某个特定的主题，并且更多表现为转述的方式。</li></ol><p>基于此特点，作者认为“好”的问题不仅要有多样的提问模式，也要能够自然的衔接主题。而问题中，常常可以自然的分为三个部分：疑问词、主题词及常见词。为此，作者提出了两种利用词语类别信息的问题生成模型。并在收集的491000对微博的post-response上验证了模型的有效性。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180916/Good_questions_in_conversational_systems.PNG" alt="Good questions in conversational systems are a natural composition of interrogatives, topic words, and ordinary words."></p><h1 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h1><p><em>模型较简单，详情参见原文</em><br>作者修改的基本模型是Seq2Seq模型，为了融入类别信息。作者在解码器端增加了两种融入信息的方式：<br>一是，通过在每步解码时考虑该时刻的待解码词的类别分布(<code>softmax</code>)，这被作者称为STD (soft-typed decoder)；<br>二是，通过在每步解码时先生成该时刻词语的类别（<code>argmax</code>），再在已知该类别的基础上生成词语，这被称为HTD（hard-typed decoder）。</p><p>为了解决<code>argmax</code>不可求导的问题，作者采用<strong>Gumbel-Softmax</strong>技术来替代该操作。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://arxiv.org/abs/1805.04843" target="_blank" rel="noopener">Learning to Ask Question in Open-domain Conversational Systems with Typed Decoders</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;ask question with type information&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="note" scheme="http://www.wrran.com/categories/note/"/>
    
      <category term="paper-reading" scheme="http://www.wrran.com/categories/note/paper-reading/"/>
    
      <category term="question and answering" scheme="http://www.wrran.com/categories/note/paper-reading/question-and-answering/"/>
    
      <category term="question generation" scheme="http://www.wrran.com/categories/note/paper-reading/question-and-answering/question-generation/"/>
    
    
      <category term="paper reading" scheme="http://www.wrran.com/tags/paper-reading/"/>
    
      <category term="note" scheme="http://www.wrran.com/tags/note/"/>
    
      <category term="question generation" scheme="http://www.wrran.com/tags/question-generation/"/>
    
  </entry>
  
  <entry>
    <title>Learning Chinese Word Representations From Glyphs Of Characters</title>
    <link href="http://www.wrran.com//blog/2018/08/26/note/paper-reading/word%20embedding/2018-08-26/"/>
    <id>http://www.wrran.com//blog/2018/08/26/note/paper-reading/word embedding/2018-08-26/</id>
    <published>2018-08-26T02:17:00.000Z</published>
    <updated>2019-08-15T19:59:16.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>象形文字</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文从汉字为象形文字这一点出发，提出从汉字的图像上学习“词向量”，并在三个数据集上进行了“词义相似度”和“词语类比”的实验，发现：直接从图像中学习词向量表现并不优良，而将图像词向量作为原先词向量的辅助信息确实可以带来一定的提升。<br>但就本人而言实验部分中的三个数据集，究竟偏重的是词向量哪部分的性能测试呢，是否切合了象形文字的优势呢？另外，作者从图像中学习词向量的方法能否最有效地从词向量中捕捉词语直接的相关关系呢？</p><h1 id="动机简述"><a href="#动机简述" class="headerlink" title="动机简述"></a>动机简述</h1><p>在中文中，汉字往往有多个组件构成。这有两层含义：一是汉字的含义往往与组件相关，因此在学习词向量的过程中，兼顾这些信息有助于提升最终词向量的质量；二是共享相同偏旁的多个汉字语义或发音上也有一定联系。这些组件的信息对于词向量学习都是有益的。</p><h1 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h1><p>作者在基于原先的几个词向量表示学习的模型的基础上，提出了自己的改进方式。</p><h1 id="Baselines"><a href="#Baselines" class="headerlink" title="Baselines"></a>Baselines</h1><h2 id="CBOW-and-Skip-Gram"><a href="#CBOW-and-Skip-Gram" class="headerlink" title="CBOW and Skip-Gram"></a>CBOW and Skip-Gram</h2><p>这是word2vec中提出的两个经典模型，简单有效。CBOW是给定上下文预测目标词，Skip-Gram是给定目标词预测上下文。除此之外，还有一些训练技巧，如层次化的softmax、哈夫曼编码、负采样等。</p><h2 id="GloVe"><a href="#GloVe" class="headerlink" title="GloVe"></a>GloVe</h2><p>GloVe是通过词语共现矩阵学习词向量的。在统计词语共现信息时，GloVe使用了调和权重，即距离为$d$的两个词语共现频率记为$1/d$；GloVe的目标函数如下：<br>$$<br>\sum_{i, j \in \text{non-zero of} X} f(X_{ij})(\vec{w}_i^T\vec{\tilde{w}}_j + b_i + \tilde{b}<em>j - \log{X</em>{ij}})<br>$$<br>其中，考虑到共现频次过低时统计数据不可信，故而引入如下$f(X_{ij})$作为权重。<br>$$<br>f(X_{ij}) =<br>\begin{cases}<br>(X_{ij}/x_{max})^{\alpha}, \text{if } X_{ij}&lt; x_{max}\<br>1, &amp; \text{otherwise}\<br>\end{cases}<br>$$</p><h2 id="Character-enhanced-Word-Embedding-CWE"><a href="#Character-enhanced-Word-Embedding-CWE" class="headerlink" title="Character-enhanced Word Embedding (CWE)"></a>Character-enhanced Word Embedding (CWE)</h2><p>CWE寄希望于通过融入构成词语的字信息来提升词向量的质量，如下：<br>$$<br>\vec{w}_i^{cwe} = \vec{w}<em>i + \frac{1}{\vert C(i)\vert}\sum</em>{c_j\in C(i)}\vec{c}_j<br>$$<br>其中，$\vec{w}_i$是词向量，$\vec{c}_j$是字向量，$C(i)$是词语$w_i$的字集合。<br>另外，由于一个字往往含有多个含义，CWE为每个字分配多个向量，不能给提出了三种挑选字向量的方式：基于位置，基于簇丛，非参数的基于簇丛的挑选方式。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/CWE_and_MGE.PNG" alt="Model Comparison of Character-enhanced Word Embedding (CWE) and Multi-granularity Embedding (MGE)"></p><h2 id="Multi-granularity-Embedding-MGE"><a href="#Multi-granularity-Embedding-MGE" class="headerlink" title="Multi-granularity Embedding (MGE)"></a>Multi-granularity Embedding (MGE)</h2><p>MGE基于CBOW和CWE模型，并融入了目标词的偏旁信息。MGE通过如下隐层表示预测目标词：<br>$$<br>\vec{h}<em>i = \frac{1}{\vert C(i)\vert} \sum</em>{c_k\in C(i)} \vec{r}<em>k + \frac{1}{\vert W(i)\vert} \sum</em>{w_j \in W(i)} \vec{w}_j^{cwe}<br>$$<br>其中$\vec{r}_k$是目标词的偏旁向量，$C(i)$是目标词包含的字，$W(i)$是上下文词语。</p><h1 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h1><p>作者使用convAE从字生成的图像中抽取表示。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/The_architecture_of_convAE.PNG" alt="The architecture of convAE"></p><h2 id="Glyph-Enhanced-Word-Embedding-GWE"><a href="#Glyph-Enhanced-Word-Embedding-GWE" class="headerlink" title="Glyph-Enhanced Word Embedding (GWE)"></a>Glyph-Enhanced Word Embedding (GWE)</h2><p>在预训练好上述的convAE后，模型就可以得出字的向量表示。类似于MGE的做法，作者基于CBOW和CWE模型，融入字的图像向量，并可以细分为两类：<br><strong>context character glyph feature</strong><br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/Illustration_of_exploiting_context_word_glyphs.PNG" alt="Illustration of exploiting context word glyphs."></p><p><strong>target character glyph feature</strong><br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/Illustration_of_exploiting_target_word_glyphs.PNG" alt="Illustration of exploiting target word glyphs."></p><h2 id="Directly-Learn-From-Character-Glyph-Features"><a href="#Directly-Learn-From-Character-Glyph-Features" class="headerlink" title="Directly Learn From Character Glyph Features"></a>Directly Learn From Character Glyph Features</h2><p>作者也尝试直接从字的图像中学到词向量，无论是SkipGram或者GloVe，更改的地方都是如何产生词向量。在该工作中，作者先是通过convAE学到字图像向量，之后通过双层的GRU，最后通过两层全连接层得到对应的词向量。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/Model_architecture_of_RNN-Skipgram.PNG" alt="Model architecture of RNN-Skipgram."><br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/Model_architecture_of_RNN-GloVe.PNG" alt="Model architecture of RNN-GloVe."></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://www.aclweb.org/anthology/D/D17/D17-1025.pdf" target="_blank" rel="noopener">Learning Chinese Word Representation From Glyphs Of Characters</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;象形文字&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="note" scheme="http://www.wrran.com/categories/note/"/>
    
      <category term="paper-reading" scheme="http://www.wrran.com/categories/note/paper-reading/"/>
    
      <category term="word embedding" scheme="http://www.wrran.com/categories/note/paper-reading/word-embedding/"/>
    
    
      <category term="paper reading" scheme="http://www.wrran.com/tags/paper-reading/"/>
    
      <category term="note" scheme="http://www.wrran.com/tags/note/"/>
    
      <category term="word embedding" scheme="http://www.wrran.com/tags/word-embedding/"/>
    
  </entry>
  
  <entry>
    <title>Multi-Granularity Hierarchical Attention Fusion Networks for Reading Comprehension and Question Answering</title>
    <link href="http://www.wrran.com//blog/2018/08/05/note/paper-reading/question%20and%20answering/reading%20comprehension/2018-08-05/"/>
    <id>http://www.wrran.com//blog/2018/08/05/note/paper-reading/question and answering/reading comprehension/2018-08-05/</id>
    <published>2018-08-05T08:02:49.000Z</published>
    <updated>2019-08-15T19:59:16.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>୧(๑•̀◡•́๑)૭</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这是首次机器阅读理解模型性能在SQuAD上超越人类性能的模型，EM高达79.2%。本博文旨在考察模型细节，以便学习掌握。<br>总览全文，该模型使用了很多优化技巧，总结有以下几点：</p><ol><li>使用ELMo</li><li>除了常用的co-attention，self-attention外，还使用了Fusion Function</li><li>回答问题前，除了使用pointer network，还使用了bilinear match</li><li>在推理过程中使用了手动制定的特征</li></ol><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>记文档为词语序列$$P={w_t^P}_{t=1}^n$$, 问题为词语序列为$$Q={w_t^Q}<em>{t=1}^m$$，其中$$n$$为文档长度，$$m$$为问题长度；答案为文档$$P$$中的某个连续的文档片段。学习目标为$$f(q, p)=\arg\max</em>{a\in A(p)} \Pr{(a\vert q, p)}$$。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180805/Hierarchical_Attention_Fusion_Network.PNG" alt="Hierarchical Attention Fusion Network."></p><p>模型整体框架如上图，可以细分为四部分：</p><ul><li>Encoder Layer: 将文档和问题转化为向量表示；</li><li>Attention Layer: 捕捉文档与问题之间的相互关系，除了常用的co-attention/self-attention外，还运用了<code>Fusion Function</code>；</li><li>Match Layer: 使用bi-linear match function捕捉问题与文档表示之间的关系；</li><li>Output Layer: 使用pointer-network搜索答案。</li></ul><h2 id="Encoder-Layer"><a href="#Encoder-Layer" class="headerlink" title="Encoder Layer"></a>Encoder Layer</h2><p>该模型除了使用常用的GloVe作为预训练的词向量外，还使用了ELMo该语言模型作为词向量表示的补充。如此，对于文档和问题我们得到了两种表示，即词向量$${e_t^Q}_{t=1}^m$$，$${e_t^P}_{t=1}^n$$和字向量$${c_t^Q}_{t=1}^m$$，$${c_t^P}^n_{t=1}$$。<br>之后为获取上下文信息，使用Bi-LSTM对词向量表示与字向量表示进行学习，并与字向量拼接作为该层的最终表示：<br>$$<br>\begin{align}<br>u_t^Q &amp;= \Big[\text{BiLSTM}_Q([e_t^Q, c_t^Q]), c_t^Q \Big]\<br>u_t^P &amp;= \Big[\text{BiLSTM}_P([e_t^P, c_t^P]), c_t^P \Big]\<br>\end{align}<br>$$</p><h2 id="Attention-Layer"><a href="#Attention-Layer" class="headerlink" title="Attention Layer"></a>Attention Layer</h2><p>该层主要负责推理，本模型基于co-attention和self-attention形成hierarchical attention，并在此外还使用了<code>Fusion Function</code>。</p><h3 id="Co-attention-amp-Fusion"><a href="#Co-attention-amp-Fusion" class="headerlink" title="Co-attention &amp; Fusion"></a>Co-attention &amp; Fusion</h3><p>计算出问题表示$$u_t^Q$$及文档表示$$u_t^P$$后，我们即可计算两者语义相似度：<br>$$<br>S_{ij} = \text{Att}(u_t^Q, u_t^P) = \text{ReLu}(W_{lin}^T u_t^Q) \cdot \text{ReLu}(W_{lin}^T u_t^P)<br>$$</p><p>类似之前的做法，作者基于上述未归一化的矩阵$$S$$计算<strong>P2Q Attention</strong>和<strong>Q2P Attention</strong>:<br><strong>P2Q Attention</strong>得到融入文档的问题表示：<br>$$<br>\begin{align}<br>\alpha_j &amp;=\text{softmax}(S_{:j}) &amp; \<br>\tilde{Q}_{:t} &amp;= \sum_j \alpha_{tj} \cdot Q_{:j}, &amp; \forall j \in [1,\cdots, m]\<br>\end{align}<br>$$</p><p><strong>Q2P Attention</strong>得到融入问题的文档表示：<br>$$<br>\begin{align}<br>\beta_i &amp;= \text{softmax}(S_{i:}) &amp;\<br>\tilde{P}_{k:} &amp;= \sum_i \beta_{ik} \cdot P_{i:}, &amp; \forall i \in [1, \cdots, n]\<br>\end{align}<br>$$</p><p>之后通过结合原有的文档表示和问题表示，得到：<br>$$<br>\begin{align}<br>P’ &amp;= \text{Fuse}(P, \tilde{Q})\<br>Q’ &amp;= \text{Fuse}(Q, \tilde{P}) \<br>\end{align}<br>$$</p><p>在本文中选用了如下形式作为$$\text{Fuse}$$:<br>$$<br>m(P, \tilde{Q}) = \tanh(W_f \Big[P; Q; P\circ\tilde{Q}; P-\tilde{Q} \Big] + b_f)<br>$$</p><p>作者发现原先的表示反映了一些全文信息，为此引入门机制生成最终的文档或问题表示：<br>$$<br>\begin{align}<br>P’ &amp;= g(P, \tilde{Q})\cdot m(P, \tilde{Q}) + (1 - g(P, \tilde{Q}))\cdot P\<br>Q’ &amp;= g(Q, \tilde{P})\cdot m(Q, \tilde{P}) + (1 - g(Q, \tilde{P}))\cdot Q\<br>\end{align}<br>$$<br><em>门机制的实现在后文中将详细介绍，作者设计了三种：基于标量、基于向量、基于矩阵的三种。</em></p><h3 id="Self-attention-amp-Fusion"><a href="#Self-attention-amp-Fusion" class="headerlink" title="Self-attention &amp; Fusion"></a>Self-attention &amp; Fusion</h3><p>之后对文档进行self-attention，先后通过BiLSTM、双线性的softmax及<code>Fuse Function</code>：<br>$$<br>\begin{align}<br>D &amp;= \text{BiLSTM}(\Big[ P’;\text{feat}_{\text{man}}\Big]) \<br>L &amp;= \text{softmax}(D\cdot W_l \cdot D^T)\<br>\tilde{D} &amp;= L \cdot D \<br>D’ &amp;= \text{Fuse}(D, \tilde{D})\<br>D’’ &amp;= \text{BiLSTM}(D’)<br>\end{align}<br>$$<br>对于问题，鉴于其长度较短，没有采用上述复杂的操作方式：<br>$$<br>\begin{align}<br>Q’’ &amp;= \text{BiLSTM}(Q’)\<br>\gamma &amp;= \text{softmax}(w_q^T \cdot Q’’)\<br>q &amp;= \sum_j \gamma_j \cdot Q’’_{:j}, \forall j \in [1, \cdots, m]\<br>\end{align}<br>$$</p><h2 id="Match-amp-Output-Layer"><a href="#Match-amp-Output-Layer" class="headerlink" title="Match &amp; Output Layer"></a>Match &amp; Output Layer</h2><p>作者通过下述的双线性方式得到答案的开始与结束位置：<br>$$<br>\begin{align}<br>P_{start} &amp;= \text{softmax}(q \cdot W_s^T \cdot D’’)\<br>P_{end} &amp;= \text{softmax}(q \cdot W_e^T \cdot D’’)\<br>\end{align}<br>$$<br>输出层使用常规的Pointer Network来预测文档的开始与结束位置。<br>在训练过程中，使用交叉熵作为目标函数；在预测过程中，使用动态规划寻找一定长度内为答案开始概率与为答案结束概率乘积最大者。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://aclweb.org/anthology/P18-1158" target="_blank" rel="noopener">Multi-Granularity Hierarchical Attention Fusion Networks for Reading Comprehension and Question Answering</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;୧(๑•̀◡•́๑)૭&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="note" scheme="http://www.wrran.com/categories/note/"/>
    
      <category term="paper-reading" scheme="http://www.wrran.com/categories/note/paper-reading/"/>
    
      <category term="question and answering" scheme="http://www.wrran.com/categories/note/paper-reading/question-and-answering/"/>
    
      <category term="reading comprehension" scheme="http://www.wrran.com/categories/note/paper-reading/question-and-answering/reading-comprehension/"/>
    
    
      <category term="paper reading" scheme="http://www.wrran.com/tags/paper-reading/"/>
    
      <category term="note" scheme="http://www.wrran.com/tags/note/"/>
    
      <category term="question answering" scheme="http://www.wrran.com/tags/question-answering/"/>
    
  </entry>
  
  <entry>
    <title>Efficient and Robust Question Answering from Minimal Context over Documents</title>
    <link href="http://www.wrran.com//blog/2018/07/29/note/paper-reading/question%20and%20answering/reading%20comprehension/2018-07-29/"/>
    <id>http://www.wrran.com//blog/2018/07/29/note/paper-reading/question and answering/reading comprehension/2018-07-29/</id>
    <published>2018-07-29T02:02:07.000Z</published>
    <updated>2019-08-15T19:59:16.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先筛后选</p></blockquote><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>本篇论文的思路是通过深度学习的句子编码器对文档D中的各个句子进行编码，并针对句子包含答案的可能性进行打分。倘若分数高过一定阈值则保留；否则从D中删除。之后将精简过的文档作为神经网络阅读理解模型进行求解。<br>这样做的好处有两点，一是由于输入到阅读理解模型中的数据变少，模型求解的速度加快了；二是同样由于输入数据变少，也压缩了模型的解空间（答案是文档中的某个片段）。但该做法的隐患是在于倘若前者直接删除了包含正确答案的句子，则后一步骤中一定无法正确求解。好在作者通过数据分析及一些训练技巧有效的保证了前一步骤（“句子选择”）的高准确率（在SQuAD数据上高达99.3%，在NewsQA数据上高达94.6%）。</p><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p>作者在本文中对SQuAD及NewsQA进行了详尽的数据分析。这为后期实验的开展打下了数据基础，也让我们认识到该方法有效的原有。<br>作者从SQuAD中随机采样了50个数据组，发现其中98%的问题是可回答的，而剩余2%的问题即便是通览全文也无法回答。举例来说，在阅读完一篇关于Charles Dickens的文档之后也无法正确回答问题“The papers of which famous English Victorian author are collected in the library?”，这是由于外部知识的缺乏。而在可回答的问题集合中，作者进一步调研回答问题时需要的语句数量，发现其中92%的问题仅仅需要阅读一句之后就可以进行回答，6%的问题需要文档中的两句，而只有2%的问题需要三句乃至更多。<br>作者同样也在TriviaQA上进行了数据分析：与SQuAD平均每个文档仅包含5句的数据特征不同，TriviaQA平均每个文档包含有488句；其中88%的问题是可以回答的，而这其中的95%只需要一或两句就已经足够进行回答了。<br>为了进一步验证先进行句子筛选，再利用当前阅读理解模型进行问题求解的做法不会损害模型的性能。作者在DCN+模型上进行了实验。总体来看，在全文档（即不进行句子筛选）上训练的模型最终的F1为83.1；而在筛选过句子上训练的模型最终的F1为85.1。接着，作者分析后者模型回答错误的原因：40%是已经选择了正确的句子，但阅读理解模型回答错误；58%是由于模型预测部分正确答案，但并没有和标准答案完全一致；2%是由于问题在给予全文的情况下也无法正确回答。另外，作者还比较了全文档模型与筛选过句子模型回答正确的问题集合关系，发现：后者分别在SQuAD和NewsQA上可以正确回答93%和86%的问题。基于上述数据，作者认为采用“筛选-回答”的模式可以提供一个有效且高效的阅读理解模型。</p><h1 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h1><p>下图是本篇论文的模型总体框架。如前所述，该模型可分为“句子筛选”与“阅读理解”两部分。而阅读理解部分，作者直接采用较为成熟的阅读理解模型：DCN+。此处将着重介绍该文的“句子筛选”部分，关于DCN+模型的细节请参见文[5]。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180729/Our%20Model%20Architecture.png" alt="Our Model Architecture."></p><p>句子编码器首先将文档中的句子与问题作为输入，分别计算出句子的编码$D\in \mathbb{R}^{h_d\times L_d}$和问题的编码$Q\in \mathbb{R}^{h_d\times L_q}$（其中$h_d$是词向量的维度，$L_d$和$L_q$分别是文档与问题的序列长度）。之后通过下式计算融入问题表示的句子表示$D^q\in\mathbb{R}^{h_d\times L_d}$：<br>$$<br>\begin{align}<br>\alpha_i = \mathbf{softmax}(D_i^T W_1 Q)\in\mathbb{R}^{L_q}\<br>D_i^q = \sum_{j=1}^{L_q} (\alpha_{i,j} Q_j) \in\mathbb{R^{h_d}}<br>\end{align}<br>$$</p><p>其中$D_i\in\mathbb{R}^{h_d}$是句子中第$i$个词语的表示，$W_1\in\mathbb{R}^{h_d\times h_d}$是训练参数。为了交互句子中词语之间的信息，作者将上述分布式表示通过BiLSTM进行编码：<br>$$<br>\begin{align}<br>D^{\text{enc}}=\mathbf{BiLSTM}([D_i;D_i^q])\in\mathbb{R}^{h\times L_d}\<br>Q^{\text{enc}}=\mathbf{BiLSTM}(Q_j )\in\mathbb{R}^{h\times L_q}\<br>\end{align}<br>$$<br>其中，;表示向量拼接的操作，h是BiLSTM的隐层表示的维度。<br>之后，解码器对于上述得到的文档表示及问题表示进行打分：<br>$$<br>\begin{align}<br>\beta= \mathbf{softmax}(w^T Q^\text{enc})\in \mathbb{R}^{L_q}\<br>\tilde{q}^{\text{enc}}= \sum_{j=1}^{L_q} (\beta_j Q_j^{\text{enc}}) \in \mathbb{R}^h\<br>\tilde{h}_i=(D_i^{\text{enc}} W_2 q^\text{enc})\in \mathbb{R}^h\<br>\tilde{h}=\max(h_1, h_2, \cdots, h_{L_d})\<br>\text{score}=W_3^T \tilde{h}\in\mathbb{R}^2<br>\end{align}<br>$$<br>其中，$w^T\in\mathbb{R}^h$，$W_2\in\mathbb{R}^{h\times h\times h}$,$W_3\in\mathbb{R}^{h\times 2}$都是模型训练的参数。而最终得到的score的两维分别代表给定问题下该句是支撑语句或不是支撑语句的打分。</p><p>除了上述训练模型外，作者还引入了三个训练技巧：一是将句子筛选的句子编码器作为后续阅读理解模型的句子（问题）编码部分，二是倘若后续阅读理解没有正确回答问题，则将该句标记为错误句子（无论其是否包含正确答案），三是计算出的打分函数在段落上进行归一化。上述三种方式都被后续实验验证为可以切实提高模型表现的。</p><p>在最终确定句子时，作者使用了基于阈值的方法，而不是基于Top-K的筛选算法。这是由于作者认为不同的问题需要不同数量的支持语句。后续实验也表明，基于阈值的筛选方法不仅能够提高筛选的准确率，还能挑选出（平均）更少数量的句子。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://aclweb.org/anthology/P18-1160" target="_blank" rel="noopener">Efficient and Robust Question Answering from Minimal Context over Documents</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;先筛后选&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="note" scheme="http://www.wrran.com/categories/note/"/>
    
      <category term="paper-reading" scheme="http://www.wrran.com/categories/note/paper-reading/"/>
    
      <category term="question and answering" scheme="http://www.wrran.com/categories/note/paper-reading/question-and-answering/"/>
    
      <category term="reading comprehension" scheme="http://www.wrran.com/categories/note/paper-reading/question-and-answering/reading-comprehension/"/>
    
    
      <category term="paper reading" scheme="http://www.wrran.com/tags/paper-reading/"/>
    
      <category term="note" scheme="http://www.wrran.com/tags/note/"/>
    
      <category term="document question answering" scheme="http://www.wrran.com/tags/document-question-answering/"/>
    
  </entry>
  
  <entry>
    <title>分布式单词表示综述（一）</title>
    <link href="http://www.wrran.com//blog/2018/05/26/note/paper-reading/word%20embedding/2018-05-27/"/>
    <id>http://www.wrran.com//blog/2018/05/26/note/paper-reading/word embedding/2018-05-27/</id>
    <published>2018-05-26T03:51:17.000Z</published>
    <updated>2019-08-15T19:59:16.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>survey word representation</p></blockquote><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>最近在整理近些年来的词向量相关工作,发现了一篇2016年的相关综述.于是便顺着该篇综述来介绍相关的工作,其中涉及的有意思的工作可以参看后续的一些博文.</p><h1 id="单词分布式表示学习主要方法"><a href="#单词分布式表示学习主要方法" class="headerlink" title="单词分布式表示学习主要方法"></a>单词分布式表示学习主要方法</h1><p>但更重要的问题在于为什么这样的一个神经网络可以在建模语言模型时,能够学出单词的分布式表示呢?且这种分布式表示可以包含单词间的语义关联呢?其核心思想在于：对于同一个单词，在其前面出现的上下文单词总是相似的。</p><h2 id="神经网络语言模型"><a href="#神经网络语言模型" class="headerlink" title="神经网络语言模型"></a>神经网络语言模型</h2><p>Bengio等人的[神经网络概率语言模型（Neural Probabilistic Language Model, NPLM）][3] [other][37]提出了一个通用的框架学习单词的分布式表达以及任意的N元语言模型.在该模型中,语言模型是通过给定前文来计算某个单词的概率.NPLM通过将词表示为分布式形式,有效的避免了维度灾难的问题,同时编码了词与词之间的联系,因而自带平滑效果,无需传统N元语言模型中复杂的平滑算法.但该模型的缺点也很明显，主要在于计算方面，NPLM使用$\mathrm{softmax}$层估计下一个词的概率,但这一层的维度是词表大小,分母需要进行$$\vert V\vert$$次计算.因此导致学习和推断的过程都十分耗时.</p><h3 id="神经网络语言模型的加速"><a href="#神经网络语言模型的加速" class="headerlink" title="神经网络语言模型的加速"></a>神经网络语言模型的加速</h3><p>为了解决上述问题,早期使用神经网络语言模型学习单词表示的工作,主要都集中在于加速神经网络语言模型工作上了.对于神经网络语言模型加速的工作,主要集中于两方面:</p><ol><li>直接近似优化原始目标函数</li><li>简化网络结构</li></ol><p><strong>近似优化原始目标函数</strong> Bengio与Ducharme在[Quick Training of Probabilistic Neural Nets by Importance Sampling.][44]中提出使用 <strong>重要性采样(Importance Sampling)</strong> 的方法近似目标函数梯度中的期望项,提升了模型性能，但代价依旧很高.Minh等人在[A fast and simple algorithm for training neural probabilistic language models.][45]及[Learning word embeddings efficiently with noise-contrastive estimation.][46]中引入了 <strong>噪声对比估计(Noise-Contrastive Estimation, NCE)</strong> 取代了重要性采样进行训练过程中的概率估计.该方法的基本思想在于训练一个使用相同参数的逻辑斯蒂回归将真实分布的样本从噪声分布中区分出来.<br><strong>简化网络结构</strong> 在[Hierarchical Probabilistic Neural Network Language Model.][48]的工作中，Morin与Bengio将原本NPLM中扁平化的<code>softmax</code>输出层转变为树状输出。这样就将$$\vert V\vert$$次的指数运算减少到$$\log{\vert V\vert}$$次的运算过程了。之外，在[Three New Graphical Models for Statistical Language Modelling.][23]中作者使用了更简单的对数双线性模型取出了之前模型隐层中的非线性计算部分,输入单词的表示经过简单的线性变换后直接与被预测词的向量做交互.</p><h2 id="排序模型"><a href="#排序模型" class="headerlink" title="排序模型"></a>排序模型</h2><p>Mikolov等人在[Neural network based language models for highly inflective languages.][51]的工作中发现，将单词表示学习与语言模型的训练分离开来进行，首先使用简单的模型在更大的语料上学习词向量，然后以此训练语言模型，同样可以取得很好的训练效果。另外，也有学者尝试将单词的分布式表示用于除语言模型之外的自然语言处理任务上，如C&amp;W模型使用多任务学习来学习单词的分布式表示。<br>C&amp;W模型做法与之前神经网络语言模型学习单词进行表示模型有如下改进：</p><ol><li>同时使用单词前后的上下文进行学习；</li><li>对单词序列打分使用了排序损失函数而非基于概率的极大似然估计：<br>$$<br>\max{0, 1-s(w, c)+s(\hat{w}, c)}<br>$$<br>这里$$c$$代表单词$$w$$的上下文，$$\hat{w}$$表示将当前上下文$$c$$中的单词$$w$$替换为一个随机采样出的无关单词,$$s$$代表打分函数（打分越高,说明这段文本是正确的;打分越低，则说明这段文本不合理）。显然，在大多数情况下，将普通短语中的特定单词随机替换为任意单词，得到的都不是正确的短语。因此，模型的目标便是尽量使正确的语言（也就是观测的语料）得分比随机生成的语言的分数更高。这种技术也被称为 <strong>负采样技术</strong> 。</li></ol><p>而在[WordRank: Learning Word Embeddings via Robust Ranking][55]中Ji等人进一步将排序损失函数应用在词向量表示学习的过程中，将其建模为一个排序问题，使用精妙设计的排序函数来学习单词表示。在[Hubness and Pollution: Delving into Cross-Space Mapping for Zero-Shot Learning.][56]的工作也发现，使用此类排序损失函数可以解决单词表示空间中离得很近的点不易区分的问题。</p><h2 id="上下文单词预测模型"><a href="#上下文单词预测模型" class="headerlink" title="上下文单词预测模型"></a>上下文单词预测模型</h2><p>Mikolov等人在[word2vec][4]的工作中也进一步简化了以往的神经网络语言模型，去除了NPLM中间的非线性隐藏层，提出了两个简单的神经网络模型（Continuos Bag-of-Words, CBOW及Skip-gram, SG）来学习单词的分布式表示.上述两种做法十分简单，CBOW通过上下文词语的分布式表示的加权和来预测单词，后者通过单词的分布式表示来预测上下文的词语.为了模型的求解过程中涉及的复杂的求和操作，使用了一系列的加速技巧都与之前的工作类似：使用哈夫曼树压缩预测空间，负采样技术等。</p><h2 id="矩阵分解模型"><a href="#矩阵分解模型" class="headerlink" title="矩阵分解模型"></a>矩阵分解模型</h2><p>矩阵分解同样也是得到低维词向量的重要途径。<br>其中经典的单词表示学习模型,隐式语义分析模型(Latent Semantic Analysis/Indexing, LSA/LSI)将奇异值分解应用于单词与文档共现矩阵$$X\in\mathbb{R}^{\vert V\vert\times n}$$中，并只保留其中最大的$$k$$个奇异值，如下<br>$$<br>X = W\sum_k D^T<br>$$<br>一般使用$$W\sum_k$$作为单词的向量表示.对于SVD分解单词与上下文矩阵，Levy等人在[58]中发现使用$$W(\sum_k)^{1/2}$$在语义相关任务上效果更佳，而Caron则在[59]中推荐使用$$W(\sum_k)^{\alpha}$$（其中$$\alpha$$对于结果有显著影响，需要认真调整），Hu等人在[60]中发现去掉LSA得到表达的第一维后结果也会有提升（因为LSA得到的向量的第一维显著大于其他维度）。</p><p>随后，Huffman等人概率化LSI，在[61]中提出PLAS(Probabilistic Latent Semantic Indexing)模型；Blei等人在[62]中将PLSA贝叶斯扩展为LDA(Latent Dirichlet Allocation)模型.</p><p>除SVD外，典型相关分析（Canonical Correlation Analysis, CCA [63, 64]）同样被广泛用于学习单词表示[65, 66, 67, 68]；此外，Lebret与Collobert使用Hellinger距离作为PCA分解单词共现矩阵的损失函数，提出 Hellinger PCA(HPCA)模型；受Mikilov等人的工作启发，Pennington等人中提出[GloVe模型][21]。</p><h2 id="模型联系"><a href="#模型联系" class="headerlink" title="模型联系"></a>模型联系</h2><p>该节主要讨论上述做法中的一些相关联系。</p><h3 id="横向组合与纵向聚合"><a href="#横向组合与纵向聚合" class="headerlink" title="横向组合与纵向聚合"></a>横向组合与纵向聚合</h3><p>上述模型实质上都基于同一个假设 <strong>分布语义假设(Distributional Hypothesis)[71,72]</strong>，其含义是：单词的语义来自于上下文。<br>不同的是，一些模型将文档作为单词的上下文，一些讲单词周边的单词作为上下文。</p><p>Sun等人在[74]中表明，上下文的不同，使得不同模型建模了单词间的不同关系：横向组合关系(Syntagmatic)与纵向聚合(Paradigmatic)关系[75]。</p><p><strong>横向聚合关系</strong> 指的是两个单词同时出现在一段文本区域中。如下图中， “爱因斯坦”与“物理学家”两个词同时出现在一句话中，这两个词间存在着横向组合关系。此关系强调两个词可以进行组合，在句子中往往起到不同的语法作用。<br>而 <strong>纵向聚合关系</strong> 指的是纵向的可替换的关系，如图中的“爱因斯坦”与“费曼”。如果两个词在一句话中互换后，不影响句子的语法正确性以及语义合理性，则这两个词间存在纵向聚合关系。 纵向聚合关系在形式上表现为，这两个单词出现在相似的上下文环境中， 即使这两个单词可能从未共现。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180527/syntagmatic_paradigmatic.PNG" alt="横向组合与纵向聚合实例"></p><p>使用文档作为上下文的模型，隐含的假设是，如果两个单词经常同时出现在同一个文档，则这两个单词语义相似。这类模型建模了单词间的横向组合关系，其假设单词与和它共现的单词相似。 LSI以及LDA等通常使用在信息检索场景下的模型，都是建模的这类关系。这类模型更多的侧重于单词的话题信息，因而针对如文本分类这类侧重话题的任务，要好于使用纵向聚合关系的模型。如Tang等人[76]实验证实，在文本分类任务上，PV-DBOW（Distributed Bag of Words version of Paragraph Vector）要明显优于 SG 模型，其中PV-DBOW与LSI类似，建模的是单词间的横向组合关系。</p><p>而另一类模型，使用单词周边单词作为上下文。 其假设， 如果两个单词周围的单词相似，则这两个单词语义相似，即使这两个单词可能从未同时出现在一段文本区域中。这类模型建模了单词间的纵向关系，包括NPLM、LBL、CBOW、SG、GloVe等。这也是自然语言处理中最常用关系，同时也是分布语义假设最主流的解释。这类模型更加擅长有关单词自身的各项应用。</p><h3 id="神经网络与矩阵分解"><a href="#神经网络与矩阵分解" class="headerlink" title="神经网络与矩阵分解"></a>神经网络与矩阵分解</h3><p>Levy 和 Goldberg[77]分析表明， SG模型在使用负采样(SGNS)进行学习的情况下，相当于隐式地在分解单词与上下文之间偏移的点间互信息(Shifted Pointwise Mutual Information, shifted PMI)矩阵。 对于PMI矩阵，它是自然语言处理领域表示单词语义的一个常用选择[78]。随后，Li 等人[79]在表示学习的框架下证明了SGNS等同于矩阵分解。</p><p>此外，Shi和Liu[80]以及 Shazeer 等人[70]的工作都表明，GloVe模型实际上与使用负采样的SG(SGNS)模型非常相似，其区别只在于模型中的偏移项以及单词权重的选择。而Suzuki和Nagata[81]则提出了一个统一的框架囊括了这两个模型。</p><h2 id="模型实验比较"><a href="#模型实验比较" class="headerlink" title="模型实验比较"></a>模型实验比较</h2><h3 id="单词相似度"><a href="#单词相似度" class="headerlink" title="单词相似度"></a>单词相似度</h3><p><a href="http://alfonseca.org/eng/research/wordsim353.html" target="_blank" rel="noopener"><code>WordSim 353 (WS 353)</code></a> - 353个单词对,其中每一词对由13或者16位标注者对其进行0到10之间的打分,分数越高表示标注人员认为这两个词语语义更加相关或者更相似.最终对于每一词对都可以得到所有标注者的一个平均打分.</p><p>此任务的评价标准为,计算标注者对于单词对打分与模型习得表示得到的打分之间的Spearman排序相关系数:<br>$$<br>r=\rho_{x,y}=\frac{\mathrm{cov}(x, y)}{\sigma_x\sigma_y}<br>$$<br>其中$\mathbf{cov}(x, y)$表示排序列表$x, y$之间的协方差,$\sigma_x$和$\sigma_y$代表了对应的标准差.</p><p>模型得到的打分与人工标注的打分排序越一致,得分则越高.<br><a href="https://nlp.stanford.edu/~lmthang/morphoNLM/" target="_blank" rel="noopener"><code>Rare Word (RW)</code></a> - 该数据集侧重于评价模型学习稀缺单词表示的能力,其包含了2034个单词对.相比其他数据集,RW包含了更多的词形复杂而又少见的单词.</p><p><a href="https://github.com/magizbox/underthesea/wiki/DATA-SIMLEX-999" target="_blank" rel="noopener"><code>SimLex-999 (SL-999)</code> </a>- 该数据集修正了WS-353混合相关和相似的缺点,专注于单词之间的相似性,相比较WS-353,该数据集对各个词表示模型的难度更大.</p><h3 id="单词类比"><a href="#单词类比" class="headerlink" title="单词类比"></a>单词类比</h3><p>在word2vec的工作中,Mikolov发现就单单词向量而言,可以通过简单的向量加减运算反映语法语义上的类比关系,如“北京之于中国,相当于巴黎之于法国”可以通过<code>vec(&quot;Beijing&quot;) - vec(&quot;China&quot;) = vec(&quot;Paris&quot;) - vec(&quot;France&quot;)</code>来捕捉到。</p><h3 id="单词表示用作特征"><a href="#单词表示用作特征" class="headerlink" title="单词表示用作特征"></a>单词表示用作特征</h3><p>除了上述两个针对单词向量直接进行比较的实验外，学者们还是用单纯的单词表示作为其他任务的特征，如实体识别和情感分类。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://wenku.baidu.com/view/a225cafdf9c75fbfc77da26925c52cc58bd6901c.html" target="_blank" rel="noopener">分布式单词表示综述</a><br>[3]: <a href="http://jmlr.org/papers/volume3/bengio03a/bengio03a.pdf" target="_blank" rel="noopener">http://jmlr.org/papers/volume3/bengio03a/bengio03a.pdf</a> “A Neural Probabilistic Language Model. Journal of Machine Learning Research”<br>[37]: <a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=2405&amp;context=compsci" target="_blank" rel="noopener">http://repository.cmu.edu/cgi/viewcontent.cgi?article=2405&amp;context=compsci</a> “Can artificial neural networks learn language models?”<br>[44]: <a href="http://www.iro.umontreal.ca/~lisa/pointeurs/submit_aistats2003.pdf" target="_blank" rel="noopener">http://www.iro.umontreal.ca/~lisa/pointeurs/submit_aistats2003.pdf</a> “Quick Training of Probabilistic Neural Nets by Importance Sampling.”<br>[45]: <a href="https://www.cs.toronto.edu/~amnih/papers/ncelm.pdf" target="_blank" rel="noopener">https://www.cs.toronto.edu/~amnih/papers/ncelm.pdf</a> “A fast and simple algorithm for training neural probabilistic language models.”<br>[46]: <a href="https://www.cs.toronto.edu/~amnih/papers/wordreps.pdf" target="_blank" rel="noopener">https://www.cs.toronto.edu/~amnih/papers/wordreps.pdf</a> “Learning word embeddings efficiently with noise-contrastive estimation.”<br>[48]: <a href="https://www.iro.umontreal.ca/~lisa/pointeurs/hierarchical-nnlm-aistats05.pdf" target="_blank" rel="noopener">https://www.iro.umontreal.ca/~lisa/pointeurs/hierarchical-nnlm-aistats05.pdf</a> “Hierarchical Probabilistic Neural Network Language Model.”<br>[23]: <a href="https://www.cs.toronto.edu/~amnih/papers/threenew.pdf" target="_blank" rel="noopener">https://www.cs.toronto.edu/~amnih/papers/threenew.pdf</a> “Three New Graphical Models for Statistical Language Modelling.”<br>[51]: <a href="http://www.fit.vutbr.cz/research/groups/speech/publi/2009/mikolov_ic2009_nnlm_4.pdf" target="_blank" rel="noopener">http://www.fit.vutbr.cz/research/groups/speech/publi/2009/mikolov_ic2009_nnlm_4.pdf</a> “Neural network based language models for highly inflective languages.”<br>[55]: <a href="http://www.aclweb.org/anthology/D/D16/D16-1063.pdf" target="_blank" rel="noopener">http://www.aclweb.org/anthology/D/D16/D16-1063.pdf</a> “WordRank: Learning Word Embeddings via Robust Ranking”<br>[56]: <a href="http://www.aclweb.org/anthology/P/P15/P15-1027.pdf" target="_blank" rel="noopener">http://www.aclweb.org/anthology/P/P15/P15-1027.pdf</a> “Hubness and Pollution: Delving into Cross-Space Mapping for Zero-Shot Learning.”<br>[4]: <a href="https://arxiv.org/abs/1301.3781" target="_blank" rel="noopener">https://arxiv.org/abs/1301.3781</a> “Efficient Estimation of Word Representations in Vector Space.”<br>[58]: <a href="http://aclweb.org/anthology/Q15-1016" target="_blank" rel="noopener">http://aclweb.org/anthology/Q15-1016</a> “Improving Distributional Similarity with Lessons Learned from Word Embeddings.”<br>[59]: <a href="http://dl.acm.org/citation.cfm?id=762556" target="_blank" rel="noopener">http://dl.acm.org/citation.cfm?id=762556</a> “Experiments with LSA scoring: optimal rank and basis.”<br>[60]: <a href="http://www.academia.edu/2956517/LSA_The_first_dimension_and_dimensional_weighting" target="_blank" rel="noopener">http://www.academia.edu/2956517/LSA_The_first_dimension_and_dimensional_weighting</a> “LSA: The first dimension and dimensional weighting.”<br>[21]: <a href="https://nlp.stanford.edu/pubs/glove.pdf" target="_blank" rel="noopener">https://nlp.stanford.edu/pubs/glove.pdf</a> “Glove: Global Vectors for Word Representation.”</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;survey word representation&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="note" scheme="http://www.wrran.com/categories/note/"/>
    
      <category term="paper-reading" scheme="http://www.wrran.com/categories/note/paper-reading/"/>
    
      <category term="word embedding" scheme="http://www.wrran.com/categories/note/paper-reading/word-embedding/"/>
    
    
      <category term="paper reading" scheme="http://www.wrran.com/tags/paper-reading/"/>
    
      <category term="note" scheme="http://www.wrran.com/tags/note/"/>
    
      <category term="distributed word representation" scheme="http://www.wrran.com/tags/distributed-word-representation/"/>
    
  </entry>
  
  <entry>
    <title>Efficient Estimation of Word Representations in Vector Space</title>
    <link href="http://www.wrran.com//blog/2018/05/20/note/paper-reading/word%20embedding/2018-04-01/"/>
    <id>http://www.wrran.com//blog/2018/05/20/note/paper-reading/word embedding/2018-04-01/</id>
    <published>2018-05-20T08:35:26.000Z</published>
    <updated>2019-08-15T19:59:16.508Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>word2vec</p></blockquote><a id="more"></a><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><code>word2vec</code>相关的文章有两篇，第一篇”Efficient Estimation of Word Representations in Vector Space”介绍了词向量计算的两个主要模型CBOW和Skip-gram；第二篇发表在NIPS上的”Distributed Representations of Words and Phrases and their Compositionality”则主要介绍了优化模型训练的技术，包括Hierarchical Softmax, Negative Sampling, Subsampling of Frequent Words，同时也针对原先模型不能发现语料中短语的问题提出了一种改进方案。</p><p><code>word2vec</code>的两个基本模型，想法其实十分简单，但神奇的是实现简单、速度优越。可能的原因是该算法运用了大量的语料。</p><h1 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h1><p>该部分介绍<code>word2vec</code>中学习词向量的两个模型，想法很简单，效果却很好。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180513/new_model_architectures.PNG" alt="New model architectures."><br>图中涉及到两个模型，一是CBOW，一是Skip-gram。两者的相似之处在于都是通过先将词语转换为词向量，之后连接至<code>log-linear classifier</code>进行预测；不同之处在于CBOW是根据上下文$$w_{t-2}, w_{t-1}, w_{t+1}, w_{t+2}$$去预测中心词$$w_{t}$$，而Skip-gram是根据中心词$$w_{t}$$去预测上下文$$w_{t-2}, w_{t-1}, w_{t+1}, w_{t+2}$$。最终训练得出的词向量是指图中<strong>PROJECTION</strong>中的参数。</p><h1 id="Speed-Up"><a href="#Speed-Up" class="headerlink" title="Speed-Up"></a>Speed-Up</h1><p>该部分是文二的主要工作，即针对模型Skip-gram提出了一系列提升训练过程的算法。</p><h2 id="Hierarchical-Softmax"><a href="#Hierarchical-Softmax" class="headerlink" title="Hierarchical Softmax"></a>Hierarchical Softmax</h2><p>在Skip-gram中因为要预测上下文词语，而该预测是在整个词表中进行的。词表的规模往往达到上百万规模，计算开销巨大。为此，作者在词表之上建立一棵哈夫曼树（树的叶子节点即为词）。同时，将对某个词语的预测转换为一系列路径的预测。这样就将原先复杂度为$$O(W)$$的计算简化到$$O(\log{W})$$。</p><h2 id="Negative-Sampling"><a href="#Negative-Sampling" class="headerlink" title="Negative Sampling"></a>Negative Sampling</h2><p>负采样的想法在于不直接计算$$\mathrm{softmax}$$，而是寄希望于模型将正例与负例区分开来即可。如此操作，对于Skip-gram在根据中心词预测上下文时，只需要计算负采样出来的词语与正确答案的概率即可，进一步压缩了计算量。</p><h2 id="Subsampling-of-Frequent-Words"><a href="#Subsampling-of-Frequent-Words" class="headerlink" title="Subsampling of Frequent Words"></a>Subsampling of Frequent Words</h2><p>与信息论的理论相同，经常出现的事物所含有的信息量没有罕见出现的次数多。具体到词向量的学习过程中，常用词如<code>the</code>与其他词语共现的次数一般都很大，而这并不能给我们提供多少信息。作者基于此，为了应对常见词与罕见词被采样的概率，以一定概率丢弃采样的结果。这样的做法可以一定程度上减少常见词被采样的频率，进而减少训练过程中涉及到的计算量。作者还发现这种做法反而提高了罕见词的词向量质量（关于“词向量质量”的讨论见Tasks部分）。</p><h1 id="Learning-Phrases"><a href="#Learning-Phrases" class="headerlink" title="Learning Phrases"></a>Learning Phrases</h1><p>在文二中提出从语料库中自动发现短语的方法。其基本思路是：固定短语应当是指多个词经常一起出现，而各自出现的比率并不高。举例来说，”New York”是固定短语，而”this is”不是。<br>为此，作者设计了如下的公式：<br>$$\text{score}(w_i, w_j) = \frac{\mathrm{count}(w_i w_j)-\delta}{\mathrm{count}(w_i) \times \mathrm{count}(w_j)}$$<br>其中，参数$$\delta$$是一个阈值，防止不常见的词组成大量短语。通过计算语料中两个词语的得分，并判断其是否超过指定阈值；若超过，则可组成新短语。另外，上述公式是针对二元词语而言，为此要发现三个词、四个词等组成的短语时，需要多次进行该过程。</p><h1 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h1><p>在word2vec中还提出了一些测试词向量质量的任务。包括：</p><ul><li><strong>word analogy task</strong>: 具体来说，就是在语言中有”A is to B as C is to D”，如”Beijing is to China as Moscow is to Russia”。该任务就是在给定A,B,C后让模型在词库中寻找到D。关于如何制造出这样的任务数据集，可以参见文一的4.1 Task Description。</li><li><strong>Microsoft Research Sentence Completion Challenge</strong>: 该任务是微软用于测试语言模型的。具体来说，类似选择题：给定一个句子，其中缺失了某个词，要求从五个候选词中选出正确答案。</li><li><strong>out-of-the-list</strong>: 给定一些词，从中选出与其他最不相似的一种。但在论文中，并没有将此作为测试词向量质量的任务，仅是指出词向量可能的用法。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://arxiv.org/pdf/1301.3781.pdf" target="_blank" rel="noopener">Efficient Estimation of Word Representations in Vector Space</a><br><a href="https://pdfs.semanticscholar.org/c829/b63a3ae72a47e1953e1295826c7b2f93bf50.pdf?_ga=2.7614203.850512570.1526112318-1123334528.1524925016" target="_blank" rel="noopener">Distributed Representations of Words and Phrases and their Compositionality</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;word2vec&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="note" scheme="http://www.wrran.com/categories/note/"/>
    
      <category term="paper-reading" scheme="http://www.wrran.com/categories/note/paper-reading/"/>
    
      <category term="word embedding" scheme="http://www.wrran.com/categories/note/paper-reading/word-embedding/"/>
    
    
      <category term="paper reading" scheme="http://www.wrran.com/tags/paper-reading/"/>
    
      <category term="note" scheme="http://www.wrran.com/tags/note/"/>
    
      <category term="word2vec" scheme="http://www.wrran.com/tags/word2vec/"/>
    
  </entry>
  
</feed>
