<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WrRan の 杂货铺</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wrran.com/"/>
  <updated>2019-08-19T01:32:57.008Z</updated>
  <id>http://www.wrran.com/</id>
  
  <author>
    <name>WrRan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>if语句@bash</title>
    <link href="http://www.wrran.com//blog/2019/08/19/learn/bash/statement-if/"/>
    <id>http://www.wrran.com//blog/2019/08/19/learn/bash/statement-if/</id>
    <published>2019-08-19T00:34:44.000Z</published>
    <updated>2019-08-19T01:32:57.008Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>if you jump, i push you :)</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>if语句让我们可以测试某种条件，然后根据测试结果改变程序执行流程。<br>其一般格式为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>其中，<code>command_test</code>是要要执行的命令，该命令的退出状态会被测试；如果退出状态为0，执行<code>then</code>和<code>fi</code>之间的命令；否则，跳过这些命令。</p><p>注意：命令正常执行会返回状态码<code>0</code>；管道的状态码是最后一个命令的状态码。</p><p>if语句也可以加入else，形如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>if语句也可以加入elif，形如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">elif</span> command_test2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p>变量<code>$?</code>被shell自动设置为最后一条命令的退出状态。</p><p>使用示例如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat on</span><br><span class="line">user=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> who | grep <span class="string">"^<span class="variable">$user</span> "</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$user</span> is logged on"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><h1 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h1><p><code>test</code>命令是shell环境中测试条件表达式的实用工具。其形如：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> expression</span><br></pre></td></tr></table></figure><p></p><p><code>test</code>会对<code>expression</code>求值，如果结果为真，则返回为0的退出状态码；如果结果为假，则返回非0的退出状态码。</p><p><code>test</code>字符操作符小抄如下：</p><table><thead><tr><th style="text-align:center">EXPRESSION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">str1 = str2</td><td style="text-align:left">str1等于str2</td></tr><tr><td style="text-align:center">str1 != str2</td><td style="text-align:left">str1不等于str2</td></tr><tr><td style="text-align:center">str</td><td style="text-align:left">str不为空</td></tr><tr><td style="text-align:center">-n str</td><td style="text-align:left">str不为空</td></tr><tr><td style="text-align:center">-z str</td><td style="text-align:left">str为空</td></tr></tbody></table><p>注意后两种情况即<code>-n str</code>及<code>-z str</code>，见下例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ blank=<span class="string">"    "</span></span><br><span class="line">$ <span class="built_in">test</span> <span class="variable">$blanks</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">test</span> <span class="string">"<span class="variable">$blanks</span>"</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p></p><p><code>test</code>整数操作符小抄如下：</p><table><thead><tr><th style="text-align:center">EXPRESSION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">int1 -eq int2</td><td style="text-align:left">int1等于int2</td></tr><tr><td style="text-align:center">int1 -ge int2</td><td style="text-align:left">int1大于或等于int2</td></tr><tr><td style="text-align:center">int1 -gt int2</td><td style="text-align:left">int1大于int2</td></tr><tr><td style="text-align:center">int1 -le int2</td><td style="text-align:left">int1小于或等于int2</td></tr><tr><td style="text-align:center">int1 -lt int2</td><td style="text-align:left">int1小于int2</td></tr><tr><td style="text-align:center">int1 -ne int2</td><td style="text-align:left">int1不等于int2</td></tr></tbody></table><p><code>test</code>文件操作符小抄如下：</p><table><thead><tr><th style="text-align:center">OPTION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">-e file</td><td style="text-align:left">存在</td></tr><tr><td style="text-align:center">-d file</td><td style="text-align:left">目录</td></tr><tr><td style="text-align:center">-s file</td><td style="text-align:left">非空文件</td></tr><tr><td style="text-align:center">-f file</td><td style="text-align:left">普通文件</td></tr><tr><td style="text-align:center">-L file</td><td style="text-align:left">符号链接</td></tr><tr><td style="text-align:center">-r file</td><td style="text-align:left">可读取</td></tr><tr><td style="text-align:center">-w file</td><td style="text-align:left">可写入</td></tr><tr><td style="text-align:center">-x file</td><td style="text-align:left">可执行</td></tr></tbody></table><p><strong>test</strong>的另外一种格式：<code>test</code>还有一个别名<code>[</code>，因此可以用另外一种格式来表示：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ expression ]</span><br></pre></td></tr></table></figure><p></p><p>其中<code>[</code>是命令名，但如果写成这种格式表达式结尾处<strong>必须</strong>有对应的<code>]</code>，并且<code>[</code>之后与<code>]</code>之前必须有空格。</p><p><strong>逻辑操作符</strong><br>一元逻辑否定操作符<code>!</code>可以放置在任意的<code>test</code>之前，否定该表达式的求值结果；<br>操作符<code>-a</code>在两个表达式之间执行逻辑与运算，求值满足短路规则；<br>操作符<code>-o</code>在两个表达式之间执行逻辑或运算，求值满足短路规则。</p><p>之外，<code>-o</code>优先级低于<code>-a</code>；也可以使用括号来改变求值顺序，但括号本身要被引用起来，因为它们对于shell有特殊的含义。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;if you jump, i push you :)&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
  </entry>
  
  <entry>
    <title>传参@bash</title>
    <link href="http://www.wrran.com//blog/2019/08/19/learn/bash/pass-arguments/"/>
    <id>http://www.wrran.com//blog/2019/08/19/learn/bash/pass-arguments/</id>
    <published>2019-08-19T00:05:53.000Z</published>
    <updated>2019-08-19T00:29:18.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>众志成城</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>流动的数据是程序的肉体。</p><h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><p>执行shell程序时，shell会自动将第一个参数保存在特殊的shell变量1中，并依次将后面参数保存到后面的变量上。这些特殊变量由于基于命令行所在的位置而命名为“位置参数”。</p><p><strong>位置参数</strong>是在shell完成正常的命令行处理之后（I/O重定向，变量替换，文件名替换）被赋值的。<br>注意：当提供给程序的参数多于9个时，没法直接访问到第10个及以后的参数的，必须使用格式<code>${n}</code>；否则如<code>$10</code>会被解析为第一个变量后加上字符<code>0</code>。</p><p>之外，命令<code>shift</code>可以左移位置参数。</p><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p>除了位置参数为，特殊shell变量<code>$#</code>包含了命令行中输入的参数个数；变量<code>$*</code>引用的是传给程序的所有参数。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat tshift</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"></span><br><span class="line">$ chmod +x ./tshift</span><br><span class="line">$ ./tshift a b c d e</span><br><span class="line">5 a b c d e</span><br><span class="line">4 b c d e</span><br><span class="line">3 c d e</span><br><span class="line">2 d e</span><br><span class="line">1 e</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;众志成城&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
      <category term="passing-arguments" scheme="http://www.wrran.com/tags/passing-arguments/"/>
    
  </entry>
  
  <entry>
    <title>Commonly Commands @ bash</title>
    <link href="http://www.wrran.com//blog/2019/08/19/cheatsheet/reference/bash-cmds/"/>
    <id>http://www.wrran.com//blog/2019/08/19/cheatsheet/reference/bash-cmds/</id>
    <published>2019-08-18T23:43:18.000Z</published>
    <updated>2019-08-19T04:31:34.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>他说风雨中这点痛算什么<br>@ 水手</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">EXAMPLE</th></tr></thead><tbody><tr><td style="text-align:center"><code>date</code></td><td style="text-align:left">显示日期和时间</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>who</code></td><td style="text-align:left">找出已登录的人员</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>echo</code></td><td style="text-align:left">回显字符</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ls</code></td><td style="text-align:left">列举文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cat</code></td><td style="text-align:left">显示文件内容</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>wc</code></td><td style="text-align:left">统计文件中单词数量</td></tr><tr><td style="text-align:center"><code>cp</code></td><td style="text-align:left">复制文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>mv</code></td><td style="text-align:left">文件重命名</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>rm</code></td><td style="text-align:left">删除文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>pwd</code></td><td style="text-align:left">显示工作目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cd</code></td><td style="text-align:left">更改目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>mkdir</code></td><td style="text-align:left">创建目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ln</code></td><td style="text-align:left">文件链接</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>rmdir</code></td><td style="text-align:left">删除目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ps</code></td><td style="text-align:left">显示系统中所运行的进程的信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cut</code></td><td style="text-align:left">从数据文件中提取出字段</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>paste</code></td><td style="text-align:left">合并多个字段</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>sed</code></td><td style="text-align:left">在管道或命令序列中编辑数据</td><td style="text-align:left"><strong>s</strong>tream <strong>ed</strong>itor</td></tr><tr><td style="text-align:center"><code>tr</code></td><td style="text-align:left">转换标准输入中的字符</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>grep</code></td><td style="text-align:left">在一个或多个文件中搜索指定模式</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>sort</code></td><td style="text-align:left">按照字母顺序排序并输出结果</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>uniq</code></td><td style="text-align:left">查找或删除文件中的重复行</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>shift</code></td><td style="text-align:left">左移位置参数</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>test</code></td><td style="text-align:left">测试条件表达式的实用工具</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exit</code></td><td style="text-align:left">终止shell程序的执行并返回退出状态码</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ssh-keygen</code></td><td style="text-align:left">ssh密钥生成</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ssh-copy-id</code></td><td style="text-align:left">ssh免密登录</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;他说风雨中这点痛算什么&lt;br&gt;@ 水手&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
      <category term="bash-cmds" scheme="http://www.wrran.com/tags/bash-cmds/"/>
    
  </entry>
  
  <entry>
    <title>Commonly Variables @ bash</title>
    <link href="http://www.wrran.com//blog/2019/08/19/cheatsheet/reference/bash-vars/"/>
    <id>http://www.wrran.com//blog/2019/08/19/cheatsheet/reference/bash-vars/</id>
    <published>2019-08-18T23:42:45.000Z</published>
    <updated>2019-08-19T01:56:21.338Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>bash虐我千百遍，我待其如初恋</p></blockquote><a id="more"></a><p><strong>传参的特殊变量</strong></p><table><thead><tr><th style="text-align:center">VARIABLE</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>${n}</code></td><td style="text-align:left">位置变量</td></tr><tr><td style="text-align:center"><code>$#</code></td><td style="text-align:left">参数个数</td></tr><tr><td style="text-align:center"><code>$*</code></td><td style="text-align:left">所有参数</td></tr></tbody></table><p>更多详情：<a href="http://wrran.com/blog/2019/08/19/learn/bash/pass-arguments/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/19/learn/bash/pass-arguments/</a></p><p><strong>其他</strong></p><table><thead><tr><th style="text-align:center">VARIABLE</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>#?</code></td><td style="text-align:left">上一次命令的退出码</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;bash虐我千百遍，我待其如初恋&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
  </entry>
  
  <entry>
    <title>函数@bash</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/bash/function/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/bash/function/</id>
    <published>2019-08-18T04:42:23.000Z</published>
    <updated>2019-08-18T23:43:29.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>复用，复用，复用：经济又安全</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>shell中的函数（function）是指命令序列（定义），可引用或重用（语用）。</p><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>一般格式如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">name</span></span>() &#123; <span class="built_in">command</span>; ... <span class="built_in">command</span>; &#125;</span><br></pre></td></tr></table></figure><p></p><p>调用函数就像执行普通命令一样，输入<strong>函数名称</strong>即可执行。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>函数的重要特性是：</p><blockquote><p>命令行上出现在函数后的参数会依次分配给位置参数<code>$1</code>,<code>p2</code>，<code>$3</code>…。</p></blockquote><p>之外，还有一些特性值得注意：</p><ol><li>「子shell」：函数仅存在于它所定义的shell中，无法传给子shell；</li><li>「变量&amp;目录」：函数对于当前目录或变量作出的修改在函数执行完毕之后依然会保留。</li></ol><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><p>函数的优势有：</p><ul><li>「速度更快」：是因为shell不需要搜索磁盘来查找程序、打开文件并将文件内容读入内存，只需要跳转到相应的位置；</li><li>「管理模块化」@&gt; 可以将相关的shell程序全都放进单个文件中。</li></ul><h1 id="函数的之外"><a href="#函数的之外" class="headerlink" title="函数的之外"></a>函数的之外</h1><p><strong>删除自定义的函数</strong>：使用带有<code>-f</code>选项的<code>unset</code>命令可以从shell中删除函数。</p><p><strong>从函数内部退出</strong>：</p><ul><li>命令<code>exit</code>：如果在函数内部使用<code>exit</code>，不仅会终止函数的执行，而且还会使得调用该函数的shell程序退出，返回到命令行。</li><li>命令<code>return</code>：如果您只是想退出函数，可以使用命令<code>return</code>，形如：<code>return n</code>，<code>n</code>作为该函数的「返回状态」。</li><li>缺省情况：如果忽略的话，则使用函数中最后执行的那条命令的「退出状态」，这种情况也适用于函数中没有包含<code>return</code>命令的时候。</li></ul><p>注意：返回状态在其他方面和退出状态一样：可以使用shell变量<code>$?</code>来访问它，也可以在<code>if</code>/<code>while</code>和<code>until</code>命令中对其进行测试。</p><p><strong>实践建议</strong>：可以将常用函数定义放入<code>.profile</code>中，或单独某文件如<code>myfuncs</code>，后在当前shell中执行该文件：<code>. myfuncs</code>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;复用，复用，复用：经济又安全&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
      <category term="function@bash" scheme="http://www.wrran.com/tags/function-bash/"/>
    
  </entry>
  
  <entry>
    <title>重定向@bash</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/bash/redirect/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/bash/redirect/</id>
    <published>2019-08-18T00:43:24.000Z</published>
    <updated>2019-08-18T04:31:19.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>暂且离开自己又返回自己，只是返回的位置略有不同。<br>@ 村上春树</p></blockquote><a id="more"></a><h1 id="数据重定向"><a href="#数据重定向" class="headerlink" title="数据重定向"></a>数据重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt; stdout</code></td><td style="text-align:left">标准输出重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt; stdin</code></td><td style="text-align:left">标准输入重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command 2&gt; stderr</code></td><td style="text-align:left">标准错误重定向</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="流重定向"><a href="#流重定向" class="headerlink" title="流重定向"></a>流重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&amp;2</code></td><td style="text-align:left">将标准输出重定向到标准错误</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command 2&gt;&amp;1</code></td><td style="text-align:left">将标准错误重定向到标准输出</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="动态重定向"><a href="#动态重定向" class="headerlink" title="动态重定向"></a>动态重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>exec &lt; datafile</code></td><td style="text-align:left">标准输入动态重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exec &gt; datafile</code></td><td style="text-align:left">标准输出动态重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exec 2&gt; datafile</code></td><td style="text-align:left">标准错误动态重定向</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="流行为重定向"><a href="#流行为重定向" class="headerlink" title="流行为重定向"></a>流行为重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&gt; stdout</code></td><td style="text-align:left">标准输出由默认覆写模式重定向为追加模式</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;word lines</code></td><td style="text-align:left">标准输入重定向为行内输入模式</td><td style="text-align:left">使用<code>lines</code>作为命令标准输入，直到碰到只含有<code>word</code>的行；并“附加操作”：进行参数替换、反引号命令执行，同时解析反斜杠的语义</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;\word lines</code></td><td style="text-align:left">标准输入重定向为原封行内输入模式</td><td style="text-align:left">类似“行内输入模式”，不同在于不进行“附加操作”</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;-word lines</code></td><td style="text-align:left">标准输入重定向为缩进行内输入模式</td><td style="text-align:left">类似“行内输出模式”，不同在于又“附加操作”：删除前导制表符</td></tr></tbody></table><h2 id="关闭流"><a href="#关闭流" class="headerlink" title="关闭流"></a>关闭流</h2><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&amp;-</code></td><td style="text-align:left">关闭标准输出</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt;&amp;-</code></td><td style="text-align:left">关闭标准输入(？)</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589。" target="_blank" rel="noopener">https://book.douban.com/subject/30410589。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;暂且离开自己又返回自己，只是返回的位置略有不同。&lt;br&gt;@ 村上春树&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
      <category term="redirect@bash" scheme="http://www.wrran.com/tags/redirect-bash/"/>
    
  </entry>
  
  <entry>
    <title>CS常用术语</title>
    <link href="http://www.wrran.com//blog/2019/08/18/cheatsheet/cs-terms/"/>
    <id>http://www.wrran.com//blog/2019/08/18/cheatsheet/cs-terms/</id>
    <published>2019-08-17T22:12:37.000Z</published>
    <updated>2019-08-19T03:26:49.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记住，是不可能记住的。</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">TERM</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center">avatar</td><td style="text-align:left">可移动图标</td><td style="text-align:left">如头像</td></tr><tr><td style="text-align:center">interoperability</td><td style="text-align:left">互操作性</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">fixture</td><td style="text-align:left">固定设施</td><td style="text-align:left">如测试套具（fixture）</td></tr><tr><td style="text-align:center">register</td><td style="text-align:left">注册表</td><td style="text-align:left">—</td></tr><tr><td style="text-align:center">archive</td><td style="text-align:left">归档</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">parameter</td><td style="text-align:left">形参</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">argument</td><td style="text-align:left">实参</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">redirect</td><td style="text-align:left">重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">cheatsheet</td><td style="text-align:left">小抄</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">dump</td><td style="text-align:left">转存</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">trackback</td><td style="text-align:left">回溯</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;记住，是不可能记住的。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="cheatsheet" scheme="http://www.wrran.com/categories/cheatsheet/"/>
    
    
      <category term="cs-terms" scheme="http://www.wrran.com/tags/cs-terms/"/>
    
  </entry>
  
  <entry>
    <title>The Python Standard Library</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/python/stdlib/index/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/python/stdlib/index/</id>
    <published>2019-08-17T19:35:46.000Z</published>
    <updated>2019-08-21T00:28:13.859Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>善工必先利其器</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>标准库意味着由官方维护，会随着语言的演变而演变；因而值得大下功夫，好好琢磨。</p><p>标准库非常庞大，所提供的组件涉及范围十分广泛。该库包含了多个内置模块 (以C编写)，Python 程序员必须依靠它们来实现<strong>系统级功能</strong>，例如文件 I/O；此外还有大量以Python编写的模块，提供了日常编程中许多问题的<strong>标准解决方案</strong>。<br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文将罗列出这些标准库，但鉴于数量众多、功能复杂。<br>因此，先根据模块所针对的目标人群进行分类：入门级、高手级、骨灰级；之后根据其处理的问题进行大致分类（部分重叠）。</p><p>但出于方便，单独列出一节简述常用标准库的功能。</p><h1 id="常用标注库"><a href="#常用标注库" class="headerlink" title="常用标注库"></a>常用标注库</h1><h1 id="完整目录"><a href="#完整目录" class="headerlink" title="完整目录"></a>完整目录</h1><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>这部分单独列出各个阶段玩家都会使用到的一些工具。</p><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><p>该部分主要用来支持调用操作系统的一些标准库。</p><h4 id="系统平台无关（通用操作系统服务）"><a href="#系统平台无关（通用操作系统服务）" class="headerlink" title="系统平台无关（通用操作系统服务）"></a>系统平台无关（通用操作系统服务）</h4><p>本章中描述的各模块提供了在（几乎）所有的操作系统上可用的操作系统特性的接口，例如文件和时钟。这些接口通常以 Unix 或 C 接口为参照对象设计，不过在大多数其他系统上也可用。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>os</code></td><td style="text-align:left">操作系统接口模块</td></tr><tr><td style="text-align:center"><code>io</code></td><td style="text-align:left">处理流的核心工具</td></tr><tr><td style="text-align:center"><code>time</code></td><td style="text-align:left">时间的访问和转换</td></tr><tr><td style="text-align:center"><code>argparse</code></td><td style="text-align:left">命令行选项、参数和子命令解析器</td></tr><tr><td style="text-align:center"><code>getopt</code></td><td style="text-align:left">C风格的命令行解析器</td></tr><tr><td style="text-align:center"><code>logging</code></td><td style="text-align:left">Python 的日志记录工具</td></tr><tr><td style="text-align:center"><code>logging.config</code></td><td style="text-align:left">日志记录配置</td></tr><tr><td style="text-align:center"><code>logging.handlers</code></td><td style="text-align:left">日志处理器</td></tr><tr><td style="text-align:center"><code>getpass</code></td><td style="text-align:left">便携式密码输入工具</td></tr><tr><td style="text-align:center"><code>curses</code></td><td style="text-align:left">终端字符单元显示的处理</td></tr><tr><td style="text-align:center"><code>platform</code></td><td style="text-align:left">获取底层平台的标识数据</td></tr><tr><td style="text-align:center"><code>errno</code></td><td style="text-align:left">标准errno系统符号</td></tr><tr><td style="text-align:center"><code>ctypes</code></td><td style="text-align:left">Python 的外部函数库</td></tr></tbody></table><h4 id="系统平台相关"><a href="#系统平台相关" class="headerlink" title="系统平台相关"></a>系统平台相关</h4><h5 id="Windows系统相关模块"><a href="#Windows系统相关模块" class="headerlink" title="Windows系统相关模块"></a>Windows系统相关模块</h5><h5 id="Unix专有模块"><a href="#Unix专有模块" class="headerlink" title="Unix专有模块"></a>Unix专有模块</h5><h2 id="入门级"><a href="#入门级" class="headerlink" title="入门级"></a>入门级</h2><h3 id="解释器相关"><a href="#解释器相关" class="headerlink" title="解释器相关"></a>解释器相关</h3><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p>Python 解释器内置了很多函数和类型，您可以在任何时候使用它们；具体目录参见<a href="https://docs.python.org/zh-cn/3/library/functions.html。" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/functions.html。</a></p><h4 id="内置常量"><a href="#内置常量" class="headerlink" title="内置常量"></a>内置常量</h4><p>有少数的常量存在于内置命名空间中。它们是：</p><ul><li><code>False</code></li><li><code>True</code></li><li><code>None</code></li><li><code>NotImplemented</code></li><li><code>Ellipsis</code>，等同于<code>...</code></li><li><code>__debug__</code></li></ul><p>注解：变量名<code>None</code>，<code>False</code>，<code>True</code> 和 <code>__debug__</code> 无法重新赋值（赋值给它们，即使是属性名，将引发<code>SyntaxError</code>），所以它们可以被认为是“真正的”常数。</p><p><code>site</code> 模块（在启动期间自动导入，除非给出 -S 命令行选项）将几个常量添加到内置命名空间。 它们对交互式解释器<code>shell</code>很有用，并且不应在程序中使用。</p><ul><li><code>quit(code=None)</code></li><li><code>exit(code=None)</code>：当打印此对象时，会打印出一条消息，例如“Use quit() or Ctrl-D (i.e. EOF) to exit”，当调用此对象时，将使用指定的退出代码来引发 SystemExit。</li><li><code>copyright</code></li><li><code>credits</code>：打印或调用的对象分别打印版权或作者的文本。</li><li><code>license</code>：当打印此对象时，会打印出一条消息“Type license() to see the full license text”，当调用此对象时，将以分页形式显示完整的许可证文本（每次显示一屏）。</li></ul><h4 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h4><p>主要内置类型有数字、序列、映射、类、实例和异常。<br>有些多项集类是可变的。它们用于添加、移除或重排其成员的方法将原地执行，并不返回特定的项，绝对不会返回多项集实例自身而是返回<code>None</code>。<br>有些操作受多种对象类型的支持；特别地，实际上所有对象都可以被比较、检测逻辑值，以及转换为字符串（使用<code>repr()</code>函数或略有差异的<code>str()</code>函数）。后一个函数是在对象由<code>print()</code>函数输出时被隐式地调用的。</p><h4 id="内置异常"><a href="#内置异常" class="headerlink" title="内置异常"></a>内置异常</h4><p>在Python中，所有异常必须为一个派生自<code>BaseException</code>的类的实例。在带有提及一个特定类的<code>except</code>子句的<code>try</code>语句中，该子句也会处理任何派生自该类的异常类（但不处理<strong>它所派生出的异常类</strong>）。 通过子类化创建的两个不相关异常类永远是不等效的，既使它们具有相同的名称。</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>本章节描述的模块提供了一系列专门的数据类型例如日期与时间、固定类型的数组、堆队列、同步队列与集合等。<br>Python同样提供一些内置的数据类型，特别的，<code>dict</code>，<code>list</code>，<code>set</code>与<code>frozenset</code> 以及<code>tuple</code>。 <code>str</code>类通常指<strong>Unicode 字符串</strong>，并且<code>bytes</code>通常指<strong>二进制数据</strong>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>datetime</code></td><td style="text-align:left">基本的日期和时间类型</td></tr><tr><td style="text-align:center"><code>calendar</code></td><td style="text-align:left">日历相关函数</td></tr><tr><td style="text-align:center"><code>collections</code></td><td style="text-align:left">容器数据类型</td></tr><tr><td style="text-align:center"><code>collections.abc</code></td><td style="text-align:left">容器的抽象基类</td></tr><tr><td style="text-align:center"><code>heapq</code></td><td style="text-align:left">堆队列算法</td></tr><tr><td style="text-align:center"><code>bisect</code></td><td style="text-align:left">数组二分查找算法</td></tr><tr><td style="text-align:center"><code>array</code></td><td style="text-align:left">处理数值类型高效的数组</td></tr><tr><td style="text-align:center"><code>weakref</code></td><td style="text-align:left">弱引用</td></tr><tr><td style="text-align:center"><code>types</code></td><td style="text-align:left">动态创建类型，为内建类型提供指代</td></tr><tr><td style="text-align:center"><code>copy</code></td><td style="text-align:left">浅层 (shallow) 和深层 (deep) 复制操作</td></tr><tr><td style="text-align:center"><code>pprint</code></td><td style="text-align:left">数据美化输出</td></tr><tr><td style="text-align:center"><code>reprlib</code></td><td style="text-align:left"><code>repr()</code>的可替换实现</td></tr><tr><td style="text-align:center"><code>enum</code></td><td style="text-align:left">对枚举（enumerations）进行支持</td></tr></tbody></table><h4 id="数学和数学模块"><a href="#数学和数学模块" class="headerlink" title="数学和数学模块"></a>数学和数学模块</h4><p>本章介绍的模块提供与数字和数学相关的函数和数据类型。<code>numbers</code>模块定义了数字类型的抽象层次结构。 <code>math</code>和<code>cmath</code>模块包含浮点数和复数的各种数学函数。<code>decimal</code>模块支持使用任意精度算术的十进制数的精确表示。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>numbers</code></td><td style="text-align:left">数字的抽象基类</td></tr><tr><td style="text-align:center"><code>math</code></td><td style="text-align:left">数学函数</td></tr><tr><td style="text-align:center"><code>decimal</code></td><td style="text-align:left">十进制定点和浮点运算</td></tr><tr><td style="text-align:center"><code>fractions</code></td><td style="text-align:left">分数</td></tr><tr><td style="text-align:center"><code>random</code></td><td style="text-align:left">生成伪随机数</td></tr><tr><td style="text-align:center"><code>statistics</code></td><td style="text-align:left">数学统计函数</td></tr></tbody></table><h4 id="文件和目录访问"><a href="#文件和目录访问" class="headerlink" title="文件和目录访问"></a>文件和目录访问</h4><p>本章中描述的模块处理磁盘文件和目录。 例如，有一些模块用于读取文件的属性，以可移植的方式操作路径以及创建临时文件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>pathlib</code></td><td style="text-align:left">面向对象的文件系统路径</td></tr><tr><td style="text-align:center"><code>os.path</code></td><td style="text-align:left">常见路径操作</td></tr><tr><td style="text-align:center"><code>fileinput</code></td><td style="text-align:left">提供多个输入流的迭代功能</td></tr><tr><td style="text-align:center"><code>stat</code></td><td style="text-align:left">解释<code>stat()</code>的结果</td></tr><tr><td style="text-align:center"><code>filecmp</code></td><td style="text-align:left">文件及目录的比较</td></tr><tr><td style="text-align:center"><code>tempfile</code></td><td style="text-align:left">产生临时文件及文件夹</td></tr><tr><td style="text-align:center"><code>glob</code></td><td style="text-align:left">Unix类型路径名扩展</td></tr><tr><td style="text-align:center"><code>fnmatch</code></td><td style="text-align:left">Unix类型文件名匹配</td></tr><tr><td style="text-align:center"><code>linecache</code></td><td style="text-align:left">随机访问文本行</td></tr><tr><td style="text-align:center"><code>shutil</code></td><td style="text-align:left">高层次文件操作接口</td></tr><tr><td style="text-align:center"><code>macpath</code></td><td style="text-align:left">Mac OS 9 路径操作函数</td></tr></tbody></table><p>更多：<br><strong>模块 os</strong>：操作系统接口，包括处理比<strong>Python文件对象</strong>更低级别文件的功能。<br><strong>模块 io</strong>：Python的内置 I/O 库，包括抽象类和一些具体的类，如文件 I/O 。<br><strong>内置函数 open()</strong>：使用 Python 打开文件进行读写的标准方法。</p><h2 id="高手级"><a href="#高手级" class="headerlink" title="高手级"></a>高手级</h2><h3 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h3><h4 id="函数式编程模块"><a href="#函数式编程模块" class="headerlink" title="函数式编程模块"></a>函数式编程模块</h4><p>本章里描述的模块提供了函数和类，以支持函数式编程风格和在可调用对象上的通用操作。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>itertools</code></td><td style="text-align:left">为高效循环而创建迭代器的函数</td></tr><tr><td style="text-align:center"><code>functools</code></td><td style="text-align:left">高阶函数和可调用对象上的操作</td></tr><tr><td style="text-align:center"><code>operator</code></td><td style="text-align:left">标准运算符替代函数</td></tr></tbody></table><h4 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h4><p>本章中描述的模块支持并发执行代码。 适当的工具选择取决于要执行的任务（CPU密集型或IO密集型）和偏好的开发风格（事件驱动的协作式多任务或抢占式多任务处理）。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>threading</code></td><td style="text-align:left">基于线程的并行</td></tr><tr><td style="text-align:center"><code>multiprocessing</code></td><td style="text-align:left">基于进程的并行</td></tr><tr><td style="text-align:center"><code>concurrent</code></td><td style="text-align:left">启动并行任</td></tr><tr><td style="text-align:center"><code>subprocess</code></td><td style="text-align:left">子进程管理</td></tr><tr><td style="text-align:center"><code>sched</code></td><td style="text-align:left">事件调度器</td></tr><tr><td style="text-align:center"><code>queue</code></td><td style="text-align:left">一个同步的队列类</td></tr><tr><td style="text-align:center"><code>_thread</code></td><td style="text-align:left">底层多线程 API</td></tr><tr><td style="text-align:center"><code>_dummy_thread</code></td><td style="text-align:left">_thread 的替代模块</td></tr><tr><td style="text-align:center"><code>dummy_threading</code></td><td style="text-align:left">可直接替代 threading 模块。</td></tr></tbody></table><h3 id="开发生命周期相关"><a href="#开发生命周期相关" class="headerlink" title="开发生命周期相关"></a>开发生命周期相关</h3><p>该部分主要是用来支撑软件工程的某些生命周期所需的功能。</p><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>本章中描述的各模块可帮你编写 Python 程序。例如，<code>pydoc</code> 模块接受一个模块并根据该模块的内容来生成文档。<code>doctest</code> 和 <code>unittest</code> 这两个模块包含了用于编写单元测试的框架，并可用于自动测试所编写的代码，验证预期的输出是否产生。<code>2to3</code> 程序能够将 Python 2.x 源代码翻译成有效的 Python 3.x 源代码。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>typing</code></td><td style="text-align:left">类型标注支持</td></tr><tr><td style="text-align:center"><code>pydoc</code></td><td style="text-align:left">文档生成器及在线求助系统</td></tr><tr><td style="text-align:center"><code>doctest</code></td><td style="text-align:left">测试交互性的Python示例</td></tr><tr><td style="text-align:center"><code>unittest</code></td><td style="text-align:left">单元测试框架</td></tr><tr><td style="text-align:center"><code>unittest.mock</code></td><td style="text-align:left">mock对象库</td></tr><tr><td style="text-align:center">`2to3 - 自动将 Python 2 代码转为 Python 3 代码</td></tr><tr><td style="text-align:center"><code>test</code></td><td style="text-align:left">支持 Python 回归测试</td></tr><tr><td style="text-align:center"><code>test.support</code></td><td style="text-align:left">Python 测试组曲的实用工具</td></tr><tr><td style="text-align:center"><code>test.support.script_helper</code></td><td style="text-align:left">Python执行测试的使用工具</td></tr></tbody></table><h4 id="调试和分析"><a href="#调试和分析" class="headerlink" title="调试和分析"></a>调试和分析</h4><p>这些库可以帮助你进行Python开发：调试器使你能够逐步执行代码，分析堆栈帧并设置断点等，而分析器运行代码并为你提供执行时间的详细分类，从而使你能够找出你程序中的瓶颈。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>bdb</code></td><td style="text-align:left">debugger框架</td></tr><tr><td style="text-align:center"><code>faulthandler</code></td><td style="text-align:left">转存 Python 错误回溯</td></tr><tr><td style="text-align:center"><code>pdb</code></td><td style="text-align:left">Python的调试器</td></tr><tr><td style="text-align:center"><code>timeit</code></td><td style="text-align:left">测量小代码片段的执行时间</td></tr><tr><td style="text-align:center"><code>trace</code></td><td style="text-align:left">追溯 Python 语句执行情况</td></tr><tr><td style="text-align:center"><code>tracemalloc</code></td><td style="text-align:left">跟踪内存分配</td></tr></tbody></table><h4 id="软件打包和分发"><a href="#软件打包和分发" class="headerlink" title="软件打包和分发"></a>软件打包和分发</h4><p>这些库可帮助你发布和安装 Python 软件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>distutils</code></td><td style="text-align:left">构建和安装 Python 模块</td></tr><tr><td style="text-align:center"><code>ensurepip</code></td><td style="text-align:left">引导 pip 安装器</td></tr><tr><td style="text-align:center"><code>venv</code></td><td style="text-align:left">创建虚拟环境</td></tr><tr><td style="text-align:center"><code>zipapp</code></td><td style="text-align:left">管理可执行的 Python zip压缩包</td></tr></tbody></table><h2 id="骨灰级"><a href="#骨灰级" class="headerlink" title="骨灰级"></a>骨灰级</h2><h3 id="Python运行时服务"><a href="#Python运行时服务" class="headerlink" title="Python运行时服务"></a>Python运行时服务</h3><p>本章里描述的模块提供了和Python解释器及其环境交互相关的广泛服务。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>sys</code></td><td style="text-align:left">系统相关的参数和函数</td></tr><tr><td style="text-align:center"><code>sysconfig</code></td><td style="text-align:left">访问 Python’s 配置信息</td></tr><tr><td style="text-align:center"><code>builtins</code></td><td style="text-align:left">内建对象</td></tr><tr><td style="text-align:center"><code>__main__</code></td><td style="text-align:left">顶层脚本环境</td></tr><tr><td style="text-align:center"><code>warnings</code></td><td style="text-align:left">警告控制</td></tr><tr><td style="text-align:center"><code>dataclasses</code></td><td style="text-align:left">数据类</td></tr><tr><td style="text-align:center"><code>contextlib</code></td><td style="text-align:left">with语句上下文的实用工具</td></tr><tr><td style="text-align:center"><code>abc</code></td><td style="text-align:left">抽象基类</td></tr><tr><td style="text-align:center"><code>atexit</code></td><td style="text-align:left">退出处理器</td></tr><tr><td style="text-align:center"><code>traceback</code></td><td style="text-align:left">打印或检索堆栈回溯</td></tr><tr><td style="text-align:center"><code>__future__</code></td><td style="text-align:left">Future 语句定义</td></tr><tr><td style="text-align:center"><code>gc</code></td><td style="text-align:left">垃圾回收器接口</td></tr><tr><td style="text-align:center"><code>inspect</code></td><td style="text-align:left">检查对象</td></tr><tr><td style="text-align:center"><code>site</code></td><td style="text-align:left">site配置钩子</td></tr></tbody></table><h3 id="自定义Python解释器"><a href="#自定义Python解释器" class="headerlink" title="自定义Python解释器"></a>自定义Python解释器</h3><p>本章中描述的模块允许编写类似于 Python 的交互式解释器的接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>code</code></td><td style="text-align:left">解释器基类</td></tr><tr><td style="text-align:center"><code>codeop</code></td><td style="text-align:left">编译Python代码</td></tr></tbody></table><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>本章中介绍的模块提供了导入其他Python模块和挂钩以自定义导入过程的新方法。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>zipimport</code></td><td style="text-align:left">从zip压缩包中导入模块</td></tr><tr><td style="text-align:center"><code>pkgutil</code></td><td style="text-align:left">包扩展的实用工具</td></tr><tr><td style="text-align:center"><code>modulefinder</code></td><td style="text-align:left">查找脚本使用的模块</td></tr><tr><td style="text-align:center"><code>runpy</code></td><td style="text-align:left">定位与执行 Python 模块</td></tr><tr><td style="text-align:center"><code>importlib</code></td><td style="text-align:left">import 的实现</td></tr></tbody></table><h3 id="Python语言服务"><a href="#Python语言服务" class="headerlink" title="Python语言服务"></a>Python语言服务</h3><p>Python 提供了许多模块来帮助使用 Python 语言。 这些模块支持标记化、解析、语法分析、字节码反汇编以及各种其他工具。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>parser</code></td><td style="text-align:left">访问 Python 解析树</td></tr><tr><td style="text-align:center"><code>ast</code></td><td style="text-align:left">抽象语法树</td></tr><tr><td style="text-align:center"><code>symtable</code></td><td style="text-align:left">访问 编译器的符号表</td></tr><tr><td style="text-align:center"><code>symbol</code></td><td style="text-align:left">与 Python 解析树一起使用的常量</td></tr><tr><td style="text-align:center"><code>token</code></td><td style="text-align:left">与Python解析树一起使用的常量</td></tr><tr><td style="text-align:center"><code>keyword</code></td><td style="text-align:left">检验Python关键字</td></tr><tr><td style="text-align:center"><code>tokenize</code></td><td style="text-align:left">Python源码的Tokenizer</td></tr><tr><td style="text-align:center"><code>tabnanny</code></td><td style="text-align:left">模糊缩进检测</td></tr><tr><td style="text-align:center"><code>pyclbr</code></td><td style="text-align:left">Python 类浏览器的支撑包</td></tr><tr><td style="text-align:center"><code>py_compile</code></td><td style="text-align:left">编译 Python 源码</td></tr><tr><td style="text-align:center"><code>compileall</code></td><td style="text-align:left">二进制编码 Python库</td></tr><tr><td style="text-align:center"><code>dis</code></td><td style="text-align:left">Python 字节码反汇编器</td></tr><tr><td style="text-align:center"><code>pickletools</code></td><td style="text-align:left">pickle开发者的工具箱</td></tr></tbody></table><h2 id="任务相关"><a href="#任务相关" class="headerlink" title="任务相关"></a>任务相关</h2><p>该部分罗列的是与需求域相关的一些标准库。</p><h3 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h3><h4 id="文本处理服务"><a href="#文本处理服务" class="headerlink" title="文本处理服务"></a>文本处理服务</h4><p>本小节介绍的模块提供了广泛的字符串操作和其他文本处理服务。<br>在<strong>二进制数据服务</strong>之下描述的<code>codecs</code>模块也与文本处理高度相关。此外也请参阅Python内置字符串类型的文档文本序列类型 – <code>str</code>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>string</code></td><td style="text-align:left">常见的字符串操作</td></tr><tr><td style="text-align:center"><code>re</code></td><td style="text-align:left">正则表达式操作</td></tr><tr><td style="text-align:center"><code>difflib</code></td><td style="text-align:left">计算差异的辅助工具</td></tr><tr><td style="text-align:center"><code>textwrap</code></td><td style="text-align:left">文本自动换行与填充</td></tr><tr><td style="text-align:center"><code>unicodedata</code></td><td style="text-align:left">Unicode 数据库</td></tr><tr><td style="text-align:center"><code>stringprep</code></td><td style="text-align:left">因特网字符串预备</td></tr><tr><td style="text-align:center"><code>readline</code></td><td style="text-align:left">GNU readline 接口</td></tr><tr><td style="text-align:center"><code>rlcompleter</code></td><td style="text-align:left">GNU readline 的补全函数</td></tr></tbody></table><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h4><p>本章中描述的模块解析各种不是标记语言且与电子邮件无关的杂项文件格式。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>csv</code></td><td style="text-align:left">CSV 文件读写</td></tr><tr><td style="text-align:center"><code>configparser</code></td><td style="text-align:left">Configuration file parser</td></tr><tr><td style="text-align:center"><code>netrc</code></td><td style="text-align:left">netrc file processing</td></tr><tr><td style="text-align:center"><code>xdrlib</code></td><td style="text-align:left">Encode and decode XDR data</td></tr><tr><td style="text-align:center"><code>plistlib</code></td><td style="text-align:left">Generate and parse Mac OS X .plist files</td></tr></tbody></table><h4 id="数据压缩和存档"><a href="#数据压缩和存档" class="headerlink" title="数据压缩和存档"></a>数据压缩和存档</h4><p>本章中描述的模块支持 zlib、gzip、bzip2 和 lzma 数据压缩算法，以及创建 ZIP 和 tar 格式的归档文件。参见由 shutil 模块提供的 Archiving operations 。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>zlib</code></td><td style="text-align:left">与 gzip 兼容的压缩</td></tr><tr><td style="text-align:center"><code>gzip</code></td><td style="text-align:left">对 gzip 格式的支持</td></tr><tr><td style="text-align:center"><code>bz2</code></td><td style="text-align:left">对 bzip2 压缩算法的支持</td></tr><tr><td style="text-align:center"><code>lzma</code></td><td style="text-align:left">用 LZMA 算法压缩</td></tr><tr><td style="text-align:center"><code>zipfile</code></td><td style="text-align:left">使用ZIP存档</td></tr><tr><td style="text-align:center"><code>tarfile</code></td><td style="text-align:left">读写tar归档文件</td></tr></tbody></table><h4 id="结构化标记处理工具"><a href="#结构化标记处理工具" class="headerlink" title="结构化标记处理工具"></a>结构化标记处理工具</h4><p>Python 支持各种模块，以处理各种形式的结构化数据标记。 这包括使用标准通用标记语言（SGML）和超文本标记语言（HTML）的模块，以及使用可扩展标记语言（XML）的几个接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>html</code></td><td style="text-align:left">超文本标记语言支持</td></tr><tr><td style="text-align:center"><code>html.parser</code></td><td style="text-align:left">简单的 HTML 和 XHTML 解析器</td></tr><tr><td style="text-align:center"><code>html.entities</code></td><td style="text-align:left">HTML 一般实体的定义</td></tr><tr><td style="text-align:center"><code>xml.etree.ElementTree</code></td><td style="text-align:left">The ElementTree XML API</td></tr><tr><td style="text-align:center"><code>xml.dom</code></td><td style="text-align:left">The Document Object Model API</td></tr><tr><td style="text-align:center"><code>xml.dom.minidom</code></td><td style="text-align:left">最小 DOM 实现</td></tr><tr><td style="text-align:center"><code>xml.dom.pulldom</code></td><td style="text-align:left">支持构建部分 DOM 树</td></tr><tr><td style="text-align:center"><code>xml.sax</code></td><td style="text-align:left">SAX2 解析器</td></tr><tr><td style="text-align:center"><code>xml.sax.handler</code></td><td style="text-align:left">SAX 处理器的基类</td></tr><tr><td style="text-align:center"><code>xml.sax.saxutils</code></td><td style="text-align:left">SAX 实用工具</td></tr><tr><td style="text-align:center"><code>xml.sax.xmlreader</code></td><td style="text-align:left">XML 解析器接口</td></tr><tr><td style="text-align:center"><code>xml.parsers.expat</code></td><td style="text-align:left">实用 Expat 实现的快速XML解析</td></tr></tbody></table><h4 id="二进制数据服务"><a href="#二进制数据服务" class="headerlink" title="二进制数据服务"></a>二进制数据服务</h4><p>本章介绍的模块提供了一些操作二进制数据的基本服务操作。 有关二进制数据的其他操作，特别是与文件格式和网络协议有关的操作，将在相关章节中介绍。<br>下面描述的一些库<strong>文本处理服务</strong>也可以使用<strong>ASCII</strong>兼容的二进制格式（例如<code>re</code>）或所有二进制数据（例如<code>difflib</code>）。<br>另外，请参阅Python的内置二进制数据类型的文档<strong>二进制序列类型</strong> — <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>struct</code></td><td style="text-align:left">将字节串解读为打包的二进制数据</td></tr><tr><td style="text-align:center"><code>codecs</code></td><td style="text-align:left">编解码器注册和相关基类</td></tr></tbody></table><h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><p>本章中描述的模块支持在磁盘上以持久形式存储 Python 数据。<code>pickle</code>和<code>marshal</code>模块可以将许多 Python 数据类型转换为字节流，然后从字节中重新创建对象。各种与 DBM 相关的模块支持一系列基于散列的文件格式，这些格式存储字符串到其他字符串的映射。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>pickle</code></td><td style="text-align:left">Python 对象序列化</td></tr><tr><td style="text-align:center"><code>copyreg</code></td><td style="text-align:left"><code>pickle</code>支撑函数的注册表</td></tr><tr><td style="text-align:center"><code>shelve</code></td><td style="text-align:left">Python 对象持久化</td></tr><tr><td style="text-align:center"><code>marshal</code></td><td style="text-align:left">内部 Python 对象序列化</td></tr><tr><td style="text-align:center"><code>dbm</code></td><td style="text-align:left">UNIX “数据库”的接口</td></tr><tr><td style="text-align:center"><code>sqlite3</code></td><td style="text-align:left">SQLite 数据库 DB-API 2.0 接口模块</td></tr></tbody></table><h3 id="网络开发"><a href="#网络开发" class="headerlink" title="网络开发"></a>网络开发</h3><h4 id="网络和进程间通信"><a href="#网络和进程间通信" class="headerlink" title="网络和进程间通信"></a>网络和进程间通信</h4><p>本章介绍的模块提供了网络和进程间通信的机制。</p><p>某些模块仅适用于同一台机器上的两个进程，例如<code>signal</code>和<code>mmap</code>。其他模块支持两个或多个进程可用于跨机器通信的网络协议。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>asyncio</code></td><td style="text-align:left">异步 I/O</td></tr><tr><td style="text-align:center"><code>socket</code></td><td style="text-align:left">底层网络接口</td></tr><tr><td style="text-align:center"><code>ssl</code></td><td style="text-align:left">socket对象的TLS/SSL包装器</td></tr><tr><td style="text-align:center"><code>select</code></td><td style="text-align:left">等待 I/O 完成</td></tr><tr><td style="text-align:center"><code>selectors</code></td><td style="text-align:left">高级 I/O 复用库</td></tr><tr><td style="text-align:center"><code>asyncore</code></td><td style="text-align:left">异步socket处理器</td></tr><tr><td style="text-align:center"><code>asynchat</code></td><td style="text-align:left">异步 socket 指令/响应 处理器</td></tr><tr><td style="text-align:center"><code>signal</code></td><td style="text-align:left">设置异步事件处理程序</td></tr><tr><td style="text-align:center"><code>mmap</code></td><td style="text-align:left">内存映射文件支持</td></tr></tbody></table><h4 id="互联网数据处理"><a href="#互联网数据处理" class="headerlink" title="互联网数据处理"></a>互联网数据处理</h4><p>本章介绍了支持处理互联网上常用数据格式的模块。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>email</code></td><td style="text-align:left">电子邮件与 MIME 处理包</td></tr><tr><td style="text-align:center"><code>json</code></td><td style="text-align:left">JSON 编码和解码器</td></tr><tr><td style="text-align:center"><code>mailcap</code></td><td style="text-align:left">处理Mailcap文件 file handling</td></tr><tr><td style="text-align:center"><code>mailbox</code></td><td style="text-align:left">管理不同格式的邮箱</td></tr><tr><td style="text-align:center"><code>mimetypes</code></td><td style="text-align:left">将文件名映射为MIME类型</td></tr><tr><td style="text-align:center"><code>base64</code></td><td style="text-align:left">Base16, Base32, Base64, Base85 数据编码</td></tr><tr><td style="text-align:center"><code>binhex</code></td><td style="text-align:left">对binhex4文件进行编码和解码</td></tr><tr><td style="text-align:center"><code>binascii</code></td><td style="text-align:left">二进制和 ASCII 码互转</td></tr><tr><td style="text-align:center"><code>quopri</code></td><td style="text-align:left">MIME 可打印字符引用编码数据（MIME quoted-printable data）的解码与编码</td></tr><tr><td style="text-align:center"><code>uu</code></td><td style="text-align:left">uuencode格式数据的编码与解码</td></tr></tbody></table><h4 id="互联网协议和支持"><a href="#互联网协议和支持" class="headerlink" title="互联网协议和支持"></a>互联网协议和支持</h4><p>本章介绍的模块实现了互联网协议并支持相关技术。 它们都是用 Python 实现的。 这些模块中的大多数都需要存在依赖于系统的模块 socket ，目前大多数流行平台都支持它。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>webbrowser</code></td><td style="text-align:left">方便的Web浏览器控制器</td></tr><tr><td style="text-align:center"><code>cgi</code></td><td style="text-align:left">支持<strong>C</strong>ommon <strong>G</strong>ateway <strong>I</strong>nterface</td></tr><tr><td style="text-align:center"><code>cgitb</code></td><td style="text-align:left">CGI脚本的追踪管理器</td></tr><tr><td style="text-align:center"><code>wsgiref</code></td><td style="text-align:left">WSGI实用工具及参考实现</td></tr><tr><td style="text-align:center"><code>urllib</code></td><td style="text-align:left">URL 处理模块</td></tr><tr><td style="text-align:center"><code>urllib.request</code></td><td style="text-align:left">用于打开 URL 的可扩展库</td></tr><tr><td style="text-align:center"><code>urllib.response</code></td><td style="text-align:left">urllib 使用的 Response 类</td></tr><tr><td style="text-align:center"><code>urllib.parse</code></td><td style="text-align:left">将 URLs 解析为各组件</td></tr><tr><td style="text-align:center"><code>urllib.error</code></td><td style="text-align:left">urllib.request 引发的异常类</td></tr><tr><td style="text-align:center"><code>urllib.robotparser</code></td><td style="text-align:left">robots.txt 语法分析程序</td></tr><tr><td style="text-align:center"><code>http.client</code></td><td style="text-align:left">HTTP 协议客户端</td></tr><tr><td style="text-align:center"><code>ftplib</code></td><td style="text-align:left">FTP 协议客户端</td></tr><tr><td style="text-align:center"><code>poplib</code></td><td style="text-align:left">POP3 协议客户端</td></tr><tr><td style="text-align:center"><code>imaplib</code></td><td style="text-align:left">IMAP4 协议客户端</td></tr><tr><td style="text-align:center"><code>nntplib</code></td><td style="text-align:left">NNTP 协议客户端</td></tr><tr><td style="text-align:center"><code>smtplib</code></td><td style="text-align:left">SMTP 协议客户端</td></tr><tr><td style="text-align:center"><code>smtpd</code></td><td style="text-align:left">SMTP 服务端</td></tr><tr><td style="text-align:center"><code>telnetlib</code></td><td style="text-align:left">Telnet 客户端</td></tr><tr><td style="text-align:center"><code>uuid</code></td><td style="text-align:left">UUID（RFC 4122） 对象</td></tr><tr><td style="text-align:center"><code>socketserver</code></td><td style="text-align:left">网络服务器框架</td></tr><tr><td style="text-align:center"><code>http.server</code></td><td style="text-align:left">HTTP 服务器</td></tr><tr><td style="text-align:center"><code>http.cookies</code></td><td style="text-align:left">HTTP 状态管理</td></tr><tr><td style="text-align:center"><code>http.cookiejar</code></td><td style="text-align:left">HTTP 客户端的 Cookie 处理</td></tr><tr><td style="text-align:center"><code>xmlrpc</code></td><td style="text-align:left">XMLRPC 服务端与客户端模块</td></tr><tr><td style="text-align:center"><code>xmlrpc.client</code></td><td style="text-align:left">XML-RPC 客户端</td></tr><tr><td style="text-align:center"><code>xmlrpc.server</code></td><td style="text-align:left">基础的 XML-RPC 服务器</td></tr><tr><td style="text-align:center"><code>ipaddress</code></td><td style="text-align:left">IPv4/IPv6 操作库</td></tr></tbody></table><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p>本章中介绍的模块通过提供选择要在程序信息中使用的语言的机制或通过定制输出以匹配本地约定来帮助你编写不依赖于语言和区域设置的软件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>gettext</code></td><td style="text-align:left">多语种国际化服务</td></tr><tr><td style="text-align:center"><code>locale</code></td><td style="text-align:left">国际化服务</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="多媒体服务"><a href="#多媒体服务" class="headerlink" title="多媒体服务"></a>多媒体服务</h4><p>本章描述的模块实现了主要用于多媒体应用的各种算法或接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>audioop</code></td><td style="text-align:left">操作原始音频数据</td></tr><tr><td style="text-align:center"><code>aifc</code></td><td style="text-align:left">读写AIFF/AIFC文件</td></tr><tr><td style="text-align:center"><code>sunau</code></td><td style="text-align:left">读写 Sun AU 文件</td></tr><tr><td style="text-align:center"><code>wave</code></td><td style="text-align:left">读写WAV格式文件</td></tr><tr><td style="text-align:center"><code>chunk</code></td><td style="text-align:left">读写IFF块文件</td></tr><tr><td style="text-align:center"><code>colorsys</code></td><td style="text-align:left">颜色系统间的转换</td></tr><tr><td style="text-align:center"><code>imghdr</code></td><td style="text-align:left">推测图像类型</td></tr><tr><td style="text-align:center"><code>sndhdr</code></td><td style="text-align:left">推测声音文件的类型</td></tr><tr><td style="text-align:center"><code>ossaudiodev</code></td><td style="text-align:left">访问兼容OSS的音频设备</td></tr></tbody></table><h4 id="加密服务"><a href="#加密服务" class="headerlink" title="加密服务"></a>加密服务</h4><p>本章中描述的模块实现了加密性质的各种算法。 它们可由安装人员自行决定。 在Unix系统上，<code>crypt</code>模块也可以使用。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>hashlib</code></td><td style="text-align:left">安全哈希与消息摘要</td></tr><tr><td style="text-align:center"><code>hmac</code></td><td style="text-align:left">基于密钥的消息验证</td></tr><tr><td style="text-align:center"><code>secrets</code></td><td style="text-align:left">为密钥生成安全的随机数</td></tr></tbody></table><h4 id="程序框架界面"><a href="#程序框架界面" class="headerlink" title="程序框架界面"></a>程序框架界面</h4><p>本章中描述的模块是很大程度上决定程序结构的框架。 目前，这里描述的模块都面向编写命令行接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>turtle</code></td><td style="text-align:left">海龟绘图</td></tr><tr><td style="text-align:center"><code>cmd</code></td><td style="text-align:left">支持面向行的命令解释器</td></tr><tr><td style="text-align:center"><code>shlex</code></td><td style="text-align:left">简单词法分析器</td></tr></tbody></table><h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><p>Tk图形用户界面：<a href="https://docs.python.org/zh-cn/3/library/tk.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/tk.html</a><br>formatter (已移除，通用的输出排版）：<a href="https://docs.python.org/zh-cn/3/library/formatter.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/formatter.html</a><br>contextvars（上下文变量管理）：<a href="https://docs.python.org/zh-cn/3/library/contextvars.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/contextvars.html</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Python3官方文档：<a href="https://docs.python.org/3/library/" target="_blank" rel="noopener">https://docs.python.org/3/library/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;善工必先利其器&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/learn/python/"/>
    
      <category term="stdlib" scheme="http://www.wrran.com/categories/learn/python/stdlib/"/>
    
    
      <category term="python-stdlib" scheme="http://www.wrran.com/tags/python-stdlib/"/>
    
  </entry>
  
  <entry>
    <title>python@cs-lang</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/python/index/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/python/index/</id>
    <published>2019-08-17T19:03:34.000Z</published>
    <updated>2019-08-17T19:05:36.842Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有牙齿的<code>python</code>更厉害</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;有牙齿的&lt;code&gt;python&lt;/code&gt;更厉害&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/learn/python/"/>
    
    
      <category term="python" scheme="http://www.wrran.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tag Plugins@hexo</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/hexo/tag_plugins/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/hexo/tag_plugins/</id>
    <published>2019-08-17T17:44:23.000Z</published>
    <updated>2019-08-17T18:13:49.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>授人以鱼不如授人以渔</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>hexo中的<code>tag plugins</code>给了我们在markdown中使用“局部函数”的能力。同时注意“标签插件”和“Front-matter”中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><h1 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h1><p>在文章中插入引言，可包含作者、来源和标题。<br></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">blockquote</span> [author[, <span class="name">source</span>]] [link] [source_link_title] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>在文章中插入代码。<br></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock <span class="string">[title]</span> <span class="string">[lang:language]</span> <span class="string">[url]</span> <span class="string">[link text]</span> %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p></p><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。<br>``` [language] [title] [url] [link text] code snippet ```</p><h1 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h1><p>在文章中插入“Pull quote”。<br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">pullquote</span> [class] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endpullquote</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h1><blockquote><p>jsFiddle 是一个Web开发人员的练习场，可在线编辑和测试 HTML、CSS、JavaScript代码片段。在 jsFiddle 编辑的代码，可以保存，也可分享给其他人，还可嵌入到网站中。</p></blockquote><p>在文章中嵌入“jsFiddle”。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h1><blockquote><p>Gist 是 Github 推出的基于 Git 的代码片段管理服务。用户可以提交自己的代码片段或任意的文本，可以作为个人的代码管理库、文档管理库等。</p></blockquote><p>在文章中嵌入 Gist。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><p>在文章中插入“iframe”。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><p>在文章中插入指定大小的图片。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] <span class="string">"title text 'alt text'"</span> %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>在文章中插入链接，并自动给外部链接添加<code>target=&quot;_blank&quot;</code>属性。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h1><p>插入<code>source/downloads/code</code>文件夹内的代码文件。<code>source/downloads/code</code>不是固定的，取决于你在配置文件中<code>code_dir</code>的配置。<br></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [<span class="keyword">lan</span><span class="variable">g:language</span>] path/<span class="keyword">to</span>/<span class="keyword">file</span> %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h1><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">youtube</span> video_id %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h1><blockquote><p>Vimeo 是一个高清视频播客网站，与大多数类似的视频分享网站不同，Vimeo允许上传1280X700的高清视频，上传后Vimeo会自动转码为高清视频，源视频文件可以自由下载，它达到了真正的高清视频标准。</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">vimeo</span> video_id %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h1><p>如果您想在文章中插入<code>Swig</code>标签，可以尝试使用”Raw”标签，以免发生解析异常。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> raw </span>%&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h1><p>在文章中使用<code>&lt;!-- more --&gt;</code>，那么<code>&lt;!-- more --&gt;</code>之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。<br>注意，摘要可能会被<code>Front Matter</code>中的<code>excerpt</code>覆盖。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>官方文档：<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;授人以鱼不如授人以渔&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="hexo" scheme="http://www.wrran.com/categories/learn/hexo/"/>
    
    
      <category term="tag-plugin" scheme="http://www.wrran.com/tags/tag-plugin/"/>
    
  </entry>
  
  <entry>
    <title>Using Cases@argparse</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/argparse/using_case/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/argparse/using_case/</id>
    <published>2019-08-17T17:23:34.000Z</published>
    <updated>2019-08-17T18:21:29.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>笔头虽烂可不要贪用哦</p></blockquote><a id="more"></a><h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.parse_args()</span><br></pre></td></tr></table></figure><p>将上述文件保存为<code>prog.py</code>，并在文件对应目录执行下述命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line">python prog.py --verbose</span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: --verbose</span></span><br><span class="line">python prog.py foo</span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: foo</span></span><br></pre></td></tr></table></figure><p></p><p>要点：</p><blockquote><p>The <code>--help</code> option, which can also be shortened to <code>-h</code>, is the only option we get for free (i.e. no need to specify it). Specifying anything else results in an error.</p></blockquote><h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'echo'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.echo)</span><br></pre></td></tr></table></figure><p>保存上述文件为<code>prog.py</code>，并在其目录下执行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: echo</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line">python prog.py foo</span><br><span class="line"><span class="comment"># foo</span></span><br></pre></td></tr></table></figure><p></p><p>向<strong>位置参数</strong>添加帮助信息：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'echo'</span>, help=<span class="string">'echo the string you use here'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.echo</span><br></pre></td></tr></table></figure><p></p><p>此时执行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python prog.py -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   echo        echo the string you use here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br></pre></td></tr></table></figure><p></p><p>指定<strong>位置参数</strong>类型：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'square'</span>, help=<span class="string">'display a square of a given number'</span>,</span><br><span class="line">                    type=int)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.square**<span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>并执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py four</span><br><span class="line"><span class="comment"># usage: prog.py [-h] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument square: invalid int value: 'four'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h1><p>先添加一个<strong>选项参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--verbosity'</span>, help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --verbosity 1</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbosity VERBOSITY]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#  -h, --help            show this help message and exit</span></span><br><span class="line"><span class="comment">#  --verbosity VERBOSITY</span></span><br><span class="line"><span class="comment">#                        increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>限定上述中的<code>--verbosity</code>只能接受指定或者不指定：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                    action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --verbose</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py --verbose 1</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbose]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: 1</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbose]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line"><span class="comment">#   --verbose   increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>注意上述执行<code>python prog.py --help</code>时提示信息的不同。</p><p>加入对应的“短”<strong>选项参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                    action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python prog.py -v</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help     show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbose  increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><h1 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h1><p>将<strong>位置参数</strong>与<strong>选项参数</strong>结合使用：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_arugument(<span class="string">'square'</span>, type=int,</span><br><span class="line">                     help=<span class="string">'display a square of a given number'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">                    help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'the square of &#123;&#125; equals &#123;&#125;'</span>.format(arg.square, answer))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: square</span></span><br><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 --verbose</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py --verbose 4</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br></pre></td></tr></table></figure><p></p><p>更复杂的实例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 -v</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v VERBOSITY] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -v/--verbosity: expected one argument</span></span><br><span class="line"><span class="comment"># python prog.py 4 -v 1</span></span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 -v 2</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -v 3</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p></p><p>注意到上例中<code>python prog.py 4 -v 3</code>并没有如我们所期望一样：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int, choices=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 -v 3</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v &#123;0,1,2&#125;] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)</span></span><br><span class="line">python prog.py 4 -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v &#123;0,1,2&#125;] square</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   square                display a square of a given number</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help            show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v &#123;0,1,2&#125;, --verbosity &#123;0,1,2&#125;</span></span><br><span class="line"><span class="comment">#                         increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>另外一种常见的设定参数的方式：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display the square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 -v</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 -vv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 --verbosity --verbosity</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -v 1</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: 1</span></span><br><span class="line">python prog.py 4 -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   square           display a square of a given number</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help       show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbosity  increase output verbosity</span></span><br><span class="line">python prog.py 4 -vvv</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p></p><p>同样在指令<code>python prog.py 4 -vvv</code>表现不对：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bugfix: replace == with &gt;=</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 -vvv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -vvvv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#  File "prog.py", line 11, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     if args.verbosity &gt;= 2:</span></span><br><span class="line"><span class="comment"># TypeError: unorderable types: NoneType() &gt;= int()</span></span><br></pre></td></tr></table></figure><p></p><p>通过为<strong>选项参数</strong>设定默认值，修复上述bug：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><h1 id="综合实例-1"><a href="#综合实例-1" class="headerlink" title="综合实例+"></a>综合实例+</h1><p>基于上例，这次我们让程序可以指定指数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: x, y</span></span><br><span class="line">python prog.py -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] x y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   x                the base</span></span><br><span class="line"><span class="comment">#   y                the exponent</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help       show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbosity</span></span><br><span class="line">python prog.py 4 2 -v</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br></pre></td></tr></table></figure><p></p><h1 id="实际使用示例"><a href="#实际使用示例" class="headerlink" title="实际使用示例"></a>实际使用示例</h1><p>在实际使用过程中，发现要使用的功能在下段代码中都有体现：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'CNN sentiment classificer'</span>)</span><br><span class="line"><span class="comment"># learning</span></span><br><span class="line">parser.add_argument(<span class="string">'-lr'</span>, type=float, default=<span class="number">0.001</span>,</span><br><span class="line">                    help=<span class="string">'initial learning rate [default: 0.001]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-epochs'</span>, type=int, default=<span class="number">256</span>,</span><br><span class="line">                    help=<span class="string">'number of epochs for train [default: 256]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-batch-size'</span>, type=int, default=<span class="number">64</span>,</span><br><span class="line">                    help=<span class="string">'batch size for training [default: 64]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-log-interval'</span>,  type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before logging training status [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-test-interval'</span>, type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before testing [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-save-interval'</span>, type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before saving [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-save-dir'</span>, type=str, default=<span class="string">'snapshot'</span>,</span><br><span class="line">                    help=<span class="string">'where to save the snapshot'</span>)</span><br><span class="line"><span class="comment"># data </span></span><br><span class="line">parser.add_argument(<span class="string">'-shuffle'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'shuffle the data every epoch'</span> )</span><br><span class="line"><span class="comment"># model</span></span><br><span class="line">parser.add_argument(<span class="string">'-dropout'</span>, type=float, default=<span class="number">0.5</span>,</span><br><span class="line">                    help=<span class="string">'the probability for dropout [default: 0.5]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-max-norm'</span>, type=float, default=<span class="number">3.0</span>,</span><br><span class="line">                    help=<span class="string">'l2 constraint of parameters [default: 3.0]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-embed-dim'</span>, type=int, default=<span class="number">300</span>,</span><br><span class="line">                    help=<span class="string">'number of embedding dimension [default: 300]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-filter-stopwords'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'whether to filter out stop words [default: False]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-embed-pretrain'</span>, type=str, default=<span class="string">'./other/glove.840B.300d.filtered.npy'</span>,</span><br><span class="line">                    help=<span class="string">'path of pretrained word embedding [default: ./other/glove.840B.300d.filtered.npy]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-kernel-num'</span>, type=int, default=<span class="number">32</span>,</span><br><span class="line">                    help=<span class="string">'number of each kind of kernel [default: 32]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-kernel-sizes'</span>, type=str, default=<span class="string">'3,4,5'</span>,</span><br><span class="line">                    help=<span class="string">'comma-separated kernel size to use for convolution'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-static'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'fix the embedding'</span>)</span><br><span class="line"><span class="comment"># device</span></span><br><span class="line">parser.add_argument(<span class="string">'-device'</span>, type=int, default=<span class="number">-1</span>,</span><br><span class="line">                    help=<span class="string">'device to use for iterate data, -1 mean cpu [default: -1]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-no-cuda'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'disable the gpu'</span> )</span><br><span class="line"><span class="comment"># option</span></span><br><span class="line">parser.add_argument(<span class="string">'-snapshot'</span>, type=str, default=<span class="literal">None</span>,</span><br><span class="line">                    help=<span class="string">'filename of model snapshot [default: None]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-predict'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'predict the given textdata'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-predict-dir'</span>, type=str, default=<span class="string">'prediction'</span>,</span><br><span class="line">                    help=<span class="string">"where to save the prediction [default: prediction]"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-test'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'train or test'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># update args about data &amp; device &amp; option</span></span><br><span class="line">args.save_dir = os.path.join(</span><br><span class="line">    args.save_dir,</span><br><span class="line">    datetime.datetime.now().strftime(<span class="string">'%Y%m%d_%H%M%S'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.predict <span class="keyword">and</span> <span class="keyword">not</span> os.path.isdir(args.save_dir):</span><br><span class="line">    os.makedirs(args.save_dir)</span><br><span class="line">args.cuda = (<span class="keyword">not</span> args.no_cuda) <span class="keyword">and</span> torch.cuda.is_available(); <span class="keyword">del</span> args.no_cuda</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nParameters:'</span>)</span><br><span class="line"><span class="keyword">for</span> attr, value <span class="keyword">in</span> sorted(args.__dict__.items()):</span><br><span class="line">    print(<span class="string">'\t&#123;&#125;=&#123;&#125;'</span>.format(attr.upper(), value))</span><br></pre></td></tr></table></figure><p></p><h1 id="互斥的选项参数"><a href="#互斥的选项参数" class="headerlink" title="互斥的选项参数"></a>互斥的选项参数</h1><p>该节再引入一个方法<code>add_mutually_exclusive_group()</code>，该方法用来解决两个相斥的参数，如<code>--quiet</code>和<code>--verbose</code>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 2</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 2 -q</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 2 -v</span><br><span class="line"><span class="comment"># 4 to the power 2 equals 16</span></span><br><span class="line">python prog.py 4 2 -vq</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span></span><br><span class="line">python prog.py 4 2 -v --quiet</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span></span><br></pre></td></tr></table></figure><p></p><p>最后，我们还可以通过如下方式告诉使用者程序的用途：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"calculate X to the power of Y"</span>)</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># calculate X to the power of Y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   x              the base</span></span><br><span class="line"><span class="comment">#   y              the exponent</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help     show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbose</span></span><br><span class="line"><span class="comment">#   -q, --quiet</span></span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>想更多的了解<code>argparse</code>的内部机制而非仅限于使用，可以参阅<a href="http://wrran.com/blog/2019/08/18/learn/argparse/using_case/" target="_blank" rel="noopener">argparse@python</a>。</p><p><a href="https://docs.python.org/2/howto/argparse.html" target="_blank" rel="noopener">Argparse Tutorial</a><br><a href="http://www.jianshu.com/p/fef2d215b91d" target="_blank" rel="noopener">python argparse用法总结</a><br><a href="https://docs.python.org/2/library/argparse.html#module-argparse" target="_blank" rel="noopener">argparse - Python Software Foundation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;笔头虽烂可不要贪用哦&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://www.wrran.com/categories/python/"/>
    
      <category term="argparse" scheme="http://www.wrran.com/categories/python/argparse/"/>
    
    
      <category term="argparse" scheme="http://www.wrran.com/tags/argparse/"/>
    
  </entry>
  
  <entry>
    <title>argparse@python</title>
    <link href="http://www.wrran.com//blog/2019/08/18/learn/argparse/index/"/>
    <id>http://www.wrran.com//blog/2019/08/18/learn/argparse/index/</id>
    <published>2019-08-17T16:00:00.000Z</published>
    <updated>2019-08-17T18:58:25.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>argparse</code>, Parser for command-line options, arguments and sub-commands.</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>命令行是一个程序软件的界面；设计良好的命令行界面可以提升软件的易使用性。<code>argparse</code>是python中一个负责解析命令、子命令、参数与选项的工具。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>此处主要介绍一些相关的基本概念，特别是“命令”、“子命令”、“参数”与“选项”。</p><p><strong>命令</strong>是软件实体的主入口；<br><strong>子命令</strong>则是负责该软件实体中更细节的一些功能。</p><p>软件实体需要输入以确定自己的行为，输入根据变更的频度顺次为：</p><ul><li>参数（经常）</li><li>选项（有时）</li><li>配置文件（偶尔）</li><li>数据文件（极少）</li></ul><p>之外，变更频次越低的越能更大程度改变软件实体的行为；因此对频次越低的输入进行修改的用户往往是使用经验也十分丰富。</p><!-- 对应这些概念，可见以下实例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ls pypy</span><br><span class="line">ls -l</span><br><span class="line">ls --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>如上所示，程序会包含以下几部分：</p><ul><li>程序名</li><li>位置参数</li><li>默认参数（如，执行命令<code>ls</code>等效于<code>ls .</code>）</li><li>选项参数（如，命令<code>ls -l</code>和<code>ls --help</code>）<br>–&gt;</li></ul><p><code>argparse</code>对于这些不同的指令解析提供了很好的技术支持，更多详情可以参见<a href="http://wrran.com/blog/2019/08/18/learn/argparse/using_case/">Using Cases@argparse</a>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Python3官方文档：<a href="https://docs.python.org/3/library/argparse.html">https://docs.python.org/3/library/argparse.html</a></p>-->]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;argparse&lt;/code&gt;, Parser for command-line options, arguments and sub-commands.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/learn/python/"/>
    
    
      <category term="argparse" scheme="http://www.wrran.com/tags/argparse/"/>
    
  </entry>
  
  <entry>
    <title>bash入门@linux</title>
    <link href="http://www.wrran.com//blog/2019/08/17/learn/bash/index/"/>
    <id>http://www.wrran.com//blog/2019/08/17/learn/bash/index/</id>
    <published>2019-08-17T14:21:55.000Z</published>
    <updated>2019-08-18T04:22:41.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>B</strong>ourne-<strong>A</strong>gain <strong>SH</strong>ell; <strong>B</strong>orn <strong>A</strong>gain <strong>SH</strong>ell</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>入门指的是由<em>使用</em>驱动的学习。</p><h1 id="Six-Core-Responsibility"><a href="#Six-Core-Responsibility" class="headerlink" title="Six Core Responsibility"></a>Six Core Responsibility</h1><p>Shell的责任（responsibility，职责是duty）有：</p><ol><li>程序执行：负责执行终端中指定的所有程序；</li><li>变量及其替换：只要在命令行中将变量名放置在<code>$</code>之后，就会被bash替换为对应的变量值；</li><li>I/O重定向：负责处理输入/输出的重定向；指令有<code>&gt;</code>（写入），<code>&lt;</code>（读入），<code>&gt;&gt;</code>（追写），<code>&lt;&lt;</code>（？）；</li><li>管道：负责将前一个命令的标准输出连接到之后命令的标准输入；管道符号为<code>|</code>，如<code>who | wc -l</code>；</li><li>环境控制：定制个人环境的命令；个人环境包括主目录（<code>~</code>）、命令行提示符及用于搜索待执行程序的目录列表；</li><li>解释型编程语言：内建的解释型编程语言；分析所遇到的每一条语句，然后执行所发现的有效命令。</li></ol><h1 id="Variable-amp-its-Replacement"><a href="#Variable-amp-its-Replacement" class="headerlink" title="Variable &amp; its Replacement"></a>Variable &amp; its Replacement</h1><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>匹配变量的正则表达式为<code>[a-zA-Z_][a-zA-Z0-9_]*</code>。<br><strong>变量赋值</strong>形如<code>variable=value</code>；<br><strong>显示变量值</strong>形如<code>echo $variable</code>.</p><p>bash在执行指令时，按照如下顺序进行操作：</p><ol start="0"><li><strong>命令分割</strong>：依据空格字符（一个或多个）分割命令与参数；</li><li><strong>变量替换</strong>：扫描命令行，用变量值替换变量名；</li><li><strong>引用字符替换</strong>：扫描上一步的输出，将<em>引用字符</em>替换为其语义所指表示；</li><li><strong>命令执行</strong>：执行上一步的输出。</li></ol><p>特殊字符有<code>*</code>，代表当前目录下的所有文件及文件名；之外，还有四种不同的引用字符：<code>&#39;</code>（单引号）/<code>&quot;</code>（双引号）/<code>\</code>/ <strong>`</strong>（反引号）;<br>其中除斜杠外，其他引用字符都需要成对出现。</p><p><code>&#39;</code>（单引号）：被单引号包裹的特殊字符将被忽略；<br><code>&quot;</code>（双引号）：被双引号包裹的字符大部分都会被保护，除了三种字符<code>$</code>（美元字符）/<code>\</code>（反斜线）/ <strong>`</strong>（反引号）；<br><code>\</code>（反斜线）：反斜线大部分情况下相当于在单个字符周围放置单引号；当反斜线出现在输入行的最后一个，起到续行符的作用；<br><strong>`</strong>（反引号）：反引号一般包裹待执行的命令；命令输出会被插入到它的当前所在位置上；但注意更提倡使用与之等价的 <code>$(command)</code>。</p><p>示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;&lt;&lt; echo \$x &gt;&gt;&gt; displays the value of x, which is <span class="variable">$x</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;&lt;&lt; echo \$x &gt;&gt;&gt; displays the value of x, which is'</span> <span class="variable">$x</span></span><br><span class="line"><span class="built_in">echo</span> Your current working directory is $(<span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure><p></p><h1 id="Passing"><a href="#Passing" class="headerlink" title="Passing"></a>Passing</h1><h1 id="Everyday-Commands"><a href="#Everyday-Commands" class="headerlink" title="Everyday Commands"></a>Everyday Commands</h1><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><blockquote><p>别名是shell提供的一种可以用于自定义命令的快捷记法。</p></blockquote><p>shell保存了一个别名列表，在命令输入之后，会在执行其他替换操作之前首先搜索该列表。如果命令行的第一个单词是别名，将该别名替换成对应的文本。</p><p>其形式如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> name=string</span><br></pre></td></tr></table></figure><p></p><p>示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>重定向：<a href="http://wrran.com/blog/2019/08/18/learn/bash/redirect/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/18/learn/bash/redirect/</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt;ourne-&lt;strong&gt;A&lt;/strong&gt;gain &lt;strong&gt;SH&lt;/strong&gt;ell; &lt;strong&gt;B&lt;/strong&gt;orn &lt;strong&gt;A&lt;/strong&gt;gain &lt;strong&gt;SH&lt;/strong&gt;ell&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="bash" scheme="http://www.wrran.com/categories/learn/bash/"/>
    
    
      <category term="bash" scheme="http://www.wrran.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>pytest@python</title>
    <link href="http://www.wrran.com//blog/2019/08/16/learn/pytest/index/"/>
    <id>http://www.wrran.com//blog/2019/08/16/learn/pytest/index/</id>
    <published>2019-08-16T11:16:15.000Z</published>
    <updated>2019-08-17T18:36:17.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不失败即成功</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <code>pytest</code> framework makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries.</p><p><strong>Features</strong><br>该测试框架有以下特征：</p><ul><li>详细的测试失败日志；</li><li>自动发现需要测试的组件和/或方法；</li><li>提供模块化的设施，可支持或小或大或参数化的复杂场景；</li><li>支持测试框架<code>unittest</code>及<code>nose</code>；</li><li>支持插件，已有315+外部插件；社区良好。</li></ul><p><strong>Documentation</strong><br><a href="http://docs.pytest.org/en/latest/contents.html#toc" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/contents.html#toc</a></p><h1 id="Modular-Fixtures"><a href="#Modular-Fixtures" class="headerlink" title="Modular Fixtures"></a>Modular Fixtures</h1><p>More info sees <a href="http://docs.pytest.org/en/latest/fixture.html#fixture" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/fixture.html#fixture</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://docs.pytest.org/en/latest/" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;不失败即成功&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="pytest" scheme="http://www.wrran.com/categories/learn/pytest/"/>
    
    
      <category term="pytest" scheme="http://www.wrran.com/tags/pytest/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Hexo</title>
    <link href="http://www.wrran.com//blog/2019/08/16/learn/hexo/index/"/>
    <id>http://www.wrran.com//blog/2019/08/16/learn/hexo/index/</id>
    <published>2019-08-16T05:40:00.000Z</published>
    <updated>2019-08-17T17:52:32.282Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="Structure-of-Workspace"><a href="#Structure-of-Workspace" class="headerlink" title="Structure of Workspace"></a>Structure of Workspace</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p></p><p>新建完成后，指定文件夹的目录如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p></p><p>文件或文件夹的功能如下：</p><table><thead><tr><th style="text-align:center">ITEM</th><th style="text-align:left">NOTE</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center">_config.yml</td><td style="text-align:left">配置文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">package.json</td><td style="text-align:left">应用程序的信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">scaffolds</td><td style="text-align:left">模版文件夹</td><td style="text-align:left">新建文章时，将根据scaffold来建立文件，填充指定内容。</td></tr><tr><td style="text-align:center">source</td><td style="text-align:left">资源文件夹</td><td style="text-align:left">除<code>_posts</code>文件夹之外，开头命名为<code>_</code>的文件/文件夹和隐藏的文件将会被忽略。<code>Markdown</code>和<code>HTML</code>文件会被解析并放到 <code>public</code>文件夹，而其他文件会被拷贝过去。</td></tr><tr><td style="text-align:center">themes</td><td style="text-align:left">主题文件夹</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">db.json</td><td style="text-align:left"><strong>生成</strong>的缓存文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">public</td><td style="text-align:left"><strong>生成</strong>的静态文件夹</td><td style="text-align:left">?</td></tr></tbody></table><p>More Info see <a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup</a>.</p><h1 id="Structure-of-Configure"><a href="#Structure-of-Configure" class="headerlink" title="Structure of Configure"></a>Structure of Configure</h1><p>More info see <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a>.</p><p>您可以在<code>_config.yml</code>中修改大部分的配置；配置往往与命令相关；暂略详情。<br></p><h1 id="Interface-of-Commands"><a href="#Interface-of-Commands" class="headerlink" title="Interface of Commands"></a>Interface of Commands</h1><p>More info see <a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands</a>.</p><table><thead><tr><th style="text-align:left">COMMANDS</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th><th style="text-align:center">DEMO</th><th style="text-align:left">NOTE</th></tr></thead><tbody><tr><td style="text-align:left"><strong>init</strong></td><td style="text-align:left">新建一个网站</td><td style="text-align:left">默认在当前文件夹建立网站</td><td style="text-align:center"><code>hexo init [folder=.]</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>new</strong></td><td style="text-align:left">新建一篇文章</td><td style="text-align:left">如果<code>title</code>包含空格的话，请使用引号括起来</td><td style="text-align:center"><code>hexo new [layout=default_layout@config] &lt;title&gt;</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#new" target="_blank" rel="noopener">path/replace/slug</a></td></tr><tr><td style="text-align:left"><strong>generate</strong></td><td style="text-align:left">生成静态文件</td><td style="text-align:left">简写为<code>hexo g</code></td><td style="text-align:center"><code>hexo generate</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#generate" target="_blank" rel="noopener">deploy/watch/bail/force</a></td></tr><tr><td style="text-align:left"><strong>publish</strong></td><td style="text-align:left">发表草稿</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo publish [layout] &lt;filename&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>server</strong></td><td style="text-align:left">启动服务器</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo server [--port=4000]</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#server" target="_blank" rel="noopener">port/static/log</a></td></tr><tr><td style="text-align:left"><strong>deploy</strong></td><td style="text-align:left">部署网站</td><td style="text-align:left">简写为<code>hexo g</code></td><td style="text-align:center"><code>hexo deploy</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#deploy" target="_blank" rel="noopener">generate</a></td></tr><tr><td style="text-align:left"><strong>render</strong></td><td style="text-align:left">渲染文件</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo render &lt;file1&gt; [file2] ...</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#render" target="_blank" rel="noopener">output</a></td></tr><tr><td style="text-align:left"><strong>migrate</strong></td><td style="text-align:left">从其他博客系统迁移内容</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo migrate &lt;type&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>clean</strong></td><td style="text-align:left">清除缓存文件和已生成的静态文件</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo clean</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>list</strong></td><td style="text-align:left">列出网站资料</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo list &lt;type&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>version</strong></td><td style="text-align:left">显示Hexo版本</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo version</code></td><td style="text-align:left">-</td></tr></tbody></table><table><thead><tr><th style="text-align:center">OPTIONS</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>--safe</code></td><td style="text-align:left">在安全模式下，不会载入插件和脚本</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--debug</code></td><td style="text-align:left">在终端中显示调试信息并记录到<code>debug.log</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--silent</code></td><td style="text-align:left">隐藏终端信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--config</code></td><td style="text-align:left">覆写配置文件的路径</td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#自定义配置文件的路径" target="_blank" rel="noopener">细则</a></td></tr><tr><td style="text-align:center"><code>--cwd /path/to/cwd</code></td><td style="text-align:left">自定义当前工作目录</td><td style="text-align:left"><strong>C</strong>urrent <strong>W</strong>orking <strong>D</strong>irectory</td></tr><tr><td style="text-align:center"><code>--draft</code></td><td style="text-align:left">显示<code>source/_drafts</code>文件夹中的草稿文章</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="Interoperability-of-Frameworks"><a href="#Interoperability-of-Frameworks" class="headerlink" title="Interoperability of Frameworks"></a>Interoperability of Frameworks</h1><p>非核心功能。该部分主要是将其他框架的博客转换成合法的hexo结构，多通过其他包来完成该功能；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/migration</a>.</p><h1 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h1><p>该部分是面向终端用户的教程。</p><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>可以通过修改<code>_config.yml</code>中的<code>default_layout</code>参数来指定默认布局。<br>More info see <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a>.</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p><code>Front-matter</code>是文件最上方以<code>---</code>分隔的区域，用于指定个别文件的变量。<br>More info see <a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a>.</p><h3 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins"></a>Tag Plugins</h3><p>标签插件和<code>Front-matter</code>中的标签不同，它们是用于在文章中快速插入特定内容的插件。<br>More info see <a href="http://wrran.com/blog/2019/08/18/learn/hexo/tag_plugins/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/18/learn/hexo/tag_plugins/</a>.</p><h3 id="Asset-Folders"><a href="#Asset-Folders" class="headerlink" title="Asset Folders"></a>Asset Folders</h3><p>资源（Asset）代表<code>source</code>文件夹中除了文章以外的所有文件。如将少量图片放在<code>source/images</code>文件夹中，后通过<code>![](/images/image.jpg)</code>访问。<br>More info see <a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a>.</p><h3 id="Data-Files"><a href="#Data-Files" class="headerlink" title="Data Files"></a>Data Files</h3><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用<strong>Hexo 3.</strong>新增的「数据文件」功能。<br>此功能会载入<code>source/_data</code>内的YAML或JSON文件，如此一来您便能在网站中复用这些文件了。<br>More info see <a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a>.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>该部分阐述<code>hexo server</code>相关问题，已移植到单独的模块中进行开发；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/server" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/server</a>.</p><h2 id="Generating"><a href="#Generating" class="headerlink" title="Generating"></a>Generating</h2><p>生成静态文件；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/generating" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/generating</a>.</p><h2 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h2><p>部署网站；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/deployment" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/deployment</a>.</p><h1 id="Customization"><a href="#Customization" class="headerlink" title="Customization"></a>Customization</h1><p>More info see <a href="https://hexo.io/docs/permalinks" target="_blank" rel="noopener">https://hexo.io/docs/permalinks</a>.<br></p><h2 id="Permalinks"><a href="#Permalinks" class="headerlink" title="Permalinks"></a>Permalinks</h2><p>您可以在<code>_config.yml</code>配置中调整网站的永久链接或者在每篇文章的Front-matter中指定。<br>More info see <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/permalinks</a>.</p><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><p>创建Hexo主题；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/themes</a>.</p><h2 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h2><p>高级用户如何通过模板来定制网站内容的呈现方式；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/templates" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/templates</a>.</p><h3 id="Helpers"><a href="#Helpers" class="headerlink" title="Helpers"></a>Helpers</h3><p>辅助函数帮助您在模版中快速插入内容。辅助函数不能在源文件中使用。<br>More info see <a href="https://hexo.io/zh-cn/docs/helpers" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/helpers</a>.</p><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>骨灰级用户的变量索引表。<br>More info see <a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/variables</a>.</p><h2 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h2><p>常见需求；若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/internationalization" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/internationalization</a>.</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>面向将入开发级用户；Hexo有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/plugins</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo.io</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;纸上得来终觉浅，绝知此事要躬行&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="learn" scheme="http://www.wrran.com/categories/learn/"/>
    
      <category term="hexo" scheme="http://www.wrran.com/categories/learn/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.wrran.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>functools @ python</title>
    <link href="http://www.wrran.com//blog/2019/08/16/cheatsheet/reference/python-functools/"/>
    <id>http://www.wrran.com//blog/2019/08/16/cheatsheet/reference/python-functools/</id>
    <published>2019-08-16T05:30:00.000Z</published>
    <updated>2019-08-16T09:28:43.365Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The <code>functools</code> module is for higher-order functions.</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <code>functools</code> module is for higher-order functions: functions that act on or return other functions. In general, any callable object can be treated as a function for the purposes of this module</p><p>The functools module defines the following functions:</p><h1 id="cmp-to-key-func"><a href="#cmp-to-key-func" class="headerlink" title="cmp_to_key(func)"></a>cmp_to_key(func)</h1><blockquote><p>Transform an old-style comparison function to a <em>key function</em>.</p></blockquote><p>Used with tools that accept key functions (such as <code>sorted()</code>, <code>min()</code>, <code>max()</code>, <code>heapq.nlargest()</code>, <code>heapq.nsmallest()</code>, <code>itertools.groupby()</code>). This function is primarily used as a transition tool for programs being converted to Python 3 where comparison functions are no longer supported.</p><p>A <em>comparison function</em> is any callable that accept two arguments, compares them, and returns a negative number for less-than, zero for equality, or a positive number for greater-than. A key function is a callable that accepts one argument and returns another value to be used as the sort key.</p><p>A <a href="https://docs.python.org/2/glossary.html#term-key-function" target="_blank" rel="noopener"><em>key function</em></a> or collation function is a callable that returns a value used for sorting or ordering.</p><h1 id="total-ordering-cls"><a href="#total-ordering-cls" class="headerlink" title="total_ordering(cls)"></a>total_ordering(cls)</h1><blockquote><p>Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.</p></blockquote><p>This simplifies the effort involved in specifying all of the possible rich comparison operations:</p><p>The class must define one of <code>__lt__()</code>, <code>__le__()</code>, <code>__gt__()</code>, or <code>__ge__()</code>. In addition, the class should supply an <code>__eq__()</code> method.</p><h1 id="reduce-function-iterable-initializer"><a href="#reduce-function-iterable-initializer" class="headerlink" title="reduce(function, iterable [, initializer])"></a>reduce(function, iterable [, initializer])</h1><blockquote><p>This is the same function as <a href="https://docs.python.org/2/library/functions.html#reduce" target="_blank" rel="noopener">reduce()</a>.</p></blockquote><p>It is made available in this module to allow writing code mode forward-compatible with Python 3.</p><h1 id="partial-fun-args-keywords"><a href="#partial-fun-args-keywords" class="headerlink" title="partial(fun [,*args] [, **keywords])"></a>partial(fun [,*args] [, **keywords])</h1><blockquote><p>Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords. If more arguments are supplied to the call, they are appended to args. If additional keyword arguments are supplied, they extend and override keywords. Roughly equivalent to:</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(func, *args, **keywords)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span><span class="params">(*fargs, **fkeywords)</span>:</span></span><br><span class="line">        newkeywords = keywords.copy()</span><br><span class="line">        newkeywords.update(fkeywords)</span><br><span class="line">        <span class="keyword">return</span> func(*(args + fargs), **newkeywords)</span><br><span class="line">    newfunc.func = func</span><br><span class="line">    newfunc.args = args</span><br><span class="line">    newfunc.keywords = keywords</span><br><span class="line">    <span class="keyword">return</span> newfunc</span><br></pre></td></tr></table></figure><h2 id="partial-objects"><a href="#partial-objects" class="headerlink" title="partial objects"></a>partial objects</h2><p>partial objects are callable objects created by <code>partial()</code>. They have three read-only attributes:</p><ul><li><code>func</code> - A callable object or function. Calls to the partial object will be forwarded to func with new arguments and keywords.</li><li><code>args</code> - The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.</li><li><code>keywords</code> - The keyword arguments that will be supplied when the partial object is called.</li></ul><p><strong>partial objects</strong> are like <em>function objects</em> in that they are callable, weak referencable, and can have attributes. There are some important differences:</p><ul><li>For instance, the <code>__name__</code> and <code>__doc__</code> attributes are not created automatically.</li><li>Also, partial objects defined in classes behave like static methods and do not transform into bound methods during instance attribute look-up</li></ul><h1 id="update-wrapper-wrapper-wrapped-assigned-updated"><a href="#update-wrapper-wrapper-wrapped-assigned-updated" class="headerlink" title="update_wrapper(wrapper, wrapped [, assigned] [, updated])"></a>update_wrapper(wrapper, wrapped [, assigned] [, updated])</h1><blockquote><p>Update a <em>wrapper</em> function to look like the <em>wrapped</em> function.</p></blockquote><p>The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants <code>WRAPPER_ASSIGNMENTS</code> (which assigns to the wrapper function’s <code>__name__</code>, <code>__module__</code> and <code>__doc__</code>, the documentation string) and <code>WRAPPER_UPDATES</code> (which updates the wrapper function’s <code>__dict__</code>, i.e. the instance dictionary).</p><h1 id="wraps-wrapped-assigned-updated"><a href="#wraps-wrapped-assigned-updated" class="headerlink" title="wraps(wrapped [, assigned] [, updated])"></a>wraps(wrapped [, assigned] [, updated])</h1><blockquote><p>This is a convenienve function for invokeing <code>update_wrapper()</code> as a function decorator when defining a wrapper function.</p></blockquote><p>It is equivalent to <code>partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)</code>. For example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Calling decorated funcion'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwds)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    """<span class="title">Docstring</span>"""</span></span><br><span class="line"><span class="function">    <span class="title">print</span> '<span class="title">Called</span> <span class="title">example</span> <span class="title">function</span>'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span><span class="params">()</span></span></span><br><span class="line"><span class="function"># <span class="title">Calling</span> <span class="title">decorated</span> <span class="title">function</span></span></span><br><span class="line"><span class="function"># <span class="title">Called</span> <span class="title">example</span> <span class="title">function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span>.<span class="title">__name__</span></span></span><br><span class="line"><span class="function"># '<span class="title">example</span>'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span>.<span class="title">__doc__</span></span></span><br><span class="line"><span class="function"># '<span class="title">Docstring</span>'</span></span><br></pre></td></tr></table></figure><p>Withoud the use of this decorator factory, the name of the example function would have been <code>wrapper</code>, and the docstring of the original <code>example()</code> would have been lost.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://docs.python.org/2/library/functools.html" target="_blank" rel="noopener">functools - Higher-order functions and operations on callable objects</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;The &lt;code&gt;functools&lt;/code&gt; module is for higher-order functions.&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://www.wrran.com/categories/tools/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/tools/python/"/>
    
    
      <category term="cheatsheet" scheme="http://www.wrran.com/tags/cheatsheet/"/>
    
      <category term="functools" scheme="http://www.wrran.com/tags/functools/"/>
    
  </entry>
  
  <entry>
    <title>itertools @ python</title>
    <link href="http://www.wrran.com//blog/2019/08/16/cheatsheet/reference/python-itertools/"/>
    <id>http://www.wrran.com//blog/2019/08/16/cheatsheet/reference/python-itertools/</id>
    <published>2019-08-16T03:30:00.000Z</published>
    <updated>2019-08-16T09:31:28.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. Each has been recast in a form suitable for Python.<br>@<code>itertools</code></p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p><h1 id="Infinite-Iterators"><a href="#Infinite-Iterators" class="headerlink" title="Infinite Iterators"></a>Infinite Iterators</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th><th style="text-align:left">Example</th><th style="text-align:left">Result</th></tr></thead><tbody><tr><td style="text-align:left">count(start [, step])</td><td style="text-align:left">start, start+step, start+2*step, …</td><td style="text-align:left"><code>count(10)</code></td><td style="text-align:left"><code>10 11 12 ...</code></td></tr><tr><td style="text-align:left">cycle(p)</td><td style="text-align:left">p0, p1, …plast, p0, p1, …</td><td style="text-align:left"><code>cycle(&#39;ABCD&#39;)</code></td><td style="text-align:left"><code>A B C D A B C D ...</code></td></tr><tr><td style="text-align:left">repeat(elem [, n])</td><td style="text-align:left">elem, elem, elem, … endlessly or up to n times</td><td style="text-align:left"><code>repeat(10, 3)</code></td><td style="text-align:left"><code>10, 10, 10</code></td></tr></tbody></table><h1 id="Iterators-terminating-on-the-shortest"><a href="#Iterators-terminating-on-the-shortest" class="headerlink" title="Iterators terminating on the shortest"></a>Iterators terminating on the shortest</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th><th style="text-align:left">Example</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">chain(p, q, …)</td><td style="text-align:left">p0, p1, …, plast, q0, q1, …</td><td style="text-align:left"><code>chain(&#39;ABC&#39;, &#39;DEF&#39;)</code></td><td style="text-align:left"><code>A B C D E F</code></td></tr><tr><td style="text-align:left">compress(data, selectors)</td><td style="text-align:left">(d[0] if s[0]), (d[1] if s[1]), …</td><td style="text-align:left"><code>compress(&#39;ABCDEF&#39;, [1,0,1,0,1,1]</code>)</td><td style="text-align:left"><code>A C E F</code></td></tr><tr><td style="text-align:left">dropwhile(pred, seq)</td><td style="text-align:left">seq[n], seq[n+1], … starting when pred fails</td><td style="text-align:left"><code>dropwhile(lambda x: x&lt;5, [1,4,6,4,1])</code></td><td style="text-align:left"><code>6 4 1</code></td></tr><tr><td style="text-align:left">takewhile(pred, seq)</td><td style="text-align:left">seq[0], seq[1], … until pred fails</td><td style="text-align:left"><code>takewhile(lambda x: x&lt;5, [1,4,6,4,1])</code></td><td style="text-align:left"><code>1 4</code></td></tr><tr><td style="text-align:left">groupby(iterable [, keyfun])</td><td style="text-align:left">sub-iterators grouped by value of keyfunc(v)</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">ifilter(pred, seq)</td><td style="text-align:left">elements of seq where pred(elem) is true</td><td style="text-align:left"><code>ifilter(lambda x: x%2, range(10))</code></td><td style="text-align:left"><code>1 3 5 7 9</code></td></tr><tr><td style="text-align:left">ifilterfalse(pred, seq)</td><td style="text-align:left">elements of seq where pred(elem) is false</td><td style="text-align:left"><code>ifilterfalse(lambda x: x%2, range(10))</code></td><td style="text-align:left"><code>0 2 4 6 8</code></td></tr><tr><td style="text-align:left">islice(seq [, start,] stop [, step])</td><td style="text-align:left">elements from seq[start:stop:step]</td><td style="text-align:left"><code>islice(&#39;ABCDEFG&#39;, 2, None)</code></td><td style="text-align:left"><code>C D E F G</code></td></tr><tr><td style="text-align:left">imap(fun, p, q, …)</td><td style="text-align:left">func(p0, q0, …), func(p1, q1, …)</td><td style="text-align:left"><code>imap(pow, (2,3,10), (5,2,3))</code></td><td style="text-align:left"><code>32 9 1000</code></td></tr><tr><td style="text-align:left">starmap(func, seq)</td><td style="text-align:left">func(<em>seq[0]), func(</em>seq[1]), …</td><td style="text-align:left"><code>starmap(pow, [(2,5), (3,2), (10,3)])</code></td><td style="text-align:left"><code>32 9 1000</code></td></tr><tr><td style="text-align:left">tee(it, n)</td><td style="text-align:left">it1, it2, … itn splits one iterator into n</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">izip(p, q, …)</td><td style="text-align:left">(p[0],q[0]), (p[1], q[1]), …</td><td style="text-align:left"><code>izip(&#39;ABCD&#39;, &#39;xy&#39;)</code></td><td style="text-align:left"><code>Ax By</code></td></tr><tr><td style="text-align:left">izip_longest(p, q, …)</td><td style="text-align:left">(p[0],q[0]), (p[1],q[1]), …</td><td style="text-align:left"><code>izip\_longest(&#39;ABCD&#39;, &#39;xy&#39;, fillvalue=&#39;-&#39;)</code></td><td style="text-align:left"><code>Ax By C- D-</code></td></tr></tbody></table><h1 id="Combination-generators"><a href="#Combination-generators" class="headerlink" title="Combination generators"></a>Combination generators</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">product(p, q, … [repeat=1])</td><td style="text-align:left">cartesian prduct, equivalent to a nested for-loop</td></tr><tr><td style="text-align:left">product(‘ABCD’, repeat=2)</td><td style="text-align:left">AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</td></tr><tr><td style="text-align:left">permutations(p [, r])</td><td style="text-align:left">r-length tuples, all possible orderings, no repeated elements</td></tr><tr><td style="text-align:left">permutations(‘ABCD’, 2)</td><td style="text-align:left">AB AC AD BA BC BD CA CB CD DA DB DC</td></tr><tr><td style="text-align:left">combinations(p, r)</td><td style="text-align:left">r-length tuples, in sorted order, no repeated elements</td></tr><tr><td style="text-align:left">combinations(‘ABCD’, 2)</td><td style="text-align:left">AB AC AD BC BD CD</td></tr><tr><td style="text-align:left">combinations_with_replacement(p [, r])</td><td style="text-align:left">r-length tuples, in sorted order, with repeated elements</td></tr><tr><td style="text-align:left">combinations_with_replacement(‘ABCD’, 2)</td><td style="text-align:left">AA AB AC AD BB BC BD CC CD DD</td></tr></tbody></table><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://docs.python.org/2/library/itertools.html" target="_blank" rel="noopener">itertools - Functions creating iterators for efficient looping</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. Each has been recast in a form suitable for Python.&lt;br&gt;@&lt;code&gt;itertools&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://www.wrran.com/categories/tools/"/>
    
      <category term="python" scheme="http://www.wrran.com/categories/tools/python/"/>
    
    
      <category term="cheatsheet" scheme="http://www.wrran.com/tags/cheatsheet/"/>
    
      <category term="itertools" scheme="http://www.wrran.com/tags/itertools/"/>
    
  </entry>
  
  <entry>
    <title>Read the Docs @python</title>
    <link href="http://www.wrran.com//blog/2019/08/14/learn/read-the-docs/index/"/>
    <id>http://www.wrran.com//blog/2019/08/14/learn/read-the-docs/index/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2019-08-16T09:28:22.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Read the Docs</code> simplifies software documentation by automating building, versioning, and hosting of your docs for you. Think of it as <strong>Coninuous Documentation</strong>.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Read the Docs</code>如前言所述，主要是用来简化软件的文档工作，支持自动构建、版本控制及文档托管。可以将之考虑为<strong>持续文档</strong>，支持以下特点：</p><ul><li>Never out of sync: 同步，一时不停；</li><li>Multiple versions: 多版本控制；</li><li>Free and open source: 免费开源。</li></ul><h1 id="婴儿学步"><a href="#婴儿学步" class="headerlink" title="婴儿学步"></a><a href="https://docs.readthedocs.io/en/stable/index.html#first-steps" target="_blank" rel="noopener">婴儿学步</a></h1><p><code>Read-the-Docs</code>支持<code>Sphinx</code>及<code>MkDocs</code>，此处仅介绍<code>MkDocs</code>。</p><h2 id="Getting-started-with-MkDocs"><a href="#Getting-started-with-MkDocs" class="headerlink" title="Getting started with MkDocs"></a><a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-mkdocs.html" target="_blank" rel="noopener">Getting started with MkDocs</a></h2><p><code>MkDocs</code>是一个集中速度与简洁的文档生成器。它具有如下特点：</p><ul><li>边编写边预览；</li><li>主题和扩展易于扩展；</li><li>文档使用<code>Markdown</code>语法。</li></ul><p><strong>Quick Start</strong>：</p><ol><li>安装<code>MkDocs</code>：<code>conda install mkdocs</code>；</li><li>部署<code>MkDocs</code>项目：<code>mkdir demo &amp;&amp; mkdocs new .</code>；其中，<code>mkdocs.yml</code>是<code>MkDocs</code>配置文件，<code>docs/index.md</code>是文档的入口；</li><li>启动开发服务器：<code>mkdocs serve</code>。</li></ol><p>当修订好文档后可以参阅内容<a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html" target="_blank" rel="noopener">Importing your existing documentation</a>。<br><strong>External Resources</strong>，下列是一些相关资源：</p><ul><li><a href="https://www.mkdocs.org/" target="_blank" rel="noopener">MkDocs Documentation</a></li><li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown Syntax Guide</a></li><li><a href="https://www.mkdocs.org/user-guide/writing-your-docs/" target="_blank" rel="noopener">Writing Your Docs with MkDocs</a></li></ul><h2 id="Importing-your-existing-documentation"><a href="#Importing-your-existing-documentation" class="headerlink" title="Importing your existing documentation"></a><a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html" target="_blank" rel="noopener">Importing your existing documentation</a></h2><p>导入公共文档仓库的内容，可以访问<a href="https://readthedocs.org/dashboard" target="_blank" rel="noopener">Read the Docs dashboard</a>并点击<a href="https://readthedocs.org/dashboard/import" target="_blank" rel="noopener">Import</a>。私有的文档仓库请使用<a href="https://docs.readthedocs.io/en/stable/commercial/index.html" target="_blank" rel="noopener">Read the Docs for Business</a>。</p><p>如果我们将账号关联到Github/Bitbucket/GitLab的话，就可以直接导入一些公共文档仓库。</p><p><a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html#manually-import-your-docs" target="_blank" rel="noopener"><strong>Manually Import Your Docs</strong></a>: 倘若没有关联账号，则需要手动导入文档仓库，细节参见原文。<br><strong>Building Your Documentation</strong>：完成导入文档的过程之后，文档代码将被自动导入并构建；构建的细节请参见<a href="https://docs.readthedocs.io/en/stable/builds.html" target="_blank" rel="noopener">Build Process</a>；配置信息可在<code>readthedocs.yml</code>中进行制定，规则参见<a href="https://docs.readthedocs.io/en/stable/config-file/index.html" target="_blank" rel="noopener">Configuration File</a>；版本控制的功能参见<a href="https://docs.readthedocs.io/en/stable/versions.html" target="_blank" rel="noopener">Versions</a>；帮助信息可参见<a href="https://docs.readthedocs.io/en/stable/support.html" target="_blank" rel="noopener">Support</a>。</p><h1 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a><a href="https://docs.readthedocs.io/en/stable/index.html#getting-started-with-read-the-docs" target="_blank" rel="noopener">入门指南</a></h1><p>该部分介绍<code>Read the Docs</code>的一些核心功能、常用配置、版本控制等。</p><h2 id="Overview-of-core-features"><a href="#Overview-of-core-features" class="headerlink" title="Overview of core features"></a><a href="https://docs.readthedocs.io/en/stable/features.html" target="_blank" rel="noopener">Overview of core features</a></h2><p>该部分主要是罗列<code>Read the Docs</code>的核心特征。</p><p><strong>GitHub, Bitbucket and GitLab Integration</strong>：支持这三个平台的集成，参见<a href="https://docs.readthedocs.io/en/stable/guides/vcs.html" target="_blank" rel="noopener">Version Control System Integration</a>；<br><strong>Auto-updating</strong>：借助<a href="https://docs.readthedocs.io/en/stable/webhooks.html" target="_blank" rel="noopener">Webhooks</a>可以自动构建文档；<br><strong>Internationalization</strong>：支持多语言，更多信息参见<a href="https://docs.readthedocs.io/en/stable/localization.html" target="_blank" rel="noopener">Localization of Documentation</a>及<a href="https://docs.readthedocs.io/en/stable/development/i18n.html" target="_blank" rel="noopener">Internationalization</a>；<br><strong>Canonical URLs</strong>：支持经典URLs，更多信息参见<a href="https://docs.readthedocs.io/en/stable/guides/canonical.html" target="_blank" rel="noopener">Canonical URLs</a>；<br><strong>Versions</strong>：支持多版本文档；<br><strong>Version Control Support Matrix</strong>：此处主要看Git这块，支持tags/branches，默认分支为<code>master</code>；<br><strong>PDF Generation</strong>：当使用RTD时，亦可生成PDF文档；<br><strong>Search</strong>：支持全文搜索；<br><strong>Alternate Domains</strong>：支持自定义域名、子域名及shorturl，详情参见<a href="https://docs.readthedocs.io/en/stable/custom_domains.html" target="_blank" rel="noopener">Custom Domains</a>。</p><h2 id="Configure-your-documentation"><a href="#Configure-your-documentation" class="headerlink" title="Configure your documentation"></a>Configure your documentation</h2><h2 id="Connecting-with-Github-BitBucket-or-GitLab"><a href="#Connecting-with-Github-BitBucket-or-GitLab" class="headerlink" title="Connecting with Github, BitBucket, or GitLab"></a><a href="https://docs.readthedocs.io/en/stable/connected-accounts.html" target="_blank" rel="noopener">Connecting with Github, BitBucket, or GitLab</a></h2><h2 id="Read-the-Docs-build-and-versioning-process"><a href="#Read-the-Docs-build-and-versioning-process" class="headerlink" title="Read the Docs build and versioning process"></a>Read the Docs build and versioning process</h2><h2 id="Troubleshooting-Support"><a href="#Troubleshooting-Support" class="headerlink" title="Troubleshooting - Support"></a><a href="https://docs.readthedocs.io/en/stable/support.html" target="_blank" rel="noopener">Troubleshooting - Support</a></h2><h2 id="Troubleshooting-Frequently-asked-questions"><a href="#Troubleshooting-Frequently-asked-questions" class="headerlink" title="Troubleshooting - Frequently asked questions"></a><a href="https://docs.readthedocs.io/en/stable/faq.html" target="_blank" rel="noopener">Troubleshooting - Frequently asked questions</a></h2><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a><a href="https://docs.readthedocs.io/en/stable/index.html#advanced-features-of-read-the-docs" target="_blank" rel="noopener">高级特性</a></h1><p>这部分还没怎么用着，先罗列如下：</p><ul><li><a href="https://docs.readthedocs.io/en/stable/subprojects.html" target="_blank" rel="noopener">子项目配置</a></li><li><a href="https://docs.readthedocs.io/en/stable/single_version.html" target="_blank" rel="noopener">单版本配置</a></li><li><a href="https://docs.readthedocs.io/en/stable/privacy.html" target="_blank" rel="noopener">权限文档控制</a></li><li><a href="https://docs.readthedocs.io/en/stable/localization.html" target="_blank" rel="noopener">多语言文档</a></li><li><a href="https://docs.readthedocs.io/en/stable/user-defined-redirects.html" target="_blank" rel="noopener">自定义重定向</a></li><li><a href="https://docs.readthedocs.io/en/stable/automatic-redirects.html" target="_blank" rel="noopener">自动化重定向</a></li><li><a href="https://docs.readthedocs.io/en/stable/guides/index.html" target="_blank" rel="noopener">主题指南</a></li><li><a href="https://docs.readthedocs.io/en/stable/api/index.html" target="_blank" rel="noopener">扩展Read the Docs</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.readthedocs.io/en/stable/index.html#read-the-docs-documentation-simplified" target="_blank" rel="noopener">@ReadTheDocs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;code&gt;Read the Docs&lt;/code&gt; simplifies software documentation by automating building, versioning, and hosting of your docs for you. Think of it as &lt;strong&gt;Coninuous Documentation&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://www.wrran.com/categories/tools/"/>
    
      <category term="dev-docs" scheme="http://www.wrran.com/categories/tools/dev-docs/"/>
    
    
      <category term="tools" scheme="http://www.wrran.com/tags/tools/"/>
    
      <category term="read-the-docs" scheme="http://www.wrran.com/tags/read-the-docs/"/>
    
  </entry>
  
  <entry>
    <title>政治生活没有银弹</title>
    <link href="http://www.wrran.com//blog/2019/08/14/people-say/me/190814-01/"/>
    <id>http://www.wrran.com//blog/2019/08/14/people-say/me/190814-01/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2019-08-16T09:51:59.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>政治生活没有银弹，不要指望依靠某种制度得到优胜，制度改革永不会止步。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;政治生活没有银弹，不要指望依靠某种制度得到优胜，制度改革永不会止步。&lt;/p&gt;&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="people-say" scheme="http://www.wrran.com/categories/people-say/"/>
    
    
      <category term="me" scheme="http://www.wrran.com/tags/me/"/>
    
  </entry>
  
  <entry>
    <title>Learning to Ask Question in Open-domain Conversational Systems with Typed Decoders</title>
    <link href="http://www.wrran.com//blog/2018/09/16/note/paper-reading/question%20and%20answering/question%20generation/2018-09-16/"/>
    <id>http://www.wrran.com//blog/2018/09/16/note/paper-reading/question and answering/question generation/2018-09-16/</id>
    <published>2018-09-16T08:43:24.000Z</published>
    <updated>2019-08-15T19:59:16.507Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ask question with type information</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文动机明确，模型简单有效，值得学习其解决问题的思路。<br>作者认为在开放域的对话系统中的问题生成任务与传统的问题生成任务有着以下两点不同之处：</p><ol><li>对相同的输入（背景知识）可能有不同的提问模式，如Yes-No或者Wh-,How-类型的问题</li><li>对给定的输入，问题的提出往往需要有一定的场景知识，进而推动对话的发展。如，针对“我跟朋友去吃饭”，就可以提出一些关于朋友、地点、价格、味道等主题的问题；而传统的问题生成可能更多的在于某个特定的主题，并且更多表现为转述的方式。</li></ol><p>基于此特点，作者认为“好”的问题不仅要有多样的提问模式，也要能够自然的衔接主题。而问题中，常常可以自然的分为三个部分：疑问词、主题词及常见词。为此，作者提出了两种利用词语类别信息的问题生成模型。并在收集的491000对微博的post-response上验证了模型的有效性。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180916/Good_questions_in_conversational_systems.PNG" alt="Good questions in conversational systems are a natural composition of interrogatives, topic words, and ordinary words."></p><h1 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h1><p><em>模型较简单，详情参见原文</em><br>作者修改的基本模型是Seq2Seq模型，为了融入类别信息。作者在解码器端增加了两种融入信息的方式：<br>一是，通过在每步解码时考虑该时刻的待解码词的类别分布(<code>softmax</code>)，这被作者称为STD (soft-typed decoder)；<br>二是，通过在每步解码时先生成该时刻词语的类别（<code>argmax</code>），再在已知该类别的基础上生成词语，这被称为HTD（hard-typed decoder）。</p><p>为了解决<code>argmax</code>不可求导的问题，作者采用<strong>Gumbel-Softmax</strong>技术来替代该操作。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://arxiv.org/abs/1805.04843" target="_blank" rel="noopener">Learning to Ask Question in Open-domain Conversational Systems with Typed Decoders</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;ask question with type information&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="note" scheme="http://www.wrran.com/categories/note/"/>
    
      <category term="paper-reading" scheme="http://www.wrran.com/categories/note/paper-reading/"/>
    
      <category term="question and answering" scheme="http://www.wrran.com/categories/note/paper-reading/question-and-answering/"/>
    
      <category term="question generation" scheme="http://www.wrran.com/categories/note/paper-reading/question-and-answering/question-generation/"/>
    
    
      <category term="paper reading" scheme="http://www.wrran.com/tags/paper-reading/"/>
    
      <category term="note" scheme="http://www.wrran.com/tags/note/"/>
    
      <category term="question generation" scheme="http://www.wrran.com/tags/question-generation/"/>
    
  </entry>
  
</feed>
