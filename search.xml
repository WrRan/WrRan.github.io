<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[if语句@bash]]></title>
      <url>http://www.wrran.com/blog/2019/08/19/learn/bash/statement-if/</url>
      <content type="html"><![CDATA[<blockquote><p>if you jump, i push you :)</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>if语句让我们可以测试某种条件，然后根据测试结果改变程序执行流程。<br>其一般格式为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>其中，<code>command_test</code>是要要执行的命令，该命令的退出状态会被测试；如果退出状态为0，执行<code>then</code>和<code>fi</code>之间的命令；否则，跳过这些命令。</p><p>注意：命令正常执行会返回状态码<code>0</code>；管道的状态码是最后一个命令的状态码。</p><p>if语句也可以加入else，形如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><p>if语句也可以加入elif，形如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> command_test1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">elif</span> command_test2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p>变量<code>$?</code>被shell自动设置为最后一条命令的退出状态。</p><p>使用示例如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat on</span><br><span class="line">user=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> who | grep <span class="string">"^<span class="variable">$user</span> "</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$user</span> is logged on"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p></p><h1 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h1><p><code>test</code>命令是shell环境中测试条件表达式的实用工具。其形如：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> expression</span><br></pre></td></tr></table></figure><p></p><p><code>test</code>会对<code>expression</code>求值，如果结果为真，则返回为0的退出状态码；如果结果为假，则返回非0的退出状态码。</p><p><code>test</code>字符操作符小抄如下：</p><table><thead><tr><th style="text-align:center">EXPRESSION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">str1 = str2</td><td style="text-align:left">str1等于str2</td></tr><tr><td style="text-align:center">str1 != str2</td><td style="text-align:left">str1不等于str2</td></tr><tr><td style="text-align:center">str</td><td style="text-align:left">str不为空</td></tr><tr><td style="text-align:center">-n str</td><td style="text-align:left">str不为空</td></tr><tr><td style="text-align:center">-z str</td><td style="text-align:left">str为空</td></tr></tbody></table><p>注意后两种情况即<code>-n str</code>及<code>-z str</code>，见下例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ blank=<span class="string">"    "</span></span><br><span class="line">$ <span class="built_in">test</span> <span class="variable">$blanks</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">test</span> <span class="string">"<span class="variable">$blanks</span>"</span></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p></p><p><code>test</code>整数操作符小抄如下：</p><table><thead><tr><th style="text-align:center">EXPRESSION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">int1 -eq int2</td><td style="text-align:left">int1等于int2</td></tr><tr><td style="text-align:center">int1 -ge int2</td><td style="text-align:left">int1大于或等于int2</td></tr><tr><td style="text-align:center">int1 -gt int2</td><td style="text-align:left">int1大于int2</td></tr><tr><td style="text-align:center">int1 -le int2</td><td style="text-align:left">int1小于或等于int2</td></tr><tr><td style="text-align:center">int1 -lt int2</td><td style="text-align:left">int1小于int2</td></tr><tr><td style="text-align:center">int1 -ne int2</td><td style="text-align:left">int1不等于int2</td></tr></tbody></table><p><code>test</code>文件操作符小抄如下：</p><table><thead><tr><th style="text-align:center">OPTION</th><th style="text-align:left">TRUE CASE</th></tr></thead><tbody><tr><td style="text-align:center">-e file</td><td style="text-align:left">存在</td></tr><tr><td style="text-align:center">-d file</td><td style="text-align:left">目录</td></tr><tr><td style="text-align:center">-s file</td><td style="text-align:left">非空文件</td></tr><tr><td style="text-align:center">-f file</td><td style="text-align:left">普通文件</td></tr><tr><td style="text-align:center">-L file</td><td style="text-align:left">符号链接</td></tr><tr><td style="text-align:center">-r file</td><td style="text-align:left">可读取</td></tr><tr><td style="text-align:center">-w file</td><td style="text-align:left">可写入</td></tr><tr><td style="text-align:center">-x file</td><td style="text-align:left">可执行</td></tr></tbody></table><p><strong>test</strong>的另外一种格式：<code>test</code>还有一个别名<code>[</code>，因此可以用另外一种格式来表示：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ expression ]</span><br></pre></td></tr></table></figure><p></p><p>其中<code>[</code>是命令名，但如果写成这种格式表达式结尾处<strong>必须</strong>有对应的<code>]</code>，并且<code>[</code>之后与<code>]</code>之前必须有空格。</p><p><strong>逻辑操作符</strong><br>一元逻辑否定操作符<code>!</code>可以放置在任意的<code>test</code>之前，否定该表达式的求值结果；<br>操作符<code>-a</code>在两个表达式之间执行逻辑与运算，求值满足短路规则；<br>操作符<code>-o</code>在两个表达式之间执行逻辑或运算，求值满足短路规则。</p><p>之外，<code>-o</code>优先级低于<code>-a</code>；也可以使用括号来改变求值顺序，但括号本身要被引用起来，因为它们对于shell有特殊的含义。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> bash </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[传参@bash]]></title>
      <url>http://www.wrran.com/blog/2019/08/19/learn/bash/pass-arguments/</url>
      <content type="html"><![CDATA[<blockquote><p>众志成城</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>流动的数据是程序的肉体。</p><h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><p>执行shell程序时，shell会自动将第一个参数保存在特殊的shell变量1中，并依次将后面参数保存到后面的变量上。这些特殊变量由于基于命令行所在的位置而命名为“位置参数”。</p><p><strong>位置参数</strong>是在shell完成正常的命令行处理之后（I/O重定向，变量替换，文件名替换）被赋值的。<br>注意：当提供给程序的参数多于9个时，没法直接访问到第10个及以后的参数的，必须使用格式<code>${n}</code>；否则如<code>$10</code>会被解析为第一个变量后加上字符<code>0</code>。</p><p>之外，命令<code>shift</code>可以左移位置参数。</p><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p>除了位置参数为，特殊shell变量<code>$#</code>包含了命令行中输入的参数个数；变量<code>$*</code>引用的是传给程序的所有参数。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat tshift</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$#</span> $*</span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"></span><br><span class="line">$ chmod +x ./tshift</span><br><span class="line">$ ./tshift a b c d e</span><br><span class="line">5 a b c d e</span><br><span class="line">4 b c d e</span><br><span class="line">3 c d e</span><br><span class="line">2 d e</span><br><span class="line">1 e</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> bash </category>
            
        </categories>
        
        
        <tags>
            
            <tag> passing-arguments </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Commonly Commands @ bash]]></title>
      <url>http://www.wrran.com/blog/2019/08/19/cheatsheet/reference/bash-cmds/</url>
      <content type="html"><![CDATA[<blockquote><p>他说风雨中这点痛算什么<br>@ 水手</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">EXAMPLE</th></tr></thead><tbody><tr><td style="text-align:center"><code>date</code></td><td style="text-align:left">显示日期和时间</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>who</code></td><td style="text-align:left">找出已登录的人员</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>echo</code></td><td style="text-align:left">回显字符</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ls</code></td><td style="text-align:left">列举文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cat</code></td><td style="text-align:left">显示文件内容</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>wc</code></td><td style="text-align:left">统计文件中单词数量</td></tr><tr><td style="text-align:center"><code>cp</code></td><td style="text-align:left">复制文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>mv</code></td><td style="text-align:left">文件重命名</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>rm</code></td><td style="text-align:left">删除文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>pwd</code></td><td style="text-align:left">显示工作目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cd</code></td><td style="text-align:left">更改目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>mkdir</code></td><td style="text-align:left">创建目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ln</code></td><td style="text-align:left">文件链接</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>rmdir</code></td><td style="text-align:left">删除目录</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ps</code></td><td style="text-align:left">显示系统中所运行的进程的信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>cut</code></td><td style="text-align:left">从数据文件中提取出字段</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>paste</code></td><td style="text-align:left">合并多个字段</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>sed</code></td><td style="text-align:left">在管道或命令序列中编辑数据</td><td style="text-align:left"><strong>s</strong>tream <strong>ed</strong>itor</td></tr><tr><td style="text-align:center"><code>tr</code></td><td style="text-align:left">转换标准输入中的字符</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>grep</code></td><td style="text-align:left">在一个或多个文件中搜索指定模式</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>sort</code></td><td style="text-align:left">按照字母顺序排序并输出结果</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>uniq</code></td><td style="text-align:left">查找或删除文件中的重复行</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>shift</code></td><td style="text-align:left">左移位置参数</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>test</code></td><td style="text-align:left">测试条件表达式的实用工具</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exit</code></td><td style="text-align:left">终止shell程序的执行并返回退出状态码</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ssh-keygen</code></td><td style="text-align:left">ssh密钥生成</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>ssh-copy-id</code></td><td style="text-align:left">ssh免密登录</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> bash </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bash-cmds </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Commonly Variables @ bash]]></title>
      <url>http://www.wrran.com/blog/2019/08/19/cheatsheet/reference/bash-vars/</url>
      <content type="html"><![CDATA[<blockquote><p>bash虐我千百遍，我待其如初恋</p></blockquote><a id="more"></a><p><strong>传参的特殊变量</strong></p><table><thead><tr><th style="text-align:center">VARIABLE</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>${n}</code></td><td style="text-align:left">位置变量</td></tr><tr><td style="text-align:center"><code>$#</code></td><td style="text-align:left">参数个数</td></tr><tr><td style="text-align:center"><code>$*</code></td><td style="text-align:left">所有参数</td></tr></tbody></table><p>更多详情：<a href="http://wrran.com/blog/2019/08/19/learn/bash/pass-arguments/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/19/learn/bash/pass-arguments/</a></p><p><strong>其他</strong></p><table><thead><tr><th style="text-align:center">VARIABLE</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>#?</code></td><td style="text-align:left">上一次命令的退出码</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> bash </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[函数@bash]]></title>
      <url>http://www.wrran.com/blog/2019/08/18/learn/bash/function/</url>
      <content type="html"><![CDATA[<blockquote><p>复用，复用，复用：经济又安全</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>shell中的函数（function）是指命令序列（定义），可引用或重用（语用）。</p><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>一般格式如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">name</span></span>() &#123; <span class="built_in">command</span>; ... <span class="built_in">command</span>; &#125;</span><br></pre></td></tr></table></figure><p></p><p>调用函数就像执行普通命令一样，输入<strong>函数名称</strong>即可执行。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>函数的重要特性是：</p><blockquote><p>命令行上出现在函数后的参数会依次分配给位置参数<code>$1</code>,<code>p2</code>，<code>$3</code>…。</p></blockquote><p>之外，还有一些特性值得注意：</p><ol><li>「子shell」：函数仅存在于它所定义的shell中，无法传给子shell；</li><li>「变量&amp;目录」：函数对于当前目录或变量作出的修改在函数执行完毕之后依然会保留。</li></ol><h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><p>函数的优势有：</p><ul><li>「速度更快」：是因为shell不需要搜索磁盘来查找程序、打开文件并将文件内容读入内存，只需要跳转到相应的位置；</li><li>「管理模块化」@&gt; 可以将相关的shell程序全都放进单个文件中。</li></ul><h1 id="函数的之外"><a href="#函数的之外" class="headerlink" title="函数的之外"></a>函数的之外</h1><p><strong>删除自定义的函数</strong>：使用带有<code>-f</code>选项的<code>unset</code>命令可以从shell中删除函数。</p><p><strong>从函数内部退出</strong>：</p><ul><li>命令<code>exit</code>：如果在函数内部使用<code>exit</code>，不仅会终止函数的执行，而且还会使得调用该函数的shell程序退出，返回到命令行。</li><li>命令<code>return</code>：如果您只是想退出函数，可以使用命令<code>return</code>，形如：<code>return n</code>，<code>n</code>作为该函数的「返回状态」。</li><li>缺省情况：如果忽略的话，则使用函数中最后执行的那条命令的「退出状态」，这种情况也适用于函数中没有包含<code>return</code>命令的时候。</li></ul><p>注意：返回状态在其他方面和退出状态一样：可以使用shell变量<code>$?</code>来访问它，也可以在<code>if</code>/<code>while</code>和<code>until</code>命令中对其进行测试。</p><p><strong>实践建议</strong>：可以将常用函数定义放入<code>.profile</code>中，或单独某文件如<code>myfuncs</code>，后在当前shell中执行该文件：<code>. myfuncs</code>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> bash </category>
            
        </categories>
        
        
        <tags>
            
            <tag> function@bash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重定向@bash]]></title>
      <url>http://www.wrran.com/blog/2019/08/18/learn/bash/redirect/</url>
      <content type="html"><![CDATA[<blockquote><p>暂且离开自己又返回自己，只是返回的位置略有不同。<br>@ 村上春树</p></blockquote><a id="more"></a><h1 id="数据重定向"><a href="#数据重定向" class="headerlink" title="数据重定向"></a>数据重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt; stdout</code></td><td style="text-align:left">标准输出重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt; stdin</code></td><td style="text-align:left">标准输入重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command 2&gt; stderr</code></td><td style="text-align:left">标准错误重定向</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="流重定向"><a href="#流重定向" class="headerlink" title="流重定向"></a>流重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&amp;2</code></td><td style="text-align:left">将标准输出重定向到标准错误</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command 2&gt;&amp;1</code></td><td style="text-align:left">将标准错误重定向到标准输出</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="动态重定向"><a href="#动态重定向" class="headerlink" title="动态重定向"></a>动态重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>exec &lt; datafile</code></td><td style="text-align:left">标准输入动态重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exec &gt; datafile</code></td><td style="text-align:left">标准输出动态重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>exec 2&gt; datafile</code></td><td style="text-align:left">标准错误动态重定向</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="流行为重定向"><a href="#流行为重定向" class="headerlink" title="流行为重定向"></a>流行为重定向</h1><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&gt; stdout</code></td><td style="text-align:left">标准输出由默认覆写模式重定向为追加模式</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;word lines</code></td><td style="text-align:left">标准输入重定向为行内输入模式</td><td style="text-align:left">使用<code>lines</code>作为命令标准输入，直到碰到只含有<code>word</code>的行；并“附加操作”：进行参数替换、反引号命令执行，同时解析反斜杠的语义</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;\word lines</code></td><td style="text-align:left">标准输入重定向为原封行内输入模式</td><td style="text-align:left">类似“行内输入模式”，不同在于不进行“附加操作”</td></tr><tr><td style="text-align:center"><code>command &lt;&lt;-word lines</code></td><td style="text-align:left">标准输入重定向为缩进行内输入模式</td><td style="text-align:left">类似“行内输出模式”，不同在于又“附加操作”：删除前导制表符</td></tr></tbody></table><h2 id="关闭流"><a href="#关闭流" class="headerlink" title="关闭流"></a>关闭流</h2><table><thead><tr><th style="text-align:center">COMMAND</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>command &gt;&amp;-</code></td><td style="text-align:left">关闭标准输出</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>command &lt;&amp;-</code></td><td style="text-align:left">关闭标准输入(？)</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589。" target="_blank" rel="noopener">https://book.douban.com/subject/30410589。</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> bash </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redirect@bash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CS常用术语]]></title>
      <url>http://www.wrran.com/blog/2019/08/18/cheatsheet/cs-terms/</url>
      <content type="html"><![CDATA[<blockquote><p>记住，是不可能记住的。</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">TERM</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center">avatar</td><td style="text-align:left">可移动图标</td><td style="text-align:left">如头像</td></tr><tr><td style="text-align:center">interoperability</td><td style="text-align:left">互操作性</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">fixture</td><td style="text-align:left">固定设施</td><td style="text-align:left">如测试套具（fixture）</td></tr><tr><td style="text-align:center">register</td><td style="text-align:left">注册表</td><td style="text-align:left">—</td></tr><tr><td style="text-align:center">archive</td><td style="text-align:left">归档</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">parameter</td><td style="text-align:left">形参</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">argument</td><td style="text-align:left">实参</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">redirect</td><td style="text-align:left">重定向</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">cheatsheet</td><td style="text-align:left">小抄</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">dump</td><td style="text-align:left">转存</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">trackback</td><td style="text-align:left">回溯</td><td style="text-align:left">-</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cs-terms </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[The Python Standard Library]]></title>
      <url>http://www.wrran.com/blog/2019/08/18/learn/python/stdlib/index/</url>
      <content type="html"><![CDATA[<blockquote><p>善工必先利其器</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>标准库意味着由官方维护，会随着语言的演变而演变；因而值得大下功夫，好好琢磨。</p><p>标准库非常庞大，所提供的组件涉及范围十分广泛。该库包含了多个内置模块 (以C编写)，Python 程序员必须依靠它们来实现<strong>系统级功能</strong>，例如文件 I/O；此外还有大量以Python编写的模块，提供了日常编程中许多问题的<strong>标准解决方案</strong>。<br></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文将罗列出这些标准库，但鉴于数量众多、功能复杂。<br>因此，先根据模块所针对的目标人群进行分类：入门级、高手级、骨灰级；之后根据其处理的问题进行大致分类（部分重叠）。</p><p>但出于方便，单独列出一节简述常用标准库的功能。</p><h1 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h1><h1 id="完整目录"><a href="#完整目录" class="headerlink" title="完整目录"></a>完整目录</h1><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><p>这部分单独列出各个阶段玩家都会使用到的一些工具。</p><h3 id="系统工具"><a href="#系统工具" class="headerlink" title="系统工具"></a>系统工具</h3><p>该部分主要用来支持调用操作系统的一些标准库。</p><h4 id="系统平台无关（通用操作系统服务）"><a href="#系统平台无关（通用操作系统服务）" class="headerlink" title="系统平台无关（通用操作系统服务）"></a>系统平台无关（通用操作系统服务）</h4><p>本章中描述的各模块提供了在（几乎）所有的操作系统上可用的操作系统特性的接口，例如文件和时钟。这些接口通常以 Unix 或 C 接口为参照对象设计，不过在大多数其他系统上也可用。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>os</code></td><td style="text-align:left">操作系统接口模块</td></tr><tr><td style="text-align:center"><code>io</code></td><td style="text-align:left">处理流的核心工具</td></tr><tr><td style="text-align:center"><code>time</code></td><td style="text-align:left">时间的访问和转换</td></tr><tr><td style="text-align:center"><code>argparse</code></td><td style="text-align:left">命令行选项、参数和子命令解析器</td></tr><tr><td style="text-align:center"><code>getopt</code></td><td style="text-align:left">C风格的命令行解析器</td></tr><tr><td style="text-align:center"><code>logging</code></td><td style="text-align:left">Python 的日志记录工具</td></tr><tr><td style="text-align:center"><code>logging.config</code></td><td style="text-align:left">日志记录配置</td></tr><tr><td style="text-align:center"><code>logging.handlers</code></td><td style="text-align:left">日志处理器</td></tr><tr><td style="text-align:center"><code>getpass</code></td><td style="text-align:left">便携式密码输入工具</td></tr><tr><td style="text-align:center"><code>curses</code></td><td style="text-align:left">终端字符单元显示的处理</td></tr><tr><td style="text-align:center"><code>platform</code></td><td style="text-align:left">获取底层平台的标识数据</td></tr><tr><td style="text-align:center"><code>errno</code></td><td style="text-align:left">标准errno系统符号</td></tr><tr><td style="text-align:center"><code>ctypes</code></td><td style="text-align:left">Python 的外部函数库</td></tr></tbody></table><h4 id="系统平台相关"><a href="#系统平台相关" class="headerlink" title="系统平台相关"></a>系统平台相关</h4><h5 id="Windows系统相关模块"><a href="#Windows系统相关模块" class="headerlink" title="Windows系统相关模块"></a>Windows系统相关模块</h5><h5 id="Unix专有模块"><a href="#Unix专有模块" class="headerlink" title="Unix专有模块"></a>Unix专有模块</h5><h2 id="入门级"><a href="#入门级" class="headerlink" title="入门级"></a>入门级</h2><h3 id="解释器相关"><a href="#解释器相关" class="headerlink" title="解释器相关"></a>解释器相关</h3><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p>Python 解释器内置了很多函数和类型，您可以在任何时候使用它们；具体目录参见<a href="https://docs.python.org/zh-cn/3/library/functions.html。" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/functions.html。</a></p><h4 id="内置常量"><a href="#内置常量" class="headerlink" title="内置常量"></a>内置常量</h4><p>有少数的常量存在于内置命名空间中。它们是：</p><ul><li><code>False</code></li><li><code>True</code></li><li><code>None</code></li><li><code>NotImplemented</code></li><li><code>Ellipsis</code>，等同于<code>...</code></li><li><code>__debug__</code></li></ul><p>注解：变量名<code>None</code>，<code>False</code>，<code>True</code> 和 <code>__debug__</code> 无法重新赋值（赋值给它们，即使是属性名，将引发<code>SyntaxError</code>），所以它们可以被认为是“真正的”常数。</p><p><code>site</code> 模块（在启动期间自动导入，除非给出 -S 命令行选项）将几个常量添加到内置命名空间。 它们对交互式解释器<code>shell</code>很有用，并且不应在程序中使用。</p><ul><li><code>quit(code=None)</code></li><li><code>exit(code=None)</code>：当打印此对象时，会打印出一条消息，例如“Use quit() or Ctrl-D (i.e. EOF) to exit”，当调用此对象时，将使用指定的退出代码来引发 SystemExit。</li><li><code>copyright</code></li><li><code>credits</code>：打印或调用的对象分别打印版权或作者的文本。</li><li><code>license</code>：当打印此对象时，会打印出一条消息“Type license() to see the full license text”，当调用此对象时，将以分页形式显示完整的许可证文本（每次显示一屏）。</li></ul><h4 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h4><p>主要内置类型有数字、序列、映射、类、实例和异常。<br>有些多项集类是可变的。它们用于添加、移除或重排其成员的方法将原地执行，并不返回特定的项，绝对不会返回多项集实例自身而是返回<code>None</code>。<br>有些操作受多种对象类型的支持；特别地，实际上所有对象都可以被比较、检测逻辑值，以及转换为字符串（使用<code>repr()</code>函数或略有差异的<code>str()</code>函数）。后一个函数是在对象由<code>print()</code>函数输出时被隐式地调用的。</p><h4 id="内置异常"><a href="#内置异常" class="headerlink" title="内置异常"></a>内置异常</h4><p>在Python中，所有异常必须为一个派生自<code>BaseException</code>的类的实例。在带有提及一个特定类的<code>except</code>子句的<code>try</code>语句中，该子句也会处理任何派生自该类的异常类（但不处理<strong>它所派生出的异常类</strong>）。 通过子类化创建的两个不相关异常类永远是不等效的，既使它们具有相同的名称。</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>本章节描述的模块提供了一系列专门的数据类型例如日期与时间、固定类型的数组、堆队列、同步队列与集合等。<br>Python同样提供一些内置的数据类型，特别的，<code>dict</code>，<code>list</code>，<code>set</code>与<code>frozenset</code> 以及<code>tuple</code>。 <code>str</code>类通常指<strong>Unicode 字符串</strong>，并且<code>bytes</code>通常指<strong>二进制数据</strong>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>datetime</code></td><td style="text-align:left">基本的日期和时间类型</td></tr><tr><td style="text-align:center"><code>calendar</code></td><td style="text-align:left">日历相关函数</td></tr><tr><td style="text-align:center"><code>collections</code></td><td style="text-align:left">容器数据类型</td></tr><tr><td style="text-align:center"><code>collections.abc</code></td><td style="text-align:left">容器的抽象基类</td></tr><tr><td style="text-align:center"><code>heapq</code></td><td style="text-align:left">堆队列算法</td></tr><tr><td style="text-align:center"><code>bisect</code></td><td style="text-align:left">数组二分查找算法</td></tr><tr><td style="text-align:center"><code>array</code></td><td style="text-align:left">处理数值类型高效的数组</td></tr><tr><td style="text-align:center"><code>weakref</code></td><td style="text-align:left">弱引用</td></tr><tr><td style="text-align:center"><code>types</code></td><td style="text-align:left">动态创建类型，为内建类型提供指代</td></tr><tr><td style="text-align:center"><code>copy</code></td><td style="text-align:left">浅层 (shallow) 和深层 (deep) 复制操作</td></tr><tr><td style="text-align:center"><code>pprint</code></td><td style="text-align:left">数据美化输出</td></tr><tr><td style="text-align:center"><code>reprlib</code></td><td style="text-align:left"><code>repr()</code>的可替换实现</td></tr><tr><td style="text-align:center"><code>enum</code></td><td style="text-align:left">对枚举（enumerations）进行支持</td></tr></tbody></table><h4 id="数学和数学模块"><a href="#数学和数学模块" class="headerlink" title="数学和数学模块"></a>数学和数学模块</h4><p>本章介绍的模块提供与数字和数学相关的函数和数据类型。<code>numbers</code>模块定义了数字类型的抽象层次结构。 <code>math</code>和<code>cmath</code>模块包含浮点数和复数的各种数学函数。<code>decimal</code>模块支持使用任意精度算术的十进制数的精确表示。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>numbers</code></td><td style="text-align:left">数字的抽象基类</td></tr><tr><td style="text-align:center"><code>math</code></td><td style="text-align:left">数学函数</td></tr><tr><td style="text-align:center"><code>decimal</code></td><td style="text-align:left">十进制定点和浮点运算</td></tr><tr><td style="text-align:center"><code>fractions</code></td><td style="text-align:left">分数</td></tr><tr><td style="text-align:center"><code>random</code></td><td style="text-align:left">生成伪随机数</td></tr><tr><td style="text-align:center"><code>statistics</code></td><td style="text-align:left">数学统计函数</td></tr></tbody></table><h4 id="文件和目录访问"><a href="#文件和目录访问" class="headerlink" title="文件和目录访问"></a>文件和目录访问</h4><p>本章中描述的模块处理磁盘文件和目录。 例如，有一些模块用于读取文件的属性，以可移植的方式操作路径以及创建临时文件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>pathlib</code></td><td style="text-align:left">面向对象的文件系统路径</td></tr><tr><td style="text-align:center"><code>os.path</code></td><td style="text-align:left">常见路径操作</td></tr><tr><td style="text-align:center"><code>fileinput</code></td><td style="text-align:left">提供多个输入流的迭代功能</td></tr><tr><td style="text-align:center"><code>stat</code></td><td style="text-align:left">解释<code>stat()</code>的结果</td></tr><tr><td style="text-align:center"><code>filecmp</code></td><td style="text-align:left">文件及目录的比较</td></tr><tr><td style="text-align:center"><code>tempfile</code></td><td style="text-align:left">产生临时文件及文件夹</td></tr><tr><td style="text-align:center"><code>glob</code></td><td style="text-align:left">Unix类型路径名扩展</td></tr><tr><td style="text-align:center"><code>fnmatch</code></td><td style="text-align:left">Unix类型文件名匹配</td></tr><tr><td style="text-align:center"><code>linecache</code></td><td style="text-align:left">随机访问文本行</td></tr><tr><td style="text-align:center"><code>shutil</code></td><td style="text-align:left">高层次文件操作接口</td></tr><tr><td style="text-align:center"><code>macpath</code></td><td style="text-align:left">Mac OS 9 路径操作函数</td></tr></tbody></table><p>更多：<br><strong>模块 os</strong>：操作系统接口，包括处理比<strong>Python文件对象</strong>更低级别文件的功能。<br><strong>模块 io</strong>：Python的内置 I/O 库，包括抽象类和一些具体的类，如文件 I/O 。<br><strong>内置函数 open()</strong>：使用 Python 打开文件进行读写的标准方法。</p><h2 id="高手级"><a href="#高手级" class="headerlink" title="高手级"></a>高手级</h2><h3 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h3><h4 id="函数式编程模块"><a href="#函数式编程模块" class="headerlink" title="函数式编程模块"></a>函数式编程模块</h4><p>本章里描述的模块提供了函数和类，以支持函数式编程风格和在可调用对象上的通用操作。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>itertools</code></td><td style="text-align:left">为高效循环而创建迭代器的函数</td></tr><tr><td style="text-align:center"><code>functools</code></td><td style="text-align:left">高阶函数和可调用对象上的操作</td></tr><tr><td style="text-align:center"><code>operator</code></td><td style="text-align:left">标准运算符替代函数</td></tr></tbody></table><h4 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h4><p>本章中描述的模块支持并发执行代码。 适当的工具选择取决于要执行的任务（CPU密集型或IO密集型）和偏好的开发风格（事件驱动的协作式多任务或抢占式多任务处理）。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>threading</code></td><td style="text-align:left">基于线程的并行</td></tr><tr><td style="text-align:center"><code>multiprocessing</code></td><td style="text-align:left">基于进程的并行</td></tr><tr><td style="text-align:center"><code>concurrent</code></td><td style="text-align:left">启动并行任</td></tr><tr><td style="text-align:center"><code>subprocess</code></td><td style="text-align:left">子进程管理</td></tr><tr><td style="text-align:center"><code>sched</code></td><td style="text-align:left">事件调度器</td></tr><tr><td style="text-align:center"><code>queue</code></td><td style="text-align:left">一个同步的队列类</td></tr><tr><td style="text-align:center"><code>_thread</code></td><td style="text-align:left">底层多线程 API</td></tr><tr><td style="text-align:center"><code>_dummy_thread</code></td><td style="text-align:left">_thread 的替代模块</td></tr><tr><td style="text-align:center"><code>dummy_threading</code></td><td style="text-align:left">可直接替代 threading 模块。</td></tr></tbody></table><h3 id="开发生命周期相关"><a href="#开发生命周期相关" class="headerlink" title="开发生命周期相关"></a>开发生命周期相关</h3><p>该部分主要是用来支撑软件工程的某些生命周期所需的功能。</p><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>本章中描述的各模块可帮你编写 Python 程序。例如，<code>pydoc</code> 模块接受一个模块并根据该模块的内容来生成文档。<code>doctest</code> 和 <code>unittest</code> 这两个模块包含了用于编写单元测试的框架，并可用于自动测试所编写的代码，验证预期的输出是否产生。<code>2to3</code> 程序能够将 Python 2.x 源代码翻译成有效的 Python 3.x 源代码。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>typing</code></td><td style="text-align:left">类型标注支持</td></tr><tr><td style="text-align:center"><code>pydoc</code></td><td style="text-align:left">文档生成器及在线求助系统</td></tr><tr><td style="text-align:center"><code>doctest</code></td><td style="text-align:left">测试交互性的Python示例</td></tr><tr><td style="text-align:center"><code>unittest</code></td><td style="text-align:left">单元测试框架</td></tr><tr><td style="text-align:center"><code>unittest.mock</code></td><td style="text-align:left">mock对象库</td></tr><tr><td style="text-align:center">`2to3 - 自动将 Python 2 代码转为 Python 3 代码</td></tr><tr><td style="text-align:center"><code>test</code></td><td style="text-align:left">支持 Python 回归测试</td></tr><tr><td style="text-align:center"><code>test.support</code></td><td style="text-align:left">Python 测试组曲的实用工具</td></tr><tr><td style="text-align:center"><code>test.support.script_helper</code></td><td style="text-align:left">Python执行测试的使用工具</td></tr></tbody></table><h4 id="调试和分析"><a href="#调试和分析" class="headerlink" title="调试和分析"></a>调试和分析</h4><p>这些库可以帮助你进行Python开发：调试器使你能够逐步执行代码，分析堆栈帧并设置断点等，而分析器运行代码并为你提供执行时间的详细分类，从而使你能够找出你程序中的瓶颈。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>bdb</code></td><td style="text-align:left">debugger框架</td></tr><tr><td style="text-align:center"><code>faulthandler</code></td><td style="text-align:left">转存 Python 错误回溯</td></tr><tr><td style="text-align:center"><code>pdb</code></td><td style="text-align:left">Python的调试器</td></tr><tr><td style="text-align:center"><code>timeit</code></td><td style="text-align:left">测量小代码片段的执行时间</td></tr><tr><td style="text-align:center"><code>trace</code></td><td style="text-align:left">追溯 Python 语句执行情况</td></tr><tr><td style="text-align:center"><code>tracemalloc</code></td><td style="text-align:left">跟踪内存分配</td></tr></tbody></table><h4 id="软件打包和分发"><a href="#软件打包和分发" class="headerlink" title="软件打包和分发"></a>软件打包和分发</h4><p>这些库可帮助你发布和安装 Python 软件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>distutils</code></td><td style="text-align:left">构建和安装 Python 模块</td></tr><tr><td style="text-align:center"><code>ensurepip</code></td><td style="text-align:left">引导 pip 安装器</td></tr><tr><td style="text-align:center"><code>venv</code></td><td style="text-align:left">创建虚拟环境</td></tr><tr><td style="text-align:center"><code>zipapp</code></td><td style="text-align:left">管理可执行的 Python zip压缩包</td></tr></tbody></table><h2 id="骨灰级"><a href="#骨灰级" class="headerlink" title="骨灰级"></a>骨灰级</h2><h3 id="Python运行时服务"><a href="#Python运行时服务" class="headerlink" title="Python运行时服务"></a>Python运行时服务</h3><p>本章里描述的模块提供了和Python解释器及其环境交互相关的广泛服务。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>sys</code></td><td style="text-align:left">系统相关的参数和函数</td></tr><tr><td style="text-align:center"><code>sysconfig</code></td><td style="text-align:left">访问 Python’s 配置信息</td></tr><tr><td style="text-align:center"><code>builtins</code></td><td style="text-align:left">内建对象</td></tr><tr><td style="text-align:center"><code>__main__</code></td><td style="text-align:left">顶层脚本环境</td></tr><tr><td style="text-align:center"><code>warnings</code></td><td style="text-align:left">警告控制</td></tr><tr><td style="text-align:center"><code>dataclasses</code></td><td style="text-align:left">数据类</td></tr><tr><td style="text-align:center"><code>contextlib</code></td><td style="text-align:left">with语句上下文的实用工具</td></tr><tr><td style="text-align:center"><code>abc</code></td><td style="text-align:left">抽象基类</td></tr><tr><td style="text-align:center"><code>atexit</code></td><td style="text-align:left">退出处理器</td></tr><tr><td style="text-align:center"><code>traceback</code></td><td style="text-align:left">打印或检索堆栈回溯</td></tr><tr><td style="text-align:center"><code>__future__</code></td><td style="text-align:left">Future 语句定义</td></tr><tr><td style="text-align:center"><code>gc</code></td><td style="text-align:left">垃圾回收器接口</td></tr><tr><td style="text-align:center"><code>inspect</code></td><td style="text-align:left">检查对象</td></tr><tr><td style="text-align:center"><code>site</code></td><td style="text-align:left">site配置钩子</td></tr></tbody></table><h3 id="自定义Python解释器"><a href="#自定义Python解释器" class="headerlink" title="自定义Python解释器"></a>自定义Python解释器</h3><p>本章中描述的模块允许编写类似于 Python 的交互式解释器的接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>code</code></td><td style="text-align:left">解释器基类</td></tr><tr><td style="text-align:center"><code>codeop</code></td><td style="text-align:left">编译Python代码</td></tr></tbody></table><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>本章中介绍的模块提供了导入其他Python模块和挂钩以自定义导入过程的新方法。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>zipimport</code></td><td style="text-align:left">从zip压缩包中导入模块</td></tr><tr><td style="text-align:center"><code>pkgutil</code></td><td style="text-align:left">包扩展的实用工具</td></tr><tr><td style="text-align:center"><code>modulefinder</code></td><td style="text-align:left">查找脚本使用的模块</td></tr><tr><td style="text-align:center"><code>runpy</code></td><td style="text-align:left">定位与执行 Python 模块</td></tr><tr><td style="text-align:center"><code>importlib</code></td><td style="text-align:left">import 的实现</td></tr></tbody></table><h3 id="Python语言服务"><a href="#Python语言服务" class="headerlink" title="Python语言服务"></a>Python语言服务</h3><p>Python 提供了许多模块来帮助使用 Python 语言。 这些模块支持标记化、解析、语法分析、字节码反汇编以及各种其他工具。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>parser</code></td><td style="text-align:left">访问 Python 解析树</td></tr><tr><td style="text-align:center"><code>ast</code></td><td style="text-align:left">抽象语法树</td></tr><tr><td style="text-align:center"><code>symtable</code></td><td style="text-align:left">访问 编译器的符号表</td></tr><tr><td style="text-align:center"><code>symbol</code></td><td style="text-align:left">与 Python 解析树一起使用的常量</td></tr><tr><td style="text-align:center"><code>token</code></td><td style="text-align:left">与Python解析树一起使用的常量</td></tr><tr><td style="text-align:center"><code>keyword</code></td><td style="text-align:left">检验Python关键字</td></tr><tr><td style="text-align:center"><code>tokenize</code></td><td style="text-align:left">Python源码的Tokenizer</td></tr><tr><td style="text-align:center"><code>tabnanny</code></td><td style="text-align:left">模糊缩进检测</td></tr><tr><td style="text-align:center"><code>pyclbr</code></td><td style="text-align:left">Python 类浏览器的支撑包</td></tr><tr><td style="text-align:center"><code>py_compile</code></td><td style="text-align:left">编译 Python 源码</td></tr><tr><td style="text-align:center"><code>compileall</code></td><td style="text-align:left">二进制编码 Python库</td></tr><tr><td style="text-align:center"><code>dis</code></td><td style="text-align:left">Python 字节码反汇编器</td></tr><tr><td style="text-align:center"><code>pickletools</code></td><td style="text-align:left">pickle开发者的工具箱</td></tr></tbody></table><h2 id="任务相关"><a href="#任务相关" class="headerlink" title="任务相关"></a>任务相关</h2><p>该部分罗列的是与需求域相关的一些标准库。</p><h3 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h3><h4 id="文本处理服务"><a href="#文本处理服务" class="headerlink" title="文本处理服务"></a>文本处理服务</h4><p>本小节介绍的模块提供了广泛的字符串操作和其他文本处理服务。<br>在<strong>二进制数据服务</strong>之下描述的<code>codecs</code>模块也与文本处理高度相关。此外也请参阅Python内置字符串类型的文档文本序列类型 – <code>str</code>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>string</code></td><td style="text-align:left">常见的字符串操作</td></tr><tr><td style="text-align:center"><code>re</code></td><td style="text-align:left">正则表达式操作</td></tr><tr><td style="text-align:center"><code>difflib</code></td><td style="text-align:left">计算差异的辅助工具</td></tr><tr><td style="text-align:center"><code>textwrap</code></td><td style="text-align:left">文本自动换行与填充</td></tr><tr><td style="text-align:center"><code>unicodedata</code></td><td style="text-align:left">Unicode 数据库</td></tr><tr><td style="text-align:center"><code>stringprep</code></td><td style="text-align:left">因特网字符串预备</td></tr><tr><td style="text-align:center"><code>readline</code></td><td style="text-align:left">GNU readline 接口</td></tr><tr><td style="text-align:center"><code>rlcompleter</code></td><td style="text-align:left">GNU readline 的补全函数</td></tr></tbody></table><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h4><p>本章中描述的模块解析各种不是标记语言且与电子邮件无关的杂项文件格式。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>csv</code></td><td style="text-align:left">CSV 文件读写</td></tr><tr><td style="text-align:center"><code>configparser</code></td><td style="text-align:left">Configuration file parser</td></tr><tr><td style="text-align:center"><code>netrc</code></td><td style="text-align:left">netrc file processing</td></tr><tr><td style="text-align:center"><code>xdrlib</code></td><td style="text-align:left">Encode and decode XDR data</td></tr><tr><td style="text-align:center"><code>plistlib</code></td><td style="text-align:left">Generate and parse Mac OS X .plist files</td></tr></tbody></table><h4 id="数据压缩和存档"><a href="#数据压缩和存档" class="headerlink" title="数据压缩和存档"></a>数据压缩和存档</h4><p>本章中描述的模块支持 zlib、gzip、bzip2 和 lzma 数据压缩算法，以及创建 ZIP 和 tar 格式的归档文件。参见由 shutil 模块提供的 Archiving operations 。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>zlib</code></td><td style="text-align:left">与 gzip 兼容的压缩</td></tr><tr><td style="text-align:center"><code>gzip</code></td><td style="text-align:left">对 gzip 格式的支持</td></tr><tr><td style="text-align:center"><code>bz2</code></td><td style="text-align:left">对 bzip2 压缩算法的支持</td></tr><tr><td style="text-align:center"><code>lzma</code></td><td style="text-align:left">用 LZMA 算法压缩</td></tr><tr><td style="text-align:center"><code>zipfile</code></td><td style="text-align:left">使用ZIP存档</td></tr><tr><td style="text-align:center"><code>tarfile</code></td><td style="text-align:left">读写tar归档文件</td></tr></tbody></table><h4 id="结构化标记处理工具"><a href="#结构化标记处理工具" class="headerlink" title="结构化标记处理工具"></a>结构化标记处理工具</h4><p>Python 支持各种模块，以处理各种形式的结构化数据标记。 这包括使用标准通用标记语言（SGML）和超文本标记语言（HTML）的模块，以及使用可扩展标记语言（XML）的几个接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>html</code></td><td style="text-align:left">超文本标记语言支持</td></tr><tr><td style="text-align:center"><code>html.parser</code></td><td style="text-align:left">简单的 HTML 和 XHTML 解析器</td></tr><tr><td style="text-align:center"><code>html.entities</code></td><td style="text-align:left">HTML 一般实体的定义</td></tr><tr><td style="text-align:center"><code>xml.etree.ElementTree</code></td><td style="text-align:left">The ElementTree XML API</td></tr><tr><td style="text-align:center"><code>xml.dom</code></td><td style="text-align:left">The Document Object Model API</td></tr><tr><td style="text-align:center"><code>xml.dom.minidom</code></td><td style="text-align:left">最小 DOM 实现</td></tr><tr><td style="text-align:center"><code>xml.dom.pulldom</code></td><td style="text-align:left">支持构建部分 DOM 树</td></tr><tr><td style="text-align:center"><code>xml.sax</code></td><td style="text-align:left">SAX2 解析器</td></tr><tr><td style="text-align:center"><code>xml.sax.handler</code></td><td style="text-align:left">SAX 处理器的基类</td></tr><tr><td style="text-align:center"><code>xml.sax.saxutils</code></td><td style="text-align:left">SAX 实用工具</td></tr><tr><td style="text-align:center"><code>xml.sax.xmlreader</code></td><td style="text-align:left">XML 解析器接口</td></tr><tr><td style="text-align:center"><code>xml.parsers.expat</code></td><td style="text-align:left">实用 Expat 实现的快速XML解析</td></tr></tbody></table><h4 id="二进制数据服务"><a href="#二进制数据服务" class="headerlink" title="二进制数据服务"></a>二进制数据服务</h4><p>本章介绍的模块提供了一些操作二进制数据的基本服务操作。 有关二进制数据的其他操作，特别是与文件格式和网络协议有关的操作，将在相关章节中介绍。<br>下面描述的一些库<strong>文本处理服务</strong>也可以使用<strong>ASCII</strong>兼容的二进制格式（例如<code>re</code>）或所有二进制数据（例如<code>difflib</code>）。<br>另外，请参阅Python的内置二进制数据类型的文档<strong>二进制序列类型</strong> — <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code>。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>struct</code></td><td style="text-align:left">将字节串解读为打包的二进制数据</td></tr><tr><td style="text-align:center"><code>codecs</code></td><td style="text-align:left">编解码器注册和相关基类</td></tr></tbody></table><h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><p>本章中描述的模块支持在磁盘上以持久形式存储 Python 数据。<code>pickle</code>和<code>marshal</code>模块可以将许多 Python 数据类型转换为字节流，然后从字节中重新创建对象。各种与 DBM 相关的模块支持一系列基于散列的文件格式，这些格式存储字符串到其他字符串的映射。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>pickle</code></td><td style="text-align:left">Python 对象序列化</td></tr><tr><td style="text-align:center"><code>copyreg</code></td><td style="text-align:left"><code>pickle</code>支撑函数的注册表</td></tr><tr><td style="text-align:center"><code>shelve</code></td><td style="text-align:left">Python 对象持久化</td></tr><tr><td style="text-align:center"><code>marshal</code></td><td style="text-align:left">内部 Python 对象序列化</td></tr><tr><td style="text-align:center"><code>dbm</code></td><td style="text-align:left">UNIX “数据库”的接口</td></tr><tr><td style="text-align:center"><code>sqlite3</code></td><td style="text-align:left">SQLite 数据库 DB-API 2.0 接口模块</td></tr></tbody></table><h3 id="网络开发"><a href="#网络开发" class="headerlink" title="网络开发"></a>网络开发</h3><h4 id="网络和进程间通信"><a href="#网络和进程间通信" class="headerlink" title="网络和进程间通信"></a>网络和进程间通信</h4><p>本章介绍的模块提供了网络和进程间通信的机制。</p><p>某些模块仅适用于同一台机器上的两个进程，例如<code>signal</code>和<code>mmap</code>。其他模块支持两个或多个进程可用于跨机器通信的网络协议。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>asyncio</code></td><td style="text-align:left">异步 I/O</td></tr><tr><td style="text-align:center"><code>socket</code></td><td style="text-align:left">底层网络接口</td></tr><tr><td style="text-align:center"><code>ssl</code></td><td style="text-align:left">socket对象的TLS/SSL包装器</td></tr><tr><td style="text-align:center"><code>select</code></td><td style="text-align:left">等待 I/O 完成</td></tr><tr><td style="text-align:center"><code>selectors</code></td><td style="text-align:left">高级 I/O 复用库</td></tr><tr><td style="text-align:center"><code>asyncore</code></td><td style="text-align:left">异步socket处理器</td></tr><tr><td style="text-align:center"><code>asynchat</code></td><td style="text-align:left">异步 socket 指令/响应 处理器</td></tr><tr><td style="text-align:center"><code>signal</code></td><td style="text-align:left">设置异步事件处理程序</td></tr><tr><td style="text-align:center"><code>mmap</code></td><td style="text-align:left">内存映射文件支持</td></tr></tbody></table><h4 id="互联网数据处理"><a href="#互联网数据处理" class="headerlink" title="互联网数据处理"></a>互联网数据处理</h4><p>本章介绍了支持处理互联网上常用数据格式的模块。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>email</code></td><td style="text-align:left">电子邮件与 MIME 处理包</td></tr><tr><td style="text-align:center"><code>json</code></td><td style="text-align:left">JSON 编码和解码器</td></tr><tr><td style="text-align:center"><code>mailcap</code></td><td style="text-align:left">处理Mailcap文件 file handling</td></tr><tr><td style="text-align:center"><code>mailbox</code></td><td style="text-align:left">管理不同格式的邮箱</td></tr><tr><td style="text-align:center"><code>mimetypes</code></td><td style="text-align:left">将文件名映射为MIME类型</td></tr><tr><td style="text-align:center"><code>base64</code></td><td style="text-align:left">Base16, Base32, Base64, Base85 数据编码</td></tr><tr><td style="text-align:center"><code>binhex</code></td><td style="text-align:left">对binhex4文件进行编码和解码</td></tr><tr><td style="text-align:center"><code>binascii</code></td><td style="text-align:left">二进制和 ASCII 码互转</td></tr><tr><td style="text-align:center"><code>quopri</code></td><td style="text-align:left">MIME 可打印字符引用编码数据（MIME quoted-printable data）的解码与编码</td></tr><tr><td style="text-align:center"><code>uu</code></td><td style="text-align:left">uuencode格式数据的编码与解码</td></tr></tbody></table><h4 id="互联网协议和支持"><a href="#互联网协议和支持" class="headerlink" title="互联网协议和支持"></a>互联网协议和支持</h4><p>本章介绍的模块实现了互联网协议并支持相关技术。 它们都是用 Python 实现的。 这些模块中的大多数都需要存在依赖于系统的模块 socket ，目前大多数流行平台都支持它。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>webbrowser</code></td><td style="text-align:left">方便的Web浏览器控制器</td></tr><tr><td style="text-align:center"><code>cgi</code></td><td style="text-align:left">支持<strong>C</strong>ommon <strong>G</strong>ateway <strong>I</strong>nterface</td></tr><tr><td style="text-align:center"><code>cgitb</code></td><td style="text-align:left">CGI脚本的追踪管理器</td></tr><tr><td style="text-align:center"><code>wsgiref</code></td><td style="text-align:left">WSGI实用工具及参考实现</td></tr><tr><td style="text-align:center"><code>urllib</code></td><td style="text-align:left">URL 处理模块</td></tr><tr><td style="text-align:center"><code>urllib.request</code></td><td style="text-align:left">用于打开 URL 的可扩展库</td></tr><tr><td style="text-align:center"><code>urllib.response</code></td><td style="text-align:left">urllib 使用的 Response 类</td></tr><tr><td style="text-align:center"><code>urllib.parse</code></td><td style="text-align:left">将 URLs 解析为各组件</td></tr><tr><td style="text-align:center"><code>urllib.error</code></td><td style="text-align:left">urllib.request 引发的异常类</td></tr><tr><td style="text-align:center"><code>urllib.robotparser</code></td><td style="text-align:left">robots.txt 语法分析程序</td></tr><tr><td style="text-align:center"><code>http.client</code></td><td style="text-align:left">HTTP 协议客户端</td></tr><tr><td style="text-align:center"><code>ftplib</code></td><td style="text-align:left">FTP 协议客户端</td></tr><tr><td style="text-align:center"><code>poplib</code></td><td style="text-align:left">POP3 协议客户端</td></tr><tr><td style="text-align:center"><code>imaplib</code></td><td style="text-align:left">IMAP4 协议客户端</td></tr><tr><td style="text-align:center"><code>nntplib</code></td><td style="text-align:left">NNTP 协议客户端</td></tr><tr><td style="text-align:center"><code>smtplib</code></td><td style="text-align:left">SMTP 协议客户端</td></tr><tr><td style="text-align:center"><code>smtpd</code></td><td style="text-align:left">SMTP 服务端</td></tr><tr><td style="text-align:center"><code>telnetlib</code></td><td style="text-align:left">Telnet 客户端</td></tr><tr><td style="text-align:center"><code>uuid</code></td><td style="text-align:left">UUID（RFC 4122） 对象</td></tr><tr><td style="text-align:center"><code>socketserver</code></td><td style="text-align:left">网络服务器框架</td></tr><tr><td style="text-align:center"><code>http.server</code></td><td style="text-align:left">HTTP 服务器</td></tr><tr><td style="text-align:center"><code>http.cookies</code></td><td style="text-align:left">HTTP 状态管理</td></tr><tr><td style="text-align:center"><code>http.cookiejar</code></td><td style="text-align:left">HTTP 客户端的 Cookie 处理</td></tr><tr><td style="text-align:center"><code>xmlrpc</code></td><td style="text-align:left">XMLRPC 服务端与客户端模块</td></tr><tr><td style="text-align:center"><code>xmlrpc.client</code></td><td style="text-align:left">XML-RPC 客户端</td></tr><tr><td style="text-align:center"><code>xmlrpc.server</code></td><td style="text-align:left">基础的 XML-RPC 服务器</td></tr><tr><td style="text-align:center"><code>ipaddress</code></td><td style="text-align:left">IPv4/IPv6 操作库</td></tr></tbody></table><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p>本章中介绍的模块通过提供选择要在程序信息中使用的语言的机制或通过定制输出以匹配本地约定来帮助你编写不依赖于语言和区域设置的软件。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>gettext</code></td><td style="text-align:left">多语种国际化服务</td></tr><tr><td style="text-align:center"><code>locale</code></td><td style="text-align:left">国际化服务</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="多媒体服务"><a href="#多媒体服务" class="headerlink" title="多媒体服务"></a>多媒体服务</h4><p>本章描述的模块实现了主要用于多媒体应用的各种算法或接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>audioop</code></td><td style="text-align:left">操作原始音频数据</td></tr><tr><td style="text-align:center"><code>aifc</code></td><td style="text-align:left">读写AIFF/AIFC文件</td></tr><tr><td style="text-align:center"><code>sunau</code></td><td style="text-align:left">读写 Sun AU 文件</td></tr><tr><td style="text-align:center"><code>wave</code></td><td style="text-align:left">读写WAV格式文件</td></tr><tr><td style="text-align:center"><code>chunk</code></td><td style="text-align:left">读写IFF块文件</td></tr><tr><td style="text-align:center"><code>colorsys</code></td><td style="text-align:left">颜色系统间的转换</td></tr><tr><td style="text-align:center"><code>imghdr</code></td><td style="text-align:left">推测图像类型</td></tr><tr><td style="text-align:center"><code>sndhdr</code></td><td style="text-align:left">推测声音文件的类型</td></tr><tr><td style="text-align:center"><code>ossaudiodev</code></td><td style="text-align:left">访问兼容OSS的音频设备</td></tr></tbody></table><h4 id="加密服务"><a href="#加密服务" class="headerlink" title="加密服务"></a>加密服务</h4><p>本章中描述的模块实现了加密性质的各种算法。 它们可由安装人员自行决定。 在Unix系统上，<code>crypt</code>模块也可以使用。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>hashlib</code></td><td style="text-align:left">安全哈希与消息摘要</td></tr><tr><td style="text-align:center"><code>hmac</code></td><td style="text-align:left">基于密钥的消息验证</td></tr><tr><td style="text-align:center"><code>secrets</code></td><td style="text-align:left">为密钥生成安全的随机数</td></tr></tbody></table><h4 id="程序框架界面"><a href="#程序框架界面" class="headerlink" title="程序框架界面"></a>程序框架界面</h4><p>本章中描述的模块是很大程度上决定程序结构的框架。 目前，这里描述的模块都面向编写命令行接口。</p><table><thead><tr><th style="text-align:center">LIBRARY</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>turtle</code></td><td style="text-align:left">海龟绘图</td></tr><tr><td style="text-align:center"><code>cmd</code></td><td style="text-align:left">支持面向行的命令解释器</td></tr><tr><td style="text-align:center"><code>shlex</code></td><td style="text-align:left">简单词法分析器</td></tr></tbody></table><h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><p>Tk图形用户界面：<a href="https://docs.python.org/zh-cn/3/library/tk.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/tk.html</a><br>formatter (已移除，通用的输出排版）：<a href="https://docs.python.org/zh-cn/3/library/formatter.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/formatter.html</a><br>contextvars（上下文变量管理）：<a href="https://docs.python.org/zh-cn/3/library/contextvars.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/contextvars.html</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Python3官方文档：<a href="https://docs.python.org/3/library/" target="_blank" rel="noopener">https://docs.python.org/3/library/</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> python </category>
            
            <category> stdlib </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python-stdlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python@cs-lang]]></title>
      <url>http://www.wrran.com/blog/2019/08/18/learn/python/index/</url>
      <content type="html"><![CDATA[<blockquote><p>有牙齿的<code>python</code>更厉害</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tag Plugins@hexo]]></title>
      <url>http://www.wrran.com/blog/2019/08/18/learn/hexo/tag_plugins/</url>
      <content type="html"><![CDATA[<blockquote><p>授人以鱼不如授人以渔</p></blockquote><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>hexo中的<code>tag plugins</code>给了我们在markdown中使用“局部函数”的能力。同时注意“标签插件”和“Front-matter”中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><h1 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h1><p>在文章中插入引言，可包含作者、来源和标题。<br></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">blockquote</span> [author[, <span class="name">source</span>]] [link] [source_link_title] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>在文章中插入代码。<br></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock <span class="string">[title]</span> <span class="string">[lang:language]</span> <span class="string">[url]</span> <span class="string">[link text]</span> %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p></p><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。<br>``` [language] [title] [url] [link text] code snippet ```</p><h1 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h1><p>在文章中插入“Pull quote”。<br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">pullquote</span> [class] %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">content</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endpullquote</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p></p><h1 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h1><blockquote><p>jsFiddle 是一个Web开发人员的练习场，可在线编辑和测试 HTML、CSS、JavaScript代码片段。在 jsFiddle 编辑的代码，可以保存，也可分享给其他人，还可嵌入到网站中。</p></blockquote><p>在文章中嵌入“jsFiddle”。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h1><blockquote><p>Gist 是 Github 推出的基于 Git 的代码片段管理服务。用户可以提交自己的代码片段或任意的文本，可以作为个人的代码管理库、文档管理库等。</p></blockquote><p>在文章中嵌入 Gist。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><p>在文章中插入“iframe”。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><p>在文章中插入指定大小的图片。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] <span class="string">"title text 'alt text'"</span> %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p>在文章中插入链接，并自动给外部链接添加<code>target=&quot;_blank&quot;</code>属性。<br></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h1><p>插入<code>source/downloads/code</code>文件夹内的代码文件。<code>source/downloads/code</code>不是固定的，取决于你在配置文件中<code>code_dir</code>的配置。<br></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [<span class="keyword">lan</span><span class="variable">g:language</span>] path/<span class="keyword">to</span>/<span class="keyword">file</span> %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h1><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">youtube</span> video_id %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h1><blockquote><p>Vimeo 是一个高清视频播客网站，与大多数类似的视频分享网站不同，Vimeo允许上传1280X700的高清视频，上传后Vimeo会自动转码为高清视频，源视频文件可以自由下载，它达到了真正的高清视频标准。</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">vimeo</span> video_id %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h1 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h1><p>如果您想在文章中插入<code>Swig</code>标签，可以尝试使用”Raw”标签，以免发生解析异常。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> raw </span>%&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h1><p>在文章中使用<code>&lt;!-- more --&gt;</code>，那么<code>&lt;!-- more --&gt;</code>之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。<br>注意，摘要可能会被<code>Front Matter</code>中的<code>excerpt</code>覆盖。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>官方文档：<a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tag-plugin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Using Cases@argparse]]></title>
      <url>http://www.wrran.com/blog/2019/08/18/learn/argparse/using_case/</url>
      <content type="html"><![CDATA[<blockquote><p>笔头虽烂可不要贪用哦</p></blockquote><a id="more"></a><h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.parse_args()</span><br></pre></td></tr></table></figure><p>将上述文件保存为<code>prog.py</code>，并在文件对应目录执行下述命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line">python prog.py --verbose</span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: --verbose</span></span><br><span class="line">python prog.py foo</span><br><span class="line"><span class="comment"># usage: prog.py [-h]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: foo</span></span><br></pre></td></tr></table></figure><p></p><p>要点：</p><blockquote><p>The <code>--help</code> option, which can also be shortened to <code>-h</code>, is the only option we get for free (i.e. no need to specify it). Specifying anything else results in an error.</p></blockquote><h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'echo'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.echo)</span><br></pre></td></tr></table></figure><p>保存上述文件为<code>prog.py</code>，并在其目录下执行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: echo</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line">python prog.py foo</span><br><span class="line"><span class="comment"># foo</span></span><br></pre></td></tr></table></figure><p></p><p>向<strong>位置参数</strong>添加帮助信息：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'echo'</span>, help=<span class="string">'echo the string you use here'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.echo</span><br></pre></td></tr></table></figure><p></p><p>此时执行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python prog.py -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] echo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   echo        echo the string you use here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br></pre></td></tr></table></figure><p></p><p>指定<strong>位置参数</strong>类型：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'square'</span>, help=<span class="string">'display a square of a given number'</span>,</span><br><span class="line">                    type=int)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">print</span> args.square**<span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>并执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py four</span><br><span class="line"><span class="comment"># usage: prog.py [-h] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument square: invalid int value: 'four'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h1><p>先添加一个<strong>选项参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--verbosity'</span>, help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbosity:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --verbosity 1</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbosity VERBOSITY]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#  -h, --help            show this help message and exit</span></span><br><span class="line"><span class="comment">#  --verbosity VERBOSITY</span></span><br><span class="line"><span class="comment">#                        increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>限定上述中的<code>--verbosity</code>只能接受指定或者不指定：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                    action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --verbose</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py --verbose 1</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbose]</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: 1</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [--verbose]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br><span class="line"><span class="comment">#   --verbose   increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>注意上述执行<code>python prog.py --help</code>时提示信息的不同。</p><p>加入对应的“短”<strong>选项参数</strong>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, help=<span class="string">'increase output verbosity'</span>,</span><br><span class="line">                    action=<span class="string">'store_true'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'verbosity turned on'</span>)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python prog.py -v</span><br><span class="line"><span class="comment"># verbosity turned on</span></span><br><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v]</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help     show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbose  increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><h1 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h1><p>将<strong>位置参数</strong>与<strong>选项参数</strong>结合使用：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_arugument(<span class="string">'square'</span>, type=int,</span><br><span class="line">                     help=<span class="string">'display a square of a given number'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, <span class="string">'--verbose'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">                    help=<span class="string">'increase output verbosity'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    print(<span class="string">'the square of &#123;&#125; equals &#123;&#125;'</span>.format(arg.square, answer))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: square</span></span><br><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 --verbose</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py --verbose 4</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br></pre></td></tr></table></figure><p></p><p>更复杂的实例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 -v</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v VERBOSITY] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -v/--verbosity: expected one argument</span></span><br><span class="line"><span class="comment"># python prog.py 4 -v 1</span></span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 -v 2</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -v 3</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p></p><p>注意到上例中<code>python prog.py 4 -v 3</code>并没有如我们所期望一样：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, type=int, choices=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 -v 3</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v &#123;0,1,2&#125;] square</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)</span></span><br><span class="line">python prog.py 4 -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v &#123;0,1,2&#125;] square</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   square                display a square of a given number</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help            show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v &#123;0,1,2&#125;, --verbosity &#123;0,1,2&#125;</span></span><br><span class="line"><span class="comment">#                         increase output verbosity</span></span><br></pre></td></tr></table></figure><p></p><p>另外一种常见的设定参数的方式：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display the square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 -v</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 -vv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 --verbosity --verbosity</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -v 1</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># prog.py: error: unrecognized arguments: 1</span></span><br><span class="line">python prog.py 4 -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] square</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   square           display a square of a given number</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help       show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbosity  increase output verbosity</span></span><br><span class="line">python prog.py 4 -vvv</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p></p><p>同样在指令<code>python prog.py 4 -vvv</code>表现不对：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bugfix: replace == with &gt;=</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 -vvv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4 -vvvv</span><br><span class="line"><span class="comment"># the square of 4 equals 16</span></span><br><span class="line">python prog.py 4</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#  File "prog.py", line 11, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     if args.verbosity &gt;= 2:</span></span><br><span class="line"><span class="comment"># TypeError: unorderable types: NoneType() &gt;= int()</span></span><br></pre></td></tr></table></figure><p></p><p>通过为<strong>选项参数</strong>设定默认值，修复上述bug：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, type=int,</span><br><span class="line">                    help=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>,</span><br><span class="line">                    help=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"the square of &#123;&#125; equals &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^2 == &#123;&#125;"</span>.format(args.square, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><h1 id="综合实例-1"><a href="#综合实例-1" class="headerlink" title="综合实例+"></a>综合实例+</h1><p>基于上例，这次我们让程序可以指定指数：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, action=<span class="string">"count"</span>, default=<span class="number">0</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"><span class="keyword">if</span> args.verbosity &gt;= <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">elif</span> args.verbosity &gt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">python prog.py</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: the following arguments are required: x, y</span></span><br><span class="line">python prog.py -h</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v] x y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   x                the base</span></span><br><span class="line"><span class="comment">#   y                the exponent</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help       show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbosity</span></span><br><span class="line">python prog.py 4 2 -v</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br></pre></td></tr></table></figure><p></p><h1 id="实际使用示例"><a href="#实际使用示例" class="headerlink" title="实际使用示例"></a>实际使用示例</h1><p>在实际使用过程中，发现要使用的功能在下段代码中都有体现：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'CNN sentiment classificer'</span>)</span><br><span class="line"><span class="comment"># learning</span></span><br><span class="line">parser.add_argument(<span class="string">'-lr'</span>, type=float, default=<span class="number">0.001</span>,</span><br><span class="line">                    help=<span class="string">'initial learning rate [default: 0.001]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-epochs'</span>, type=int, default=<span class="number">256</span>,</span><br><span class="line">                    help=<span class="string">'number of epochs for train [default: 256]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-batch-size'</span>, type=int, default=<span class="number">64</span>,</span><br><span class="line">                    help=<span class="string">'batch size for training [default: 64]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-log-interval'</span>,  type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before logging training status [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-test-interval'</span>, type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before testing [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-save-interval'</span>, type=int, default=<span class="number">100</span>,</span><br><span class="line">                    help=<span class="string">'how many steps to wait before saving [default: 100]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-save-dir'</span>, type=str, default=<span class="string">'snapshot'</span>,</span><br><span class="line">                    help=<span class="string">'where to save the snapshot'</span>)</span><br><span class="line"><span class="comment"># data </span></span><br><span class="line">parser.add_argument(<span class="string">'-shuffle'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'shuffle the data every epoch'</span> )</span><br><span class="line"><span class="comment"># model</span></span><br><span class="line">parser.add_argument(<span class="string">'-dropout'</span>, type=float, default=<span class="number">0.5</span>,</span><br><span class="line">                    help=<span class="string">'the probability for dropout [default: 0.5]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-max-norm'</span>, type=float, default=<span class="number">3.0</span>,</span><br><span class="line">                    help=<span class="string">'l2 constraint of parameters [default: 3.0]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-embed-dim'</span>, type=int, default=<span class="number">300</span>,</span><br><span class="line">                    help=<span class="string">'number of embedding dimension [default: 300]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-filter-stopwords'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'whether to filter out stop words [default: False]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-embed-pretrain'</span>, type=str, default=<span class="string">'./other/glove.840B.300d.filtered.npy'</span>,</span><br><span class="line">                    help=<span class="string">'path of pretrained word embedding [default: ./other/glove.840B.300d.filtered.npy]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-kernel-num'</span>, type=int, default=<span class="number">32</span>,</span><br><span class="line">                    help=<span class="string">'number of each kind of kernel [default: 32]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-kernel-sizes'</span>, type=str, default=<span class="string">'3,4,5'</span>,</span><br><span class="line">                    help=<span class="string">'comma-separated kernel size to use for convolution'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-static'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'fix the embedding'</span>)</span><br><span class="line"><span class="comment"># device</span></span><br><span class="line">parser.add_argument(<span class="string">'-device'</span>, type=int, default=<span class="number">-1</span>,</span><br><span class="line">                    help=<span class="string">'device to use for iterate data, -1 mean cpu [default: -1]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-no-cuda'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'disable the gpu'</span> )</span><br><span class="line"><span class="comment"># option</span></span><br><span class="line">parser.add_argument(<span class="string">'-snapshot'</span>, type=str, default=<span class="literal">None</span>,</span><br><span class="line">                    help=<span class="string">'filename of model snapshot [default: None]'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-predict'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'predict the given textdata'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-predict-dir'</span>, type=str, default=<span class="string">'prediction'</span>,</span><br><span class="line">                    help=<span class="string">"where to save the prediction [default: prediction]"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-test'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                    help=<span class="string">'train or test'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># update args about data &amp; device &amp; option</span></span><br><span class="line">args.save_dir = os.path.join(</span><br><span class="line">    args.save_dir,</span><br><span class="line">    datetime.datetime.now().strftime(<span class="string">'%Y%m%d_%H%M%S'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.predict <span class="keyword">and</span> <span class="keyword">not</span> os.path.isdir(args.save_dir):</span><br><span class="line">    os.makedirs(args.save_dir)</span><br><span class="line">args.cuda = (<span class="keyword">not</span> args.no_cuda) <span class="keyword">and</span> torch.cuda.is_available(); <span class="keyword">del</span> args.no_cuda</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nParameters:'</span>)</span><br><span class="line"><span class="keyword">for</span> attr, value <span class="keyword">in</span> sorted(args.__dict__.items()):</span><br><span class="line">    print(<span class="string">'\t&#123;&#125;=&#123;&#125;'</span>.format(attr.upper(), value))</span><br></pre></td></tr></table></figure><p></p><h1 id="互斥的选项参数"><a href="#互斥的选项参数" class="headerlink" title="互斥的选项参数"></a>互斥的选项参数</h1><p>该节再引入一个方法<code>add_mutually_exclusive_group()</code>，该方法用来解决两个相斥的参数，如<code>--quiet</code>和<code>--verbose</code>：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python prog.py 4 2</span><br><span class="line"><span class="comment"># 4^2 == 16</span></span><br><span class="line">python prog.py 4 2 -q</span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line">python prog.py 4 2 -v</span><br><span class="line"><span class="comment"># 4 to the power 2 equals 16</span></span><br><span class="line">python prog.py 4 2 -vq</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span></span><br><span class="line">python prog.py 4 2 -v --quiet</span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose</span></span><br></pre></td></tr></table></figure><p></p><p>最后，我们还可以通过如下方式告诉使用者程序的用途：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename: prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"calculate X to the power of Y"</span>)</span><br><span class="line">group = parser.add_mutually_exclusive_group()</span><br><span class="line">group.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">group.add_argument(<span class="string">"-q"</span>, <span class="string">"--quiet"</span>, action=<span class="string">"store_true"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"x"</span>, type=int, help=<span class="string">"the base"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"y"</span>, type=int, help=<span class="string">"the exponent"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.x**args.y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.quiet:</span><br><span class="line">    <span class="keyword">print</span> answer</span><br><span class="line"><span class="keyword">elif</span> args.verbose:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125; to the power &#123;&#125; equals &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"&#123;&#125;^&#123;&#125; == &#123;&#125;"</span>.format(args.x, args.y, answer)</span><br></pre></td></tr></table></figure><p></p><p>执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python prog.py --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># usage: prog.py [-h] [-v | -q] x y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># calculate X to the power of Y</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   x              the base</span></span><br><span class="line"><span class="comment">#   y              the exponent</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help     show this help message and exit</span></span><br><span class="line"><span class="comment">#   -v, --verbose</span></span><br><span class="line"><span class="comment">#   -q, --quiet</span></span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>想更多的了解<code>argparse</code>的内部机制而非仅限于使用，可以参阅<a href="http://wrran.com/blog/2019/08/18/learn/argparse/using_case/" target="_blank" rel="noopener">argparse@python</a>。</p><p><a href="https://docs.python.org/2/howto/argparse.html" target="_blank" rel="noopener">Argparse Tutorial</a><br><a href="http://www.jianshu.com/p/fef2d215b91d" target="_blank" rel="noopener">python argparse用法总结</a><br><a href="https://docs.python.org/2/library/argparse.html#module-argparse" target="_blank" rel="noopener">argparse - Python Software Foundation</a></p>]]></content>
      
        <categories>
            
            <category> python </category>
            
            <category> argparse </category>
            
        </categories>
        
        
        <tags>
            
            <tag> argparse </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[argparse@python]]></title>
      <url>http://www.wrran.com/blog/2019/08/18/learn/argparse/index/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>argparse</code>, Parser for command-line options, arguments and sub-commands.</p>
</blockquote>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>命令行是一个程序软件的界面；设计良好的命令行界面可以提升软件的易使用性。<code>argparse</code>是python中一个负责解析命令、子命令、参数与选项的工具。</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>此处主要介绍一些相关的基本概念，特别是“命令”、“子命令”、“参数”与“选项”。</p>
<p><strong>命令</strong>是软件实体的主入口；<br><strong>子命令</strong>则是负责该软件实体中更细节的一些功能。</p>
<p>软件实体需要输入以确定自己的行为，输入根据变更的频度顺次为：</p>
<ul>
<li>参数（经常）</li>
<li>选项（有时）</li>
<li>配置文件（偶尔）</li>
<li>数据文件（极少）</li>
</ul>
<p>之外，变更频次越低的越能更大程度改变软件实体的行为；因此对频次越低的输入进行修改的用户往往是使用经验也十分丰富。</p>
<!-- 
对应这些概念，可见以下实例：
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ls pypy</span><br><span class="line">ls -l</span><br><span class="line">ls --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>如上所示，程序会包含以下几部分：</p>
<ul>
<li>程序名</li>
<li>位置参数</li>
<li>默认参数（如，执行命令<code>ls</code>等效于<code>ls .</code>）</li>
<li>选项参数（如，命令<code>ls -l</code>和<code>ls --help</code>）<br>–&gt;</li>
</ul>
<p><code>argparse</code>对于这些不同的指令解析提供了很好的技术支持，更多详情可以参见<a href="http://wrran.com/blog/2019/08/18/learn/argparse/using_case/">Using Cases@argparse</a>。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Python3官方文档：<a href="https://docs.python.org/3/library/argparse.html">https://docs.python.org/3/library/argparse.html</a></p>
-->]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> argparse </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bash入门@linux]]></title>
      <url>http://www.wrran.com/blog/2019/08/17/learn/bash/index/</url>
      <content type="html"><![CDATA[<blockquote><p><strong>B</strong>ourne-<strong>A</strong>gain <strong>SH</strong>ell; <strong>B</strong>orn <strong>A</strong>gain <strong>SH</strong>ell</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>入门指的是由<em>使用</em>驱动的学习。</p><h1 id="Six-Core-Responsibility"><a href="#Six-Core-Responsibility" class="headerlink" title="Six Core Responsibility"></a>Six Core Responsibility</h1><p>Shell的责任（responsibility，职责是duty）有：</p><ol><li>程序执行：负责执行终端中指定的所有程序；</li><li>变量及其替换：只要在命令行中将变量名放置在<code>$</code>之后，就会被bash替换为对应的变量值；</li><li>I/O重定向：负责处理输入/输出的重定向；指令有<code>&gt;</code>（写入），<code>&lt;</code>（读入），<code>&gt;&gt;</code>（追写），<code>&lt;&lt;</code>（？）；</li><li>管道：负责将前一个命令的标准输出连接到之后命令的标准输入；管道符号为<code>|</code>，如<code>who | wc -l</code>；</li><li>环境控制：定制个人环境的命令；个人环境包括主目录（<code>~</code>）、命令行提示符及用于搜索待执行程序的目录列表；</li><li>解释型编程语言：内建的解释型编程语言；分析所遇到的每一条语句，然后执行所发现的有效命令。</li></ol><h1 id="Variable-amp-its-Replacement"><a href="#Variable-amp-its-Replacement" class="headerlink" title="Variable &amp; its Replacement"></a>Variable &amp; its Replacement</h1><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>匹配变量的正则表达式为<code>[a-zA-Z_][a-zA-Z0-9_]*</code>。<br><strong>变量赋值</strong>形如<code>variable=value</code>；<br><strong>显示变量值</strong>形如<code>echo $variable</code>.</p><p>bash在执行指令时，按照如下顺序进行操作：</p><ol start="0"><li><strong>命令分割</strong>：依据空格字符（一个或多个）分割命令与参数；</li><li><strong>变量替换</strong>：扫描命令行，用变量值替换变量名；</li><li><strong>引用字符替换</strong>：扫描上一步的输出，将<em>引用字符</em>替换为其语义所指表示；</li><li><strong>命令执行</strong>：执行上一步的输出。</li></ol><p>特殊字符有<code>*</code>，代表当前目录下的所有文件及文件名；之外，还有四种不同的引用字符：<code>&#39;</code>（单引号）/<code>&quot;</code>（双引号）/<code>\</code>/ <strong>`</strong>（反引号）;<br>其中除斜杠外，其他引用字符都需要成对出现。</p><p><code>&#39;</code>（单引号）：被单引号包裹的特殊字符将被忽略；<br><code>&quot;</code>（双引号）：被双引号包裹的字符大部分都会被保护，除了三种字符<code>$</code>（美元字符）/<code>\</code>（反斜线）/ <strong>`</strong>（反引号）；<br><code>\</code>（反斜线）：反斜线大部分情况下相当于在单个字符周围放置单引号；当反斜线出现在输入行的最后一个，起到续行符的作用；<br><strong>`</strong>（反引号）：反引号一般包裹待执行的命令；命令输出会被插入到它的当前所在位置上；但注意更提倡使用与之等价的 <code>$(command)</code>。</p><p>示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"&lt;&lt;&lt; echo \$x &gt;&gt;&gt; displays the value of x, which is <span class="variable">$x</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;&lt;&lt; echo \$x &gt;&gt;&gt; displays the value of x, which is'</span> <span class="variable">$x</span></span><br><span class="line"><span class="built_in">echo</span> Your current working directory is $(<span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure><p></p><h1 id="Passing"><a href="#Passing" class="headerlink" title="Passing"></a>Passing</h1><h1 id="Everyday-Commands"><a href="#Everyday-Commands" class="headerlink" title="Everyday Commands"></a>Everyday Commands</h1><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><blockquote><p>别名是shell提供的一种可以用于自定义命令的快捷记法。</p></blockquote><p>shell保存了一个别名列表，在命令输入之后，会在执行其他替换操作之前首先搜索该列表。如果命令行的第一个单词是别名，将该别名替换成对应的文本。</p><p>其形式如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> name=string</span><br></pre></td></tr></table></figure><p></p><p>示例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p>重定向：<a href="http://wrran.com/blog/2019/08/18/learn/bash/redirect/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/18/learn/bash/redirect/</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>UNIX/Linux/OS X中的Shell编程@ISBN: 9787115470416：<a href="https://book.douban.com/subject/30410589/" target="_blank" rel="noopener">https://book.douban.com/subject/30410589/</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> bash </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pytest@python]]></title>
      <url>http://www.wrran.com/blog/2019/08/16/learn/pytest/index/</url>
      <content type="html"><![CDATA[<blockquote><p>不失败即成功</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <code>pytest</code> framework makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries.</p><p><strong>Features</strong><br>该测试框架有以下特征：</p><ul><li>详细的测试失败日志；</li><li>自动发现需要测试的组件和/或方法；</li><li>提供模块化的设施，可支持或小或大或参数化的复杂场景；</li><li>支持测试框架<code>unittest</code>及<code>nose</code>；</li><li>支持插件，已有315+外部插件；社区良好。</li></ul><p><strong>Documentation</strong><br><a href="http://docs.pytest.org/en/latest/contents.html#toc" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/contents.html#toc</a></p><h1 id="Modular-Fixtures"><a href="#Modular-Fixtures" class="headerlink" title="Modular Fixtures"></a>Modular Fixtures</h1><p>More info sees <a href="http://docs.pytest.org/en/latest/fixture.html#fixture" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/fixture.html#fixture</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://docs.pytest.org/en/latest/" target="_blank" rel="noopener">http://docs.pytest.org/en/latest/</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> pytest </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pytest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解Hexo]]></title>
      <url>http://www.wrran.com/blog/2019/08/16/learn/hexo/index/</url>
      <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="Structure-of-Workspace"><a href="#Structure-of-Workspace" class="headerlink" title="Structure of Workspace"></a>Structure of Workspace</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p></p><p>新建完成后，指定文件夹的目录如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p></p><p>文件或文件夹的功能如下：</p><table><thead><tr><th style="text-align:center">ITEM</th><th style="text-align:left">NOTE</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center">_config.yml</td><td style="text-align:left">配置文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">package.json</td><td style="text-align:left">应用程序的信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">scaffolds</td><td style="text-align:left">模版文件夹</td><td style="text-align:left">新建文章时，将根据scaffold来建立文件，填充指定内容。</td></tr><tr><td style="text-align:center">source</td><td style="text-align:left">资源文件夹</td><td style="text-align:left">除<code>_posts</code>文件夹之外，开头命名为<code>_</code>的文件/文件夹和隐藏的文件将会被忽略。<code>Markdown</code>和<code>HTML</code>文件会被解析并放到 <code>public</code>文件夹，而其他文件会被拷贝过去。</td></tr><tr><td style="text-align:center">themes</td><td style="text-align:left">主题文件夹</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">db.json</td><td style="text-align:left"><strong>生成</strong>的缓存文件</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">public</td><td style="text-align:left"><strong>生成</strong>的静态文件夹</td><td style="text-align:left">?</td></tr></tbody></table><p>More Info see <a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup</a>.</p><h1 id="Structure-of-Configure"><a href="#Structure-of-Configure" class="headerlink" title="Structure of Configure"></a>Structure of Configure</h1><p>More info see <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a>.</p><p>您可以在<code>_config.yml</code>中修改大部分的配置；配置往往与命令相关；暂略详情。<br></p><h1 id="Interface-of-Commands"><a href="#Interface-of-Commands" class="headerlink" title="Interface of Commands"></a>Interface of Commands</h1><p>More info see <a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands</a>.</p><table><thead><tr><th style="text-align:left">COMMANDS</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th><th style="text-align:center">DEMO</th><th style="text-align:left">NOTE</th></tr></thead><tbody><tr><td style="text-align:left"><strong>init</strong></td><td style="text-align:left">新建一个网站</td><td style="text-align:left">默认在当前文件夹建立网站</td><td style="text-align:center"><code>hexo init [folder=.]</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>new</strong></td><td style="text-align:left">新建一篇文章</td><td style="text-align:left">如果<code>title</code>包含空格的话，请使用引号括起来</td><td style="text-align:center"><code>hexo new [layout=default_layout@config] &lt;title&gt;</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#new" target="_blank" rel="noopener">path/replace/slug</a></td></tr><tr><td style="text-align:left"><strong>generate</strong></td><td style="text-align:left">生成静态文件</td><td style="text-align:left">简写为<code>hexo g</code></td><td style="text-align:center"><code>hexo generate</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#generate" target="_blank" rel="noopener">deploy/watch/bail/force</a></td></tr><tr><td style="text-align:left"><strong>publish</strong></td><td style="text-align:left">发表草稿</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo publish [layout] &lt;filename&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>server</strong></td><td style="text-align:left">启动服务器</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo server [--port=4000]</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#server" target="_blank" rel="noopener">port/static/log</a></td></tr><tr><td style="text-align:left"><strong>deploy</strong></td><td style="text-align:left">部署网站</td><td style="text-align:left">简写为<code>hexo g</code></td><td style="text-align:center"><code>hexo deploy</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#deploy" target="_blank" rel="noopener">generate</a></td></tr><tr><td style="text-align:left"><strong>render</strong></td><td style="text-align:left">渲染文件</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo render &lt;file1&gt; [file2] ...</code></td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#render" target="_blank" rel="noopener">output</a></td></tr><tr><td style="text-align:left"><strong>migrate</strong></td><td style="text-align:left">从其他博客系统迁移内容</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo migrate &lt;type&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>clean</strong></td><td style="text-align:left">清除缓存文件和已生成的静态文件</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo clean</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>list</strong></td><td style="text-align:left">列出网站资料</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo list &lt;type&gt;</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:left"><strong>version</strong></td><td style="text-align:left">显示Hexo版本</td><td style="text-align:left">-</td><td style="text-align:center"><code>hexo version</code></td><td style="text-align:left">-</td></tr></tbody></table><table><thead><tr><th style="text-align:center">OPTIONS</th><th style="text-align:left">DESCRIPTION</th><th style="text-align:left">DETAILS</th></tr></thead><tbody><tr><td style="text-align:center"><code>--safe</code></td><td style="text-align:left">在安全模式下，不会载入插件和脚本</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--debug</code></td><td style="text-align:left">在终端中显示调试信息并记录到<code>debug.log</code></td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--silent</code></td><td style="text-align:left">隐藏终端信息</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center"><code>--config</code></td><td style="text-align:left">覆写配置文件的路径</td><td style="text-align:left"><a href="https://hexo.io/zh-cn/docs/commands#自定义配置文件的路径" target="_blank" rel="noopener">细则</a></td></tr><tr><td style="text-align:center"><code>--cwd /path/to/cwd</code></td><td style="text-align:left">自定义当前工作目录</td><td style="text-align:left"><strong>C</strong>urrent <strong>W</strong>orking <strong>D</strong>irectory</td></tr><tr><td style="text-align:center"><code>--draft</code></td><td style="text-align:left">显示<code>source/_drafts</code>文件夹中的草稿文章</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="Interoperability-of-Frameworks"><a href="#Interoperability-of-Frameworks" class="headerlink" title="Interoperability of Frameworks"></a>Interoperability of Frameworks</h1><p>非核心功能。该部分主要是将其他框架的博客转换成合法的hexo结构，多通过其他包来完成该功能；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/migration</a>.</p><h1 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h1><p>该部分是面向终端用户的教程。</p><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><p>可以通过修改<code>_config.yml</code>中的<code>default_layout</code>参数来指定默认布局。<br>More info see <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/docs/writing.html</a>.</p><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p><code>Front-matter</code>是文件最上方以<code>---</code>分隔的区域，用于指定个别文件的变量。<br>More info see <a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a>.</p><h3 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins"></a>Tag Plugins</h3><p>标签插件和<code>Front-matter</code>中的标签不同，它们是用于在文章中快速插入特定内容的插件。<br>More info see <a href="http://wrran.com/blog/2019/08/18/learn/hexo/tag_plugins/" target="_blank" rel="noopener">http://wrran.com/blog/2019/08/18/learn/hexo/tag_plugins/</a>.</p><h3 id="Asset-Folders"><a href="#Asset-Folders" class="headerlink" title="Asset Folders"></a>Asset Folders</h3><p>资源（Asset）代表<code>source</code>文件夹中除了文章以外的所有文件。如将少量图片放在<code>source/images</code>文件夹中，后通过<code>![](/images/image.jpg)</code>访问。<br>More info see <a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a>.</p><h3 id="Data-Files"><a href="#Data-Files" class="headerlink" title="Data Files"></a>Data Files</h3><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用<strong>Hexo 3.</strong>新增的「数据文件」功能。<br>此功能会载入<code>source/_data</code>内的YAML或JSON文件，如此一来您便能在网站中复用这些文件了。<br>More info see <a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a>.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>该部分阐述<code>hexo server</code>相关问题，已移植到单独的模块中进行开发；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/server" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/server</a>.</p><h2 id="Generating"><a href="#Generating" class="headerlink" title="Generating"></a>Generating</h2><p>生成静态文件；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/generating" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/generating</a>.</p><h2 id="Deployments"><a href="#Deployments" class="headerlink" title="Deployments"></a>Deployments</h2><p>部署网站；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/deployment" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/deployment</a>.</p><h1 id="Customization"><a href="#Customization" class="headerlink" title="Customization"></a>Customization</h1><p>More info see <a href="https://hexo.io/docs/permalinks" target="_blank" rel="noopener">https://hexo.io/docs/permalinks</a>.<br></p><h2 id="Permalinks"><a href="#Permalinks" class="headerlink" title="Permalinks"></a>Permalinks</h2><p>您可以在<code>_config.yml</code>配置中调整网站的永久链接或者在每篇文章的Front-matter中指定。<br>More info see <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/permalinks</a>.</p><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><p>创建Hexo主题；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/themes</a>.</p><h2 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h2><p>高级用户如何通过模板来定制网站内容的呈现方式；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/templates" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/templates</a>.</p><h3 id="Helpers"><a href="#Helpers" class="headerlink" title="Helpers"></a>Helpers</h3><p>辅助函数帮助您在模版中快速插入内容。辅助函数不能在源文件中使用。<br>More info see <a href="https://hexo.io/zh-cn/docs/helpers" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/helpers</a>.</p><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>骨灰级用户的变量索引表。<br>More info see <a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/variables</a>.</p><h2 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h2><p>常见需求；若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/internationalization" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/internationalization</a>.</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>面向将入开发级用户；Hexo有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码；暂略。<br>More info see <a href="https://hexo.io/zh-cn/docs/plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/plugins</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo.io</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[functools @ python]]></title>
      <url>http://www.wrran.com/blog/2019/08/16/cheatsheet/reference/python-functools/</url>
      <content type="html"><![CDATA[<blockquote><p>The <code>functools</code> module is for higher-order functions.</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The <code>functools</code> module is for higher-order functions: functions that act on or return other functions. In general, any callable object can be treated as a function for the purposes of this module</p><p>The functools module defines the following functions:</p><h1 id="cmp-to-key-func"><a href="#cmp-to-key-func" class="headerlink" title="cmp_to_key(func)"></a>cmp_to_key(func)</h1><blockquote><p>Transform an old-style comparison function to a <em>key function</em>.</p></blockquote><p>Used with tools that accept key functions (such as <code>sorted()</code>, <code>min()</code>, <code>max()</code>, <code>heapq.nlargest()</code>, <code>heapq.nsmallest()</code>, <code>itertools.groupby()</code>). This function is primarily used as a transition tool for programs being converted to Python 3 where comparison functions are no longer supported.</p><p>A <em>comparison function</em> is any callable that accept two arguments, compares them, and returns a negative number for less-than, zero for equality, or a positive number for greater-than. A key function is a callable that accepts one argument and returns another value to be used as the sort key.</p><p>A <a href="https://docs.python.org/2/glossary.html#term-key-function" target="_blank" rel="noopener"><em>key function</em></a> or collation function is a callable that returns a value used for sorting or ordering.</p><h1 id="total-ordering-cls"><a href="#total-ordering-cls" class="headerlink" title="total_ordering(cls)"></a>total_ordering(cls)</h1><blockquote><p>Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.</p></blockquote><p>This simplifies the effort involved in specifying all of the possible rich comparison operations:</p><p>The class must define one of <code>__lt__()</code>, <code>__le__()</code>, <code>__gt__()</code>, or <code>__ge__()</code>. In addition, the class should supply an <code>__eq__()</code> method.</p><h1 id="reduce-function-iterable-initializer"><a href="#reduce-function-iterable-initializer" class="headerlink" title="reduce(function, iterable [, initializer])"></a>reduce(function, iterable [, initializer])</h1><blockquote><p>This is the same function as <a href="https://docs.python.org/2/library/functions.html#reduce" target="_blank" rel="noopener">reduce()</a>.</p></blockquote><p>It is made available in this module to allow writing code mode forward-compatible with Python 3.</p><h1 id="partial-fun-args-keywords"><a href="#partial-fun-args-keywords" class="headerlink" title="partial(fun [,*args] [, **keywords])"></a>partial(fun [,*args] [, **keywords])</h1><blockquote><p>Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords. If more arguments are supplied to the call, they are appended to args. If additional keyword arguments are supplied, they extend and override keywords. Roughly equivalent to:</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(func, *args, **keywords)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span><span class="params">(*fargs, **fkeywords)</span>:</span></span><br><span class="line">        newkeywords = keywords.copy()</span><br><span class="line">        newkeywords.update(fkeywords)</span><br><span class="line">        <span class="keyword">return</span> func(*(args + fargs), **newkeywords)</span><br><span class="line">    newfunc.func = func</span><br><span class="line">    newfunc.args = args</span><br><span class="line">    newfunc.keywords = keywords</span><br><span class="line">    <span class="keyword">return</span> newfunc</span><br></pre></td></tr></table></figure><h2 id="partial-objects"><a href="#partial-objects" class="headerlink" title="partial objects"></a>partial objects</h2><p>partial objects are callable objects created by <code>partial()</code>. They have three read-only attributes:</p><ul><li><code>func</code> - A callable object or function. Calls to the partial object will be forwarded to func with new arguments and keywords.</li><li><code>args</code> - The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.</li><li><code>keywords</code> - The keyword arguments that will be supplied when the partial object is called.</li></ul><p><strong>partial objects</strong> are like <em>function objects</em> in that they are callable, weak referencable, and can have attributes. There are some important differences:</p><ul><li>For instance, the <code>__name__</code> and <code>__doc__</code> attributes are not created automatically.</li><li>Also, partial objects defined in classes behave like static methods and do not transform into bound methods during instance attribute look-up</li></ul><h1 id="update-wrapper-wrapper-wrapped-assigned-updated"><a href="#update-wrapper-wrapper-wrapped-assigned-updated" class="headerlink" title="update_wrapper(wrapper, wrapped [, assigned] [, updated])"></a>update_wrapper(wrapper, wrapped [, assigned] [, updated])</h1><blockquote><p>Update a <em>wrapper</em> function to look like the <em>wrapped</em> function.</p></blockquote><p>The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants <code>WRAPPER_ASSIGNMENTS</code> (which assigns to the wrapper function’s <code>__name__</code>, <code>__module__</code> and <code>__doc__</code>, the documentation string) and <code>WRAPPER_UPDATES</code> (which updates the wrapper function’s <code>__dict__</code>, i.e. the instance dictionary).</p><h1 id="wraps-wrapped-assigned-updated"><a href="#wraps-wrapped-assigned-updated" class="headerlink" title="wraps(wrapped [, assigned] [, updated])"></a>wraps(wrapped [, assigned] [, updated])</h1><blockquote><p>This is a convenienve function for invokeing <code>update_wrapper()</code> as a function decorator when defining a wrapper function.</p></blockquote><p>It is equivalent to <code>partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)</code>. For example:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Calling decorated funcion'</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwds)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    """<span class="title">Docstring</span>"""</span></span><br><span class="line"><span class="function">    <span class="title">print</span> '<span class="title">Called</span> <span class="title">example</span> <span class="title">function</span>'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span><span class="params">()</span></span></span><br><span class="line"><span class="function"># <span class="title">Calling</span> <span class="title">decorated</span> <span class="title">function</span></span></span><br><span class="line"><span class="function"># <span class="title">Called</span> <span class="title">example</span> <span class="title">function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span>.<span class="title">__name__</span></span></span><br><span class="line"><span class="function"># '<span class="title">example</span>'</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">example</span>.<span class="title">__doc__</span></span></span><br><span class="line"><span class="function"># '<span class="title">Docstring</span>'</span></span><br></pre></td></tr></table></figure><p>Withoud the use of this decorator factory, the name of the example function would have been <code>wrapper</code>, and the docstring of the original <code>example()</code> would have been lost.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://docs.python.org/2/library/functools.html" target="_blank" rel="noopener">functools - Higher-order functions and operations on callable objects</a></p>]]></content>
      
        <categories>
            
            <category> tools </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> functools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[itertools @ python]]></title>
      <url>http://www.wrran.com/blog/2019/08/16/cheatsheet/reference/python-itertools/</url>
      <content type="html"><![CDATA[<blockquote><p>This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. Each has been recast in a form suitable for Python.<br>@<code>itertools</code></p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p><h1 id="Infinite-Iterators"><a href="#Infinite-Iterators" class="headerlink" title="Infinite Iterators"></a>Infinite Iterators</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th><th style="text-align:left">Example</th><th style="text-align:left">Result</th></tr></thead><tbody><tr><td style="text-align:left">count(start [, step])</td><td style="text-align:left">start, start+step, start+2*step, …</td><td style="text-align:left"><code>count(10)</code></td><td style="text-align:left"><code>10 11 12 ...</code></td></tr><tr><td style="text-align:left">cycle(p)</td><td style="text-align:left">p0, p1, …plast, p0, p1, …</td><td style="text-align:left"><code>cycle(&#39;ABCD&#39;)</code></td><td style="text-align:left"><code>A B C D A B C D ...</code></td></tr><tr><td style="text-align:left">repeat(elem [, n])</td><td style="text-align:left">elem, elem, elem, … endlessly or up to n times</td><td style="text-align:left"><code>repeat(10, 3)</code></td><td style="text-align:left"><code>10, 10, 10</code></td></tr></tbody></table><h1 id="Iterators-terminating-on-the-shortest"><a href="#Iterators-terminating-on-the-shortest" class="headerlink" title="Iterators terminating on the shortest"></a>Iterators terminating on the shortest</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th><th style="text-align:left">Example</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">chain(p, q, …)</td><td style="text-align:left">p0, p1, …, plast, q0, q1, …</td><td style="text-align:left"><code>chain(&#39;ABC&#39;, &#39;DEF&#39;)</code></td><td style="text-align:left"><code>A B C D E F</code></td></tr><tr><td style="text-align:left">compress(data, selectors)</td><td style="text-align:left">(d[0] if s[0]), (d[1] if s[1]), …</td><td style="text-align:left"><code>compress(&#39;ABCDEF&#39;, [1,0,1,0,1,1]</code>)</td><td style="text-align:left"><code>A C E F</code></td></tr><tr><td style="text-align:left">dropwhile(pred, seq)</td><td style="text-align:left">seq[n], seq[n+1], … starting when pred fails</td><td style="text-align:left"><code>dropwhile(lambda x: x&lt;5, [1,4,6,4,1])</code></td><td style="text-align:left"><code>6 4 1</code></td></tr><tr><td style="text-align:left">takewhile(pred, seq)</td><td style="text-align:left">seq[0], seq[1], … until pred fails</td><td style="text-align:left"><code>takewhile(lambda x: x&lt;5, [1,4,6,4,1])</code></td><td style="text-align:left"><code>1 4</code></td></tr><tr><td style="text-align:left">groupby(iterable [, keyfun])</td><td style="text-align:left">sub-iterators grouped by value of keyfunc(v)</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">ifilter(pred, seq)</td><td style="text-align:left">elements of seq where pred(elem) is true</td><td style="text-align:left"><code>ifilter(lambda x: x%2, range(10))</code></td><td style="text-align:left"><code>1 3 5 7 9</code></td></tr><tr><td style="text-align:left">ifilterfalse(pred, seq)</td><td style="text-align:left">elements of seq where pred(elem) is false</td><td style="text-align:left"><code>ifilterfalse(lambda x: x%2, range(10))</code></td><td style="text-align:left"><code>0 2 4 6 8</code></td></tr><tr><td style="text-align:left">islice(seq [, start,] stop [, step])</td><td style="text-align:left">elements from seq[start:stop:step]</td><td style="text-align:left"><code>islice(&#39;ABCDEFG&#39;, 2, None)</code></td><td style="text-align:left"><code>C D E F G</code></td></tr><tr><td style="text-align:left">imap(fun, p, q, …)</td><td style="text-align:left">func(p0, q0, …), func(p1, q1, …)</td><td style="text-align:left"><code>imap(pow, (2,3,10), (5,2,3))</code></td><td style="text-align:left"><code>32 9 1000</code></td></tr><tr><td style="text-align:left">starmap(func, seq)</td><td style="text-align:left">func(<em>seq[0]), func(</em>seq[1]), …</td><td style="text-align:left"><code>starmap(pow, [(2,5), (3,2), (10,3)])</code></td><td style="text-align:left"><code>32 9 1000</code></td></tr><tr><td style="text-align:left">tee(it, n)</td><td style="text-align:left">it1, it2, … itn splits one iterator into n</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">izip(p, q, …)</td><td style="text-align:left">(p[0],q[0]), (p[1], q[1]), …</td><td style="text-align:left"><code>izip(&#39;ABCD&#39;, &#39;xy&#39;)</code></td><td style="text-align:left"><code>Ax By</code></td></tr><tr><td style="text-align:left">izip_longest(p, q, …)</td><td style="text-align:left">(p[0],q[0]), (p[1],q[1]), …</td><td style="text-align:left"><code>izip\_longest(&#39;ABCD&#39;, &#39;xy&#39;, fillvalue=&#39;-&#39;)</code></td><td style="text-align:left"><code>Ax By C- D-</code></td></tr></tbody></table><h1 id="Combination-generators"><a href="#Combination-generators" class="headerlink" title="Combination generators"></a>Combination generators</h1><table><thead><tr><th style="text-align:left">Iterator</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">product(p, q, … [repeat=1])</td><td style="text-align:left">cartesian prduct, equivalent to a nested for-loop</td></tr><tr><td style="text-align:left">product(‘ABCD’, repeat=2)</td><td style="text-align:left">AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</td></tr><tr><td style="text-align:left">permutations(p [, r])</td><td style="text-align:left">r-length tuples, all possible orderings, no repeated elements</td></tr><tr><td style="text-align:left">permutations(‘ABCD’, 2)</td><td style="text-align:left">AB AC AD BA BC BD CA CB CD DA DB DC</td></tr><tr><td style="text-align:left">combinations(p, r)</td><td style="text-align:left">r-length tuples, in sorted order, no repeated elements</td></tr><tr><td style="text-align:left">combinations(‘ABCD’, 2)</td><td style="text-align:left">AB AC AD BC BD CD</td></tr><tr><td style="text-align:left">combinations_with_replacement(p [, r])</td><td style="text-align:left">r-length tuples, in sorted order, with repeated elements</td></tr><tr><td style="text-align:left">combinations_with_replacement(‘ABCD’, 2)</td><td style="text-align:left">AA AB AC AD BB BC BD CC CD DD</td></tr></tbody></table><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://docs.python.org/2/library/itertools.html" target="_blank" rel="noopener">itertools - Functions creating iterators for efficient looping</a></p>]]></content>
      
        <categories>
            
            <category> tools </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> itertools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[政治生活没有银弹]]></title>
      <url>http://www.wrran.com/blog/2019/08/14/people-say/me/190814-01/</url>
      <content type="html"><![CDATA[<blockquote><p>政治生活没有银弹，不要指望依靠某种制度得到优胜，制度改革永不会止步。</p></blockquote>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> me </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Read the Docs @python]]></title>
      <url>http://www.wrran.com/blog/2019/08/14/learn/read-the-docs/index/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Read the Docs</code> simplifies software documentation by automating building, versioning, and hosting of your docs for you. Think of it as <strong>Coninuous Documentation</strong>.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>Read the Docs</code>如前言所述，主要是用来简化软件的文档工作，支持自动构建、版本控制及文档托管。可以将之考虑为<strong>持续文档</strong>，支持以下特点：</p><ul><li>Never out of sync: 同步，一时不停；</li><li>Multiple versions: 多版本控制；</li><li>Free and open source: 免费开源。</li></ul><h1 id="婴儿学步"><a href="#婴儿学步" class="headerlink" title="婴儿学步"></a><a href="https://docs.readthedocs.io/en/stable/index.html#first-steps" target="_blank" rel="noopener">婴儿学步</a></h1><p><code>Read-the-Docs</code>支持<code>Sphinx</code>及<code>MkDocs</code>，此处仅介绍<code>MkDocs</code>。</p><h2 id="Getting-started-with-MkDocs"><a href="#Getting-started-with-MkDocs" class="headerlink" title="Getting started with MkDocs"></a><a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-mkdocs.html" target="_blank" rel="noopener">Getting started with MkDocs</a></h2><p><code>MkDocs</code>是一个集中速度与简洁的文档生成器。它具有如下特点：</p><ul><li>边编写边预览；</li><li>主题和扩展易于扩展；</li><li>文档使用<code>Markdown</code>语法。</li></ul><p><strong>Quick Start</strong>：</p><ol><li>安装<code>MkDocs</code>：<code>conda install mkdocs</code>；</li><li>部署<code>MkDocs</code>项目：<code>mkdir demo &amp;&amp; mkdocs new .</code>；其中，<code>mkdocs.yml</code>是<code>MkDocs</code>配置文件，<code>docs/index.md</code>是文档的入口；</li><li>启动开发服务器：<code>mkdocs serve</code>。</li></ol><p>当修订好文档后可以参阅内容<a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html" target="_blank" rel="noopener">Importing your existing documentation</a>。<br><strong>External Resources</strong>，下列是一些相关资源：</p><ul><li><a href="https://www.mkdocs.org/" target="_blank" rel="noopener">MkDocs Documentation</a></li><li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown Syntax Guide</a></li><li><a href="https://www.mkdocs.org/user-guide/writing-your-docs/" target="_blank" rel="noopener">Writing Your Docs with MkDocs</a></li></ul><h2 id="Importing-your-existing-documentation"><a href="#Importing-your-existing-documentation" class="headerlink" title="Importing your existing documentation"></a><a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html" target="_blank" rel="noopener">Importing your existing documentation</a></h2><p>导入公共文档仓库的内容，可以访问<a href="https://readthedocs.org/dashboard" target="_blank" rel="noopener">Read the Docs dashboard</a>并点击<a href="https://readthedocs.org/dashboard/import" target="_blank" rel="noopener">Import</a>。私有的文档仓库请使用<a href="https://docs.readthedocs.io/en/stable/commercial/index.html" target="_blank" rel="noopener">Read the Docs for Business</a>。</p><p>如果我们将账号关联到Github/Bitbucket/GitLab的话，就可以直接导入一些公共文档仓库。</p><p><a href="https://docs.readthedocs.io/en/stable/intro/import-guide.html#manually-import-your-docs" target="_blank" rel="noopener"><strong>Manually Import Your Docs</strong></a>: 倘若没有关联账号，则需要手动导入文档仓库，细节参见原文。<br><strong>Building Your Documentation</strong>：完成导入文档的过程之后，文档代码将被自动导入并构建；构建的细节请参见<a href="https://docs.readthedocs.io/en/stable/builds.html" target="_blank" rel="noopener">Build Process</a>；配置信息可在<code>readthedocs.yml</code>中进行制定，规则参见<a href="https://docs.readthedocs.io/en/stable/config-file/index.html" target="_blank" rel="noopener">Configuration File</a>；版本控制的功能参见<a href="https://docs.readthedocs.io/en/stable/versions.html" target="_blank" rel="noopener">Versions</a>；帮助信息可参见<a href="https://docs.readthedocs.io/en/stable/support.html" target="_blank" rel="noopener">Support</a>。</p><h1 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a><a href="https://docs.readthedocs.io/en/stable/index.html#getting-started-with-read-the-docs" target="_blank" rel="noopener">入门指南</a></h1><p>该部分介绍<code>Read the Docs</code>的一些核心功能、常用配置、版本控制等。</p><h2 id="Overview-of-core-features"><a href="#Overview-of-core-features" class="headerlink" title="Overview of core features"></a><a href="https://docs.readthedocs.io/en/stable/features.html" target="_blank" rel="noopener">Overview of core features</a></h2><p>该部分主要是罗列<code>Read the Docs</code>的核心特征。</p><p><strong>GitHub, Bitbucket and GitLab Integration</strong>：支持这三个平台的集成，参见<a href="https://docs.readthedocs.io/en/stable/guides/vcs.html" target="_blank" rel="noopener">Version Control System Integration</a>；<br><strong>Auto-updating</strong>：借助<a href="https://docs.readthedocs.io/en/stable/webhooks.html" target="_blank" rel="noopener">Webhooks</a>可以自动构建文档；<br><strong>Internationalization</strong>：支持多语言，更多信息参见<a href="https://docs.readthedocs.io/en/stable/localization.html" target="_blank" rel="noopener">Localization of Documentation</a>及<a href="https://docs.readthedocs.io/en/stable/development/i18n.html" target="_blank" rel="noopener">Internationalization</a>；<br><strong>Canonical URLs</strong>：支持经典URLs，更多信息参见<a href="https://docs.readthedocs.io/en/stable/guides/canonical.html" target="_blank" rel="noopener">Canonical URLs</a>；<br><strong>Versions</strong>：支持多版本文档；<br><strong>Version Control Support Matrix</strong>：此处主要看Git这块，支持tags/branches，默认分支为<code>master</code>；<br><strong>PDF Generation</strong>：当使用RTD时，亦可生成PDF文档；<br><strong>Search</strong>：支持全文搜索；<br><strong>Alternate Domains</strong>：支持自定义域名、子域名及shorturl，详情参见<a href="https://docs.readthedocs.io/en/stable/custom_domains.html" target="_blank" rel="noopener">Custom Domains</a>。</p><h2 id="Configure-your-documentation"><a href="#Configure-your-documentation" class="headerlink" title="Configure your documentation"></a>Configure your documentation</h2><h2 id="Connecting-with-Github-BitBucket-or-GitLab"><a href="#Connecting-with-Github-BitBucket-or-GitLab" class="headerlink" title="Connecting with Github, BitBucket, or GitLab"></a><a href="https://docs.readthedocs.io/en/stable/connected-accounts.html" target="_blank" rel="noopener">Connecting with Github, BitBucket, or GitLab</a></h2><h2 id="Read-the-Docs-build-and-versioning-process"><a href="#Read-the-Docs-build-and-versioning-process" class="headerlink" title="Read the Docs build and versioning process"></a>Read the Docs build and versioning process</h2><h2 id="Troubleshooting-Support"><a href="#Troubleshooting-Support" class="headerlink" title="Troubleshooting - Support"></a><a href="https://docs.readthedocs.io/en/stable/support.html" target="_blank" rel="noopener">Troubleshooting - Support</a></h2><h2 id="Troubleshooting-Frequently-asked-questions"><a href="#Troubleshooting-Frequently-asked-questions" class="headerlink" title="Troubleshooting - Frequently asked questions"></a><a href="https://docs.readthedocs.io/en/stable/faq.html" target="_blank" rel="noopener">Troubleshooting - Frequently asked questions</a></h2><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a><a href="https://docs.readthedocs.io/en/stable/index.html#advanced-features-of-read-the-docs" target="_blank" rel="noopener">高级特性</a></h1><p>这部分还没怎么用着，先罗列如下：</p><ul><li><a href="https://docs.readthedocs.io/en/stable/subprojects.html" target="_blank" rel="noopener">子项目配置</a></li><li><a href="https://docs.readthedocs.io/en/stable/single_version.html" target="_blank" rel="noopener">单版本配置</a></li><li><a href="https://docs.readthedocs.io/en/stable/privacy.html" target="_blank" rel="noopener">权限文档控制</a></li><li><a href="https://docs.readthedocs.io/en/stable/localization.html" target="_blank" rel="noopener">多语言文档</a></li><li><a href="https://docs.readthedocs.io/en/stable/user-defined-redirects.html" target="_blank" rel="noopener">自定义重定向</a></li><li><a href="https://docs.readthedocs.io/en/stable/automatic-redirects.html" target="_blank" rel="noopener">自动化重定向</a></li><li><a href="https://docs.readthedocs.io/en/stable/guides/index.html" target="_blank" rel="noopener">主题指南</a></li><li><a href="https://docs.readthedocs.io/en/stable/api/index.html" target="_blank" rel="noopener">扩展Read the Docs</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.readthedocs.io/en/stable/index.html#read-the-docs-documentation-simplified" target="_blank" rel="noopener">@ReadTheDocs</a></p>]]></content>
      
        <categories>
            
            <category> tools </category>
            
            <category> dev-docs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> read-the-docs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning to Ask Question in Open-domain Conversational Systems with Typed Decoders]]></title>
      <url>http://www.wrran.com/blog/2018/09/16/note/paper-reading/question%20and%20answering/question%20generation/2018-09-16/</url>
      <content type="html"><![CDATA[<blockquote><p>ask question with type information</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文动机明确，模型简单有效，值得学习其解决问题的思路。<br>作者认为在开放域的对话系统中的问题生成任务与传统的问题生成任务有着以下两点不同之处：</p><ol><li>对相同的输入（背景知识）可能有不同的提问模式，如Yes-No或者Wh-,How-类型的问题</li><li>对给定的输入，问题的提出往往需要有一定的场景知识，进而推动对话的发展。如，针对“我跟朋友去吃饭”，就可以提出一些关于朋友、地点、价格、味道等主题的问题；而传统的问题生成可能更多的在于某个特定的主题，并且更多表现为转述的方式。</li></ol><p>基于此特点，作者认为“好”的问题不仅要有多样的提问模式，也要能够自然的衔接主题。而问题中，常常可以自然的分为三个部分：疑问词、主题词及常见词。为此，作者提出了两种利用词语类别信息的问题生成模型。并在收集的491000对微博的post-response上验证了模型的有效性。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180916/Good_questions_in_conversational_systems.PNG" alt="Good questions in conversational systems are a natural composition of interrogatives, topic words, and ordinary words."></p><h1 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h1><p><em>模型较简单，详情参见原文</em><br>作者修改的基本模型是Seq2Seq模型，为了融入类别信息。作者在解码器端增加了两种融入信息的方式：<br>一是，通过在每步解码时考虑该时刻的待解码词的类别分布(<code>softmax</code>)，这被作者称为STD (soft-typed decoder)；<br>二是，通过在每步解码时先生成该时刻词语的类别（<code>argmax</code>），再在已知该类别的基础上生成词语，这被称为HTD（hard-typed decoder）。</p><p>为了解决<code>argmax</code>不可求导的问题，作者采用<strong>Gumbel-Softmax</strong>技术来替代该操作。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://arxiv.org/abs/1805.04843" target="_blank" rel="noopener">Learning to Ask Question in Open-domain Conversational Systems with Typed Decoders</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> question and answering </category>
            
            <category> question generation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> note </tag>
            
            <tag> question generation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning Chinese Word Representations From Glyphs Of Characters]]></title>
      <url>http://www.wrran.com/blog/2018/08/26/note/paper-reading/word%20embedding/2018-08-26/</url>
      <content type="html"><![CDATA[<blockquote><p>象形文字</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文从汉字为象形文字这一点出发，提出从汉字的图像上学习“词向量”，并在三个数据集上进行了“词义相似度”和“词语类比”的实验，发现：直接从图像中学习词向量表现并不优良，而将图像词向量作为原先词向量的辅助信息确实可以带来一定的提升。<br>但就本人而言实验部分中的三个数据集，究竟偏重的是词向量哪部分的性能测试呢，是否切合了象形文字的优势呢？另外，作者从图像中学习词向量的方法能否最有效地从词向量中捕捉词语直接的相关关系呢？</p><h1 id="动机简述"><a href="#动机简述" class="headerlink" title="动机简述"></a>动机简述</h1><p>在中文中，汉字往往有多个组件构成。这有两层含义：一是汉字的含义往往与组件相关，因此在学习词向量的过程中，兼顾这些信息有助于提升最终词向量的质量；二是共享相同偏旁的多个汉字语义或发音上也有一定联系。这些组件的信息对于词向量学习都是有益的。</p><h1 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h1><p>作者在基于原先的几个词向量表示学习的模型的基础上，提出了自己的改进方式。</p><h1 id="Baselines"><a href="#Baselines" class="headerlink" title="Baselines"></a>Baselines</h1><h2 id="CBOW-and-Skip-Gram"><a href="#CBOW-and-Skip-Gram" class="headerlink" title="CBOW and Skip-Gram"></a>CBOW and Skip-Gram</h2><p>这是word2vec中提出的两个经典模型，简单有效。CBOW是给定上下文预测目标词，Skip-Gram是给定目标词预测上下文。除此之外，还有一些训练技巧，如层次化的softmax、哈夫曼编码、负采样等。</p><h2 id="GloVe"><a href="#GloVe" class="headerlink" title="GloVe"></a>GloVe</h2><p>GloVe是通过词语共现矩阵学习词向量的。在统计词语共现信息时，GloVe使用了调和权重，即距离为$d$的两个词语共现频率记为$1/d$；GloVe的目标函数如下：<br>$$<br>\sum_{i, j \in \text{non-zero of} X} f(X_{ij})(\vec{w}_i^T\vec{\tilde{w}}_j + b_i + \tilde{b}<em>j - \log{X</em>{ij}})<br>$$<br>其中，考虑到共现频次过低时统计数据不可信，故而引入如下$f(X_{ij})$作为权重。<br>$$<br>f(X_{ij}) =<br>\begin{cases}<br>(X_{ij}/x_{max})^{\alpha}, \text{if } X_{ij}&lt; x_{max}\<br>1, &amp; \text{otherwise}\<br>\end{cases}<br>$$</p><h2 id="Character-enhanced-Word-Embedding-CWE"><a href="#Character-enhanced-Word-Embedding-CWE" class="headerlink" title="Character-enhanced Word Embedding (CWE)"></a>Character-enhanced Word Embedding (CWE)</h2><p>CWE寄希望于通过融入构成词语的字信息来提升词向量的质量，如下：<br>$$<br>\vec{w}_i^{cwe} = \vec{w}<em>i + \frac{1}{\vert C(i)\vert}\sum</em>{c_j\in C(i)}\vec{c}_j<br>$$<br>其中，$\vec{w}_i$是词向量，$\vec{c}_j$是字向量，$C(i)$是词语$w_i$的字集合。<br>另外，由于一个字往往含有多个含义，CWE为每个字分配多个向量，不能给提出了三种挑选字向量的方式：基于位置，基于簇丛，非参数的基于簇丛的挑选方式。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/CWE_and_MGE.PNG" alt="Model Comparison of Character-enhanced Word Embedding (CWE) and Multi-granularity Embedding (MGE)"></p><h2 id="Multi-granularity-Embedding-MGE"><a href="#Multi-granularity-Embedding-MGE" class="headerlink" title="Multi-granularity Embedding (MGE)"></a>Multi-granularity Embedding (MGE)</h2><p>MGE基于CBOW和CWE模型，并融入了目标词的偏旁信息。MGE通过如下隐层表示预测目标词：<br>$$<br>\vec{h}<em>i = \frac{1}{\vert C(i)\vert} \sum</em>{c_k\in C(i)} \vec{r}<em>k + \frac{1}{\vert W(i)\vert} \sum</em>{w_j \in W(i)} \vec{w}_j^{cwe}<br>$$<br>其中$\vec{r}_k$是目标词的偏旁向量，$C(i)$是目标词包含的字，$W(i)$是上下文词语。</p><h1 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h1><p>作者使用convAE从字生成的图像中抽取表示。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/The_architecture_of_convAE.PNG" alt="The architecture of convAE"></p><h2 id="Glyph-Enhanced-Word-Embedding-GWE"><a href="#Glyph-Enhanced-Word-Embedding-GWE" class="headerlink" title="Glyph-Enhanced Word Embedding (GWE)"></a>Glyph-Enhanced Word Embedding (GWE)</h2><p>在预训练好上述的convAE后，模型就可以得出字的向量表示。类似于MGE的做法，作者基于CBOW和CWE模型，融入字的图像向量，并可以细分为两类：<br><strong>context character glyph feature</strong><br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/Illustration_of_exploiting_context_word_glyphs.PNG" alt="Illustration of exploiting context word glyphs."></p><p><strong>target character glyph feature</strong><br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/Illustration_of_exploiting_target_word_glyphs.PNG" alt="Illustration of exploiting target word glyphs."></p><h2 id="Directly-Learn-From-Character-Glyph-Features"><a href="#Directly-Learn-From-Character-Glyph-Features" class="headerlink" title="Directly Learn From Character Glyph Features"></a>Directly Learn From Character Glyph Features</h2><p>作者也尝试直接从字的图像中学到词向量，无论是SkipGram或者GloVe，更改的地方都是如何产生词向量。在该工作中，作者先是通过convAE学到字图像向量，之后通过双层的GRU，最后通过两层全连接层得到对应的词向量。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/Model_architecture_of_RNN-Skipgram.PNG" alt="Model architecture of RNN-Skipgram."><br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180826/Model_architecture_of_RNN-GloVe.PNG" alt="Model architecture of RNN-GloVe."></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://www.aclweb.org/anthology/D/D17/D17-1025.pdf" target="_blank" rel="noopener">Learning Chinese Word Representation From Glyphs Of Characters</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> word embedding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> note </tag>
            
            <tag> word embedding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Multi-Granularity Hierarchical Attention Fusion Networks for Reading Comprehension and Question Answering]]></title>
      <url>http://www.wrran.com/blog/2018/08/05/note/paper-reading/question%20and%20answering/reading%20comprehension/2018-08-05/</url>
      <content type="html"><![CDATA[<blockquote><p>୧(๑•̀◡•́๑)૭</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这是首次机器阅读理解模型性能在SQuAD上超越人类性能的模型，EM高达79.2%。本博文旨在考察模型细节，以便学习掌握。<br>总览全文，该模型使用了很多优化技巧，总结有以下几点：</p><ol><li>使用ELMo</li><li>除了常用的co-attention，self-attention外，还使用了Fusion Function</li><li>回答问题前，除了使用pointer network，还使用了bilinear match</li><li>在推理过程中使用了手动制定的特征</li></ol><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>记文档为词语序列$$P={w_t^P}_{t=1}^n$$, 问题为词语序列为$$Q={w_t^Q}<em>{t=1}^m$$，其中$$n$$为文档长度，$$m$$为问题长度；答案为文档$$P$$中的某个连续的文档片段。学习目标为$$f(q, p)=\arg\max</em>{a\in A(p)} \Pr{(a\vert q, p)}$$。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180805/Hierarchical_Attention_Fusion_Network.PNG" alt="Hierarchical Attention Fusion Network."></p><p>模型整体框架如上图，可以细分为四部分：</p><ul><li>Encoder Layer: 将文档和问题转化为向量表示；</li><li>Attention Layer: 捕捉文档与问题之间的相互关系，除了常用的co-attention/self-attention外，还运用了<code>Fusion Function</code>；</li><li>Match Layer: 使用bi-linear match function捕捉问题与文档表示之间的关系；</li><li>Output Layer: 使用pointer-network搜索答案。</li></ul><h2 id="Encoder-Layer"><a href="#Encoder-Layer" class="headerlink" title="Encoder Layer"></a>Encoder Layer</h2><p>该模型除了使用常用的GloVe作为预训练的词向量外，还使用了ELMo该语言模型作为词向量表示的补充。如此，对于文档和问题我们得到了两种表示，即词向量$${e_t^Q}_{t=1}^m$$，$${e_t^P}_{t=1}^n$$和字向量$${c_t^Q}_{t=1}^m$$，$${c_t^P}^n_{t=1}$$。<br>之后为获取上下文信息，使用Bi-LSTM对词向量表示与字向量表示进行学习，并与字向量拼接作为该层的最终表示：<br>$$<br>\begin{align}<br>u_t^Q &amp;= \Big[\text{BiLSTM}_Q([e_t^Q, c_t^Q]), c_t^Q \Big]\<br>u_t^P &amp;= \Big[\text{BiLSTM}_P([e_t^P, c_t^P]), c_t^P \Big]\<br>\end{align}<br>$$</p><h2 id="Attention-Layer"><a href="#Attention-Layer" class="headerlink" title="Attention Layer"></a>Attention Layer</h2><p>该层主要负责推理，本模型基于co-attention和self-attention形成hierarchical attention，并在此外还使用了<code>Fusion Function</code>。</p><h3 id="Co-attention-amp-Fusion"><a href="#Co-attention-amp-Fusion" class="headerlink" title="Co-attention &amp; Fusion"></a>Co-attention &amp; Fusion</h3><p>计算出问题表示$$u_t^Q$$及文档表示$$u_t^P$$后，我们即可计算两者语义相似度：<br>$$<br>S_{ij} = \text{Att}(u_t^Q, u_t^P) = \text{ReLu}(W_{lin}^T u_t^Q) \cdot \text{ReLu}(W_{lin}^T u_t^P)<br>$$</p><p>类似之前的做法，作者基于上述未归一化的矩阵$$S$$计算<strong>P2Q Attention</strong>和<strong>Q2P Attention</strong>:<br><strong>P2Q Attention</strong>得到融入文档的问题表示：<br>$$<br>\begin{align}<br>\alpha_j &amp;=\text{softmax}(S_{:j}) &amp; \<br>\tilde{Q}_{:t} &amp;= \sum_j \alpha_{tj} \cdot Q_{:j}, &amp; \forall j \in [1,\cdots, m]\<br>\end{align}<br>$$</p><p><strong>Q2P Attention</strong>得到融入问题的文档表示：<br>$$<br>\begin{align}<br>\beta_i &amp;= \text{softmax}(S_{i:}) &amp;\<br>\tilde{P}_{k:} &amp;= \sum_i \beta_{ik} \cdot P_{i:}, &amp; \forall i \in [1, \cdots, n]\<br>\end{align}<br>$$</p><p>之后通过结合原有的文档表示和问题表示，得到：<br>$$<br>\begin{align}<br>P’ &amp;= \text{Fuse}(P, \tilde{Q})\<br>Q’ &amp;= \text{Fuse}(Q, \tilde{P}) \<br>\end{align}<br>$$</p><p>在本文中选用了如下形式作为$$\text{Fuse}$$:<br>$$<br>m(P, \tilde{Q}) = \tanh(W_f \Big[P; Q; P\circ\tilde{Q}; P-\tilde{Q} \Big] + b_f)<br>$$</p><p>作者发现原先的表示反映了一些全文信息，为此引入门机制生成最终的文档或问题表示：<br>$$<br>\begin{align}<br>P’ &amp;= g(P, \tilde{Q})\cdot m(P, \tilde{Q}) + (1 - g(P, \tilde{Q}))\cdot P\<br>Q’ &amp;= g(Q, \tilde{P})\cdot m(Q, \tilde{P}) + (1 - g(Q, \tilde{P}))\cdot Q\<br>\end{align}<br>$$<br><em>门机制的实现在后文中将详细介绍，作者设计了三种：基于标量、基于向量、基于矩阵的三种。</em></p><h3 id="Self-attention-amp-Fusion"><a href="#Self-attention-amp-Fusion" class="headerlink" title="Self-attention &amp; Fusion"></a>Self-attention &amp; Fusion</h3><p>之后对文档进行self-attention，先后通过BiLSTM、双线性的softmax及<code>Fuse Function</code>：<br>$$<br>\begin{align}<br>D &amp;= \text{BiLSTM}(\Big[ P’;\text{feat}_{\text{man}}\Big]) \<br>L &amp;= \text{softmax}(D\cdot W_l \cdot D^T)\<br>\tilde{D} &amp;= L \cdot D \<br>D’ &amp;= \text{Fuse}(D, \tilde{D})\<br>D’’ &amp;= \text{BiLSTM}(D’)<br>\end{align}<br>$$<br>对于问题，鉴于其长度较短，没有采用上述复杂的操作方式：<br>$$<br>\begin{align}<br>Q’’ &amp;= \text{BiLSTM}(Q’)\<br>\gamma &amp;= \text{softmax}(w_q^T \cdot Q’’)\<br>q &amp;= \sum_j \gamma_j \cdot Q’’_{:j}, \forall j \in [1, \cdots, m]\<br>\end{align}<br>$$</p><h2 id="Match-amp-Output-Layer"><a href="#Match-amp-Output-Layer" class="headerlink" title="Match &amp; Output Layer"></a>Match &amp; Output Layer</h2><p>作者通过下述的双线性方式得到答案的开始与结束位置：<br>$$<br>\begin{align}<br>P_{start} &amp;= \text{softmax}(q \cdot W_s^T \cdot D’’)\<br>P_{end} &amp;= \text{softmax}(q \cdot W_e^T \cdot D’’)\<br>\end{align}<br>$$<br>输出层使用常规的Pointer Network来预测文档的开始与结束位置。<br>在训练过程中，使用交叉熵作为目标函数；在预测过程中，使用动态规划寻找一定长度内为答案开始概率与为答案结束概率乘积最大者。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://aclweb.org/anthology/P18-1158" target="_blank" rel="noopener">Multi-Granularity Hierarchical Attention Fusion Networks for Reading Comprehension and Question Answering</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> question and answering </category>
            
            <category> reading comprehension </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> note </tag>
            
            <tag> question answering </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Efficient and Robust Question Answering from Minimal Context over Documents]]></title>
      <url>http://www.wrran.com/blog/2018/07/29/note/paper-reading/question%20and%20answering/reading%20comprehension/2018-07-29/</url>
      <content type="html"><![CDATA[<blockquote><p>先筛后选</p></blockquote><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>本篇论文的思路是通过深度学习的句子编码器对文档D中的各个句子进行编码，并针对句子包含答案的可能性进行打分。倘若分数高过一定阈值则保留；否则从D中删除。之后将精简过的文档作为神经网络阅读理解模型进行求解。<br>这样做的好处有两点，一是由于输入到阅读理解模型中的数据变少，模型求解的速度加快了；二是同样由于输入数据变少，也压缩了模型的解空间（答案是文档中的某个片段）。但该做法的隐患是在于倘若前者直接删除了包含正确答案的句子，则后一步骤中一定无法正确求解。好在作者通过数据分析及一些训练技巧有效的保证了前一步骤（“句子选择”）的高准确率（在SQuAD数据上高达99.3%，在NewsQA数据上高达94.6%）。</p><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p>作者在本文中对SQuAD及NewsQA进行了详尽的数据分析。这为后期实验的开展打下了数据基础，也让我们认识到该方法有效的原有。<br>作者从SQuAD中随机采样了50个数据组，发现其中98%的问题是可回答的，而剩余2%的问题即便是通览全文也无法回答。举例来说，在阅读完一篇关于Charles Dickens的文档之后也无法正确回答问题“The papers of which famous English Victorian author are collected in the library?”，这是由于外部知识的缺乏。而在可回答的问题集合中，作者进一步调研回答问题时需要的语句数量，发现其中92%的问题仅仅需要阅读一句之后就可以进行回答，6%的问题需要文档中的两句，而只有2%的问题需要三句乃至更多。<br>作者同样也在TriviaQA上进行了数据分析：与SQuAD平均每个文档仅包含5句的数据特征不同，TriviaQA平均每个文档包含有488句；其中88%的问题是可以回答的，而这其中的95%只需要一或两句就已经足够进行回答了。<br>为了进一步验证先进行句子筛选，再利用当前阅读理解模型进行问题求解的做法不会损害模型的性能。作者在DCN+模型上进行了实验。总体来看，在全文档（即不进行句子筛选）上训练的模型最终的F1为83.1；而在筛选过句子上训练的模型最终的F1为85.1。接着，作者分析后者模型回答错误的原因：40%是已经选择了正确的句子，但阅读理解模型回答错误；58%是由于模型预测部分正确答案，但并没有和标准答案完全一致；2%是由于问题在给予全文的情况下也无法正确回答。另外，作者还比较了全文档模型与筛选过句子模型回答正确的问题集合关系，发现：后者分别在SQuAD和NewsQA上可以正确回答93%和86%的问题。基于上述数据，作者认为采用“筛选-回答”的模式可以提供一个有效且高效的阅读理解模型。</p><h1 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h1><p>下图是本篇论文的模型总体框架。如前所述，该模型可分为“句子筛选”与“阅读理解”两部分。而阅读理解部分，作者直接采用较为成熟的阅读理解模型：DCN+。此处将着重介绍该文的“句子筛选”部分，关于DCN+模型的细节请参见文[5]。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180729/Our%20Model%20Architecture.png" alt="Our Model Architecture."></p><p>句子编码器首先将文档中的句子与问题作为输入，分别计算出句子的编码$D\in \mathbb{R}^{h_d\times L_d}$和问题的编码$Q\in \mathbb{R}^{h_d\times L_q}$（其中$h_d$是词向量的维度，$L_d$和$L_q$分别是文档与问题的序列长度）。之后通过下式计算融入问题表示的句子表示$D^q\in\mathbb{R}^{h_d\times L_d}$：<br>$$<br>\begin{align}<br>\alpha_i = \mathbf{softmax}(D_i^T W_1 Q)\in\mathbb{R}^{L_q}\<br>D_i^q = \sum_{j=1}^{L_q} (\alpha_{i,j} Q_j) \in\mathbb{R^{h_d}}<br>\end{align}<br>$$</p><p>其中$D_i\in\mathbb{R}^{h_d}$是句子中第$i$个词语的表示，$W_1\in\mathbb{R}^{h_d\times h_d}$是训练参数。为了交互句子中词语之间的信息，作者将上述分布式表示通过BiLSTM进行编码：<br>$$<br>\begin{align}<br>D^{\text{enc}}=\mathbf{BiLSTM}([D_i;D_i^q])\in\mathbb{R}^{h\times L_d}\<br>Q^{\text{enc}}=\mathbf{BiLSTM}(Q_j )\in\mathbb{R}^{h\times L_q}\<br>\end{align}<br>$$<br>其中，;表示向量拼接的操作，h是BiLSTM的隐层表示的维度。<br>之后，解码器对于上述得到的文档表示及问题表示进行打分：<br>$$<br>\begin{align}<br>\beta= \mathbf{softmax}(w^T Q^\text{enc})\in \mathbb{R}^{L_q}\<br>\tilde{q}^{\text{enc}}= \sum_{j=1}^{L_q} (\beta_j Q_j^{\text{enc}}) \in \mathbb{R}^h\<br>\tilde{h}_i=(D_i^{\text{enc}} W_2 q^\text{enc})\in \mathbb{R}^h\<br>\tilde{h}=\max(h_1, h_2, \cdots, h_{L_d})\<br>\text{score}=W_3^T \tilde{h}\in\mathbb{R}^2<br>\end{align}<br>$$<br>其中，$w^T\in\mathbb{R}^h$，$W_2\in\mathbb{R}^{h\times h\times h}$,$W_3\in\mathbb{R}^{h\times 2}$都是模型训练的参数。而最终得到的score的两维分别代表给定问题下该句是支撑语句或不是支撑语句的打分。</p><p>除了上述训练模型外，作者还引入了三个训练技巧：一是将句子筛选的句子编码器作为后续阅读理解模型的句子（问题）编码部分，二是倘若后续阅读理解没有正确回答问题，则将该句标记为错误句子（无论其是否包含正确答案），三是计算出的打分函数在段落上进行归一化。上述三种方式都被后续实验验证为可以切实提高模型表现的。</p><p>在最终确定句子时，作者使用了基于阈值的方法，而不是基于Top-K的筛选算法。这是由于作者认为不同的问题需要不同数量的支持语句。后续实验也表明，基于阈值的筛选方法不仅能够提高筛选的准确率，还能挑选出（平均）更少数量的句子。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://aclweb.org/anthology/P18-1160" target="_blank" rel="noopener">Efficient and Robust Question Answering from Minimal Context over Documents</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> question and answering </category>
            
            <category> reading comprehension </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> note </tag>
            
            <tag> document question answering </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式单词表示综述（一）]]></title>
      <url>http://www.wrran.com/blog/2018/05/26/note/paper-reading/word%20embedding/2018-05-27/</url>
      <content type="html"><![CDATA[<blockquote><p>survey word representation</p></blockquote><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>最近在整理近些年来的词向量相关工作,发现了一篇2016年的相关综述.于是便顺着该篇综述来介绍相关的工作,其中涉及的有意思的工作可以参看后续的一些博文.</p><h1 id="单词分布式表示学习主要方法"><a href="#单词分布式表示学习主要方法" class="headerlink" title="单词分布式表示学习主要方法"></a>单词分布式表示学习主要方法</h1><p>但更重要的问题在于为什么这样的一个神经网络可以在建模语言模型时,能够学出单词的分布式表示呢?且这种分布式表示可以包含单词间的语义关联呢?其核心思想在于：对于同一个单词，在其前面出现的上下文单词总是相似的。</p><h2 id="神经网络语言模型"><a href="#神经网络语言模型" class="headerlink" title="神经网络语言模型"></a>神经网络语言模型</h2><p>Bengio等人的[神经网络概率语言模型（Neural Probabilistic Language Model, NPLM）][3] [other][37]提出了一个通用的框架学习单词的分布式表达以及任意的N元语言模型.在该模型中,语言模型是通过给定前文来计算某个单词的概率.NPLM通过将词表示为分布式形式,有效的避免了维度灾难的问题,同时编码了词与词之间的联系,因而自带平滑效果,无需传统N元语言模型中复杂的平滑算法.但该模型的缺点也很明显，主要在于计算方面，NPLM使用$\mathrm{softmax}$层估计下一个词的概率,但这一层的维度是词表大小,分母需要进行$$\vert V\vert$$次计算.因此导致学习和推断的过程都十分耗时.</p><h3 id="神经网络语言模型的加速"><a href="#神经网络语言模型的加速" class="headerlink" title="神经网络语言模型的加速"></a>神经网络语言模型的加速</h3><p>为了解决上述问题,早期使用神经网络语言模型学习单词表示的工作,主要都集中在于加速神经网络语言模型工作上了.对于神经网络语言模型加速的工作,主要集中于两方面:</p><ol><li>直接近似优化原始目标函数</li><li>简化网络结构</li></ol><p><strong>近似优化原始目标函数</strong> Bengio与Ducharme在[Quick Training of Probabilistic Neural Nets by Importance Sampling.][44]中提出使用 <strong>重要性采样(Importance Sampling)</strong> 的方法近似目标函数梯度中的期望项,提升了模型性能，但代价依旧很高.Minh等人在[A fast and simple algorithm for training neural probabilistic language models.][45]及[Learning word embeddings efficiently with noise-contrastive estimation.][46]中引入了 <strong>噪声对比估计(Noise-Contrastive Estimation, NCE)</strong> 取代了重要性采样进行训练过程中的概率估计.该方法的基本思想在于训练一个使用相同参数的逻辑斯蒂回归将真实分布的样本从噪声分布中区分出来.<br><strong>简化网络结构</strong> 在[Hierarchical Probabilistic Neural Network Language Model.][48]的工作中，Morin与Bengio将原本NPLM中扁平化的<code>softmax</code>输出层转变为树状输出。这样就将$$\vert V\vert$$次的指数运算减少到$$\log{\vert V\vert}$$次的运算过程了。之外，在[Three New Graphical Models for Statistical Language Modelling.][23]中作者使用了更简单的对数双线性模型取出了之前模型隐层中的非线性计算部分,输入单词的表示经过简单的线性变换后直接与被预测词的向量做交互.</p><h2 id="排序模型"><a href="#排序模型" class="headerlink" title="排序模型"></a>排序模型</h2><p>Mikolov等人在[Neural network based language models for highly inflective languages.][51]的工作中发现，将单词表示学习与语言模型的训练分离开来进行，首先使用简单的模型在更大的语料上学习词向量，然后以此训练语言模型，同样可以取得很好的训练效果。另外，也有学者尝试将单词的分布式表示用于除语言模型之外的自然语言处理任务上，如C&amp;W模型使用多任务学习来学习单词的分布式表示。<br>C&amp;W模型做法与之前神经网络语言模型学习单词进行表示模型有如下改进：</p><ol><li>同时使用单词前后的上下文进行学习；</li><li>对单词序列打分使用了排序损失函数而非基于概率的极大似然估计：<br>$$<br>\max{0, 1-s(w, c)+s(\hat{w}, c)}<br>$$<br>这里$$c$$代表单词$$w$$的上下文，$$\hat{w}$$表示将当前上下文$$c$$中的单词$$w$$替换为一个随机采样出的无关单词,$$s$$代表打分函数（打分越高,说明这段文本是正确的;打分越低，则说明这段文本不合理）。显然，在大多数情况下，将普通短语中的特定单词随机替换为任意单词，得到的都不是正确的短语。因此，模型的目标便是尽量使正确的语言（也就是观测的语料）得分比随机生成的语言的分数更高。这种技术也被称为 <strong>负采样技术</strong> 。</li></ol><p>而在[WordRank: Learning Word Embeddings via Robust Ranking][55]中Ji等人进一步将排序损失函数应用在词向量表示学习的过程中，将其建模为一个排序问题，使用精妙设计的排序函数来学习单词表示。在[Hubness and Pollution: Delving into Cross-Space Mapping for Zero-Shot Learning.][56]的工作也发现，使用此类排序损失函数可以解决单词表示空间中离得很近的点不易区分的问题。</p><h2 id="上下文单词预测模型"><a href="#上下文单词预测模型" class="headerlink" title="上下文单词预测模型"></a>上下文单词预测模型</h2><p>Mikolov等人在[word2vec][4]的工作中也进一步简化了以往的神经网络语言模型，去除了NPLM中间的非线性隐藏层，提出了两个简单的神经网络模型（Continuos Bag-of-Words, CBOW及Skip-gram, SG）来学习单词的分布式表示.上述两种做法十分简单，CBOW通过上下文词语的分布式表示的加权和来预测单词，后者通过单词的分布式表示来预测上下文的词语.为了模型的求解过程中涉及的复杂的求和操作，使用了一系列的加速技巧都与之前的工作类似：使用哈夫曼树压缩预测空间，负采样技术等。</p><h2 id="矩阵分解模型"><a href="#矩阵分解模型" class="headerlink" title="矩阵分解模型"></a>矩阵分解模型</h2><p>矩阵分解同样也是得到低维词向量的重要途径。<br>其中经典的单词表示学习模型,隐式语义分析模型(Latent Semantic Analysis/Indexing, LSA/LSI)将奇异值分解应用于单词与文档共现矩阵$$X\in\mathbb{R}^{\vert V\vert\times n}$$中，并只保留其中最大的$$k$$个奇异值，如下<br>$$<br>X = W\sum_k D^T<br>$$<br>一般使用$$W\sum_k$$作为单词的向量表示.对于SVD分解单词与上下文矩阵，Levy等人在[58]中发现使用$$W(\sum_k)^{1/2}$$在语义相关任务上效果更佳，而Caron则在[59]中推荐使用$$W(\sum_k)^{\alpha}$$（其中$$\alpha$$对于结果有显著影响，需要认真调整），Hu等人在[60]中发现去掉LSA得到表达的第一维后结果也会有提升（因为LSA得到的向量的第一维显著大于其他维度）。</p><p>随后，Huffman等人概率化LSI，在[61]中提出PLAS(Probabilistic Latent Semantic Indexing)模型；Blei等人在[62]中将PLSA贝叶斯扩展为LDA(Latent Dirichlet Allocation)模型.</p><p>除SVD外，典型相关分析（Canonical Correlation Analysis, CCA [63, 64]）同样被广泛用于学习单词表示[65, 66, 67, 68]；此外，Lebret与Collobert使用Hellinger距离作为PCA分解单词共现矩阵的损失函数，提出 Hellinger PCA(HPCA)模型；受Mikilov等人的工作启发，Pennington等人中提出[GloVe模型][21]。</p><h2 id="模型联系"><a href="#模型联系" class="headerlink" title="模型联系"></a>模型联系</h2><p>该节主要讨论上述做法中的一些相关联系。</p><h3 id="横向组合与纵向聚合"><a href="#横向组合与纵向聚合" class="headerlink" title="横向组合与纵向聚合"></a>横向组合与纵向聚合</h3><p>上述模型实质上都基于同一个假设 <strong>分布语义假设(Distributional Hypothesis)[71,72]</strong>，其含义是：单词的语义来自于上下文。<br>不同的是，一些模型将文档作为单词的上下文，一些讲单词周边的单词作为上下文。</p><p>Sun等人在[74]中表明，上下文的不同，使得不同模型建模了单词间的不同关系：横向组合关系(Syntagmatic)与纵向聚合(Paradigmatic)关系[75]。</p><p><strong>横向聚合关系</strong> 指的是两个单词同时出现在一段文本区域中。如下图中， “爱因斯坦”与“物理学家”两个词同时出现在一句话中，这两个词间存在着横向组合关系。此关系强调两个词可以进行组合，在句子中往往起到不同的语法作用。<br>而 <strong>纵向聚合关系</strong> 指的是纵向的可替换的关系，如图中的“爱因斯坦”与“费曼”。如果两个词在一句话中互换后，不影响句子的语法正确性以及语义合理性，则这两个词间存在纵向聚合关系。 纵向聚合关系在形式上表现为，这两个单词出现在相似的上下文环境中， 即使这两个单词可能从未共现。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180527/syntagmatic_paradigmatic.PNG" alt="横向组合与纵向聚合实例"></p><p>使用文档作为上下文的模型，隐含的假设是，如果两个单词经常同时出现在同一个文档，则这两个单词语义相似。这类模型建模了单词间的横向组合关系，其假设单词与和它共现的单词相似。 LSI以及LDA等通常使用在信息检索场景下的模型，都是建模的这类关系。这类模型更多的侧重于单词的话题信息，因而针对如文本分类这类侧重话题的任务，要好于使用纵向聚合关系的模型。如Tang等人[76]实验证实，在文本分类任务上，PV-DBOW（Distributed Bag of Words version of Paragraph Vector）要明显优于 SG 模型，其中PV-DBOW与LSI类似，建模的是单词间的横向组合关系。</p><p>而另一类模型，使用单词周边单词作为上下文。 其假设， 如果两个单词周围的单词相似，则这两个单词语义相似，即使这两个单词可能从未同时出现在一段文本区域中。这类模型建模了单词间的纵向关系，包括NPLM、LBL、CBOW、SG、GloVe等。这也是自然语言处理中最常用关系，同时也是分布语义假设最主流的解释。这类模型更加擅长有关单词自身的各项应用。</p><h3 id="神经网络与矩阵分解"><a href="#神经网络与矩阵分解" class="headerlink" title="神经网络与矩阵分解"></a>神经网络与矩阵分解</h3><p>Levy 和 Goldberg[77]分析表明， SG模型在使用负采样(SGNS)进行学习的情况下，相当于隐式地在分解单词与上下文之间偏移的点间互信息(Shifted Pointwise Mutual Information, shifted PMI)矩阵。 对于PMI矩阵，它是自然语言处理领域表示单词语义的一个常用选择[78]。随后，Li 等人[79]在表示学习的框架下证明了SGNS等同于矩阵分解。</p><p>此外，Shi和Liu[80]以及 Shazeer 等人[70]的工作都表明，GloVe模型实际上与使用负采样的SG(SGNS)模型非常相似，其区别只在于模型中的偏移项以及单词权重的选择。而Suzuki和Nagata[81]则提出了一个统一的框架囊括了这两个模型。</p><h2 id="模型实验比较"><a href="#模型实验比较" class="headerlink" title="模型实验比较"></a>模型实验比较</h2><h3 id="单词相似度"><a href="#单词相似度" class="headerlink" title="单词相似度"></a>单词相似度</h3><p><a href="http://alfonseca.org/eng/research/wordsim353.html" target="_blank" rel="noopener"><code>WordSim 353 (WS 353)</code></a> - 353个单词对,其中每一词对由13或者16位标注者对其进行0到10之间的打分,分数越高表示标注人员认为这两个词语语义更加相关或者更相似.最终对于每一词对都可以得到所有标注者的一个平均打分.</p><p>此任务的评价标准为,计算标注者对于单词对打分与模型习得表示得到的打分之间的Spearman排序相关系数:<br>$$<br>r=\rho_{x,y}=\frac{\mathrm{cov}(x, y)}{\sigma_x\sigma_y}<br>$$<br>其中$\mathbf{cov}(x, y)$表示排序列表$x, y$之间的协方差,$\sigma_x$和$\sigma_y$代表了对应的标准差.</p><p>模型得到的打分与人工标注的打分排序越一致,得分则越高.<br><a href="https://nlp.stanford.edu/~lmthang/morphoNLM/" target="_blank" rel="noopener"><code>Rare Word (RW)</code></a> - 该数据集侧重于评价模型学习稀缺单词表示的能力,其包含了2034个单词对.相比其他数据集,RW包含了更多的词形复杂而又少见的单词.</p><p><a href="https://github.com/magizbox/underthesea/wiki/DATA-SIMLEX-999" target="_blank" rel="noopener"><code>SimLex-999 (SL-999)</code> </a>- 该数据集修正了WS-353混合相关和相似的缺点,专注于单词之间的相似性,相比较WS-353,该数据集对各个词表示模型的难度更大.</p><h3 id="单词类比"><a href="#单词类比" class="headerlink" title="单词类比"></a>单词类比</h3><p>在word2vec的工作中,Mikolov发现就单单词向量而言,可以通过简单的向量加减运算反映语法语义上的类比关系,如“北京之于中国,相当于巴黎之于法国”可以通过<code>vec(&quot;Beijing&quot;) - vec(&quot;China&quot;) = vec(&quot;Paris&quot;) - vec(&quot;France&quot;)</code>来捕捉到。</p><h3 id="单词表示用作特征"><a href="#单词表示用作特征" class="headerlink" title="单词表示用作特征"></a>单词表示用作特征</h3><p>除了上述两个针对单词向量直接进行比较的实验外，学者们还是用单纯的单词表示作为其他任务的特征，如实体识别和情感分类。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://wenku.baidu.com/view/a225cafdf9c75fbfc77da26925c52cc58bd6901c.html" target="_blank" rel="noopener">分布式单词表示综述</a><br>[3]: <a href="http://jmlr.org/papers/volume3/bengio03a/bengio03a.pdf" target="_blank" rel="noopener">http://jmlr.org/papers/volume3/bengio03a/bengio03a.pdf</a> “A Neural Probabilistic Language Model. Journal of Machine Learning Research”<br>[37]: <a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=2405&amp;context=compsci" target="_blank" rel="noopener">http://repository.cmu.edu/cgi/viewcontent.cgi?article=2405&amp;context=compsci</a> “Can artificial neural networks learn language models?”<br>[44]: <a href="http://www.iro.umontreal.ca/~lisa/pointeurs/submit_aistats2003.pdf" target="_blank" rel="noopener">http://www.iro.umontreal.ca/~lisa/pointeurs/submit_aistats2003.pdf</a> “Quick Training of Probabilistic Neural Nets by Importance Sampling.”<br>[45]: <a href="https://www.cs.toronto.edu/~amnih/papers/ncelm.pdf" target="_blank" rel="noopener">https://www.cs.toronto.edu/~amnih/papers/ncelm.pdf</a> “A fast and simple algorithm for training neural probabilistic language models.”<br>[46]: <a href="https://www.cs.toronto.edu/~amnih/papers/wordreps.pdf" target="_blank" rel="noopener">https://www.cs.toronto.edu/~amnih/papers/wordreps.pdf</a> “Learning word embeddings efficiently with noise-contrastive estimation.”<br>[48]: <a href="https://www.iro.umontreal.ca/~lisa/pointeurs/hierarchical-nnlm-aistats05.pdf" target="_blank" rel="noopener">https://www.iro.umontreal.ca/~lisa/pointeurs/hierarchical-nnlm-aistats05.pdf</a> “Hierarchical Probabilistic Neural Network Language Model.”<br>[23]: <a href="https://www.cs.toronto.edu/~amnih/papers/threenew.pdf" target="_blank" rel="noopener">https://www.cs.toronto.edu/~amnih/papers/threenew.pdf</a> “Three New Graphical Models for Statistical Language Modelling.”<br>[51]: <a href="http://www.fit.vutbr.cz/research/groups/speech/publi/2009/mikolov_ic2009_nnlm_4.pdf" target="_blank" rel="noopener">http://www.fit.vutbr.cz/research/groups/speech/publi/2009/mikolov_ic2009_nnlm_4.pdf</a> “Neural network based language models for highly inflective languages.”<br>[55]: <a href="http://www.aclweb.org/anthology/D/D16/D16-1063.pdf" target="_blank" rel="noopener">http://www.aclweb.org/anthology/D/D16/D16-1063.pdf</a> “WordRank: Learning Word Embeddings via Robust Ranking”<br>[56]: <a href="http://www.aclweb.org/anthology/P/P15/P15-1027.pdf" target="_blank" rel="noopener">http://www.aclweb.org/anthology/P/P15/P15-1027.pdf</a> “Hubness and Pollution: Delving into Cross-Space Mapping for Zero-Shot Learning.”<br>[4]: <a href="https://arxiv.org/abs/1301.3781" target="_blank" rel="noopener">https://arxiv.org/abs/1301.3781</a> “Efficient Estimation of Word Representations in Vector Space.”<br>[58]: <a href="http://aclweb.org/anthology/Q15-1016" target="_blank" rel="noopener">http://aclweb.org/anthology/Q15-1016</a> “Improving Distributional Similarity with Lessons Learned from Word Embeddings.”<br>[59]: <a href="http://dl.acm.org/citation.cfm?id=762556" target="_blank" rel="noopener">http://dl.acm.org/citation.cfm?id=762556</a> “Experiments with LSA scoring: optimal rank and basis.”<br>[60]: <a href="http://www.academia.edu/2956517/LSA_The_first_dimension_and_dimensional_weighting" target="_blank" rel="noopener">http://www.academia.edu/2956517/LSA_The_first_dimension_and_dimensional_weighting</a> “LSA: The first dimension and dimensional weighting.”<br>[21]: <a href="https://nlp.stanford.edu/pubs/glove.pdf" target="_blank" rel="noopener">https://nlp.stanford.edu/pubs/glove.pdf</a> “Glove: Global Vectors for Word Representation.”</p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> word embedding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> note </tag>
            
            <tag> distributed word representation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Efficient Estimation of Word Representations in Vector Space]]></title>
      <url>http://www.wrran.com/blog/2018/05/20/note/paper-reading/word%20embedding/2018-04-01/</url>
      <content type="html"><![CDATA[<blockquote><p>word2vec</p></blockquote><a id="more"></a><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><code>word2vec</code>相关的文章有两篇，第一篇”Efficient Estimation of Word Representations in Vector Space”介绍了词向量计算的两个主要模型CBOW和Skip-gram；第二篇发表在NIPS上的”Distributed Representations of Words and Phrases and their Compositionality”则主要介绍了优化模型训练的技术，包括Hierarchical Softmax, Negative Sampling, Subsampling of Frequent Words，同时也针对原先模型不能发现语料中短语的问题提出了一种改进方案。</p><p><code>word2vec</code>的两个基本模型，想法其实十分简单，但神奇的是实现简单、速度优越。可能的原因是该算法运用了大量的语料。</p><h1 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h1><p>该部分介绍<code>word2vec</code>中学习词向量的两个模型，想法很简单，效果却很好。<br><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180513/new_model_architectures.PNG" alt="New model architectures."><br>图中涉及到两个模型，一是CBOW，一是Skip-gram。两者的相似之处在于都是通过先将词语转换为词向量，之后连接至<code>log-linear classifier</code>进行预测；不同之处在于CBOW是根据上下文$$w_{t-2}, w_{t-1}, w_{t+1}, w_{t+2}$$去预测中心词$$w_{t}$$，而Skip-gram是根据中心词$$w_{t}$$去预测上下文$$w_{t-2}, w_{t-1}, w_{t+1}, w_{t+2}$$。最终训练得出的词向量是指图中<strong>PROJECTION</strong>中的参数。</p><h1 id="Speed-Up"><a href="#Speed-Up" class="headerlink" title="Speed-Up"></a>Speed-Up</h1><p>该部分是文二的主要工作，即针对模型Skip-gram提出了一系列提升训练过程的算法。</p><h2 id="Hierarchical-Softmax"><a href="#Hierarchical-Softmax" class="headerlink" title="Hierarchical Softmax"></a>Hierarchical Softmax</h2><p>在Skip-gram中因为要预测上下文词语，而该预测是在整个词表中进行的。词表的规模往往达到上百万规模，计算开销巨大。为此，作者在词表之上建立一棵哈夫曼树（树的叶子节点即为词）。同时，将对某个词语的预测转换为一系列路径的预测。这样就将原先复杂度为$$O(W)$$的计算简化到$$O(\log{W})$$。</p><h2 id="Negative-Sampling"><a href="#Negative-Sampling" class="headerlink" title="Negative Sampling"></a>Negative Sampling</h2><p>负采样的想法在于不直接计算$$\mathrm{softmax}$$，而是寄希望于模型将正例与负例区分开来即可。如此操作，对于Skip-gram在根据中心词预测上下文时，只需要计算负采样出来的词语与正确答案的概率即可，进一步压缩了计算量。</p><h2 id="Subsampling-of-Frequent-Words"><a href="#Subsampling-of-Frequent-Words" class="headerlink" title="Subsampling of Frequent Words"></a>Subsampling of Frequent Words</h2><p>与信息论的理论相同，经常出现的事物所含有的信息量没有罕见出现的次数多。具体到词向量的学习过程中，常用词如<code>the</code>与其他词语共现的次数一般都很大，而这并不能给我们提供多少信息。作者基于此，为了应对常见词与罕见词被采样的概率，以一定概率丢弃采样的结果。这样的做法可以一定程度上减少常见词被采样的频率，进而减少训练过程中涉及到的计算量。作者还发现这种做法反而提高了罕见词的词向量质量（关于“词向量质量”的讨论见Tasks部分）。</p><h1 id="Learning-Phrases"><a href="#Learning-Phrases" class="headerlink" title="Learning Phrases"></a>Learning Phrases</h1><p>在文二中提出从语料库中自动发现短语的方法。其基本思路是：固定短语应当是指多个词经常一起出现，而各自出现的比率并不高。举例来说，”New York”是固定短语，而”this is”不是。<br>为此，作者设计了如下的公式：<br>$$\text{score}(w_i, w_j) = \frac{\mathrm{count}(w_i w_j)-\delta}{\mathrm{count}(w_i) \times \mathrm{count}(w_j)}$$<br>其中，参数$$\delta$$是一个阈值，防止不常见的词组成大量短语。通过计算语料中两个词语的得分，并判断其是否超过指定阈值；若超过，则可组成新短语。另外，上述公式是针对二元词语而言，为此要发现三个词、四个词等组成的短语时，需要多次进行该过程。</p><h1 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h1><p>在word2vec中还提出了一些测试词向量质量的任务。包括：</p><ul><li><strong>word analogy task</strong>: 具体来说，就是在语言中有”A is to B as C is to D”，如”Beijing is to China as Moscow is to Russia”。该任务就是在给定A,B,C后让模型在词库中寻找到D。关于如何制造出这样的任务数据集，可以参见文一的4.1 Task Description。</li><li><strong>Microsoft Research Sentence Completion Challenge</strong>: 该任务是微软用于测试语言模型的。具体来说，类似选择题：给定一个句子，其中缺失了某个词，要求从五个候选词中选出正确答案。</li><li><strong>out-of-the-list</strong>: 给定一些词，从中选出与其他最不相似的一种。但在论文中，并没有将此作为测试词向量质量的任务，仅是指出词向量可能的用法。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://arxiv.org/pdf/1301.3781.pdf" target="_blank" rel="noopener">Efficient Estimation of Word Representations in Vector Space</a><br><a href="https://pdfs.semanticscholar.org/c829/b63a3ae72a47e1953e1295826c7b2f93bf50.pdf?_ga=2.7614203.850512570.1526112318-1123334528.1524925016" target="_blank" rel="noopener">Distributed Representations of Words and Phrases and their Compositionality</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> word embedding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> note </tag>
            
            <tag> word2vec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GloVe - Global Vectors for Word Representation]]></title>
      <url>http://www.wrran.com/blog/2018/05/13/note/paper-reading/word%20embedding/2018-05-13/</url>
      <content type="html"><![CDATA[<blockquote><p>GloVe</p></blockquote><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p><code>GloVe</code>是基于词与词的共现信息训练出的词向量，除去预处理阶段的计数开销，真正训练用来训练词向量的部分其实也十分简单。但该文解释的十分独特，从一个解决问题者的角度抽丝剥茧直至得出最终的目标函数；并且其还从另一个角度解释了<code>word2vec</code>的模型，提供了一个理解的新思路。但这些解释有些强行，或者可能我没有理解其后的数学原理：只理解到作者是这样做的，但并不明白为什么要这样做，会不会有更好的做法。但另一方面，作者的这种解释模型的思路和能力是值得学习的。</p><h1 id="GloVe"><a href="#GloVe" class="headerlink" title="GloVe"></a>GloVe</h1><p>GloVe是基于词之间的共现信息训练的模型。我们用$$X$$来标记这个词语之间的共现矩阵，其元素$$X_{ij}$$代表词语$$i$$与词语$$j$$的共现频次，则$$X_i=\sum_k X_{ik}$$是词$i$在所有上下文中出现的频次。$$P_{ij}=P(j\vert i) = \frac{X_{ij}}{X_i}$$则代表了上下文中出现词语$$i$$后词$$j$$出现的概率。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com/image/180401/co-occurrence_probabilities.PNG" alt="Co-occurrence probabilities."></p><p>之后作者发现使用概率之间的比值会比直接使用概率更能区分相关词和无关词。（但这可能是结果导向）</p><p>$$<br>F(w_i, w_j, \hat{w}<em>k) = \frac{P</em>{ik}}{P_{jk}}<br>$$</p><p>换言之，作者需要确定一个合适的函数$$F$$来拟合语料中的统计信息。<br>下面作者一步步细化目标函数$$F$$：<br>$$<br>F(w_i, w_j, \hat{w}_k) \rightarrow F(w_i - w_j, \hat{w}_k)<br>$$<br>上式的细化，个人理解为只是种选择。<br>$$<br>F(w_i - w_j, \hat{w}_k) \rightarrow F((w_i-w_j)^T \hat{w}<em>k)<br>$$<br>上述过程的细化是由于$$\frac{P</em>{ik}}{P_{jk}}$$只是个标量，选用点乘方式来保证结果可比较。<br>$$<br>F((w_i-w_j)^T \hat{w}_k) \rightarrow \frac{F(w^T_i \hat{w}_k)}{w^T_j \hat{w}<em>k}<br>$$<br>这一步细化的理由是因为统计信息中$$X</em>{ij} = X_{ji}$$，即$$X = X^T$$。作者因而限制上下文$$w$$与$$\hat{w}$$可以互相交换，进而要求$$(\mathbb{R}, +)$$与$$(\mathbb{R}_{&gt;0}, \times)$$同构得出上式（缺乏数学知识，无法理解）。作者进一步求解得出$$F=\exp$$.<br>$$<br>\frac{F(w^T_i \hat{w}_k)}{w^T_j \hat{w}<em>k} = \frac{P</em>{ik}}{P_{jk}}<br>$$<br>上式的得出是通过与第一个公式联立得出下式：<br>$$<br>F(w^T_i \hat{w}<em>k) = P</em>{ik} = \frac{X_{ik}}{X_i}<br>$$<br>进一步，利用结论$$F=\exp$$可以得出下式：<br>$$<br>w_i^T \hat{w}<em>k = \log{P</em>{ik}} = \log{X_{ik}} - \log{X_i}<br>$$<br>注意上式如果忽略到$$\log{X_i}$$的话，左右两边都满足对称性，即左边可以交换$$w$$与$$\hat{w}$$，右边可以交换$$X_{ik}$$与$$X_{ki}$$，基于该观察得出：<br>$$<br>w_i^T \hat{w}_k + b_i + \hat{b}<em>k = \log{X</em>{ik}}<br>$$</p><p>至此得出了最终的优化目标：<br>$$<br>J = \sum_{i,j=1}^V f(X_{ij}) (w_i^T \hat{w}_j + b_i + \hat{b}<em>j - \log{X</em>{ij}})^2<br>$$<br>这里值得注意的有目标函数只针对有关联的词语$$i,j=1$$才计算，同时考虑到罕见词被观测数量较少，可能会引入噪音，引入调节系数$$f(X_{ij})$$（具体形式参见原文）。</p><h1 id="Relationship-to-Other-Models"><a href="#Relationship-to-Other-Models" class="headerlink" title="Relationship to Other Models"></a>Relationship to Other Models</h1><p>这部分作者尝试从共现矩阵的信息解释基于窗口的词向量方法，特别是模型Skip-gram。<br>Skip-gram的对于某个给定的中心词$$i$$要预测词$$j$$的概率，形式化的说：<br>$$<br>Q_{ij} = \frac{<br>\exp{w_i^T\hat{w}<em>j}<br>}{<br>\sum</em>{k=1}^V \exp{w_i^T \hat{w}<em>k}<br>}<br>$$<br>则上式隐含其全局的目标函数为<br>$$<br>J = -\sum</em>{i\in\text{corpus}, j\in\text{context}(i)} \log{Q_{ij}}<br>$$<br>上式等价于<br>$$<br>J = -\sum_{i=1}^V\sum_{j=1}^V X_{ij} \log{Q_{ij}}<br>$$<br>等价于<br>$$<br>J = -\sum_{i=1}^V X_i \sum_{j=1}^V P_{ij} \log{Q_{ij}} = \sum_{i=1}^V X_i H(P_i, Q_i)<br>$$<br>其中，$$H(P_i, Q_i)$$是指分布$$P_i$$和$$Q_i$$的交叉熵。即Skip-gram实质上是希望词向量之间的某些关系可以拟合真实语料中的分布。而交叉熵这一衡量指标只是众多指标中的一者，特别是其度量符合长尾现象的语言学现象表现并不好，且计算开销大。因此可以用简单的均方差来担任这一角色：<br>$$<br>\hat{J} = \sum_{i,j} X_i (\hat{P}<em>{ij} - \hat{Q}</em>{ij})^2<br>$$<br>其中，$$\hat{P}<em>{ij} = X</em>{ij}$$和$$\hat{Q}_{ij} = \exp{w_i^T \hat{w}<em>j}$$，但现实中这些数值往往很大，我们采用数学上等价的对数形式：<br>$$<br>\hat{J}<br>\begin{align}<br>= &amp; \sum</em>{i,j} X_i (\log{\hat{P}<em>{ij}} - \log{\hat{Q}</em>{ij}})^2\<br>= &amp; \sum_{i,j} X_i (w^T_i \hat{w}<em>j - \log{X</em>{ij}})^2<br>\end{align}<br>$$<br>而权重$$X_i$$并不能保证对于上式是最优的，实践中word2vec的第二篇论文中提到”subsampling”技术确实可以提高不常见词的词向量质量。形式化的说，就是可以将优化目标解释为：<br>$$<br>\hat{J} = \sum_{i,j} f(X_{ij}) (w^T_i \hat{w}<em>j - \log{X</em>{ij}})^2<br>$$<br>至此，可见与前面提出的GloVe形式一致。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://pdfs.semanticscholar.org/1baa/3f4fda7c92600a5c192adaed80a834d13ff9.pdf?_ga=2.249766735.850512570.1526112318-1123334528.1524925016" target="_blank" rel="noopener">GloVe: Global Vectors for Word Representation</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> word embedding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> note </tag>
            
            <tag> GloVe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我想和这个世界谈谈]]></title>
      <url>http://www.wrran.com/blog/2018/03/26/people-say/180326-01/</url>
      <content type="html"><![CDATA[<blockquote><p>虽然我不是一个冷血的人，但我的血液是温的。</p></blockquote><a id="more"></a><p>@ 韩寒 in 《1988，我想跟这个世界谈谈》</p><blockquote><p>但我至少等待过，我知道你从不会来，但我从不怀疑你彼时的真心，就如同我的每一个谎言都是真心的。但这一次，我至少是勇敢的，我承认的朋友们也会赞许我的行为，因为他们都会是这样的人，你也许会为我流泪，但也许心中会说，你太蠢了。</p></blockquote><hr><blockquote><p>可当你有美好憧憬的时候，生活就变成了一部文艺片。</p></blockquote><hr><blockquote><p>因为我太敏感了，自从丁丁哥哥离开以后，我对一个人的即将离开有着强烈的预感，虽然多说话从不能挽留人。</p></blockquote><hr><blockquote><p>我从来不觉得我应该属于这个世界，这个世界是我们去到真正的世界之前的一个化妆间而已。</p></blockquote><hr><blockquote><p>我应该是像期盼一个活人一样期盼他，还是像怀念一个死人一样怀念他。</p></blockquote><hr><blockquote><p>我就如同一只幼犬，面对着一块比自己还要大的骨头，不知道从何下口。</p></blockquote><hr><blockquote><p>世界就像一堵墙，我们就像一只猫，我必须要在这个墙上留下我的抓痕。</p></blockquote><hr><blockquote><p>我有着我的目的地，他有着他的目的地，我们在一起，谁都达不了谁的目的地。</p></blockquote><hr><blockquote><p>但我更要迎接的是夏天的到来。<br>我要迎接漫天的星斗。<br>我要迎接满河的龙虾。<br>我要迎接能刺痛我皮肤的带刺的野草。<br>我要迎接能刺痛我眼睛的我从不正视的太阳。</p></blockquote><hr><blockquote><p>你懂得越多，你就越像这个世界的孤儿。当我刚刚开始知道什么是孤独的时候，我又被他们接纳了。</p></blockquote>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[struc2vec - Learning Node Representations from Structural Identity]]></title>
      <url>http://www.wrran.com/blog/2018/03/18/note/paper-reading/2018-03-18/</url>
      <content type="html"><![CDATA[<blockquote><p>众里寻他千百度</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>struc2vec</code>是KDD 2017年的关于图表示学习的一个模型。在图表示学习中，节点表示的学习主要依赖于临近性与同构性，前者是指距离越近的节点得到的表示也应该相互靠近，后者是指结构相似的节点得到的表示也应该相互接近。与<code>DeepWalk</code>、<code>node2vec</code>这类通过模仿DFS/BFS来权衡同构性/邻近性不同，<code>struc2vec</code>试图通过直接定量地挖掘图中节点的结构来得到更多保存图中“同构性”的表示。</p><h1 id="模型概览"><a href="#模型概览" class="headerlink" title="模型概览"></a>模型概览</h1><p>为了让模型尽可能多地保存节点之间结构信息，作者认为应当在设计模型的过程中着重注意以下两点：</p><ol><li>表示之间的距离应该与节点结构相似性高度相关；</li><li>表示的学习不应当依赖于任何节点或者边的属性，包括节点的类别。</li></ol><p>按照以上两点理念，作者将<code>struc2vec</code>设计为下列四大步骤：</p><ol><li>定量描述图中节点的结构相似性，同时由考虑“邻域”的大小自然地划分为不同的层次；</li><li>由第一步中得到的信息构造多层加权图，图中每一层与第一步中的不同“邻域”形成的层次相对应；</li><li>通过第二步中构造的多层加权图，随机游走得到每一节点的上下文信息；</li><li>由<code>Skip-Gram</code>模型对游走序列进行学习，得到节点表示。</li></ol><p>由此可知，上述步骤中较为独特和关键的为第一、二步，详述见下。</p><h1 id="结构相似性"><a href="#结构相似性" class="headerlink" title="结构相似性"></a>结构相似性</h1><p><code>struc2vec</code>中结构相似性的目的是不依赖于图中节点和边的属性来定量描述节点的结构相似性。直观地说，如果两个节点的度相近则他们之间的结构相似度也应该高，而如果这两个节点的邻居节点的度也是相同，则他们之间的结构相似度也应该更高。<br>记$$G=(V, E)$$表示无向无权图，其中$$V$$表示节点集合，$$E$$表示边集合，$$n=\vert V\vert$$表示图的节点数，$$k^*$$表示图的直径。记$$R_k(u)$$表示图$$G$$中距离节点$$u$$为$$k$$的节点集合，其中$$k\ge0$$。记$$\mathrm{s}(S)$$表示节点集合$$S\subset V$$的有序度序列。<br>进而，我们就可以在上述概念上定义结构相似性。具体来说，定义函数$$\mathrm{f}_k(u, v)$$，该函数用来衡量节点$$u$$和$$v$$之间的结构相似性，该结构相似性考虑的范围为$$k$$，即与节点$$u$$或$$v$$距离小于等于$$k$$的节点才会被考虑。函数$$\mathrm{f}_k(u, v)$$定义如下：<br>$$<br>\mathrm{f}<em>k(u, v) = \mathrm{f}</em>{k-1}(u, v) + \mathrm{g}(\mathrm{s}(\mathrm{R}_k(u)),\mathrm{s}(\mathrm{R}_k(v))),\ k\ge0\text{ and } \vert\mathrm{R}_k(u)\vert, \vert\mathrm{R}_k(v)\vert &gt;0<br>$$<br>其中，函数$$\mathrm{g}(D_1, D_2)\ge0$$是衡量两个度序列$$D_1$$和$$D_2$$距离的函数，并且$$\mathrm{f}_{-1}=0$$。由上述$$\mathrm{f}_k(u, v)$$的定义可知，该函数是非减函数，并且只有在节点$$u$$和$$v$$存在距离为$$k$$的邻居节点时才有定义。<br>接着就要确定比较两个度序列的函数$$\mathrm{g}(\cdot, \cdot)$$了。首先，对于度序列$$\mathrm{s}(\mathrm{R}_k(u))$$和$$\mathrm{s}(\mathrm{R}_k(v))$$，他们可能大小不一致，且序列元素可能是$$[0, n-1]$$内元素的任意组合。在本文中，作者使用<code>Dynamic Time Warping (DTW)</code>来作为该函数，并针对图的某些特性进行了定制化。</p><h1 id="多层加权图"><a href="#多层加权图" class="headerlink" title="多层加权图"></a>多层加权图</h1><p>多层加权图的构造是为了更准确地表达节点之间的结构相似度。由上述记法，将$$G=(V, E)$$记为原始图，$$k^<em>$$记为图直径。用$$M$$表示构造的多层图，而第$$k$$层图即是通过节点和与之距离为$$k$$的邻居节点构成的图。<br>每一层$$k=0, \cdots, k^</em>$$都是定义在节点集合$$V$$上面的无向有权完全图，即共有$$n \choose 2$$个边。而边的权重通过下式得出：<br>$$<br>\mathrm{w}_k(u, v) = e^{-\mathrm{f}_k(u, v)}, k=0,\cdots,k^<em><br>$$<br>其中函数$$\mathrm{w}_k(u, v)$$只有在$$\mathrm{f}_k(u, v)$$有定义处才有定义，且该函数的值小于等于$$1$$。当$$\mathrm{f}_k(u, v)$$越小时，$$\mathrm{w}<em>k(u, v)$$越大。并且与节点$$u$$结构相似的节点在不同层次的图中的边权都会更大些。<br>每一个节点都与相邻层次的图中对应节点相连（如果存在的话），记在第$$k$$层图中的节点为$$u\in V$$，第$$k-1$$层中对应的节点为$$u</em>{k-1}$$，第$$k+1$$层中对应的节点为$$u_{k+1}$$。则如下定义各个节点之间的权重：<br>$$<br>\mathrm{w}(u_k, u_{k+1}) = \mathrm{log}(\mathrm{\Gamma}_k(u)+e),\ k=0,\cdots,k^</em>-1<br>$$<br>$$<br>\mathrm{w}(u_k, u_{k-1}) = 1,\ k=1,\cdots,k^*<br>$$<br>其中，$$\mathrm{\Gamma}_k(u)$$定义为：<br>$$<br>\mathrm{\Gramma}<em>k(u)=\sum</em>{v\in V}\mathrm{1}(\mathrm{w}_k(u, v)&gt;\hat(w)_k)<br>$$<br>其中，$$\hat(w)<em>k=\frac{\sum</em>{(u, v)\in{V \choose 2}}\mathrm{w}_k(u, v)}{n \choose 2}$$.</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>由上述多层加权图的构造过程，我们可以知道，该多层加权图也可以被当作一个巨大的有向有权图，之后作者又详细讨论了如何在这张图上进行采样的算法。其中涉及到一些更细节的游走策略，在此不再赘述。最后作者也介绍了下语言模型的学习过程。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://arxiv.org/pdf/1704.03165.pdf" target="_blank" rel="noopener">struc2vec: Learning Node Representations from Structural Identity</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> note </tag>
            
            <tag> struc2vec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[四十一]]></title>
      <url>http://www.wrran.com/blog/2018/03/12/people-say/luxun/180312-04/</url>
      <content type="html"><![CDATA[<blockquote><p>我又愿中国青年都只是向上走，不必理会这冷笑和暗箭。</p></blockquote><a id="more"></a><p>@ 鲁迅</p><p>从一封匿名信里看见一句话，是“数麻石片”（原注江苏方言），大约是没有本领便不必提倡改革，不如去数石片的好的意思。因此又记起了本志通信栏内所载四川方言的“洗煤炭”。想来别省方言中，相类的话还多；守着这专劝人自暴自弃的格言的人，也怕并不少。<br>凡中国人说一句话，做一件事，倘与传来的积习有若干抵触，须一个金斗便告成功，才有立足的处所；而且被恭维得烙铁一般热。否则免不了标新立异的罪名，不许说话；或者竟成了大逆不道，为天地所不容。这一种人，从前本可以夷到九族，连累邻居；现在却不过是几封匿名信罢了。但意志略略薄弱的人便不免因此萎缩，不知不觉的也入了“数麻石片”党。<br>所以现在的中国，社会上毫无改革，学术上没有发明，美术上也没有创作；至于多人继续的研究，前仆后继的探险，那更不必提了。国人的事业，大抵是专谋时式的成功的经营，以及对于一切的冷笑。<br>但冷笑的人，虽然反对改革，却又未必有保守的能力；即如文字一面，白话固然看不上眼，古文也不甚提得起笔。照他的学说，本该去“数麻石片”了；他却又不然，只是莫名其妙的冷笑。<br>中国的人，大抵在如此空气里成功，在如此空气里萎缩腐败，以至老死。<br>我想，人猿同源的学说，大约可以毫无疑义了。但我不懂，何以从前的古猴子，不都努力变人，却到现在还留着子孙，变把戏给人看。还是那时竟没有一匹想站起来学说人话呢?还是虽然有了几匹，却终被猴子社会攻击他标新立异，都咬死了；所以终于不能进化呢?<br>尼采式的超人，虽然太觉渺茫，但就世界现有人种的事实看来，却可以确信将来总有尤为高尚尤近圆满的人类出现。到那时候，类人猿上面，怕要添出“类猿人”这一名词。<br>所以我时常害怕，愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光，不必等候炬火。<br>此后如竟没有炬火：我便是唯一的光。倘若有了炬火，出了太阳，我们自然心悦诚服的消失，不但毫无不平，而且还要随喜赞美这炬火或太阳；因为他照了人类，连我都在内。<br>我又愿中国青年都只是向上走，不必理会这冷笑和暗箭。<br>尼采说：<br>“真的，人是一个浊流。应该是海了，能容这浊流使他干净。<br>“咄，我教你们超人：这便是海，在他这里，能容下你们的大侮蔑。”（《札拉图如是说》的《序言》第三节）<br>纵令不过一洼浅水，也可以学学大海；横竖都是水，可以相通。几粒石子，任他们暗地里掷来；几滴秽水，任他们从背后泼来就是了。<br>这还算不到“大侮蔑”——因为大侮蔑也须有胆力。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[四十九]]></title>
      <url>http://www.wrran.com/blog/2018/03/12/people-say/luxun/180312-03/</url>
      <content type="html"><![CDATA[<blockquote><p>各各如此走去，便是进化的路</p></blockquote><a id="more"></a><p>@鲁迅</p><p>凡有高等动物，倘没有遇着意外的变故，总是从幼到壮，从壮到老，从老到死。<br>我们从幼到壮，既然好不为奇的过去了；自此以后，自然也该毫不为奇的过去。<br>可惜有一种人，从幼到壮，居然也毫不为奇的过去了；从壮到老，便有点古怪；从老到死，却更奇想天开，要占尽了少年的道路，吸尽了少年的空气。<br>少年在这时候，只能先行萎黄，且待将来老了，神经血管一切变质以后，再来活动。所以社会上的状态，先是“少年老成”；直待弯腰曲背时期，才更加“逸兴遄飞”，似乎从此之后，才上了做人的路。<br>可是究竟也不能自忘其老；所以想求神仙。大约别的都可以老，只有自己不肯老的人物，总该推中国老先生算一甲一名。<br>万一当真成了神仙，那便永远请他主持，不必再有后进，原也是极好的事。可惜他又究竟不成，终于个个死去，只留下造成的老天地，教少年驼着吃苦。<br>这真是生物界的怪现象！<br>我想种族的延长，——便是生命的连续，——的确是生物界事业里的一大部分。何以要延长呢?不消说是想进化了。但进化的途中总须新陈代谢。所以新的应该欢天喜地的向前走，这边是壮，旧的也应该欢天喜地的向前走去，这便是死；各各如此走去，便是进化的路。<br>老的让开道，催促着，奖励着，让他们走去。路上有深渊，便用那个死填平了，让他们走去。<br>少的感谢他们填了深渊，给自己老去；老的也感谢他们从我填平的深渊上走去。——远了远了。<br>明白这事，便是从幼到壮到老到死，都欢欢喜喜的过去；而且一步一步，多是超过祖先的新人。<br>这是生物界正当开阔的路！人类的祖先，都已这样做了。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[六十二 恨恨而死]]></title>
      <url>http://www.wrran.com/blog/2018/03/12/people-say/luxun/180312-02/</url>
      <content type="html"><![CDATA[<blockquote><p>不平还是改造的引线，但必须先改造了自己，再改造社会，改造世界</p></blockquote><a id="more"></a><p>@ 鲁迅</p><p>古来很有几位恨恨而死的人物。他们一面说些“怀才不遇”“天道宁论”的话，一面有钱的便狂嫖滥赌，没钱的便喝几十碗酒，——因为不平的缘故，于是后来就恨恨而死了。<br>我们应该趁他们活着的时候问他：诸公！您知道北京离昆仓山几里，弱水去黄河几丈么?火药除了做鞭爆，罗盘除了看风水，还有什么用处么?棉花是红的还是白的?谷子是长在树上，还是长在草上?桑间濮上如何情形，自由恋爱怎样态度?您在半夜里可忽然觉得有些羞，清早上可居然有点悔么?四斤的担，您能挑么?三里的道，您能跑么?<br>他们如果细细的想，慢慢的悔了，这便很有些希望。万一越发不平，越发愤怒，那便“爱莫能助”。——于是他们终于恨恨而死了。<br>中国现在的人心中，不平和愤恨的分子太多了。不平还是改造的引线，但必须先改造了自己，再改造社会，改造世界；万不可单是不平。至于愤恨，却几乎全无用处。<br>愤恨只是恨恨而死的根苗，古人有过许多，我们不要蹈他们的覆辙。<br>我们更不要借了“天下无公理，无人道”这些话，遮盖自暴自弃的行为，自称“恨人”，一副恨恨而死的脸孔，其实并不恨恨而死。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[六十三 “与幼者”]]></title>
      <url>http://www.wrran.com/blog/2018/03/12/people-say/luxun/180312-01/</url>
      <content type="html"><![CDATA[<blockquote><p>但是对于一切幼者的爱。</p></blockquote><a id="more"></a><p>@ 鲁迅</p><p>做了《我们现在怎样做父亲》的后两日，在有岛武郎《著作集》里看到《与幼者》这一篇小说，觉得很有许多好的话。<br>“时间不住的移过去。你们的父亲的我，到那时候，怎样映在你们（眼）里，那是不能想像的了。大约像我在现在，嗤笑可怜那过去的时代一般，你们也要嗤笑可怜我的古老的心思，也未可知的。我为你们计，但愿这样子。你们若不是毫不客气的拿我做一个踏脚，超越了我，向着高的远的地方进去，那便是错的。<br>“人间很寂寞。我单能这样说了就算么?你们和我，像尝过血的兽一样，尝过爱了。去罢，为要将我的周围从寂寞中救出，竭力做事罢。我爱过你们，而且永远爱着。这并不是说，要从你们受父亲的报酬，我对于‘教我学会了爱你们的你们’的要求，只是受取我的感谢罢了……像吃尽了亲的死尸，贮着力量的小狮子一样，刚强勇猛，舍了我，踏到人生上去就是了。<br>“我的一生就令怎样失败，怎样胜不了诱惑；但无论如何，使你们从我的足迹上寻不出不纯的东西的事，是要做的，是一定做的。你们该从我的倒毙的所在，跨出新的脚步去。但那里走，怎么走的事，你们也可以从我的足迹上探索出来。<br>“幼者呵！将又不幸又幸福的你们的父母的祝福，浸在胸中，上人生的旅路罢。前途很远，也很暗。然而不要怕。不怕的人的面前才有路。<br>“走罢！勇猛着！幼者呵！”<br>有岛氏是白桦派，是一个觉醒的，所以有这等话；但里面也免不了带些眷恋凄怆的气息。<br>这也是时代的关系。将来便不特没有解放的话，并且不起解放的心，更没有什么眷恋和凄怆；只有爱依然存在。——但是对于一切幼者的爱。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[藤野先生]]></title>
      <url>http://www.wrran.com/blog/2018/03/09/people-say/luxun/180309-01/</url>
      <content type="html"><![CDATA[<blockquote><p>他的性格，在我的眼里和心里是伟大的，虽然他的姓名并不为许多人所知道。</p></blockquote><a id="more"></a><p>@ 鲁迅</p><p>东京也无非是这样。上野的樱花烂漫的时节，望去确也像绯红的轻云，但花下也缺不了成群结队的“清国留学生”的速成班，头顶上盘着大辫子，顶得学生制帽的顶上高高耸起，形成一座富士山。也有解散辫子的，盘得平的，除下帽来，油光可鉴，宛如小姑娘的发髻一般，还要将脖子扭几扭。实在标致极了。<br>中国留学生会馆的门房里有几本书买，有时还值得去一转；倘在上午，里面的几间洋房里倒也还可以坐坐的。但到傍晚，有一间的地板便常不免要咚咚咚地响震天，兼以满房烟尘斗乱；问问精通时事的人，答道，“那是在学跳舞。”<br>到别的地方去看看，如何呢?<br>我就往仙台的医学专门学校去。从东京出发，不久便到一处驿站，写道：日暮里。不知怎地，我到现在还记得这名目。次其却只记得水户了，这是明的遗民朱舜水先生客死的地方。仙台是一个市镇，并不大；冬天冷得利害；还没有中国的学生。<br>大概是物以希为贵罢。北京的白菜运往浙江，便用红头绳系住菜根，倒挂在水果店头，尊为“胶菜”；福建野生着的芦荟，一到北京就请进温室，且美其名曰“龙舌兰”。我到仙台也颇受了这样的优待，不但学校不收学费，几个职员还为我的食宿操心。我先是住在监狱旁边一个客店里的，初冬已经颇冷，蚊子却还多，后来用被盖了全身，用衣服包了头脸，只留两个鼻孔出气。在这呼吸不息的地方，蚊子竟无从插嘴，居然睡安稳了。饭食也不坏。但一位先生却以为这客店也包办囚人的饭食和我不相干，然而好意难却，也只得别寻相宜的住处了。于是搬到别一家，离监狱也很远，可惜每天总要喝难以下咽的芋梗汤。<br>从此就看见许多陌生的先生，听到许多新鲜的讲义。解剖学是两个教授分任的。最初是骨学。其时进来的是一个黑瘦的先生，八字须，戴着眼镜，挟着一叠大大小小的书。一将书放在讲台上，便用了缓慢而很有顿挫的声调，向学生介绍自己道：<br>“我就是叫做藤野严九郎的……。”<br>后面有几个人笑起来了。他接着便讲述解剖学在日本发达的历史，那些大大小小的书，便是从最初到现今关于这一学问的著作。起初有几本是线装的；还有翻刻中国译本的，他们的翻译和研究新的医学，并不比中国早。<br>那坐在后面发笑的是上学年不及格的留级学生，在校已经一年，掌故颇为熟悉的了。他们便给新生讲演每个教授的历史。这藤野先生，据说是穿衣服太模胡了，有时竟会忘记带领结；冬天是一件旧外套，寒颤颤的，有一回上火车去，致使管车的疑心他是扒手，叫车里的客人大家小心些。<br>他们的话大概是真的，我就亲见他有一次上讲堂没有带领结。<br>过了一星期，大约是星期六，他使助手来叫我了。到得研究室，见他坐在人骨和许多单独的头骨中间，——他其时正在研究着头骨，后来有一篇论文在本校的杂志上发表出来。<br>“我的讲义，你能抄下来么?”他问。<br>“可以抄一点。”<br>“拿来我看！”<br>我交出所抄的讲义去，他收下了，第二三天便还我，并且说，此后每一星期要送给他看一回。我拿下来打开看时，很吃了一惊，同时也感到一种不安和感激。原来我的讲义已经从头到末，都用红笔添改过了，不但增加了许多脱漏的地方，连文法的错误，也都一一订正。这样一直继续到教完了他所担任的功课：骨学，血管学，神经学。<br>可惜我那时太不用功，有时也很任性。还记得有一回藤野先生将我叫到他的研究室里去，翻出我那讲义上的一个图来，是下臂的血管，指着，向我和蔼的说道：<br>“你看，你将这条血管移了一点位置了。——自然，这样一移，的确比较的好看些，然而解剖图不是美术，实物是那么样的，我们没法切换它。现在我给你改好了，以后你要全照着黑板上那样的画。”<br>但是我还不服气，口头答应着，心里却想道：<br>“图还是我画的不错；至于实在的情形，我心里自然记得的。”<br>学年试验完毕之后，我便到东京玩了一夏天，秋初再回学校，成绩早已发表了，同学一百余人之中，我在中间，不过是没有落第。这回藤野先生所担任的功课，是解剖实习和局部解剖学。<br>解剖实习了大概一星期，他又叫我去了，很高兴地，仍用了极有抑扬的声调对我说道：<br>“我因为听说中国人是很敬重鬼的，所以很担心，怕你不肯解剖尸体。现在总算放心了，没有这回事。”<br>但他也偶有使我很为难的时候。他听说中国的女人是裹脚的，但不知道详细，所以要问我怎么裹法，足骨变成怎样的畸形，还叹息道，“总要看一看才知道。究竟是怎么一回事呢?”<br>有一天，本级的学生会干事到我寓里来了，要借我的讲义看。我检出来交给他们，却只翻检了一通，并没有带走。但他们一走，邮差就送到一封很厚的信，拆开看时，第一句是：<br>“你改悔罢！”<br>这是《新约》上的句子罢，但经托尔斯泰新近引用过的。其时正值日俄战争，托老先生便写了一封给俄国和日本的皇帝的信，开首便是这一句。日本报纸上很斥责他的不逊，爱国青年也愤然，然而暗地里却早受了他的影响了。其次的话，大略是说上年解剖学试验的题目，是藤野先生在讲义上做了记号，我预先知道的，所以能有这样的成绩。末尾是匿名。<br>我这才回忆到前几天的一件事。因为要开同级会，干事便在黑板上写广告，末一句是“请全数到会勿漏为要”，而且在“漏”字旁边加了一个圈。我当时虽然觉到圈得可笑，但是毫不介意，这回才悟出那字也在讥刺我了，犹严我得了教员漏泄出来的题目。<br>我便将这事告知了藤野先生；有几个和我熟识的同学也很不平，一同去诘责干事托辞检查的无礼，并且要求他们将检查的结果，发表出来。终于这流言消灭了，干事却又竭力运动，要收回那一封匿名信去。结末是我便将这托尔斯泰式的信退还了他们。<br>中国是弱国，所以中国人当然是低能儿，分数在六十分以上，便不是自己的能力了：也无怪他们疑惑。但我接着便有参观枪毙中国人的命运了。第二年添教霉菌学，细菌的形状是全用电影来显示的，一段落已完而还没有到下课的时候，便影几片时事的片子，自然都是日本战胜俄国的情形。但偏有中国人夹在里边：给俄国人当侦探，被日本军捕获，要枪毙了，围着看的也是一群中国人；在讲堂里的还有一个我。<br>“万岁！”他们都拍掌欢呼起来。<br>这种欢呼，是每看一片都有的，但在我，这一声却特别听得刺耳。此后回到中国来，我看见那些闲看枪毙犯人的人们，他们也何尝不酒醉似的喝采，——呜呼，无法可想！但在那时那地，我的意见却变化了。<br>到第二学年的终结，我便去寻藤野先生，告诉他我将不学医学，并且离开这仙台。他的脸色仿佛有些悲哀，似乎想说话，但竟没有说。<br>“我想去学生物学，先生教给我的学问，也还有用的。”其实我并没有决意要学生物学，因为看得他有些凄然，便说了一句慰安他的谎话。<br>“为医学而教的解剖学之类，怕于生物学也没有什么大帮助。”他叹息说。<br>将走的前几天，他叫我到他家里去，交给我一张照相，后面写着两个字道：“惜别”，还说希望将我的也送他。但我这时适值没有照相了；他便叮嘱我将来照了寄给他，并且时时通信告诉他此后的状况。<br>我离开仙台之后，就多年没有照过相，又因为状况也无聊，说起来无非使他失望，便连信也怕敢写了。经过的年月一多，话更无从说起，所以虽然有时想写信，却又难以下笔，这样的一直到现在，竟没有寄过一封信和一张照片。从他那一面看起来，是一去之后，杳无消息了。<br>但不知怎地，我总还时时记起他，在我所认为我师的之中，他是最使我感激的，给我鼓励的一个。有时我常常想：他的对于我的热心的希望，不倦的教诲，小而言之，是为中国，就是希望中国有新的医学；大而言之，是为学术，就是希望新的医学传到中国去。他的性格，在我的眼里和心里是伟大的，虽然他的姓名并不为许多人所知道。<br>他所更改的讲义，我曾经订成三厚本，收藏着的，将作为永久的纪念。不幸七年前迁居的时候，中途毁坏了一口书箱，失去半箱书，恰巧这讲义也遗失在内了。责成运送局去找寻，寂无回信。只有他的照相至今还挂在我北京寓居的东墙上，书桌对面。每当夜间疲倦，正想偷懒时，仰面在灯光中瞥见他黑瘦的面貌，似乎正要说出抑扬顿挫的话来，便使我忽又良心发现，而且增加勇气了，于是点上一枝烟，再继续写些为“正人君子”之流所深恶痛疾的文字。<br>十月十二日。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[题记]]></title>
      <url>http://www.wrran.com/blog/2018/02/26/people-say/luxun/180226-01/</url>
      <content type="html"><![CDATA[<blockquote><p>我却觉得周围的空气太寒冽了，我自说我的话，所以反而称之曰《热风》。</p></blockquote><a id="more"></a><p>@鲁迅</p><p>现在有谁经过西长安街一带的，总可以看见几个衣履破碎的穷苦孩子叫卖报纸。记得三四年前，在他们身上偶而还剩有制服模样的残余；再早，就更体面，简直是童子军的拟态。<br>那是中华民国八年，即西历一九一九年，五月四日北京学生对于山东问题的示威运动以后，因为当时散传单的是童子军，不知怎的竟惹了投机家的注意，童子军式的卖报孩子就出现了。其年十二月，日本公使小幡酉吉抗议排日运动，情形和今年大致相同；只是我们的卖报孩子却穿破了第一身新衣以后，便不再做，只见得年不如年地显出穷苦。<br>我在《新青年》的《随感录》中做些短评，还在这前一年，因为所评论的多是小问题，所以无可道，原因也大都忘却了。但就现在的文字看起来，除几条泛论之外，有的是对于扶乩，静坐，打拳而发的；有的是对于所谓“保存国粹”而发的；有的是对于那时旧官僚的以经验自豪而发的；有的是对于上海《时报》的讽刺画而发的。记得当时的《新青年》是正在四面受敌之中，我所对付的不过一小部分；其他大事，则本志具在，无须我多言。<br>五四运动之后，我没有写什么文字，现在已经说不清是不做，还是散失消灭的了。但那时革新运动，表面上却颇有些成功，于是主张革新的也就蓬蓬勃勃，而且有许多还就是在先讥笑，嘲笑《新青年》的人们，但他们却是另起了一个冠冕堂皇的名目：新文化运动。这也就是后来又将这名目反套在《新青年》身上，而又加以嘲骂讥笑的，正如笑骂白话文的人，往往自称最得风气之先，早经主张过白话文一样。<br>再后，更无可道了。只记得一九二一年中的一篇是对于所谓“虚无哲学”而发的；而后一年则大抵对于上海之所谓“国学家”而发的，不知怎的那时忽而有许多人都自命为国学家了。<br>自《新青年》出版以来，一切应之而嘲骂改革，后来又赞成改革，后来又嘲骂改革者，现在拟态的制服早已破碎，显出自身的本相来了，所谓“事实胜于雄辩”，又何待于纸笔喉舌的批评。所以我的应时的浅薄的文字，也应该置之不顾，一任其消灭的；但几个朋友却以为现状和那时并没有大两样，也还可以存留，给我编辑起来了。这正是我所悲哀的。我以为凡对于时弊的攻击，文字须与时弊同时灭亡，因为这正如白血轮之酿成疮疖一般，倘非自身也被排除，则当它的生命的存留中，也即证明着病菌尚在。<br>但如果凡我所写，的确都是冷的呢?则它的生命原来就没有，更谈不到中国的病证究竟如何。然而，无情的冷嘲和有情的讽刺相去本不及一张纸，对于周围的感受和反应，又大概是所谓“如鱼饮水冷暖自知”的；我却觉得周围的空气太寒冽了，我自说我的话，所以反而称之曰《热风》。<br>一九二五年十一月三日之夜，鲁迅。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matplotlib - 常用方法及示例]]></title>
      <url>http://www.wrran.com/blog/2018/02/11/cheatsheet/reference/matplotlib/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Matplotlib</code> tries to make easy things easy and hard things possible.</p></blockquote><a id="more"></a><h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><table><thead><tr><th style="text-align:left">Name</th><th style="text-align:left">Abstract</th><th style="text-align:left">URL</th></tr></thead><tbody><tr><td style="text-align:left">Colormaps in Matplotlib</td><td style="text-align:left">How (and why) to choose a particular colormap.</td><td style="text-align:left"><a href="https://matplotlib.org/tutorials/colors/colormaps.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Text Introduction</td><td style="text-align:left">Introduction to plottting and working with text in Matplotlib.</td><td style="text-align:left"><a href="https://matplotlib.org/tutorials/text/text_intro.html" target="_blank" rel="noopener">Details</a></td></tr></tbody></table><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><table><thead><tr><th style="text-align:left">Name</th><th style="text-align:left">Content</th><th style="text-align:left">URL</th></tr></thead><tbody><tr><td style="text-align:left">Plots with different scales</td><td style="text-align:left">Demonstrate how to do two plots on the same axes with different left and right scales.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/api/two_scales.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Pyplot Annotate</td><td style="text-align:left">-</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/pyplots/pyplot_annotate.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Boxplot Demo</td><td style="text-align:left">Example boxplot code</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/pyplots/boxplot_demo.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Subplots Adjust</td><td style="text-align:left">Adjusting the spacing of margins and subplots using <code>matplotlib.pyplot.subplots_adjust</code>.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/subplots_axes_and_figures/subplots_adjust.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Multiple subplots</td><td style="text-align:left">Simple demo with multiple subplots.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/subplots_axes_and_figures/subplot.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Figure Title</td><td style="text-align:left">Create a figure with separate subplot titles and a centered figure title.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/subplots_axes_and_figures/figure_title.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Axes Demo</td><td style="text-align:left">Example use of <code>plt.axes</code> to create inset axes within the main plot axes.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/subplots_axes_and_figures/axes_demo.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Color Demo</td><td style="text-align:left"><code>matplotlib</code> gives you 5 ways to specify colors.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/color/color_demo.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Box plot vs. violin plot comparison</td><td style="text-align:left">Demonstrate the differences between box-plots and violin-plots.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/statistics/boxplot_vs_violin.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Box plots with custom fill colors</td><td style="text-align:left">Demonstrate how to create two types of box-plots (rectangular and notched).</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/statistics/boxplot_color.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Hexbin Demo</td><td style="text-align:left">Plotting hexbins with Matplotlib.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/statistics/hexbin_demo.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Scatter Hist</td><td style="text-align:left">-</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/lines_bars_and_markers/scatter_hist.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Eventplot Demo</td><td style="text-align:left">An eventplot showing sequences of events with various line properties.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/lines_bars_and_markers/eventplot_demo.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Line Collection</td><td style="text-align:left">Plotting lines with Matplotlib.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/shapes_and_collections/line_collection.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Auto-wrapping text</td><td style="text-align:left">Matplotlib can wrap text automatically. But sometimes, it goes wrong.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/text_labels_and_annotations/autowrap.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">3D animation</td><td style="text-align:left">An animated plot in 3D.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/animation/simple_3danim.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">2D and 3D Axes in same Figure</td><td style="text-align:left">This example shows a how to plot a 2D and 3D plot on the same figure.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/mplot3d/mixed_subplots.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Plot 2D data on 3D plot</td><td style="text-align:left">Demonstrates using ax.plot’s zdir keyword to plot 2D data on selective axes of a 3D plot.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/mplot3d/2dcollections3d.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Custom Ticker1</td><td style="text-align:left">The new ticker code was designed to explicitly support user customized ticking.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/ticks_and_spines/custom_ticker1.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Automatically setting tick labels</td><td style="text-align:left">Setting the behavior of the auto-placement.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/ticks_and_spines/auto_ticks.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Setting tick labels from a list of values</td><td style="text-align:left">Read it, if you want to allow <code>matplotlib</code> to dynamically choose the number of ticks and their spacing.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/ticks_and_spines/tick_labels_from_values.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Date Index Formatter</td><td style="text-align:left">When plotting daily data, a frequent request is to plot the data ignoring skips.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/ticks_and_spines/date_index_formatter.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Tick formatting using the ScalarFromatter</td><td style="text-align:left">The example shows use of <code>ScalarFormatter</code> with different settings.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/ticks_and_spines/scalarformatter.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Textbox</td><td style="text-align:left">Allowing text input with the TextBox widget.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/widgets/textbox.html" target="_blank" rel="noopener">Details</a></td></tr></tbody></table><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><table><thead><tr><th style="text-align:left">Name</th><th style="text-align:left">Content</th><th style="text-align:left">URL</th></tr></thead><tbody><tr><td style="text-align:left">Visiualizing named colors</td><td style="text-align:left">Simple plot example with the named colors and its viual representation</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/color/named_colors.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Line-style Reference</td><td style="text-align:left">Reference for line-styles included with Matplotlib</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/lines_bars_and_markers/line_styles_reference.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Linestyles</td><td style="text-align:left">This examples showcases different linestyles copying those of Tikz/PGF.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/lines_bars_and_markers/linestyles.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Marker filling-styles</td><td style="text-align:left">Reference for marker fill-styles included with Matplotlib.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/lines_bars_and_markers/marker_fillstyle_reference.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Filled and unfilled-marker types</td><td style="text-align:left">Reference for filled- and unfilled-marker types included with Matplotlib.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/lines_bars_and_markers/marker_reference.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Reference for matplotlib artists</td><td style="text-align:left">This example displays several of matplotlib’s graphics primitives (artists) drawn using matplotlib API.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/shapes_and_collections/artist_reference.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Tick formatters</td><td style="text-align:left">Show the different tick formatters</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/ticks_and_spines/tick-formatters.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Tick locators</td><td style="text-align:left">Show the different tick locators.</td><td style="text-align:left"><a href="https://matplotlib.org/gallery/ticks_and_spines/tick-locators.html" target="_blank" rel="noopener">Details</a></td></tr><tr><td style="text-align:left">Text properties and layout</td><td style="text-align:left">Controlling properties of text and its layout with Matplotlib.</td><td style="text-align:left"><a href="https://matplotlib.org/tutorials/text/text_props.html" target="_blank" rel="noopener">Details</a></td></tr></tbody></table><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_named_colors_001.png" alt="Visiualizing named colors" title="Visiualizing named colors"></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_line_styles_reference_001.png" alt="Line-style reference" title="Line-style reference"></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_marker_fillstyle_reference_001.png" alt="Marker filling-styles" title="Marker filling-styles"></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_linestyles_001.png" alt="Marker filling-styles" title="Marker filling-styles"></p><p><img src="https://matplotlib.org/gallery/lines_bars_and_markers/marker_reference.html" alt="Filled and unfilled-marker types" title="Filled and unfilled-marker types"></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_marker_reference_001.png" alt="Un-filled Markers" title="Un-filled Markers"></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_marker_reference_002.png" alt="Fill Markers" title="Fill Markers"></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_artist_reference_001.png" alt="Matplotlib Artists" title="Matplotlib Artists"></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_tick-formatters_001.png" alt="Tick formatters" title="Tick formatters"></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet/matplotlib/sphx_glr_tick-locators_001.png" alt="Tick Locators" title="Tick Locators"></p><h1 id="More"><a href="#More" class="headerlink" title="More"></a>More</h1><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.show.html#matplotlib.pyplot.show" title="`matplotlib.pyplot.show` - Matplotlib" target="_blank" rel="noopener"><code>matplotlib.pyplot.show</code> - Matplotlib</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> reference </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jupyter常用魔法命令]]></title>
      <url>http://www.wrran.com/blog/2018/01/30/cheatsheet/reference/jupyter-magic-cmd/</url>
      <content type="html"><![CDATA[<blockquote><p>To Jupyter users: <code>Magics</code> are specific to and provided by the IPython kernel.</p></blockquote><a id="more"></a><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%pdef</code></td><td style="text-align:left">Print the call signature for any callable object.</td></tr><tr><td style="text-align:center"><code>%pdoc</code></td><td style="text-align:left">Print the docstring for an object.</td></tr><tr><td style="text-align:center"><code>%pfile</code></td><td style="text-align:left">Print (or run through pager) the file where an object is defined.</td></tr><tr><td style="text-align:center"><code>%pinfo</code></td><td style="text-align:left">Provide detailed information about an object. (<code>?</code> is short-hand.)</td></tr><tr><td style="text-align:center"><code>%pinfo2</code></td><td style="text-align:left">Provide extra detailed information about an object. (<code>??</code> is short-hand.)</td></tr><tr><td style="text-align:center"><code>%pprint</code></td><td style="text-align:left">Toggle pretty printing on/off.</td></tr><tr><td style="text-align:center"><code>%precision</code></td><td style="text-align:left">Set floating point precision for pretty printing.</td></tr></tbody></table><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%prun</code></td><td style="text-align:left">Run a statement through the python code profiler.</td></tr><tr><td style="text-align:center"><code>%time</code></td><td style="text-align:left">Time execution of a Python statement or expression.</td></tr><tr><td style="text-align:center"><code>%timeit</code></td><td style="text-align:left">Time execution of a Python statement or expression</td></tr></tbody></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%recall</code></td><td style="text-align:left">Repeat a command, or get command to input line for editing.</td></tr><tr><td style="text-align:center"><code>%reset</code></td><td style="text-align:left">Resets the namespace by removing all names defined by the user and In[] or Out[].</td></tr><tr><td style="text-align:center"><code>%reset_selective</code></td><td style="text-align:left">Resets the namespace by removing names defined by the user.</td></tr><tr><td style="text-align:center"><code>%who</code></td><td style="text-align:left">Print all interactive variables, with some minimal formatting.</td></tr><tr><td style="text-align:center"><code>%who_ls</code></td><td style="text-align:left">Return a sorted list of all interactive variables.</td></tr><tr><td style="text-align:center"><code>%whos</code></td><td style="text-align:left">Like %who, but gives some extra information about each variable</td></tr><tr><td style="text-align:center"><code>%xdel</code></td><td style="text-align:left">Delete a variable, trying to clear it from anywhere that IPython’s machinery has references to it.</td></tr></tbody></table><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%logstart</code></td><td style="text-align:left">Start logging anywhere in a session.</td></tr><tr><td style="text-align:center"><code>%logon</code></td><td style="text-align:left">Restart logging.</td></tr><tr><td style="text-align:center"><code>%logoff</code></td><td style="text-align:left">Temporarily stop logging.</td></tr><tr><td style="text-align:center"><code>%logstate</code></td><td style="text-align:left">Print the status of the logging system.</td></tr><tr><td style="text-align:center"><code>%logstop</code></td><td style="text-align:left">Fully stop logging and close log file.</td></tr></tbody></table><h2 id="运行外部指令"><a href="#运行外部指令" class="headerlink" title="运行外部指令"></a>运行外部指令</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%load</code></td><td style="text-align:left">Load code into the current frontend.</td></tr><tr><td style="text-align:center"><code>%loadpy</code></td><td style="text-align:left">Alias of %load.</td></tr><tr><td style="text-align:center"><code>%run</code></td><td style="text-align:left">Run the named file inside IPython as a program.</td></tr><tr><td style="text-align:center"><code>%sx</code></td><td style="text-align:left">Shell execute - run shell command and capture output (!! is short-hand).</td></tr><tr><td style="text-align:center"><code>%killbgscripts</code></td><td style="text-align:left">Kill all BG processes started by %%script and its family.</td></tr></tbody></table><h2 id="输出文件"><a href="#输出文件" class="headerlink" title="输出文件"></a>输出文件</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%save</code></td><td style="text-align:left">Save a set of lines or a macro to a given filename.</td></tr></tbody></table><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%env</code></td><td style="text-align:left">Get, set, or list environment variables.</td></tr><tr><td style="text-align:center"><code>%set_env</code></td><td style="text-align:left">Set environment variables.</td></tr></tbody></table><h2 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%cd</code></td><td style="text-align:left">Change the current working directory.</td></tr><tr><td style="text-align:center"><code>%pwd</code></td><td style="text-align:left">Return the current working directory path.</td></tr></tbody></table><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%debug</code></td><td style="text-align:left">Activate the interactive debugger.</td></tr><tr><td style="text-align:center"><code>%pdb</code></td><td style="text-align:left">Control the automatic calling of the pdb interactive debugger.</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%lsmagic</code></td><td style="text-align:left">List currently available magic functions.</td></tr><tr><td style="text-align:center"><code>%macro</code></td><td style="text-align:left">Define a macro for future re-execution.</td></tr><tr><td style="text-align:center"><code>%matplotlib</code></td><td style="text-align:left">Set up matplotlib to work interactively.</td></tr><tr><td style="text-align:center"><code>%pylab</code></td><td style="text-align:left">Load numpy and matplotlib to work interactively.</td></tr></tbody></table><h2 id="Cell-Magics"><a href="#Cell-Magics" class="headerlink" title="Cell Magics"></a>Cell Magics</h2><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><blockquote><p>To Jupyter users: Magics are specific to and provided by the IPython kernel. Whether magics are available on a kernel is a decision that is made by the kernel developer on a per-kernel basis. To work properly, Magics must use a syntax element which is not valid in the underlying language. For example, the IPython kernel uses the % syntax element for magics as % is not a valid unary operator in Python. While, the syntax element has meaning in other languages.<br>@IPython</p></blockquote><p><strong>Tips</strong>: Details go like <code>http://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-{name}</code>. For example, the detailed url of <code>%alias</code> is <code>http://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-alias</code>, and the detailed url of <code>%alias_magic</code> is <code>http://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-alias_magic</code>.</p><h1 id="Line-Magics"><a href="#Line-Magics" class="headerlink" title="Line Magics"></a>Line Magics</h1><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%alias</code></td><td style="text-align:left">Define an alias for a system command.</td></tr><tr><td style="text-align:center"><code>%alias_magic</code></td><td style="text-align:left">Create an alias for existing line or cell magic.</td></tr><tr><td style="text-align:center"><code>%autocall</code></td><td style="text-align:left">Make functions callable without having to type parentheses.</td></tr><tr><td style="text-align:center"><code>%automagic</code></td><td style="text-align:left">Make magic functions callable without having to type the initial %.</td></tr><tr><td style="text-align:center"><code>%bookmark</code></td><td style="text-align:left">Manage IPython’s bookmark system.</td></tr><tr><td style="text-align:center"><code>%cd</code></td><td style="text-align:left">Change the current working directory.</td></tr><tr><td style="text-align:center"><code>%colors</code></td><td style="text-align:left">Switch color scheme for prompts, info system and exception handlers.</td></tr><tr><td style="text-align:center"><code>%config</code></td><td style="text-align:left">configure IPython</td></tr><tr><td style="text-align:center"><code>%debug</code></td><td style="text-align:left">Activate the interactive debugger.</td></tr><tr><td style="text-align:center"><code>%dhist</code></td><td style="text-align:left">Print your history of visited directories.</td></tr><tr><td style="text-align:center"><code>%dirs</code></td><td style="text-align:left">Return the current directory stack.</td></tr><tr><td style="text-align:center"><code>%doctest_mode</code></td><td style="text-align:left">Toggle doctest mode on and off.</td></tr><tr><td style="text-align:center"><code>%edit</code></td><td style="text-align:left">Bring up an editor and execute the resulting code.</td></tr><tr><td style="text-align:center"><code>%env</code></td><td style="text-align:left">Get, set, or list environment variables.</td></tr><tr><td style="text-align:center"><code>%gui</code></td><td style="text-align:left">Enable or disable IPython GUI event loop integration.</td></tr><tr><td style="text-align:center"><code>%history</code></td><td style="text-align:left">Print input history (_i<n>variables), with most recent last.</n></td></tr><tr><td style="text-align:center"><code>%killbgscripts</code></td><td style="text-align:left">Kill all BG processes started by %%script and its family.</td></tr><tr><td style="text-align:center"><code>%load</code></td><td style="text-align:left">Load code into the current frontend.</td></tr><tr><td style="text-align:center"><code>%load_ext</code></td><td style="text-align:left">Load an IPython extension by its module name.</td></tr><tr><td style="text-align:center"><code>%loadpy</code></td><td style="text-align:left">Alias of %load.</td></tr><tr><td style="text-align:center"><code>%logoff</code></td><td style="text-align:left">Temporarily stop logging.</td></tr><tr><td style="text-align:center"><code>%logon</code></td><td style="text-align:left">Restart logging.</td></tr><tr><td style="text-align:center"><code>%logstart</code></td><td style="text-align:left">Start logging anywhere in a session.</td></tr><tr><td style="text-align:center"><code>%logstate</code></td><td style="text-align:left">Print the status of the logging system.</td></tr><tr><td style="text-align:center"><code>%logstop</code></td><td style="text-align:left">Fully stop logging and close log file.</td></tr><tr><td style="text-align:center"><code>%lsmagic</code></td><td style="text-align:left">List currently available magic functions.</td></tr><tr><td style="text-align:center"><code>%macro</code></td><td style="text-align:left">Define a macro for future re-execution.</td></tr><tr><td style="text-align:center"><code>%magic</code></td><td style="text-align:left">Print information about the magic function system.</td></tr><tr><td style="text-align:center"><code>%matplotlib</code></td><td style="text-align:left">Set up matplotlib to work interactively.</td></tr><tr><td style="text-align:center"><code>%notebook</code></td><td style="text-align:left">Export and convert IPython notebooks.</td></tr><tr><td style="text-align:center"><code>%page</code></td><td style="text-align:left">Pretty print the object and display it through a pager.</td></tr><tr><td style="text-align:center"><code>%pastebin</code></td><td style="text-align:left">Upload code to Github’s Gist paste bin, returning the URL.</td></tr><tr><td style="text-align:center"><code>%pdb</code></td><td style="text-align:left">Control the automatic calling of the pdb interactive debugger.</td></tr><tr><td style="text-align:center"><code>%pdef</code></td><td style="text-align:left">Print the call signature for any callable object.</td></tr><tr><td style="text-align:center"><code>%pdoc</code></td><td style="text-align:left">Print the docstring for an object.</td></tr><tr><td style="text-align:center"><code>%pfile</code></td><td style="text-align:left">Print (or run through pager) the file where an object is defined.</td></tr><tr><td style="text-align:center"><code>%pinfo</code></td><td style="text-align:left">Provide detailed information about an object.</td></tr><tr><td style="text-align:center"><code>%pinfo2</code></td><td style="text-align:left">Provide extra detailed information about an object.</td></tr><tr><td style="text-align:center"><code>%pip</code></td><td style="text-align:left">Intercept usage of pip in IPython and direct user to run command outside of IPython.</td></tr><tr><td style="text-align:center"><code>%popd</code></td><td style="text-align:left">Change to directory popped off the top of the stack.</td></tr><tr><td style="text-align:center"><code>%pprint</code></td><td style="text-align:left">Toggle pretty printing on/off.</td></tr><tr><td style="text-align:center"><code>%precision</code></td><td style="text-align:left">Set floating point precision for pretty printing.</td></tr><tr><td style="text-align:center"><code>%prun</code></td><td style="text-align:left">Run a statement through the python code profiler.</td></tr><tr><td style="text-align:center"><code>%psearch</code></td><td style="text-align:left">Search for object in namespaces by wildcard.</td></tr><tr><td style="text-align:center"><code>%psource</code></td><td style="text-align:left">Print (or run through pager) the source code for an object.</td></tr><tr><td style="text-align:center"><code>%pushd</code></td><td style="text-align:left">Place the current dir on stack and change directory.</td></tr><tr><td style="text-align:center"><code>%pwd</code></td><td style="text-align:left">Return the current working directory path.</td></tr><tr><td style="text-align:center"><code>%pycat</code></td><td style="text-align:left">Show a syntax-highlighted file through a pager.</td></tr><tr><td style="text-align:center"><code>%pylab</code></td><td style="text-align:left">Load numpy and matplotlib to work interactively.</td></tr><tr><td style="text-align:center"><code>%quickref</code></td><td style="text-align:left">Show a quick reference sheet</td></tr><tr><td style="text-align:center"><code>%recall</code></td><td style="text-align:left">Repeat a command, or get command to input line for editing.</td></tr><tr><td style="text-align:center"><code>%rehashx</code></td><td style="text-align:left">Update the alias table with all executable files in $PATH.</td></tr><tr><td style="text-align:center"><code>%reload_ext</code></td><td style="text-align:left">Reload an IPython extension by its module name.</td></tr><tr><td style="text-align:center"><code>%rerun</code></td><td style="text-align:left">Re-run previous input</td></tr><tr><td style="text-align:center"><code>%reset</code></td><td style="text-align:left">Resets the namespace by removing all names defined by the user and In[] or Out[].</td></tr><tr><td style="text-align:center"><code>%reset_selective</code></td><td style="text-align:left">Resets the namespace by removing names defined by the user.</td></tr><tr><td style="text-align:center"><code>%run</code></td><td style="text-align:left">Run the named file inside IPython as a program.</td></tr><tr><td style="text-align:center"><code>%save</code></td><td style="text-align:left">Save a set of lines or a macro to a given filename.</td></tr><tr><td style="text-align:center"><code>%set_env</code></td><td style="text-align:left">Set environment variables.</td></tr><tr><td style="text-align:center"><code>%sx</code></td><td style="text-align:left">Shell execute - run shell command and capture output (!! is short-hand).</td></tr><tr><td style="text-align:center"><code>%system</code></td><td style="text-align:left">Shell execute - run shell command and capture output (!! is short-hand).</td></tr><tr><td style="text-align:center"><code>%tb</code></td><td style="text-align:left">Print the last traceback with the currently active exception mode.</td></tr><tr><td style="text-align:center"><code>%time</code></td><td style="text-align:left">Time execution of a Python statement or expression.</td></tr><tr><td style="text-align:center"><code>%timeit</code></td><td style="text-align:left">Time execution of a Python statement or expression</td></tr><tr><td style="text-align:center"><code>%unalias</code></td><td style="text-align:left">Remove an alias</td></tr><tr><td style="text-align:center"><code>%unload_ext</code></td><td style="text-align:left">Unload an IPython extension by its module name.</td></tr><tr><td style="text-align:center"><code>%who</code></td><td style="text-align:left">Print all interactive variables, with some minimal formatting.</td></tr><tr><td style="text-align:center"><code>%who_ls</code></td><td style="text-align:left">Return a sorted list of all interactive variables.</td></tr><tr><td style="text-align:center"><code>%whos</code></td><td style="text-align:left">Like %who, but gives some extra information about each variable</td></tr><tr><td style="text-align:center"><code>%xdel</code></td><td style="text-align:left">Delete a variable, trying to clear it from anywhere that IPython’s machinery has references to it.</td></tr><tr><td style="text-align:center"><code>%xmode</code></td><td style="text-align:left">Switch modes for the exception handlers.</td></tr></tbody></table><h1 id="Cell-Magics-1"><a href="#Cell-Magics-1" class="headerlink" title="Cell Magics"></a>Cell Magics</h1><table><thead><tr><th style="text-align:center">Magic</th><th style="text-align:left">Meaning</th></tr></thead><tbody><tr><td style="text-align:center"><code>%%bash</code></td><td style="text-align:left">Run cells with bash in a subprocess.</td></tr><tr><td style="text-align:center"><code>%%capture</code></td><td style="text-align:left">Run the cell, capturing stdout, stderr, and IPython’s rich display() calls.</td></tr><tr><td style="text-align:center"><code>%%html</code></td><td style="text-align:left">Render the cell as a block of HTML.</td></tr><tr><td style="text-align:center"><code>%%javascript</code></td><td style="text-align:left">Run the cell block of Javascript code.</td></tr><tr><td style="text-align:center"><code>%%js</code></td><td style="text-align:left">Run the cell block of Javascript code.</td></tr><tr><td style="text-align:center"><code>%%latex</code></td><td style="text-align:left">Render the cell as a block of latex</td></tr><tr><td style="text-align:center"><code>%%markdown</code></td><td style="text-align:left">Render the cell as Markdown text block</td></tr><tr><td style="text-align:center"><code>%%perl</code></td><td style="text-align:left">Run cells with perl in a subprocess.</td></tr><tr><td style="text-align:center"><code>%%pypy</code></td><td style="text-align:left">Run cells with pypy in a subprocess.</td></tr><tr><td style="text-align:center"><code>%%python</code></td><td style="text-align:left">Run cells with python in a subprocess.</td></tr><tr><td style="text-align:center"><code>%%python2</code></td><td style="text-align:left">Run cells with python2 in a subprocess.</td></tr><tr><td style="text-align:center"><code>%%python3</code></td><td style="text-align:left">Run cells with python3 in a subprocess.</td></tr><tr><td style="text-align:center"><code>%%ruby</code></td><td style="text-align:left">Run cells with ruby in a subprocess.</td></tr><tr><td style="text-align:center"><code>%%script</code></td><td style="text-align:left">Run a cell via a shell command</td></tr><tr><td style="text-align:center"><code>%%sh</code></td><td style="text-align:left">Run cells with sh in a subprocess.</td></tr><tr><td style="text-align:center"><code>%%svg</code></td><td style="text-align:left">Render the cell as an SVG literal</td></tr><tr><td style="text-align:center"><code>%%writefile</code></td><td style="text-align:left">Write the contents of the cell to a file.</td></tr></tbody></table><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p><a href="http://ipython.readthedocs.io/en/stable/interactive/magics.html" target="_blank" rel="noopener">Built-in Magic Commands - IPython</a><br><a href="https://segmentfault.com/a/1190000010758722" target="_blank" rel="noopener">Jupyter 魔术命令(magic commands)</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> reference </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> jupyter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[淡淡的血痕中]]></title>
      <url>http://www.wrran.com/blog/2018/01/30/people-say/luxun/180130-01/</url>
      <content type="html"><![CDATA[<blockquote><p>记念几个死者和生者和未生者</p></blockquote><a id="more"></a><p>@鲁迅</p><p>目前的造物者，还是一个怯弱者。<br>他暗暗地使天地变异，却不敢毁灭一个这地球;暗暗地使生物衰亡，却不敢长存一切尸体;暗暗地使人类流血，却不敢使血色永远鲜秾;暗暗地使人类受苦，却不敢使人类永远记得。<br>他专为他的同类——人类中的怯弱者——设想，用废墟荒坟来衬托华屋，用时光来冲淡苦痛和血痕;日日斟出一杯微甘的苦酒，不太少，不太多，以能微醉为度，递给人间，使饮者可以哭，可以歌，也如醒，也如醉，若有知，若无知，也欲死，也欲生。他必须使一切也欲生;他还没有灭尽人类的勇气。<br>几片废墟和几个荒坟散在地上，映以淡淡的血痕，人们都在其间咀嚼着人我的渺茫的悲苦。但是不肯吐弃，以为究竟胜于空虚，各各自称为“天之民”，以作咀嚼着人我的渺茫的悲苦的辩解，而且悚息着静待新的悲苦的到来，新的，这就使他们恐惧，而又渴欲相遇。<br>这都是造物主的良民。他就需要这样。<br>叛逆的猛士出于人间;他屹立着，洞见一切已改和现有的废墟和荒坟，记得一切深广和久远的苦痛，正视一切重叠淤积的凝血，深知一切已死，方生，将生和未生。他看透了造化的把戏;他将要起来使人类苏生，或者使人类灭尽，这些造物主的良民们。<br>造物主，怯弱者，羞惭了，于是伏藏。天地在猛士的眼中于是变色。<br>一九二六年四月八日</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在深度学习时代用HowNet搞事情]]></title>
      <url>http://www.wrran.com/blog/2018/01/28/people-say/180128-01/</url>
      <content type="html"><![CDATA[<blockquote><p>Knowlegde is power.</p></blockquote><a id="more"></a><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://zhuanlan.zhihu.com/p/32688983?utm_medium=social&amp;utm_source=wechat_timeline&amp;from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">在深度学习时代用HowNet搞事情 - 刘知远</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[求乞者]]></title>
      <url>http://www.wrran.com/blog/2018/01/26/people-say/luxun/180126-01/</url>
      <content type="html"><![CDATA[<blockquote><p>微风起来，四面都是灰土。</p></blockquote><a id="more"></a><p>@鲁迅</p><p>我顺着剥落的高墙走路，踏着松的灰土。另外有几个人，各自走路。微风起来，露在墙头的高树的枝条带着还未干枯的叶子在我头上摇动。<br>微风起来，四面都是灰土。<br>一个孩子向我求乞，也穿着夹衣，也不见得悲戚，而拦着磕头，追着哀呼。<br>我厌恶他的声调，态度。我憎恶他并不悲哀，近于儿戏;我烦厌他这追着哀呼。<br>我走路。另外有几个人各自走路。微风起来，四面都是灰土。<br>一个孩子想我求乞，也穿着夹衣，也不见得悲戚，但是哑的，摊开手，装着手势。<br>我就憎恶他这手势。而且，他或者并不哑，这不过是一种求乞的法子。<br>我不布施，我无布施心，我但居布施者之上，给与烦腻，疑心，憎恶。<br>我顺着倒败的泥墙走路，断砖叠在墙缺口，墙里面没有什么。微风起来，送秋寒穿透我的夹衣;四面都是灰土。<br>我想着我将用什么方法求乞;发声，用怎样声调?装哑，用怎样手势?……<br>另外有几个人各自走路。<br>我将得不到布施，得不到布施心;我将得到自居于布施之上者的烦腻，疑心，憎恶。<br>我将用无所为和沉默求乞……<br>我至少将得到虚无。<br>微风起来，四面都是灰土。另外有几个人各自走路。<br>灰土，灰土，……<br>…………<br>灰土……<br>一九二四年九月二十四日。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node2vec - Scalable Feature Learning for Networks]]></title>
      <url>http://www.wrran.com/blog/2018/01/22/note/paper-reading/graph%20representation/2018-01-22/</url>
      <content type="html"><![CDATA[<blockquote><p>无为而治</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>网络节点的学习主要关注于让最终学习到的表示包含节点之间的关系，而实践中主要依据两方面来度量节点间的相似性：(1)邻近性，即节点在图上的距离越近越相似 (2)同构性，即如果节点周边结构越相近，则两节点之间越相似。<br>node2vec则是使用神经网络来学习网络节点的一种方式，其基本想法源自DeepWalk，对其中的采样部分进行了改良。<br>具体说来，node2vec将网络学习分为了三个关键步骤：数据预处理、节点路径采样、节点表示学习。数据预处理往往由数据集、任务及模型三者共同决定;后两者则是交替进行，换言之，是采样一次路径后就对这些路径上的节点表示进行学习，反复多次，直至所有节点表示都被学习过至少一次。<br>再来详细讨论下，node2vec模型的算法细节。如前所述，考量网络节点相似性时要从两个角度出发。而在实现过程中，最基本的两种手段就是BFS(宽度优先搜素)及DFS(深度优先搜索)。BFS很好的考量了邻近性，因为相近节点BFS出来的节点列表也很相近。而DFS则是实现考量同构性的必然要求，借助这种手段才能更好的考量图中远距离节点是否具有同构性。因此综合使用两种方式才能真正提高网络节点学习得出的表示质量，而这就体现在节点路径采样过程中。</p><h1 id="形式化"><a href="#形式化" class="headerlink" title="形式化"></a>形式化</h1><p>记将学习的网络为$$G=(V,E)$$，而需要我们学习的就是映射函数$$\mathrm{f}: V\mapsto \mathbb{R}^d$$，即将节点表示成$$d$$维的实数向量以便后续任务的处理。换言之，映射函数$$\mathrm{f}$$就是一个大小为$$|V|\times d$$矩阵。对于每一个图上的源节点$$u\in V$$，记$$\mathrm{N}_S(u)\in V$$为通过采样策略$$S$$从节点$$u$$得到的邻居节点。<br>与word2vec中的skip-gram类似，作者希望通过源节点的表示$$\mathrm{f}(u)$$来尽可能最大化预测出邻居节点$$\mathrm{N}<em>S(u)$$的概率，如下式：<br>$$<br>\underset{\mathrm{f}}{\max} \sum</em>{u\in V}\mathrm{log}\ \mathrm{Pr}(\mathrm{N}_S(u)\vert \mathrm{f}(u))<br>$$<br>为了让上式易于计算，作者又做出了如下两点假设：</p><ol><li>条件独立性(Conditional Independence)：指的是观察到特定源节点的表示之后，多个邻居节点的预测是条件独立的，如此可得下式:<br>$$<br>\mathrm{Pr}(\mathrm{N}<em>S(u)\vert\mathrm{f}(u))=\prod</em>{n_i\in\mathrm{N}_S{u}}\mathrm{Pr}(n_i\vert\mathrm{f}(u))<br>$$</li><li>特征对称性(Symmetry in Feature Space)：指的是在特征空间中，源节点与它对应的邻居节点在各自关系中发挥着相同的作用。据此，将条件概率设置为以节点对为单元去进行计算的模式：<br>$$<br>\mathrm{Pr}(n_i\vert\mathrm{f}(u))=\frac{\mathrm{exp}(\mathrm{f}(n_i)\cdot\mathrm{f}(u))}{\sum_{u\in V}\mathrm{exp}(\mathrm{f}(v)\cdot\mathrm{f}(u))}<br>$$</li></ol><p>基于上面两点假设，整体来看需要学习的目标函数就变成了：<br>$$<br>\underset{\mathrm{f}}{\max} \sum_{u\in V}[-\mathrm{log}\ Z_u + \sum_{n_i\in\mathrm{N}_S(u)}\mathrm{f}(n_i)\cdot\mathrm{f}(u)]<br>$$<br>其中，$$Z_u=\sum_{v\in V}\mathrm{exp}(\mathrm{f}(u)\cdot\mathrm{f}(v))$$计算量很大，作者使用负采样的方式来近似。</p><h1 id="采样策略"><a href="#采样策略" class="headerlink" title="采样策略"></a>采样策略</h1><p>鉴于skip-gram框架是源自自然语言处理这样的序列结构数据上的方法，并不十分适合网络结构，更加需要精妙的采样方式，需要综合权衡DFS与BFS。假定当前源节点为$$u$$，随机游走路径长度为$$l$$，记路径中第$$i$$个节点为$$c_i$$。如此，路径最开端的节点$$c_0=u$$，而节点$$c_i$$通过下式的分布采样得到：<br>$$<br>\mathrm{Pr}(c_i=x\vert c_{i-1}=v)=<br>\begin{cases}<br>\frac{\pi_{vx}}{Z} &amp; \text{if } (v,x)\in E\<br>0 &amp; \text{otherwise}<br>\end{cases}<br>$$<br>其中$$\pi_{vx}$$是节点$$v$$与$$x$$之间未归一化的转移概率，而$$Z$$则是用来归一化因子。</p><p>如此通过设计转移概率$$\pi_{vx}$$就可以定制化采样策略了。假定上次采样的路径为$$(t, v)$$，当前采样源节点为$$v$$。下次采样的节点则根据边$$(v,x)$$上的转移概率$$\pi_{vx}$$来决定。作者将其设置为形如$$\pi_{vx}=\alpha_{pq}(t,x)\cdot w_{vx}$$，其中$$w_{vx}$$为图中的静态系数(如在无向图中相连节点间的权重常设为1)，而<br>$$<br>\alpha_{pq}(t, x) =<br>\begin{cases}<br>\frac{1}{p} &amp; \text{if } d_{tx}=0\<br>1 &amp; \text{if } d_{tx}=1\<br>\frac{1}{q} &amp; \text{if } d_{tx}=2<br>\end{cases}<br>$$<br>其中，$$d_{tx}$$表示节点$$t$$和节点$$x$$之间的最短路径，并且设定范围为$${0, 1, 2}$$。值得注意的是，通过上式也可以看出随机采样$$pi_{vx}$$是满足二阶马尔可夫性质的。而$$p$$及$$q$$为人为设定的超参，权衡DFS及BFS等基本搜索策略，讨论如下。</p><p><strong>回溯参数,p</strong>：参数$$p$$控制回溯上一节点的概率。如果将该值设置得偏大(如$$p&gt;\max(q,1)$$)可以保证我们在后续的两个步骤尽量不回溯已经被采样过的节点(除非无其他邻居节点)。该策略适合用于探索或者避免采样中的重复。如果该值被设置得偏小(如$$p&lt;\min(q,1)$$)，则趋向于让随机游走尽量回溯，也意味着采样结果将更加关注于节点$$u$$的局部信息。<br><strong>出入参数,q</strong>：参数$$q$$控制“向内”节点和“向外”节点的搜索权衡。如果$$q&gt;1$$，则随机游走采样得出的节点更接近源节点$$t$$。如此便可以获取到源节点$$t$$附近的局部信息，换言之，此情形下该策略在某种程度上类似BFS。如果$$q&lt;1$$，则随机游走的结果更趋向于远离节点$$t$$。也就是说，在这种情形下，作者实质上实现了随机游走框架类似DFS的搜索策略。另外，随机游走还可以保证高效的性能。</p><p>讨论完超参的语义，我们再来探讨下随机游走相较于纯粹的BFS或DFS策略的优势。简言之，随机游走在时间上与空间上都是高效的。<br>存储图中每个节点的邻接关系(边)需要$$\mathrm{O}(\vert E\vert)$$的空间。对于二阶随机游走策略而言，直接存储节点之间的关联更有效，这需要花费$$\mathrm{O}(a^2\vert V\vert)$$的空间(其中$$a$$为图中节点的平均度数)。<br>再来讨论时间复杂度：在传统的BFS、DFS中，采样过程依赖于源节点;而随机游走策略并不依赖于源节点。更具体的说，针对随机游走路径长度为$$l$$的采样来说，由于随机游走的马尔可夫特性，在采样出一次路径之后，就可以得到$$l-k$$个样本的$$k$$个邻居节点(要求$$l&gt;k$$)。因此，综合来看，每个节点所平摊的时间复杂度为$$\mathrm{O}(\frac{l}{k(l-k)})$$.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://arxiv.org/pdf/1607.00653.pdf" target="_blank" rel="noopener">node2vec: Scalable Feature Learning for Networks</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> graph representation </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> node2vec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Empower Sequence Labeling with Task-Aware Neural Language Model]]></title>
      <url>http://www.wrran.com/blog/2018/01/21/note/paper-reading/2018-01-21/</url>
      <content type="html"><![CDATA[<blockquote><p>重要的是观众，还是哈姆雷特?</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文令我印象深刻的是该文介绍部分的内容，逻辑严密，推理谨慎。值得细读。下面我用自己的语言，刻画下该部分的逻辑线。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>语言学中的序列标注是一个常用框架，应用于许多任务，如POS标注，NER等。而这些任务无不在自然语言理解中发挥着重要作用，并为下游应用提供了有力支撑，如关系抽取等。<br>解决序列标注问题的传统手段是HMM、CRF等，这些都取得了很好性能表现。但这些方法的最大问题在于需要手动制定特征(如，字符是否大写)及需要与语种相关的语料。因此，很难将之应用于新任务或者迁移到新领域上。而神经网络技术可以克服这个缺陷，它可以在模型学习过程中自动抽取特征。然而，鉴于神经网络模型中巨量训练参数和相对小规模的序列标注语料，仅仅依靠标注数据可能无法充分训练好如此复杂的模型。对此，一个直观且有效的选择就是用外部知识来指导学习过程。<br>以上所述，为了利用这些外部知识，迁移学习及多任务学习成为有力的工具。举例来说，NER的实验效果可以在类似entity linking或chunking等任务的共同训练过程中得到提高。这种做法终归也有令人为难的地方，它内在要求更多相关任务的监督数据，而这些数据是难以获取的，甚至在某些语种或特定任务中根本不存在。<br>那有没有两全其美的办法呢?有的：从原始语料中抽取出冗余的知识，进而提高不同任务的性能表现。以词向量技术来说，我们可以通过词向量技术在连续空间中得到了词语之间的语义关联，即词向量。而实践表明，这些词向量对多个任务都是有益的。不过，现如今大多数使用词向量的技术都只是将词语当作一个基本单位，换言之，只利用到了词层面的知识。然而在所有尖端的神经网络模型中，感知到字符层面是相当重要且富有价值的。<br>仅考虑序列标注任务的话，近些年来已经有将字符层面信息融入到模型学习过程中，并被实验证明有利于任务的实践了。一种常见的做法是直接运用预训练的语言模型，将字符级别的知识作为上下文整合到任务处理中。这种做法的不足在于从预训练过程是与后续任务无关的，因此可能包含大量无关信息。这也导致了该方法要求更大的模型、外部的语料、更长的训练时间。<br>在本文中，作者设计了一个名为<code>LM-LSTM-CRF</code>的高效的序列标注框架，该模型可以高效地利用词层面信息及字符层面信息。</p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p><code>LM-LSTM-CRF</code>可以高效利用词层面及字符层面信息。针对字符层面的知识，我们将神经网络语言模型与序列标注任务联系在一起，并尝试运用多任务学习来指导语言模型获取任务相关的知识。但也应注意到这样的训练过程中，可能引入的一个问题就是：如果任务之间有某些矛盾的地方，则语言模型的学习并不能在传统共同训练的设置下提高序列标注任务的性能。为此，作者引入了Highway Networks，以便将字符层面的知识直接映射到不同的语义空间中，以平衡这俩个任务。针对词语层面的只是，作者采用的是微调预训练好的词向量，而非共同训练或者直接使用预训练的词向量，因为后者要么太耗费资源，要么并不能反应多任务学习的好处。</p><p>设一个句子的标注信息为$$y_1^n=(y_1, \cdots, y_n)$$，具体词语序列为$$x_1^n=(x_1, \cdots, x_n)$$，对应的字符序列为$$c=(c_{0,_},c_{1,1},c_{1,2}, \cdots, c_{1,_}, c_{2,1}, \cdots, c_{n,_})$$，其中$$c_{i,j}$$表示的是第$$i$$个单词的第$$j$$个字符，$$c_{i,_}$$表示的是第$$i$$个词语之后的空格字符。<br>模型整体框架如下图所示：<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/180121/LM-LSTM-CRF%20Neural%20Architecture.PNG" alt="LM-LSTM-CRF Neural Architecture"></p><p>从上图中可以看出模型的几个重要组件，其中字符级别的组件char-LSTM、词语级别的组件word-LSTM及最上层的序列标注组件CRF-SL;另外，还有几个Highway Networks。此处不再一一赘述，只列举出该模型中比较具有特色的设计。<br>作者在试验中注意到语言建模与序列标注任务不一定相合，底层的语言模型训练可能损害序列标注任务的性能。为此的解决方案就是使用Highway Networks，将字符级别的信息与词语级别的信息输入到上层，同时也让不同的Highway Networks组件学习需要的变换以满足任务需求。<br>在序列标注中，使用的还是传统的CRF模型，只是特征使用了低层的语言模型的隐层变量，并无太多新奇的地方。<br>新奇的地方体现在语言建模上，考虑到词向量是语言模型参数的主体，为了加快训练速度，如上所述作者采用的是微调预训练的词向量;比较特别的是，在预测下一个词语时使用的信息不再是上一个词语的词向量，转而设计为上一个词对应的字符序列经过LSTM输出的向量。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://arxiv.org/pdf/1709.04109" target="_blank" rel="noopener">Empower Sequence Labeling with Task-Aware Neural Language Model</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> transfer learning </tag>
            
            <tag> multi-task learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[题辞]]></title>
      <url>http://www.wrran.com/blog/2018/01/20/people-say/luxun/180120-01/</url>
      <content type="html"><![CDATA[<blockquote><p>当我沉默的时候，我觉得充实;我将开口，同时感到空虚。</p></blockquote><a id="more"></a><p>@ 鲁迅</p><p>当我沉默的时候，我觉得充实;我将开口，同时感到空虚。<br>过去的生命已经死亡。我对于这死亡有大欢喜，因为我借此知道它曾经存活。死亡的生命已经朽腐。我对于这朽腐有大欢喜，因为我借此知道它还非空虚。<br>生命的泥委弃在地面上，不生乔木，只生野草，这是我的罪过。<br>野草，根本不深，花叶不美，然而吸取露，吸取水，吸取陈死人的血和肉，各各夺取它的生存。当生存时，还是将遭践踏，将遭删刈，直至于死亡而朽腐。<br>但我坦然，欣然。我将大笑，我将歌唱。<br>我自爱我的野草，但我憎恶这以野草作装饰的地面。<br>地火在地下运行，奔突;熔岩一旦喷出，将烧尽一切野草，以及乔木，于是并且无可朽腐。<br>但我坦然，欣然。我将大笑，我将歌唱。<br>天地有如此静穆，我不能大笑而且歌唱。天地即不如此静穆，我或者也将不能。我以这一丛野草，在明与暗，生与死，过去与未来之际，献于友与仇，人与兽，爱者与不爱者之前作证。<br>为我自己，为友与仇，人与兽，爱者与不爱者，我希望这野草的死亡与朽腐，火速到来。要不然，我先就未曾生存，这实在比死亡与朽腐更其不幸。<br>去罢，野草，连着我的题辞！<br>一九二七年四月二十六日，鲁迅记于广州之白云楼上。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[隐马尔可夫模型]]></title>
      <url>http://www.wrran.com/blog/2018/01/02/review/hidden-markov-model/</url>
      <content type="html"><![CDATA[<blockquote><p>待老夫算算你的心思</p></blockquote><a id="more"></a><h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>本博文摘自<a href="https://book.douban.com/subject/25746399/" target="_blank" rel="noopener">《统计自然语言处理（第二版）》</a>的第六章第四小节，版权归原作者所有，请勿商用。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在马尔可夫模型中，每个状态代表了一个可观察的事件，所以马尔可夫模型又被称为可视马尔可夫模型（visible Markov Model, VMM），这在某种程度上限制了模型的适应性。在隐马尔可夫模型中，我们不知道模型所经过的状态序列，只知道状态的概率函数，也就是说，观察到的事件是状态的随机函数，因此，该模型是一个双重的随机过程。其中，模型的状态转换过程是不可观察的，即隐蔽的，可观察时间的随机过程是隐蔽的状态转移过程的随机函数。<br>可以用下图来说明隐马尔可夫模型的基本原理：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review/hidden-markov-model/graph%20of%20HMM.PNG" alt="HMM图解"></p><p>我们可以通过如下例子来说明HMM的含义。假定一暗室中有$$N$$个口袋,每个口袋中有$$M$$种不同颜色的球。一个实验员根据某一概率分布随机地选取一个初始口袋,从中根据不同颜色的球的概率分布,随机地取出一个球,并向室外的人报告该球的颜色。然后,再根据口袋的概率分布选择另一个口袋,根据不同颜色的球的概率分布从中随机选择另外个球。重复进行这个过程。对于暗室外边的人来说,可观察的过程只是不同颜色的球的序列,而口袋的序列是不可观察的。在这个过程中,每个口袋对应于HMM中的状态,球的颜色对应于HMM中状态的输出符号,从一个口袋转向另一个口袋对应于状态转换,从口袋中取出球的颜色对应于从一个状态输出的观察符号。<br>通过上例可以看出，一个HMM由如下几个部分组成：</p><ol><li>模型中状态的数目$$N$$（上例中口袋的数目）</li><li>从每个状态可能输出的不同符号的数目$$M$$（上例中球的不同颜色的数目）</li><li><strong>状态转移概率</strong>矩阵$$A={a_{ij}}$$（$$a_{ij}$$为实验员从一个口袋即状态$$s_i$$转向另一个口袋即状态$$s_j$$取球的概率），其中<br>$$a_{ij}=P(q_t=s_j\vert q_{t-1}=s_i), 1\le i,j \le N$$<br>$$s_{ij}\le 0$$<br>$$\sum_{j=1}^{N}a_{ij}=1$$</li><li>从状态$$s_j$$观察到符号$$v_k$$的概率分布矩阵$$B={b_j(k)}$$，其中<br>$$b_j(k)=P(O_t=v_k\vert q_t=s_j), 1\le j\le N;1\le k\le M$$<br>$$b_j(k)\ge0$$<br>$$\sum_{k=1}^{M}b_j(k)=1$$<br>观察符号的概率又被称为<strong>符号发射概率</strong></li><li><strong>初始状态概率分布</strong>$$\pi={\pi_i}$$，其中<br>$$\pi=P(q_1=s_i), 1\le i\le N$$<br>$$\pi_1\le0$$<br>$$\sum_{i=1}^{N}\pi_i=1$$</li></ol><p>一般地，一个HMM记为一个五元组$$\mu=(S, K, A, B, \pi)$$，其中，$$S$$为状态的集合，$$K$$为输出符号的集合，$$\pi$$、$$A$$和$$B$$分别是初始状态的概率分布、状态转移概率和符号发射概率。为了简单，有时也将其记为三元组$$\mu=(A,B,\pi)$$.<br>当考虑潜在事件随机地生成表面事件时，HMM是非常有用的。假设给定模型$$\mu=(A,B,\pi)$$，那么，观察序列$$O_1^T=O_1O_2\cdots O_T$$可以由下面的步骤直接产生：</p><ol><li>根据初始状态的概率分布$$\pi_i$$选择一个初始状态$$q_1=s_1$$;</li><li>令$$t=1$$</li><li>根据状态$$s_i$$的输出概率分布$$b_i(k)$$输出$$O_t=v_k$$;</li><li>根据状态转移概率分布$$a_{ij}$$，将当前时刻$$t$$的状态转移到新的状态$$q_{t+1}=s_j$$;</li><li>$$t=t+1$$，如果$$t&lt;T$$，重复执行步骤3和步骤4；否则，结束算法</li></ol><p>HMM中有三个基本问题：</p><ol><li>解码问题：给定一个观察序列$$O_1^T=O_1O_2\cdots O_T$$和模型$$\mu=(A,B,\pi)$$，如何快速有效地选择在一定意义下“最优”的状态序列$$Q_1^T=q_1q_2\cdots q_T$$，使得该状态序列最好地解释观察序列;</li><li>估计问题：给定一个观察序列$$O_1^T=O_1O_2\cdots O_T$$和模型$$\mu=(A,B,\pi)$$，如何快速地计算出给定模型$$\mu$$情况下，观察序列$$O_1^T$$的概率，即$$P(O\vert\mu)$$;</li><li>学习问题：给定一个观察序列$$O_1^T=O_1O_2\cdots O_T$$，如何根据最大似然估计来求模型的参数值。也就是说，如何调节模型$$\mu=(A,B,\pi)$$，使得$$P(O\vert\mu)$$最大.</li></ol><p>下面将针对这三个基本问题给出解决方案。</p><h1 id="解码问题"><a href="#解码问题" class="headerlink" title="解码问题"></a>解码问题</h1><p>所谓的<strong>解码问题</strong>是指：给定一个观察序列$$O_1^T=O_1O_2\cdots O_T$$和模型$$\mu=(A,B,\pi)$$，要快速地计算出给定模型$$\mu$$情况下观察序列$$O$$的概率，即$$P(O\vert\mu)$$.</p><p>对于任意的状态序列$$Q_1^T=q_1q_2\cdots q_T$$，有：<br>$$<br>\begin{align}<br>P(O\vert Q,\mu) &amp;=\prod_{t=1}^{T-1}P(O_t\vert q_t,q_{t+1},\mu)\<br>&amp;= b_{q_1}(O_1) b_{q_2}(O_2) \cdots b_{q_T}(O_T)<br>\end{align}<br>$$<br>并且$$P(Q\vert\mu)=\pi_{q_1}a_{q_1q_2}a_{q_2q_3}\cdots a_{q_{T-1}\ q_T}$$<br>由于$$P(O,Q\vert\mu)=P(O\vert Q,\mu)P(Q\vert\mu)$$<br>因此可以得到<br>$$<br>\begin{align}<br>P(O\vert\mu) &amp;=\sum_{Q}P(O,Q\vert\mu) \<br>&amp;=\sum_{Q}P(O\vert Q,\mu)P(O\vert\mu) \<br>&amp;=\sum_{Q}\pi_{q_1}b_{q_1}(O_1)\prod_{t=1}^{T-1}a_{q_tq_{t+1}}b_{q_{t+1}}(O_{t+1})<br>\end{align}<br>$$</p><p>上式推导方式很直接，但面临一个很大的实现困难：必须穷举所有可能的状态序列。如果模型$$\mu=(A,B,\pi)$$中有$$N$$个不同的状态，时间长度为$$T$$，那么就有$$N^T$$个可能的状态序列。这样计算量就会出现“指数爆炸”。当$$T$$很大时，几乎不可能有效地执行这个算法。为此，人们提出了<strong>前向算法</strong>或者前向计算过程，利用动态规划的方法来解决这一问题，使得“指数爆炸”问题可以在时间复杂度为$$\mathrm{O}(N^2T)$$的范围内解决。<br>HMM的动态规划问题一般用格架的组织形式描述。对于一个在某一时间结束在一定状态的HMM，每一个格能够记录该HMM所有输出符号的概率，较长自路径的概率可以由较短自路径概率计算出来，如下图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review/hidden-markov-model/%E7%BD%91%E6%A0%BC%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE.PNG" alt="格架算法示意图"></p><p>前向算法中很重要的一点，就是定义一个<strong>前向变量</strong>$$\alpha_t(i)$$是在时间$$t$$，HMM输出了序列$$O_1^t=O_1O_2\cdots O_t$$，并且位于状态$$s_i$$的概率：<br>$$\alpha_t(i)=P(O_1^t,q_t=s_i\vert\mu)$$<br>如果可以有效计算前向变量，我们就可以根据$$\alpha_t(i)$$计算出$$P(O\vert\mu)$$，因为$$P(O\vert\mu)$$是在所有状态$$q_T$$下观察到序列$$O_1^T$$的概率：<br>$$<br>\begin{align}<br>P(O_1^T\vert\mu) &amp;= \sum_{s_{i}}P(O_1^T,q_T=s_i\vert\mu)<br>&amp;= \sum_{i=1}^{N}\alpha_T(i)<br>\end{align}<br>$$<br>前向算法是动态规划的一种，其状态转移方程也十分关键，而这正是体会前向变量定义的精妙之处：<br>$$\alpha_{t+1}(j)=\Big(\sum_{i=1}^{N}\alpha_t(i)a_{ij}\Big)b_j(O_{t+1})$$<br>在格架结构中，$$\alpha_{t+1}(j)$$存放在$$(s_j,t+1)$$处的结点上，表示在已知观察序列$$O_1^t$$的情况下，从时间$$t$$到达下一个时间$$t+1$$时状态为$$s_j$$的概率，下图描述出了前向变量所蕴含的归纳关系：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review/hidden-markov-model/%E5%89%8D%E5%90%91%E5%8F%98%E9%87%8F%E7%9A%84%E5%BD%92%E7%BA%B3%E5%85%B3%E7%B3%BB.PNG" alt="前向变量的归纳关系"></p><p>从初始时间开始到$$t+1$$，HMM达到状态$$s_j$$，并输出观察序列$$O_1^{t+1}$$的过程可以分解为以下两个步骤：</p><ol><li>从初始时间开始到时间$$t$$，HMM到达状态$$s_i$$，并输出观察序列$$O_1^t$$</li><li>从状态$$s_i$$转移到状态$$s_j$$，并在状态$$s_j$$输出$$O_{t+1}$$</li></ol><p>这里$$s_i$$可以是HMM的任意状态。根据前向变量$$\alpha_t(i)$$的定义，从某一个状态$$s_i$$出发完成第一步的概率就是$$\alpha_t(i)$$，而实现第二步的概率为$$a_{ij}b_j(O_{t+1})$$。因此，从初始时间到$$t+1$$整个过程的概率为$$\alpha_t(i)a_{ij}b_j(O_{t+1})$$。由于HMM可以从不同的$$s_i$$转移到$$s_j$$，一共有$$N$$个不同的状态，因此可以推导出上述的状态转移方程。</p><p>由此，得到如下算法：</p><ol><li>初始化：$$\alpha_1(i)=\pi_ib_i(O_1), \text{for } i = 1 \text{ to } N$$</li><li>归纳计算：$$\alpha_{t+1}(j)=\Big(\Big)b_j(O_{t+1}), \text{for } t = 1 { to } T-1$$</li><li>求和终结：$$P(O\vert\mu)=\sum_{i=1}^N\alpha_T(i)$$</li></ol><p>在初始化步骤中，$$\pi_i$$是初始状态$$s_i$$的概率，$$b_i(O_1)$$是在$$s_i$$状态输出$$O_1$$的概率；$$\pi_ib_i(O_1)$$就是在时刻$$t=1$$时，HMM在状态$$s_i$$输出序列$$O_1^1$$的概率，即前向变量$$\alpha_1(i)$$；同时，一共有$$N$$个状态，因此需要初始化$$N$$个前向变量$$\alpha_1(1), \alpha_1(2), \cdots, \alpha_1(N)$$。</p><p>现在我们来分析前向算法的时间复杂度。由于每计算一个$$\alpha_t(i)$$必须考虑$$t-1$$时的所有$$N$$个状态转移到状态$$s_i$$的可能性，其时间复杂度为$$\mathrm{O}(N)$$。则对应每个时间$$t$$，要计算$$N$$个前向变量$$\alpha_t(1), \alpha_t(2), \cdots, \alpha_t(N)$$。至此可知，时间复杂性为$$\mathrm{O}(N)$$。因此，在上述的求解过程中，前向算法的总时间复杂度为$$\mathrm{O}(N^2T)$$。</p><p>对于解码问题，其实还有另一种动态规划类解法，它被称为<strong>后向算法</strong>。<br>同样，先给出关键的<strong>后向变量</strong>的定义：$$\beta_t(i)$$是在给定了模型$$\mu=(A,B,\pi)$$，并且在时间$$t$$状态为$$s_i$$的条件下，HMM的输出观察序列$$O_{t+2}^T$$的概率。形式化的说就是：<br>$$\beta_t(i)=P(O_{t+1}^T\vert q_t=s_i,\mu)$$</p><p>与上述类似，在时间$$t$$、状态为$$s_i$$的条件下，HMM输出观察序列$$O_{t+1}^T$$的过程可以分解为以下两个步骤：</p><ol><li>从时间$$t$$到时间$$t+1$$，HMM由状态$$s_i$$到状态$$s_j$$，并从$$s_j$$输出到$$O_{t+1}$$</li><li>在时间$$t+1$$的状态为$$s_j$$的条件下，HMM输出观察序列$$O_{t+2}^T$$</li></ol><p>第一步中输出$$O_{t+1}$$的概率为$$a_{ij}b_j(O_{t+1})$$；第二步中根据后向变量的定义，HMM输出观察序列为$$O_{t+2}^{T}$$的概率就是后向变量$$\beta_{t+1}(j)$$。于是得到如下归纳关系：<br>$$\beta_t(i)=\sum_{j=1}^Na_{ij}b_j(O_{t+1})\beta_{t+1}(j)$$</p><p>上述归纳关系可以用下图来描述：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review/hidden-markov-model/%E5%90%8E%E5%90%91%E5%8F%98%E9%87%8F%E7%9A%84%E5%BD%92%E7%BA%B3%E5%85%B3%E7%B3%BB.PNG" alt="后向变量的归纳关系"></p><p>根据上述的状态转移关系，我们可以得到如下算法：</p><ol><li>初始化：$$\beta_T(i)=1, \text{for } i = 1 \text{ to } N$$</li><li>归纳计算<br>$$\text{for } i = 1 \text{ to } N \text{ do:}$$<br>$$\beta_t(i)=\sum_{j=1}^Na_{ij}b_j(O_{t+1})\beta_{t+1}(j), \text{for } t = T-1 \text{ to } 1$$</li><li>求和终结：<br>$$P(O\vert\mu)=\sum_{i=1}^{N}\pi_ib_i(O_1)\beta_1(i)$$</li></ol><p>同样，后向算法的时间复杂度也为$$\mathrm{O}(N^2T)$$.</p><p>更一般地，实际上我们可以结合前向算法和后向算法来观察序列的概率：<br>$$<br>\begin{align}<br>P(O_1^T,q_t=s_i\vert\mu)<br>&amp;=P(O_1^t,q_t=s_i,Q_t^T\vert\mu)\<br>&amp;=P(O_1^t,q_t=s_i\vert\mu)P(O_{t+1}^{T}\vert O_{1}^{t},q_t=s_i,\mu) \<br>&amp;=P(O_1^t,q_t=s_i\vert\mu)P(O_{t+1}^{T}\vert q_t=s_i,\mu)\<br>&amp;=\alpha_t(i)\beta_t(i)<br>\end{align}<br>$$<br>因此，$$P(O\vert\mu)=\sum_{i=1}^{N}\alpha_t(i)\beta_t(i), \text{for } t = 1 \text{ to } T$$</p><h1 id="估计问题"><a href="#估计问题" class="headerlink" title="估计问题"></a>估计问题</h1><p>维特比算法用于求解HMM中的估计问题，即给定一个观察序列$$O_1^T=O_1O_2\cdots O_T$$和模型$$\mu=(A,B,\pi)$$，如何快速有效地选择在一定意义上最优的状态序列$$Q_1^T=q_1q_2\cdots q_T$$，使得该状态序列最好地解释观察序列。<br>一种直观定义“最好解释”的说法是，使得该状态序列中每一个状态都单独地具有最大概率，即要使得$$\gamma_t(i)=P(q_t=s_i\vert O,\mu)$$最大。<br>根据贝叶斯公式，有<br>$$<br>\begin{align}<br>\gamma_t(i)<br>&amp;= P(q_t=s_i\vert O,\mu)\<br>&amp;= \frac{P(q_t=s_j,O\vert\mu)}{P(O\vert\mu)}\<br>&amp;= \frac{\alpha_t(i)\beta_t(i)}{\sum_{i=1}^N\alpha_t(i)\beta_t(i)}<br>\end{align}<br>$$<br>有了$$\beta_t(i)$$，则在时间$$t$$的最优状态为$$\hat{q}_t=\underset{1\le i\le N}{\mathrm{arg max}}\ [\gamma_t(i)]$$<br>但是根据这种对最优状态序列的理解，如果只考虑使得每个状态的出现都单独达到最高概率，而忽略了状态中的两个状态之间的关系，很可能导致两个相邻状态之间的转移概率为0。则在这种情况下，所谓的最优状态序列根本就不是合法的序列。因此，我们常常采用另一种对于“最好解释”的定义：在给定模型$$\mu$$和观察序列$$O$$的条件下，使得条件概率$$P(Q\vert O,\mu)$$最大的状态序列，即$$\hat{Q}=\underset{Q}{\mathrm{arg max}}\ P(Q\vert O,\mu)$$<br>这种理解就可以避免之前定义中引起的“断序”问题。根据后者的定义，要优化的不是状态序列中的单个状态，而是整个状态序列，不合法的状态序列的概率为0，因此不可能被选为最优状态序列。</p><p>维特比算法也是动态规划类的算法。照例，我们来看下关键的<strong>维特比变量</strong>定义：<br>$$\delta_t(i)=\underset{q_1,q_2,\cdot, q_{t-1}}{\max} P(q_1^t-1,q_t=s_i,O_1^t\vert\mu)$$<br>与前向变量类似，$$\delta_t(i)$$有如下递归关系：$$\delta_{t+1}(i)=\underset{j}{\max}[\delta_t(j)a_{ji}]b_i(O_{t+1})$$</p><p>具体到维特比算法时，为了记录在时间$$t$$时，HMM通过哪一条概率最大的路径达到状态$$s_i$$，维特比算法设置了另外一个变量$$\psi_t(i)$$用于路径记忆，让$$\psi_t(i)$$记录该路径上状态$$s_i$$的前一个时刻的状态。如此，得到下列维特比算法：</p><ol><li>初始化：<br>$$\delta_1(i)=\pi_ib_i(O_1), 1\le i\le N$$<br>$$\psi_1(i)=0$$</li><li>归纳计算：<br>计算状态：<br>$$\text{for } j = 1 \text{ to } N \text{ do}$$<br>$$\delta_t(j)=\underset{1\le i\le N}{\max}[\delta_{t-1}(i)a_ij]b_j(O_t), \text{for } t = 2 \text{ to } T$$<br>记忆路径：<br>$$\text{for } i = 1 \text{ to } N \text{ do}$$<br>$$\psi(j)=\underset{1\le i\le N}{\mathrm{argmax}} [\delta_{t-1}(i)a_{ij}]b_j(O_t), \text{for } t = 2 \text{ to } T$$</li><li>终结：<br>$$\hat{Q}_{T}=\underset{i\le i\le N}{argmax}[\delta_T(i)]$$<br>$$\hat{P}(\hat{Q}_T)=\underset{1\le i\le N}{\max}[\delta_T(i)]$$</li><li>路径问题：<br>$$\text{for } t = T-1 \text{ to } 1 \text{ do}$$<br>$$\hat{q}<em>t=\psi</em>{t+1}(\hat{q}_{t+1})$$</li></ol><p>维特比算法的时间复杂度与前向算法、后向算法的时间复杂度一致，都是$$\mathrm{O}(N^2T)$$。<br>在实际应用中，往往不只是搜索一个最优状态序列，而是搜索$$n$$个最佳路径。因此在格架的每个结点上常常需要记录$$m$$个最佳状态。</p><h1 id="学习问题"><a href="#学习问题" class="headerlink" title="学习问题"></a>学习问题</h1><p>至于模型的学习问题，在此先简略阐述下方法，待后面完善：</p><ol><li>有指导的学习 - 最大似然估计</li><li>无指导的学习 - EM算法</li></ol>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> hidden markov model </category>
            
        </categories>
        
        
        <tags>
            
            <tag> machine learning </tag>
            
            <tag> hidden markov model </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017,]]></title>
      <url>http://www.wrran.com/blog/2017/12/31/people-say/me/171231-01/</url>
      <content type="html"><![CDATA[<blockquote><p>给·自己</p></blockquote><a id="more"></a><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/me/20171231_1.jpg" alt><br>给2017的时间不多了<br>给我的时间还剩多少呢</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> me </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用开发库]]></title>
      <url>http://www.wrran.com/blog/2017/12/31/cheatsheet/dev/common-library/</url>
      <content type="html"><![CDATA[<blockquote><p>找到，好·轮子</p></blockquote><a id="more"></a><h1 id="libcurl"><a href="#libcurl" class="headerlink" title="libcurl"></a>libcurl</h1><p><a href="https://curl.haxx.se/libcurl/" target="_blank" rel="noopener">libcurl index</a></p><blockquote><p>libcurl is a free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. libcurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, Kerberos), file transfer resume, http proxy tunneling and more!</p></blockquote><h1 id="cef"><a href="#cef" class="headerlink" title="cef"></a>cef</h1><p><a href="https://bitbucket.org/chromiumembedded/cef" target="_blank" rel="noopener">cef</a><br>The Chromium Embedded Framework (CEF) is a simple framework for embedding Chromium-based browsers in other applications.</p><blockquote><p>CEF is a BSD-licensed open source project founded by Marshall Greenblatt in 2008 and based on the Google Chromium project. Unlike the Chromium project itself, which focuses mainly on Google Chrome application development, CEF focuses on facilitating embedded browser use cases in third-party applications. CEF insulates the user from the underlying Chromium and Blink code complexity by offering production-quality stable APIs, release branches tracking specific Chromium releases, and binary distributions. Most features in CEF have default implementations that provide rich functionality while requiring little or no integration work from the user. There are currently over 100 million installed instances of CEF around the world embedded in products from a wide range of companies and industries. Some use cases for CEF include:</p><ul><li>Embedding an HTML5-compliant Web browser control in an existing native application.</li><li>Creating a light-weight native “shell” application that hosts a user interface developed primarily using Web technologies.</li><li>Rendering Web content “off-screen” in applications that have their own custom drawing frameworks.</li><li>Acting as a host for automated testing of existing Web properties and applications.</li></ul></blockquote><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p><a href="https://www.cnblogs.com/yuefei/p/4123597.html" target="_blank" rel="noopener">构建基于Chromium的应用程序</a></p><h1 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h1><p><a href="http://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a><br>A complete, cross-platform solution to record, convert and stream audio and video.<br>Converting video and audio has never been so easy.<br><code>$ ffmpeg -i input.mp4 output.avi</code></p><blockquote><p>FFmpeg is the leading multimedia framework, able to <em>decode</em>, <em>encode</em>, <em>transcode</em>, <em>mux</em>, <em>demux</em>, <em>stream</em>, <em>filter</em> and <em>play</em> pretty much anything that humans and machines have created. It supports the most obscure ancient formats up to the cutting edge. No matter if they were designed by some standards committee, the community or a corporation. It is also highly portable: FFmpeg compiles, runs, and passes our testing infrastructure FATE across Linux, Mac OS X, Microsoft Windows, the BSDs, Solaris, etc. under a wide variety of build environments, machine architectures, and configurations.</p></blockquote><h1 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h1><p><a href="https://ant.design/index-cn" target="_blank" rel="noopener">Ant Design</a><br>Ant Design, 一个UI设计语言</p><h1 id="Reveal-js"><a href="#Reveal-js" class="headerlink" title="Reveal.js"></a>Reveal.js</h1><p><a href="https://revealjs.com/#/" target="_blank" rel="noopener">Reveal.js - The HTML Presentation Framework</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> dev </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> dev-libs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0148] - Sort List]]></title>
      <url>http://www.wrran.com/blog/2017/12/29/acm/leetcode/0148-sort-list/</url>
      <content type="html"><![CDATA[<blockquote><p>要求在$$\mathrm{O}(n\ \mathrm{log}(n))$$时间内用常数级的空间实现单链表的排序<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/sort-list/description/" target="_blank" rel="noopener">Sort List</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>在$$\mathrm{O}(n\ \mathrm{log}(n))$$时间内用常数级的空间实现的排序可以是<strong>合并排序</strong>也可以是<strong>快速排序</strong>。此处实现单链表的合并排序。<br>合并的部分可以参见题目<a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">Merge Two Sorted Lists</a>。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$$\mathrm{O}(n\ \mathrm{log}(n))$$<br>空间复杂度：$$\mathrm{O}(1)$$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>|| head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fast = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        slow = head;</span><br><span class="line">        slow = sortList(slow);</span><br><span class="line">        fast = sortList(fast);</span><br><span class="line">        <span class="keyword">return</span> mergeList(slow, fast);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeList</span><span class="params">(ListNode* lst1, ListNode* lst2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lst1 == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> lst2;</span><br><span class="line">        <span class="keyword">if</span>(lst2 == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> lst1;</span><br><span class="line">        </span><br><span class="line">        ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(lst1-&gt;val &lt; lst2-&gt;val) &#123;</span><br><span class="line">            head = lst1;</span><br><span class="line">            lst1 = lst1-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = lst2;</span><br><span class="line">            lst2 = lst2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span>(lst1 &amp;&amp; lst2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lst1-&gt;val &lt; lst2-&gt;val) &#123;</span><br><span class="line">                cur-&gt;next = lst1;</span><br><span class="line">                lst1 = lst1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;next = lst2;</span><br><span class="line">                lst2 = lst2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(lst1) &#123;</span><br><span class="line">            cur-&gt;next = lst1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(lst2) &#123;</span><br><span class="line">            cur-&gt;next = lst2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0061] - Rotate List]]></title>
      <url>http://www.wrran.com/blog/2017/12/29/acm/leetcode/0061-rotate-list/</url>
      <content type="html"><![CDATA[<blockquote><p>将单链表的右侧k个结点挪到最前端<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/rotate-list/description/" target="_blank" rel="noopener">Rotate List</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>这题的思路也十分简单，就是找到右边第$$k$$个节点的头节点，形成两个链表后，将后面链表链接到前一个链表上就解决问题了。<br>但实现的过程中，在于如何在单链表中找到这个关键节点。解决方案也很直接，从前往后数第$$\text{len}-k$$个就是了。<br>另外还需要注意，本题中的$$k$$可能大于链表长度。为此上述中的$$k$$应当是对链表长度取余之后的值。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$$\mathrm{O}(n)$$<br>空间复杂度：$$\mathrm{O}(1)$$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// 计算单链表的长度</span></span><br><span class="line">        ListNode* left = head;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left) &#123;</span><br><span class="line">            left = left-&gt;next;</span><br><span class="line">            len += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k = k%len;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 余数为零则可以直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进行实际的旋转操作</span></span><br><span class="line">        <span class="comment">// 找到第len-k-1个结点</span></span><br><span class="line">        <span class="comment">// 其next所指向的就是要挪动到前部的链表</span></span><br><span class="line">        ListNode* tail = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> step=<span class="number">1</span>;step&lt;len-k;++step) &#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        left = head;</span><br><span class="line">        head = tail-&gt;next;</span><br><span class="line">        tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        tail = head;</span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next) &#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = left;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0021] - Merge Two Sorted Lists]]></title>
      <url>http://www.wrran.com/blog/2017/12/29/acm/leetcode/0021-merge-two-sorted-lists/</url>
      <content type="html"><![CDATA[<blockquote><p>将两个有序单链表合并为一个<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">Merge Two Sorted Lists</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>本题是一道简单数据结构题目，也是合并排序中的基本环节。要注意的地方有两点：一是头结点的确定；二是要将剩下的单链表也接到链表末尾。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$$\mathrm{O}(n)$$<br>空间复杂度：$$\mathrm{O}(1)$$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="literal">NULL</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2 == <span class="literal">NULL</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">            head = l1;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = l2;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* ptr = head;</span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">                ptr-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ptr-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            ptr = ptr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">            ptr-&gt;next = l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2) &#123;</span><br><span class="line">            ptr-&gt;next = l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0234] - Palindrome Linked List]]></title>
      <url>http://www.wrran.com/blog/2017/12/28/acm/leetcode/0234-palindrome-linked-list/</url>
      <content type="html"><![CDATA[<blockquote><p>判断单链表是否为回文<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/palindrome-linked-list/description/" target="_blank" rel="noopener">Palindrome Linked List</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>判断回文要求找到单链表的中间结点，之后从中间向前向后逐个比对，若全部相等则为回文，否则不是。但单链表的难处在于不能“向前”迭代结点，而且查找单链表的中间结点也不容易。<br>具体实现涉及到几个技巧：</p><ol><li>使用快慢指针找到中间结点</li><li>翻转链表</li><li>对两个单链表进行检查</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a→b→c→d→c→b→a</span><br><span class="line">    ↑     ↑　</span><br><span class="line"></span><br><span class="line">a←b←c d→c→b→a</span><br><span class="line">    ↑   ↑</span><br></pre></td></tr></table></figure><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$$\mathrm{O}(n)$$<br>空间复杂度：$$\mathrm{O}(1)$$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中间结点</span></span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast-&gt;next) &#123;</span><br><span class="line">            fast = slow-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            fast = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反转链表</span></span><br><span class="line">        slow-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        head = reverse(head);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查两个单链表是否相同</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">NULL</span> &amp;&amp; fast != <span class="literal">NULL</span> &amp;&amp; head-&gt;val == fast-&gt;val) &#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">NULL</span> || fast != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* prev = head;</span><br><span class="line">        ListNode* ptr = prev-&gt;next;</span><br><span class="line">        ListNode* post = ptr-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(post) &#123;</span><br><span class="line">            ptr-&gt;next = prev;</span><br><span class="line">            prev = ptr;</span><br><span class="line">            ptr = post;</span><br><span class="line">            post = post-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ptr-&gt;next = prev;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        head = ptr;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0203] - Remove Linked List Elements]]></title>
      <url>http://www.wrran.com/blog/2017/12/28/acm/leetcode/0203-remove-linked-list-elements/</url>
      <content type="html"><![CDATA[<blockquote><p>删除链表中等于某个指定值的所有结点<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/remove-linked-list-elements/description/" target="_blank" rel="noopener">Remove Linked List Elements</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>本题属于链表操作中的基础题目，主要训练的是如何在单链表删除指定结点。<br>在单链表中删除某个结点需要知晓该结点的前继结点，删除时即把该结点的指针指向该结点的下一个。本题还需要留意的就是头结点删除略有不同，头结点不含有前继结点。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$$\mathrm{O}(n)$$<br>空间复杂度：$$\mathrm{O}(1)$$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 头结点要删除的情形</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">NULL</span> &amp;&amp; head-&gt;val == val) &#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// 中间结点删除的情形</span></span><br><span class="line">        ListNode* pre = head;</span><br><span class="line">        ListNode* ptr = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 要删除的结点可能连在一起</span></span><br><span class="line">            <span class="comment">// 这要求ptr指向待删除结点片段的下一个结点</span></span><br><span class="line">            <span class="keyword">while</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                ptr = pre-&gt;next;</span><br><span class="line">                <span class="keyword">if</span>(ptr != <span class="literal">NULL</span> &amp;&amp; ptr-&gt;val == val) &#123;</span><br><span class="line">                    pre-&gt;next = ptr-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    pre = ptr;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0160] - Intersection of Two Linked Lists]]></title>
      <url>http://www.wrran.com/blog/2017/12/28/acm/leetcode/0160-intersection-of-two-linked-lists/</url>
      <content type="html"><![CDATA[<blockquote><p>找到两个单向链表在哪儿重合<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/description/" target="_blank" rel="noopener">Intersection of Two Linked Lists</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>本题只要搞清楚什么是两个单链表的“交点”，即可求解。所谓交点就是地址相同的指针。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A:          a1 → a2</span><br><span class="line">                   ↘</span><br><span class="line">                     c1 → c2 → c3</span><br><span class="line">                   ↗</span><br><span class="line">B:     b1 → b2 → b3</span><br></pre></td></tr></table></figure><p></p><p>简单的想法就是：如果两个链表有交点，则最后一个结点的地址必然相同；则交点可能是该结点的上一个结点；直至回推到某个结点地址不相等，则该结点所链的下一个结点就是“交点”。</p><p>实现过程中要注意单链表的特征，其不能实现回退这个操作，因此要从头结点计算位置。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A:          a1 → a2 → c1 → c2 → c3</span><br><span class="line">B:     b1 → b2 → b3 → c1 → c2 → c3</span><br></pre></td></tr></table></figure><p></p><p>计算出两个链表的长度之后，将指针指向相同长度的链表，之后迭代两者并逐次比较是否相同。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">            ↓</span><br><span class="line">A:          a1 → a2 → c1 → c2 → c3</span><br><span class="line">B:     b1 → b2 → b3 → c1 → c2 → c3</span><br><span class="line">            ↑</span><br></pre></td></tr></table></figure><p></p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$$\mathrm{O}(n)$$<br>空间复杂度：$$\mathrm{O}(1)$$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若其中某一者为空链表，则交点必然为空</span></span><br><span class="line">        <span class="keyword">if</span> (headA == <span class="literal">NULL</span> || headB == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 计算链表长度</span></span><br><span class="line">        <span class="keyword">int</span> lenA = <span class="number">1</span>;</span><br><span class="line">        ListNode* nodeA = headA;</span><br><span class="line">        <span class="keyword">int</span> lenB = <span class="number">1</span>;</span><br><span class="line">        ListNode* nodeB = headB;</span><br><span class="line">        <span class="keyword">while</span>(nodeA-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            nodeA = nodeA-&gt;next;</span><br><span class="line">            ++lenA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(nodeB-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            nodeB = nodeB-&gt;next;</span><br><span class="line">            ++lenB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最末尾结点不相同，则交点必然为空</span></span><br><span class="line">        <span class="keyword">if</span>(nodeA != nodeB)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 调整头结点位置，让两者指向相同长度链表</span></span><br><span class="line">        <span class="keyword">if</span>(lenA &gt; lenB)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lenA-lenB;++i)</span><br><span class="line">                headA = headA-&gt;next;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lenB-lenA;++i)</span><br><span class="line">                headB = headB-&gt;next;</span><br><span class="line">        <span class="comment">// 迭代并逐次比较</span></span><br><span class="line">        <span class="keyword">while</span>(headA != headB) &#123;</span><br><span class="line">            headA = headA-&gt;next;</span><br><span class="line">            headB = headB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统 - 容错性]]></title>
      <url>http://www.wrran.com/blog/2017/12/28/review/distributed-system/8-fault-tolerance/</url>
      <content type="html"><![CDATA[<blockquote><p>三个臭皮匠赛过诸葛亮</p></blockquote><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>分布式系统区别于单机系统的一个特性是它可以容许部分失效。当分布式系统中的一个组件发生故障时就可能产生部分失效。这个故障也许会影响到其他组件的正确操作,但同时也有可能完全不影响其他组件。而非分布式系统中的故障通常会影响到所有的组件,可能很容易就使整个应用程序崩溃。<br>分布式系统设计中的一个重要目标是以这样的方式来构造系统:它可以从部分失效中自动恢复,而且不会严重地影响整体性能。特别是,当故障发生时,分布式系统应该在进行恢复的同时继续以可接受的方式进行操作,也就是说,它应该能容许错误,在发生错误时某种程度上仍可以继续操作。<br>在本章中,我们将更详细地学习使分布式系统具有容错性的技术。在提供了一些有关容错的背景知识后,我们将介绍进程恢复与可靠多播。进程恢复涉及到的技术可以使一个或多个进程发生故障而不会严重影响到系统的其余部分。可靠多播与这个问题相关,它确保可以成功地把信息传输到一个进程集合。要保持进程同步,可靠多播通常是必需的。<br><strong>原子性(atomicity)</strong>在很多应用程序中都是一个重要的特性。例如,在分布式事务中,就必须要保证一个事务中的所有操作全部发生或一个都不发生。在分布式系统中原子性的基础是分布式提交协议,我们将在本章中用单独一节来讨论它。<br>最后,我们将介绍如何从故障中恢复。特别是,我们将考虑何时以及如何对一个分布式系统的状态进行保存以确保在以后恢复到该状态。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>容错涉及到计算机科学中的很多研究。在本节中,我们将从介绍与容错相关的基本概念开始,然后讨论故障的模式。我们也要讨论处理故障的关键技术—冗余(redunancy)要获得关于分布式系统中有关容错的更多信息,请参阅文献(Jalote1994)或(Shooman 2002)。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>要理解容错在分布式系统中的作用,我们首先需要深入地了解分布式系统中的容错到底意味着什么。容错与被称为可靠的系统(dependable system)紧密相关。可靠性是一个术语,它包含了分布式系统中很多有用的需求,列举以下:</p><ol><li>可用性;</li><li>可靠性;</li><li>安全性;</li><li>可维护性</li></ol><p>可用性(availability)被定义为系统的一个属性,它说明系统已准备好,马上就可以使用。通常,它指在任何给定的时刻,系统都可以正确地操作,可根据用户的行为来执行它的功能。换句话说,高度可用的系统在任何给定的时刻都能及时地工作<br>可靠性(reliability)是指系统可以无故障地持续运行。与可用性相反,可靠性是根据时间间隔而不是任何时刻来进行定义的。高度可靠的系统可以在一个相对较长的时间内持续工作而不被中断。这很微妙,但是与可用性相比,这是一个重要的不同。如果系统在每小时中崩溃1ms,那么它的可用性就超过99.9999%,但是它还是高度不可靠的。与之类似,如果一个系统从来不崩溃,但是要在每年8月中停机两个星期,那么它就是高度可靠的,但是它的可用性只有96%。这两种属性并不相同。<br>安全性(safety)是指在系统偶然出故障的情况下能正确操作而不会造成任何灾难。例如,很多进程控制系统,比如那些用来控制核电站或把人送入太空的控制系统,就必须提供高度的安全性。这样的控制系统即使只是非常短时间瞬时故障,结果也将是灾难性的。过去的很多例子(以后还会有更多的例子)都说明了要建立安全的系统是多么困难。<br>最后,可维护性(maintainability)是指发生故障的系统被恢复的难易程度。高度可维护的系统可能具有高度的可用性,特别是在可以探测到故障并自动恢复时。但是,像我们在本章后面将看到的那样,从故障中自动恢复说起来简单,做起来就难了。通常也要求可靠的系统提供高度的安全性,特别是在要处理诸如完整性这样的问题时我们将在下一章中讨论安全问题。</p><p>一个系统不能兑现它的承诺时就被认为是失败(fail)了。尤其是,如果一个分布式系统被设计为为它的用户提供大量的服务,当这些服务中的一个或多个不能被(完整地)提供时,系统就失败了。而错误(eror)是系统状态的一部分,它可能会导致失败。例如,当从网络上传输数据包时,可能有一些数据包在到达接收方时已经被破坏了。在这种环境下,被破坏了意味着接收方可能错误地得到某位的值(例如把0读成1),甚至无法探测到有什么东西到达了。</p><p>造成错误的原因被称为故障(fault)。无疑,找到是什么引起了错误是很重要的。例如,不好的传输介质可能很容易使得数据包被破坏。在这种情况下要解决故障是相对容易的但是无线网络中的传输错误可能是由恶劣的天气条件引起的。要改变天气来减少或防止错误是不可能的。<br>建立一个可靠的系统与控制故障紧密相关。防止、解决和预报故障三者之间是有差别的(Avizienis等2004)。对我们来说最重要的问题是容错(fault tolerance),它意味着系统即使在发生故障时还能提供服务。故障通常被分为暂时的、间歇的和持久的。暂时故障( trans1 ent fault)只发生一次,然后就消失了,即使重复操作也不会发生。一只鸟从微波传输的电波中飞过可能会使一些网络上的数据丢失。如果传输超时重发,第二次就会正常工作。<br>间歇故障(internittent fault)是发生,消失不见,然后再次发生,如此反复进行。连接器接触不良通常会造成间歇故障。间歇故障会造成情况的恶化,因为它们很难诊断,通常,当解决故障的人到来时系统工作良好。<br>持久故障( permanent fault)是那些直到故障组件被修复之前持续存在的故障。芯片燃烧、软件错误和磁盘头损坏都是持久故障的例子.</p><h2 id="故障模式"><a href="#故障模式" class="headerlink" title="故障模式"></a>故障模式</h2><p>发生故障的系统不能充分地提供所设计的服务。如果我们把分布式系统视为一个彼此之间且与它们的客户进行通信的服务集,那么不能充分提供服务就意味着服务器、通信通道或两者都不能正常地进行工作。但是,出现故障的服务器本身并不总是我们应该查找错误的地方。如果这样的服务器要依赖其他服务器才能充分提供它的服务,那么错误的原因就可能需要到别的地方去寻找。</p><p>这样的依赖关系大量出现在分布式系统中。如果一个文件服务器的设计目的是提供高度可用的文件系统,那么失效的磁盘会使该服务器运行困难。如果这样的文件服务器是分布式数据库的一部分,那么整个数据库的正常工作都将被打乱,因为只有一部分数据真正可以访问.</p><p>为了更好地理解故障到底有多严重,人们开发了一些分类方法。其中一种方法如图8.1所示,它基于(Cristian1991)和( Hadzilacos和 Toueg1993)中描述的方法。<br><img src alt="不同类型的故障"></p><p>如果服务器过早停机但在停止之前工作正常,就发生了<strong>崩溃性故障(crash failure)</strong>。崩溃性故障的一个重要方面是,一旦服务器停机,就不再提供任何服务。崩溃性故障的一个典型例子是操作系统崩溃,这时只有一种解决方法:重新启动。虽然人们期望个人计算机系统能正常运行,但它经常遭遇崩溃性故障。在这个意义上说,把复位按钮从机箱背后移到前面是很有道理的。可能有一天还会把它移到背后,甚至完全去掉。<br>当服务器不能对请求进行响应时就发生<strong>遗漏性故障(omission failure)</strong>。导致这种问题可能有多种原因。在发生接收遗漏性故障的情况下,首先服务器可能永远不会接收到请求。注意,这可能是由于尽管在客户和服务器之间正确地建立起连接,但是没有线程监听到来的请求。接收遗漏性故障通常不会影响到服务器的当前状态,因为服务器不知道有信息发送给了它与之类似,如果服务器能正常工作,但是在发送响应时失败,则产生发送遗漏性故障。例如,当发送缓冲区溢出而服务器又没有为这样的情况做好准备时就发生此类故障。注意,与接收遗漏性故障,服务器现在的状态可能说明它已经完成了对客户的服务。因此,如果响应发送失败,那么服务器可能需要为客户重新发送先前的请求而做好准备。<br>另外一种遗漏性故障与通信无关,它可能由诸如无限循环或不正确的内存管理的软件错误引起,这时服务器的状态被称为“挂起”。<br>另外一种故障类型与时间有关。如果响应是在指定的实时间隔之外,就发生了<strong>定时故障(timing failure)</strong>。像我们在第2章中介绍的同步数据流那样,如果提供数据的速度过快而在接收方又没有足够的缓冲空间来保存所有到来的数据,那么就很容易在接收方引起问题。但是,更通常的情况是服务器的响应太慢,这种情况被称为发生了“性能故障”。<br>一种严重的故障类型是<strong>响应故障(response failure)</strong>,就是说服务器的响应不正确。可能发生两种响应故障。在发生数值故障的情况下,服务器为请求提供错误的响应,例如搜索引擎系统返回了与使用的搜索项无关的Web页面,就是这种情况。<br>另外一种响应故障被称为<strong>状态转换故障(state transition failure)</strong>。当服务器对到来的请求做出意想不到的响应时就发生这种故障。例如,如果服务器接收到一个它不能识别的信息,也没有釆取措施来处理这样的信息,那么就会发生状态转换故障。特别是,发生故障的服务器可能会错误地采取一种从来没有初始化的默认行为来进行处理,此时就发生这种故障。<br>最严重的故障是<strong>随意性故障(arbitrary failure)</strong>,也被称为<strong>拜占庭故障( Byzantine failure)</strong>。实际上,当发生随意性故障时,客户应该做好最坏的准备。特别是,服务器可能产生它从来没有产生过的输出,但是又不能检测出错误。更坏的情况是发生故障的服务器恶意地与其他服务器共同工作来产生恶意的错误结果。这种情况说明了为什么谈到可靠系统时安全被认为是一个重要的需求。术语“拜占庭”是指拜占庭帝国,它存在的时间是330到1453年,地点在巴尔干半岛和现在的土耳其,当时在统治阶级中充斥着无休止的阴谋诡计和谎言。拜占庭故障的问题由Pease等(1980)和 Lamport等(1982)首先进行了分析。我们将在下面对此类故障进行分析。</p><p>随意性故障与崩溃性故障紧密相关。崩溃性故障的定义在上面已经给出,它是服务器停机的最“好”方式。它也被称为失败停机故障(fail-stop failure)。实际上,因故障停机的服务器只是简单地停止产生输出,而且它的停机能够被其他的进程探测到。例如,服务器可以“友好地”宣布它将要崩溃。<br>当然,在现实中,服务器通过呈现遗漏性故障或崩溃性故障而停机,它们并不“友好地”宣布将要停机,而要等其他的进程来判定服务器是否已经过早停机。但是,在这样的失败沉默系统(fail-silent failure)中,其他的进程可能错误地认为服务器已经停机,而服务器只不过是意外地慢,也就是说发生了性能故障<br>最后,服务器也有可能产生随机的输出,但是这个输出能简单地被其他进程识别为垃圾。这时服务器以一种“仁慈”的方式来出现随意性故障,这些故障也被称为安全失败(fail safe)。</p><h2 id="使用冗余掩盖故障"><a href="#使用冗余掩盖故障" class="headerlink" title="使用冗余掩盖故障"></a>使用冗余掩盖故障</h2><p>如果系统是容错的,那么它能做的最好的事情就是对其他进程隐藏故障的发生。关键技术是使用冗余来掩盖故障。有三种可能:信息冗余、时间冗余和物理冗余,。在<strong>信息冗余</strong>中,添加额外的位可以使错乱的位恢复正常。例如可以在传输的数据中添加一段Hamming码来从传输线路上的噪声中恢复数据。在<strong>时间冗余</strong>中,执行一个动作,如果需要就再次执行。使用事务处理是这种方法的一个例子。如果一个事务处理中止,那么它就可以无害地重新执行。当错误是临时性或间歇性时,时间冗余特别有用。在<strong>物理冗余</strong>中,通过添加额外的装备或进程使系统作为一个整体来容忍部分组件的失效或故障成为可能。物理冗余可以在硬件上也可以在软件上进行。例如,可以在系统中添加额外的进程,这样如果少数进程崩溃,系统还是可以正常工作。换句话说,通过冗余的进程可以获得高度容错性。<br>物理冗余是提供容错性的著名技术。它用在生物学(哺乳动物具有两只眼睛、两个耳朵、两个肺等)、飞行器(747具有四个引擎,而只使用三个)和体育(有多个裁判)中。物理冗余用在电子电路的容错中已经有多年了,了解如何在电子电路中使用它是有意义的。例如,考虑图8.2(a)中的电路。这里的信号依次通过设备A、B和C。如果它们中的一个发生故障,最后结果就可能是错误的。<br><img src alt="三倍模块冗余"><br>在图8.2(b)中,每个设备都被复制了三个。这样电路中的每一级都有三个表决电路,每个表决电路都是具有三个输入和一个输出的电路。如果输入中的两个或三个是相同的,那么输出就等于输入,如果所有的输入都是不同的,那么输出就是未定义的。这种设计被称为三倍模块冗余( Triple Modular Redundancy,TMR)。<br>假定元件A2发生故障,则每个表决电路V1、V2和V3获得两个好的(一致的)输入和个无用的输入,它们中的每个都将正确值输出到第二级。这样A2故障的影响就完全被掩盖了,到BⅣ、B2和B3的输入就与没有发生故障时完全相同。现在考虑一下如果除了A2之外B3和C1也都发生了故障时的情形。即使发生这种情况,其影响也会被掩盖,三个最后的输出还是正确的。<br>为什么在每一级都需要三个表决电路呢?毕竟一个表决电路就可以发现并传递主要的观点。但是,一个表决电路只是一个组件,它可能发生故障。例如,假定V1发生故障,到B2的输入就是错误的,但是只要别的部分正常工作,B2和B3就会产生相同的输出,V4,V5和V6都会产生到第三级的正确结果。V1发生故障的影响与B1故障没什么区别,在两种情况下B1都产生错误的输出,但是两种情况下都在后面才进行表决尽管不是所有的容错分布式系统都使用TMR,但是这种技术还是很普遍的,它对容错系统是什么给出了一个清楚的解释。它与使用高度可靠的单个组件的系统不同,后者的组织不是容错的。当然,TMR也可以递归使用,例如在芯片内部使用TMR来使它高度可靠,而对于使用芯片的电路设计者来说,他们并不知道芯片的冗余性</p><h1 id="进程恢复"><a href="#进程恢复" class="headerlink" title="进程恢复"></a>进程恢复</h1><p>已经讨论了容错的基本问题,现在我们集中讨论在分布式系统中如何获得容错性的问题。我们首先要讨论的主题是防止进程失败这是通过把进程复制到组中来获得的。在下面的内容中,我们考虑进程组中的一般设计问题,并讨论容错组到底是什么。我们也将讨论当一个或多个程序不能给出正确的回答时,如何在进程组中达到一致。</p><h2 id="设计问题"><a href="#设计问题" class="headerlink" title="设计问题"></a>设计问题</h2><p>容忍失败进程的关键方法是把多个同样的进程组织到一个组中。所有组都具有的关键特性是当信息发送到组本身时,组中的所有成员都接收它。通过这种方式,如果组中的一个进程失败,其他的一些进程可以接管它(Guerraou和 Schiper1997)。</p><p>进程组可以是动态的。可以创建新的组也可以删除旧的组。在系统操作过程中,一个进程可以加入一个组也可以离开一个组。一个进程可以同时是多个组的成员。因此需要一些机制来管理组和组的成员.<br>组类似于社会组织。 Alice可能是一个读书俱乐部、一个网球俱乐部和一个环境组织的成员。在一个特别的日子里,她可能从读书俱乐部收到一本生日蛋糕食谱的邮件(消息),从网球俱乐部收到每年一度的母亲节网球锦标赛的消息,还从环境组织收到保护南方土拨鼠运动开始的消息。在任何时刻,她都可以自由地离开任何一个或所有这些组,也可能加入其他的组。</p><p>引入组的目的在于允许把进程的集合作为单一的抽象概念来处理。这样,一个进程就可以把消息发送给一个服务器组而不用知道有多少个进程以及它们在哪里,而这些可以在两次调用之间进行改变.</p><h3 id="平等组与等级组"><a href="#平等组与等级组" class="headerlink" title="平等组与等级组"></a>平等组与等级组</h3><p>不同的组之间一个重要的区别在于它们的内部结构。在一些组中,所有的进程都是平等的。没有指挥,所有的决定都是共同做出的。在其他的组中存在一些等级关系。例如个进程是协作者而其他进程都是工作者。在这种模式中,当外部客户或一个工作者产生一个工作请求时,请求被发送给协作者。协作者决定哪个工作者最适合,然后把请求转发给它。当然也可能有更复杂的等级关系。在图8.3中说明了这些通信模式。</p><p><img src alt="平等组中和简单等级组中的通信"><br>每种组织结构都具有它的优点与缺点。平等组是对称的,没有单独的失败点。如果一个进程崩溃,组只是简单地变得更小,但是还可以继续。它的缺点在于做出决定比较复杂例如,要决定某事常常需要进行表决,这导致了一些延迟和开销等级组则相反。协作者的故障会使整个组崩溃,但是只要它保持运行,就可以独自做出决定,不需要其他进程参加。</p><h3 id="组成员"><a href="#组成员" class="headerlink" title="组成员"></a>组成员</h3><p>当组通信发生时,需要一些方法来创建和删除组,以及允许进程加入和离开组。一种可能的方法是使用组服务器(group server),所有这些请求都发送给它。这个组服务器保持着所有组及其成员的完整的数据库。这种方法直接、有效、容易实现。不幸的是它具有所有集中式技术的缺点:单一的失败点。如果组服务器崩溃,组管理就不再存在。可能大多数或所有组都不得不从头开始重建,所有正在进行的工作都可能终止</p><p>与之相反的方法是以分布式的方法来管理组成员。例如,如果可靠的多播可用,一个外部进程就可以发送消息给所有的组成员表示它希望加入该组要离开一个组,理想的情况是,成员只需要给所有成员发送一个再见消息。在容错环境中,故障停机的语义一般并不确切。问题在于当一个进程崩溃时不能像一个进程自动离开那样进行通知。其他成员不得不通过注意到崩溃的成员不再进行响应来发现这一点。一旦确定崩溃的成员是真正的崩溃(而不是速度慢),就从组中删除它。</p><p>另外一个棘手的问题是进程的离开与加入必须跟数据消息的发送同步。换句话说,从进程加入一个组开始,它就必须接收发送给该组的所有消息。与之类似,一旦进程离开一个组,它就不能接收来自该组的任何消息,其他的成员也不能接收来自它的任何消息。一种确保把进程的加入或离开集成到消息流中的正确位置的方法,是把这个操作转换为一个发送到整个组的消息序列。<br>与组成员相关的最后一个问题是,如果很多机器停机使得组完全不能工作时该怎么办。这时需要通过一些协议来重建组。一些进程不得不进行初始化来重新启动,但是如果有两个或三个进程同时进行尝试会发生什么?协议必须能够处理这些问题。</p><h2 id="故障掩盖和复制"><a href="#故障掩盖和复制" class="headerlink" title="故障掩盖和复制"></a>故障掩盖和复制</h2><p>进程组是建立容错系统方法的一部分,特别是在有一组相同的进程允许我们掩盖组中的一个或多个发生故障的进程的情况下。换句话说,我们可以复制进程并把它们组织在个组中来用一个容错的组取代一个脆弱的进程。像前面讨论过的那样,有两种方法来进行复制:通过基于主进程的协议或通过复制写协议。</p><p>在容错的情况下,基于主进程的复制通常以主进程后备协议的形式出现。在这种情况下,以等级方式来组织一个进程组,其中一个主进程协调所有的写操作。在实践中,这个主进程是固定的,尽管如果需要可以用一个后备进程来接管它。实际上,如果主进程崩溃,后备进程执行一些选举算法来选择一个新的主进程。<br>像我们在上一章中解释的那样,与基于团体的协议相同,复制写协议以主动复制的形式使用。这些解决方法把相同进程的集合组织到一个平等组中。这样做的主要优点在于这样的组没有单一的失败点,代价是分布式的协调。</p><p>使用进程组进行容错中一个重要的问题是需要多少复制。为了简化我们的讨论,我们只考虑复制——写系统的情况。如果系统能够经受k个组件的故障并且还能满足规范的要求,那么就被称为k容错(k fault tolerant)。如果这些组件(进程)是失败沉默的,那么具有k+1个组件就足够提供k容错。如果k个组件停止工作,还可以用剩下的一个组件来得到响应。<br>另一方面,如果进程发生拜占庭失败,继续错误运行行并发送出错误或随机的应答,那么最少需要2k+1个进程才能获得k容错。在最坏的情况下,k个失败的进程可以意外地(甚至是故意地)产生同样的应答,但是剩余的k+1个进程也会产生同样的回答,这样,客户或表决电路还可以相信多数进程的回答。</p><p>当然,说一个系统是k容错的,让k+1个相同的进程以票数胜过k个相同的应答在理论上是好的,但是在实践中很难想象这样的情况,即k个进程失败了,但是k+1个进程没有失败。这样,即使在容错系统中也需要某种统计分析。<br>与这种模式有关的一个不明显的前提是所有请求按相同的顺序到达所有的服务器,这个问题被称为原子多播问题(atomic multicast problen)。实际上,这个条件可以稍微放松,因为读操作不会有问题而一些写操作也可以替换,但是还留有一般的问题。原子多播将在后面详细讨论。</p><h2 id="故障系统的协定"><a href="#故障系统的协定" class="headerlink" title="故障系统的协定"></a>故障系统的协定</h2><p>把复制的进程组织在一个组中有助于提高容错性。正如我们提到的那样,如果客户可以根据它的表决机制做出决定,我们甚至可以容忍2k+1个进程中的k个进程得出错误的结果。但是,我们做出的假定是这些进程没有组合成团队来共同产生错误的结果。<br>通常,如果我们要求进程组达成一致,事情会变得更复杂。在很多情况下需要达到一致,例如,选择一个协作者,决定是否提交一个事务,在工作者之间划分任务以及同步。当通信和进程都很完美时,达成这样的一致通常是简单而又直接的,但是如果不是这样,就会出现问题。</p><p>分布式协议算法的一般目标是使所有的非故障进程就一些问题达成一致,而且在有限的步骤内就达成一致。这个问题有点复杂了,因为底层系统的不同假设需要不同的解决方案(假设解决方案存在)。Turek和 Shasha(1992)区分了以下一些情况:<br>(1)同步与非同步系统。在某个加锁步骤模式下,有且只有一个进程运行,该系统就称为同步的(synchronous)。正式地说,这表示,有一常量c≥1,如果有某个处理器执行了c+1步,其他进程最少执行1步。不是同步的系统就称为是异步的( asynchronous<br>(2)通信延时受限与否。当且仅当每个消息使用全局和预定的最大时间传送时,延时是受限的。<br>(3)消息传送是否已排序。<br>(4)消息传输是通过单播或多播来完成的</p><p><img src alt="分布式协定下能够达到的环境"><br>事实证明,只有在如图8.4所示的情况下才可能达成协定。在其他所有情况下,都不存在解决办法。注意,大多数实际的分布式系统都是假定进程是异步的,消息传输是单播的,通信延时是不受限的。因此,我们需要使用已排序(可靠)的消息传送,如TCP/IP。图8.4显示了当进程发生故障时的分布式协定非凡本性。</p><p>这个问题最初是由Lamport等(1982)开始研究的,又称为拜占庭协定问题(Byzantine agreement problem),意思是在众多战争中,多个军队需要达成的协定,例如,面临反叛将军、谋反中尉等情况下的军队战斗力。请看下面由Lamport等(1982)描述的解决办法。在这种情况下,我们假定进程是同步的,消息是单播的,且是按顺序进行的,通信延时是有限制的。我们假定有N个进程,每个进程为其他进程提供一个值v;。目标是让每个进程构建一个长度为N的向量,这样,如果进程i是无故障的,那么V[i]=v1。否则,V[i就是未定义的。</p><p><img src alt="3个无故障进程和1个有故障进程的拜占庭协定问题"><br>在图8.5中显示了N=4和k=1情况下的算法。对这些参数,该算法分四步操作。第一步,每个无故障进程i使用可靠单播给其他每个进程发送v。故障进程则可能发送些其他内容。而且,由于我们使得的是多播,它们可能会给不同的进程发送不同的值。假设v=1。在图8.5(a)中,我们可以看到,进程1给其他进程发送的是1,进程2发送的是2,进程3发送的分别是x、y和z,进程4发送的是4。在第二步中,把第一步中的结果集合成图8.5(b)所示的向量形式。<br>第三步,每个进程把图8.5(b)的向量发送给其他进程。此时,每个进程得到3个向量,每个向量来自其他3个进程。这里,由于进程3是有故障进程,产生了从a到1共12个新值。第三步的结果如图8.5(c)所示。最后,在第四步中,每个进程检查每个新接收向量中的第i个元素。如果值占大多数,那么该值就放置到结果向量中。如果值不占多数,那么结果向量的响应元素就标记为未知( UNKNOWN)。从图8.5(c)可以看出,1、2和4都与v1、v2和v4的值一致,是正确的结果。从这些进程得出的结论无法确定v3,但也是不相关的。拜占庭协定的目标是<strong>一致性意见只与无故障进程的值有关</strong>.</p><p>下面让我们来看看N=3和k=1的情况,也就是说,只有2个无故障进程和1个有故障进程,如图8.6所示。这里我们可以看到,在图8.6(c)中,无故障进程的向量中无法看到元素1、2和3占大多数的情况,因此都标记为未知。该算法不能产生协定。<br><img src alt="2个无故障进程和1个有故障进程的拜占庭协定问题"></p><p>在Lamport等(1982)的文章中证明了,在一个含有k个有故障进程的系统中,只有有2k+1个无故障进程时才可以达到协定,即总进程为3k+1个。用一般术语表示就是,只有无故障进程数多于三分之二时于才可以达成协定。<br>解决这个问题的另一种方法如下。基本上,我们需要获得的是无故障进程组的大多数投票,不管它们之中是否有有故障进程。如果有k个有故障进程,我们需要确保它们的投票和其他所有无故障进程的投票,仍然符合无故障进程占大多数。如果有2k+1个无故障进程,只要有多于三分之二的无故障进程,就可以到达协定。换句话说,如果多于三分之二的进程达成同一决定,这个决定就符号无故障进程组的大多数投票</p><p>但是,达到协定可能会很糟糕。Fischer等(1985)证明,在分布式系统中,如果不能保证消息在一致且有限的时间内传送出去,即使某个进程是有故障的(纵使某个进程是悄然失败的),也不可能达成协定。这种系统的问题在于,任意缓慢的进程与崩溃的进程是无法区分的(即,你无法区分进程是死亡还是生存的)。有很多其他的理论结果可以知道协定何时是可能的,何时是不可能的。有关这些内容的介绍请参见( Barborak等1993),以及( Turek和Shasha1992)。</p><p>应该注意的是,到目前为止所讨论的方法都是假定结点是拜占庭或协作的。当进程是来自不同管理域时,就不能简单地假定后者了。在这种情况下,它们很可能展示的是理性行为,例如,报告超时比运行一个更新操作更合算。如何处理这种情况并不简单。这种解决方法的第一步是以BAR容错(bar fault tolerance)的方式进行,其中,BAR表示的是Byzantine、 Altruist和 Rationality。有关BAR容错的内容请参见(Aiyer等2005)。</p><h2 id="故障检测"><a href="#故障检测" class="headerlink" title="故障检测"></a>故障检测</h2><p>从我们到目前为止的讨论中可以清楚地看出,要很好地屏蔽故障,通常需要检测出故障。在分布式系统中,故障检测是容错的基石。所有这些都归结为,对于一组进程,无故障的成员应该可以知道谁仍是组成员,谁不是。换句话说,当某个成员出现故障时,我们需能够检测出来。</p><p>要检测进程故障,只有两种方法。进程主动地往其他进程发送“are you alive?消息(它们显然期望有回答),或者被动地等待来自其他进程的消息。只有在能保证进程间有足够的通信时,后一种方法才有意义。实际上,通常使用的是主动pinging。</p><p>关于故障检测的理论工作已经开展了很多。所有这些可以归结为,使用超时机制来检测某个进程是否发生故障。在实际的设置中,这种方法有两个主要问题。首先,由于网络的不可靠,如果仅仅因为没有对ping消息返回应答,就认为进程发生了故障,有时候可能是不准确的。如果因为一个错误的判断而把一个正常的进程删除了,显然我们就犯错误了。<br>另一个严重的问题是,通过超时来判断进程故障很粗糙。正如(Birman2005)所介绍的那样,在构建恰当的故障检测子系统时,都只是考虑对单个消息没有响应,而没有做更多的工作。看看企业部署的分布式系统就知道,上面说法就更明显了。</p><p>在设计故障检测子系统时,需要考虑很多问题(Zhuang等2005)。例如,每个结点会定期地告知其邻结点,它仍是活动的,但此信息传播中也会发生故障。因此,正如我们前面介绍过的那样,一种办法是让每个结点主动地探测其他结点。<br>故障检测也可以作为相邻结点间常规信息交换的边界效应来完成。这种方法也被Obduro(Vogels2003)所采用:进程定期地告知它们的服务可用性。这些信息通过网络逐级扩散。最后,每个进程都知道其他进程,更为重要的是,这样就有了足够的信息来确定某个进程是否发生了故障。如果某个成员的可用性信息很旧,就可假定它发生了故障。<br>另一个重要的问题是,故障检测子系统应该能很好地区分网络故障和结点故障。处理这个问题的一个办法是,不让某个结点去确定它的某个邻结点是否崩溃了,而是当知道某个plng消息超时时,结点请求其他邻结点去查看是否可以到达已假定发生故障的结点。当然,正确的信息也可以共享:如果某个结点还是活动的,那么这种信息就可以转发给其他对该信息感兴趣的结点。</p><p>这就给我们带来了另一个关键问题:当检测发现某个成员发生了故障时,如何告知其他无故障的进程?在FUSE中提出了一个简单但基本的方法(Dunagan等2004)。在FUSE中,进程可以加入到某个组中,而这些进程可以是分布在广域网中的。组成员可以创建一个生成树,用于监视成员故障。成员可以往其邻居发送ping消息。如果某个邻成员没有响应,该结点立即转换为不再响应其他结点的ping消息的状态。通过迭代,单个结点的故障就可以迅速地提升为组故障通知。FUSE不受链路故障的影响,其简单的原因是,它依赖的是组成员之间的点对点TCP连接。</p><h1 id="可靠的客户-服务器通信"><a href="#可靠的客户-服务器通信" class="headerlink" title="可靠的客户-服务器通信"></a>可靠的客户-服务器通信</h1><p>在很多情况下,分布式系统中的容错关注的是故障进程。但是我们也需要考虑通信故障。前面讨论过的大多数故障模型都很好地应用到通信通道上。特别是,通信通道也可能出现崩溃性故障、遗漏性故障、定时故障和随意性故障。在实践中建立可靠的通信通道时,<br>焦点应该放在掩盖崩溃性故障与遗漏性故障上。随意性故障可能以重复消息的形式发生造成它的原因是在计算机网络中可能把消息缓冲一个相对较长的时间,然后在原始发送方发出重新传送命令时把消息重新发到网络中(Tanenbaum2003)。</p><h2 id="点对点通信"><a href="#点对点通信" class="headerlink" title="点对点通信"></a>点对点通信</h2><p>在很多分布式系统中都使用像TCP这样可靠的传输协议来建立可靠的点到点通信TCP可以通过确认和重传来掩盖遗漏性故障。这样的故障对TCP客户是完全隐藏的。<br>但是通常不能掩盖连接的崩溃性故障。崩溃性故障发生在不论什么原因TCP连接突然中断时,这时就不能再通过该通道传输更多的消息了。在大多数情况下,可通过抛出一个异常信号来通知客户通道已经崩溃。要掩盖这样的故障,唯一的方法就是让分布式系统尝试自动建立一个新的连接。</p><h2 id="失败时的RPC语义"><a href="#失败时的RPC语义" class="headerlink" title="失败时的RPC语义"></a>失败时的RPC语义</h2><p>现在我们来看一下在使用像远程过程调用(RPC)或远程方法调用(RMI)这样的高级通信工具时的客户服务器通信。在下面内容中,我们主要讨论RPC,但是这些讨论也同样适用于与远程对象的通信。</p><p>RPC的目标是通过使远程过程调用与本地过程调用看上去相同来隐藏通信。除了一些例外情况之外,现在我们已经对它相当熟悉了。确实,只要客户和服务器都正常工作,那么RPC就可以很好运转。当发生错误时会出现一些问题。然后就不容易掩盖本地调用与远程调用之间的区别了。</p><p>为了使我们的讨论结构化,首先区分一下在RPC系统中发生的5种失败形式,如下所示:</p><ol><li>客户不能定位服务器</li><li>客户到服务器的请求消息丢失;</li><li>服务器在收到请求之后崩溃;</li><li>从服务器到客户的响应消息丢失;</li><li>客户在发送请求之后崩溃<br>每种类型的失败都会引起不同的问题,需要用不同的方法来解决。</li></ol><h3 id="客户不能定位服务器"><a href="#客户不能定位服务器" class="headerlink" title="客户不能定位服务器"></a>客户不能定位服务器</h3><p>首先是客户可能不能定位适当的服务器。例如,服务器可能因发生故障而停止运行。作为一种选择,我们假设客户程序是使用特定的客户存根版本进行编译的,而且在相当长的时间里不使用二进制。同时服务器程序有了改进,安装了一个接口的新版本,产生了新的存根并投入使用。当客户最终运行时,绑定器可能不能使它与服务器相匹配并报告失败。这种机制用来保护客户不会意外地试图与那些与它所要求的参数以及所假定的动作并不相符合的服务器进行通信,关于如何处理这种失败的问题仍然存在。<br>一种可能的方法是让错误抛出一个异常(exception),在一些语言中(例如Java),程序员可以编写只有在发生特定错误(例如被零除)时才调用的过程。在C中可以使用信号处理器。换句话说,我们可以定义一种新的信号类型SIGNOSERVER,允许它以与其他信号相同的方式进行处理。<br>但这种方法也有缺点。首先,不是每种语言都具有异常或信号。还有一点是不得不编写异常或信号处理器程序,这破坏了我们努力想要获得的透明性。假定你是一位程序员,你的老板要你编写一个求和的过程。你微笑着告诉她会在5分钟内完成编写、测试并进行文档化。然后她说你还应该编写一个异常处理程序以防万一。这时就很难再继续幻想远程过程与本地过程没有区别了,因为在单处理器系统中,为“不能定位服务器”编写异常处理器是很少见的请求。关于透明性,我们就介绍这么多。</p><h3 id="请求消息丢失"><a href="#请求消息丢失" class="headerlink" title="请求消息丢失"></a>请求消息丢失</h3><p>第2类失败类型是请求消息丢失。这是最容易处理的一种失败:只需要使操作系统或客户存根在发送请求时开启一个定时器即可。如果在返回应答或确认之前定时器超时,那么就重新发送消息。如果消息真的丢失了,则服务器不能辨别原始的与重传的消息,但每件事情都顺利进行。当然,如果请求消息很频繁地丢失,使得客户放弃重传而错误地认为是服务器停机,那么这种情况就回到了“不能定位服务器”的问题。如果请求没有丢失,我们需要做的唯一的事就是让服务器知道它正在处理重传的消息。不幸的是,这件事并不简单,我们将在讨论应答丢失时讨论它。</p><h3 id="服务器崩溃"><a href="#服务器崩溃" class="headerlink" title="服务器崩溃"></a>服务器崩溃</h3><p>第3个失败是服务器崩溃。服务器中事件的通常顺序如图8.7(a)所示。请求到达、执行请求、发送应答。现在考虑图8.7(b)。请求到达并且被执行,但是在发送应答之前服务器崩溃了。最后,看一下图8.7(c),请求再次到达,但是这次服务器在执行请求之前就崩溃了。<br><img src alt="客户-服务器通信中的服务器"><br>图8.7中比较麻烦的部分在于正确对待图(b)和(c)之间的不同。在图(b)中,系统不得不向客户报告失败也就是抛出一个异常),而在图(c)中只是重新传输请求。问题在于客户的操作系统不能区分它们。它所知道的所有事情就是定时器超时</p><p>关于如何处理这种情况存在三种方法(Spector1982)。一种方法是在服务器重启之前(或重新绑定到一个新的服务器之前)等待并再次尝试操作。这种方法是在得到应答之前不断尝试,然后将应答传递给客户。这种技术被称为至少一次语义( at least once semantics),它保证PRC至少执行一次,但是有可能执行多次<br>第二种方法是立刻放弃并报告失败。这种方法被称为最多一次语义(at most once semantics),它保证RPC最多执行一次,但是有可能一次也不执行。<br>第三种方法是什么都不保证。当服务器崩溃时,客户得不到有关发生了什么的任何帮助和承诺。RPC有可能执行任意多次。这种方法的主要优点在于它很容易实现。</p><p>这些方法没有一个是很吸引人的。吸引人的方法应该具有怡好一次的语义(exactly once semantics),但是一般来说没有办法可以做到这一点。想象由打印一些文本组成的远程操作,当文本被打印之后服务器向客户发送一条完成消息。假定当客户提交请求时收到一个确认消息表明请求已经被提交给服务器。服务器可以采取两种策略:或者在通知打印机进行工作之前发送完成消息,或者在文本已经被打印之后发送。<br>假定服务器崩溃之后又恢复了。它向所有的客户宜布它刚才崩溃了但是现在又再次运行。问题在于客户并不知道它的打印请求是否被执行了。<br>客户可以采取4种策略。首先,客户可以决定决不重发请求,这可能要冒着文本不被打印的危险。第二,它可以决定总是重发请求,但是这种方法可能导致文本被打印两次。第三,它可能只有在没有接收到打印请求已经传送到服务器的确认时才重发请求。在这种情况下,客户认为服务器在打印请求被传送到之前崩溃。第四种也是最后一种策略是只有接收到打印请求的确认时才重发请求</p><p>由于服务器具有两种策略而客户具有4种,所以共有8种结合方法。不幸的是,没有一种是令人满意的。注意,在服务器上可能发生3种事件:发送完成消息(M)、打印文本(P)和崩溃(C)。这些事件可能以6种不同的次序发生:<br>(1)M→P→C:在发送完成消息和打印文本之后发生崩溃;<br>(2)M→C(→P):在发送完成消息之后,打印文本之前发生崩溃;<br>(3)P→M→C:在发送完成消息和打印文本之后发生崩溃;<br>(4)P→C(→M):首先打印文本,然后在发送完成消息之前发生崩溃;<br>(5)C(→P→M):在服务器做任何事之前发生崩溃;<br>(6)C(→P-M):在服务器做任何事之前发生崩溃。</p><p><img src alt="出现服务器崩溃时客户与服务器策略的不同组合"><br>括号表示由于服务器已经崩溃所以不会发生该事件。图8.8说明了所有可能的组合。很容易验证,没有一种客户策略和服务器策略的结合可以在所有可能的事件顺序下正确工作。根本在于客户从来都不能知道服务器是在打印文本之前还是之后发生崩溃</p><p>简而言之,服务器崩溃的可能性从根本上改变了RPC的本性,很明显地把单处理器系统与分布式系统区别开来。在前者中,服务器崩溃也暗示着客户的崩溃,所以恢复不但是不可能的也是不需要的。而在后者中有可能也有必要采取行动。</p><h3 id="应答消息丢失"><a href="#应答消息丢失" class="headerlink" title="应答消息丢失"></a>应答消息丢失</h3><p>应答丢失处理起来也比较困难。直接的解决方法就是再次依赖客户的操作系统设置的定时器。如果客户在合理的时间内没有得到响应,那么就再次发送请求。这种方法的问题在于客户不能真正确认为什么没有得到响应。是请求或响应丢失还是服务器慢?这造成了些不同。<br>特别是,一些操作可以安全地重复多次而不会造成任何损害。例如请求一个文件的前1024个字节就没有副作用,可以执行多次而没有危害。这种请求被称为是<strong>幂等的(idempotent)</strong>。<br>现在考虑请求银行服务器从一个账户向另一个账户转账100万美元的请求的情况。如果请求到达并执行了,但是响应丢失了,而客户不知道这一点,它就会重发消息。银行服务器将把这个请求解释为一个新的请求,并再次执行它。这样就转账了200万美元。想象一下这种响应丢失10次吧!传输货币不是幂等的。<br>解决这个问题的一种方法是按幂等的方式组织所有的请求。但是在实际中,很多请求(例如货币兑换)在本质上是非幂等的,所以就需要一些别的东西。另外一种方法是在客户为每个请求分配一个序列号。通过在服务器上跟踪从每个客户收到的最近序列号,服务器可以分辨原始的请求与重发的请求并拒绝执行第二次发出的请求。但是服务器还是要向客户发送响应。注意这种方法需要服务器维护对每个客户的管理。一个附加的防卫措施是在消息头中添加1位以区分是最初的请求还是重发的请求(这种思想在于执行原始请求是安全的,而执行重发请求就需要更多的小心)</p><h3 id="客户端崩溃"><a href="#客户端崩溃" class="headerlink" title="客户端崩溃"></a>客户端崩溃</h3><p>最后一种失败是客户崩溃失败。如果客户向服务器发送请求,请求做一些事情,但在服务器回复之前崩溃了,那么会发生什么呢?这时,虽然计算是活动的,但没有双亲等待结果,这种不需要的计算被称为孤儿( orphan)。<br>孤儿会引起多种问题。它们至少是在浪费CPU周期。它们也可以锁定文件或占用有价值的资源。最后,如果客户重新启动并再次进行RPC,而孤儿的结果又立即返回了,那么就会造成结果的混淆</p><p>如何处理孤儿呢? Nelson(1981)提出了4种方法。第一种方法是在客户存根(stub)发送RPC消息前进行日志记录来说明要做什么。日志被保留在崩溃之后仍然存在的磁盘或其他介质上。在重新启动之后,对日志进行检查然后明确地杀死孤儿。这种方法被称为孤儿消灭( extermination).这种方法的缺点在于为每个RPC都进行写磁盘操作要付出的昂贵代价。另外它也可能不能工作,因为孤儿本身也可以进行RPC,这样就创建了更多的后代,因而对它们进行定位很难,甚至是不可能的。最后,网络可能由于网关故障而被分隔,这使得即使定位了它们,要杀死它们也是不可能的。总之,这不是一种有前途的方法。<br>在称为再生( reincarnation)的第二种方法中,不需要书写磁盘记录就可以解决所有这些问题。它的工作方式是把时间分为顺序编号的时期。当客户重启时,就向所有的机器广播一个消息说明一个新时期的开始。当这样的广播到达时,所有与那个客户有关的远程计算都被杀死。当然,如果网络被分隔,那么一些孤儿还能活下来。但是,当它们向回报告计算结果时,其中包含一个过期的时期号,这就使得检测到它们很容易。<br>第三种方法是第二种方法的变种,但是没那么严厉,它被称为优雅再生( gentle re1 carnation)。当时期广播到达时,每台机器都进行检查来查看是否存在远程计算,如果有,那么就尝试定位它的拥有者。只有当不能找到拥有者时才杀死该计算。<br>最后一种方法称为到期( expirat1on),其中每个RPC都被给定一个标准的时间量T来进行工作。如果到时不能结束,那么就必须显式地请求另外的时间量。这是很麻烦的。另一方面,如果在崩溃之后,客户在重启之前等待了时间T,那么就可以确认抛弃所有的孤儿。这里要解决的问题是选择一个合理的T值以满足不同RPC的需要。</p><p>在实践中,这些方法都不令人满意。更糟的是,杀死一个孤儿可能带来无法预料的结果。例如,假定一个孤儿获得了一个或多个文件或数据库记录上的锁。如果突然杀死孤儿,那么这些锁就会被永远保持。而且孤儿可能已经在不同的远程队列中设置了实体以便将来某个时候启动其他进程,这样即使杀死孤儿也不能删除它的所有痕迹。在( Panzieri和Shrivastava1988)中更详细地讨论了孤儿消灭问题。</p><h1 id="可靠的组通信"><a href="#可靠的组通信" class="headerlink" title="可靠的组通信"></a>可靠的组通信</h1><p>如果考虑一下由复制获得的进程恢复有多重要,那么就会知道可靠的多播服务也是重要的了。多播服务保证了消息被传送给进程组中的所有成员。不幸的是,可靠多播的实现被证明是令人惊讶的困难。在本节中,我们更深入地来探讨与把消息可靠地传送到一个进程组相关的问题。</p><h2 id="基本的可靠多播方法"><a href="#基本的可靠多播方法" class="headerlink" title="基本的可靠多播方法"></a>基本的可靠多播方法</h2><p>尽管大多数的传输层都提供了可靠的点到点通道,它们很少能提供到一组进程的可靠通信。最好的也只是让每个进程都建立到想要与之通信的每个其他进程的点到点连接。显然,这样的组织不是有效的,因为它浪费了网络带宽。不过,如果进程数目较少,通过多个可靠的点到点通道来获得可靠性是一种简单而直接的方法。</p><p>要做到这一点,我们需要准确地定义什么是可靠多播。直观地说,它意味着发送到一个进程组的消息被传递给该组中的每个成员。但是,如果在通信期间有一个进程加入该组会发生什么呢?这个进程也应该接收消息吗?同样,我们也应该确定如果一个(发送)进程在通信期间崩溃会发生什么?</p><p>要解决这样的问题,就必须区分存在故障进程时的可靠通信与假定所有进程都正确操作时的可靠通信。在前一种情况下,如果能保证所有正常的组成员都接收到消息,那么就认为多播是可靠的。其中的窍门在于除了不同的次序约束之外,还应该就在传递消息之前组看上去是什么样子达成协议。我们在下面讨论原子多播,然后再回到这个问题上来。</p><p>如果假定存在一个协议说明谁是组的成员,那么问题就会简单一些。特别是,如果我们假定进程不会失败,而且在通信进行期间不会有进程加入或离开组,那么可靠多播就简单地意味着每个消息都应该被传递到组的每个当前成员处。在最简单的情况下,不要求所有的组成员都按同样的顺序接收消息,但是有时需要这个特性。<br>只要接收方的数目有限,那么这种较弱形式的可靠多播实现起来就相对容易。考虑下单个发送方想要把一个消息多播发送给多个接收方的情况。假定底层的通信系统只需要不可靠的多播,那么这意味着多播消息会以某种方式丢失,它只能传送给其中一些接收方而不是全部。</p><p><img src alt="当所有的接收方已知而且假定不会失败时的简单的可靠多播方法"><br>一种简单的方法如图8.9所示。发送进程为它发送的每个多播消息分配一个序列号。假定消息按它们被发送的次序进行接收。在这种方式中,接收方很容易探测到消息丢失。每个多播消息都在发送方本地的一个历史缓存器中进行存储。假定发送方知道接收方,那么发送方就简单地在每个接收方都返回一个确认之前在历史缓存器中保留消息。如果接收方探测到它丢失了一个消息,那么就返回一个否定确认,请求发送方重发。作为选择,发送方可以在某个时间内没有接收到所有确认的情况下自动重发消息<br>可以在多种设计中进行平衡。例如,要减少返回给发送方的消息数目,确认可能被附加在其他的消息中。重发消息也可以使用到每个请求进程的点到点通信来进行,或使用发送到所有进程的单一多播消息。要了解更多的细节,请参见( Defago等2004)。</p><h2 id="可靠多播中的可扩展性"><a href="#可靠多播中的可扩展性" class="headerlink" title="可靠多播中的可扩展性"></a>可靠多播中的可扩展性</h2><p>刚才介绍的可靠多播方法的主要问题是它不支持有很多接收方的情况。如果有N个接收方,那么发送方必须准备接收至少N个确认。如果有很多的接收方,那么发送方可能被大量的反馈消息淹没,这称为<strong>反馈拥塞</strong>。另外,我们也需要考虑接收方可能发布在广域网上的情况</p><p>解决这个问题的一种方法是:接收方不对消息接收进行反馈,而是只在通知发送方消息丢失时才返回一个反馈消息。只返回否定确认通常可以减少反馈的规模(例如,请参阅Towsley等1997),但是并不能保证永远不会发生反馈拥塞</p><p>只返回否定确认在理论上还存在另外一个问题,发送方不得不永远在历史缓存器中保留消息。因为发送方永远不会知道消息是否已被传送到所有的接收方,它应该总是准备处理来自接收方的要求重发旧消息的请求。在实践中,发送方经过一段时间之后就从历史缓存器中删除消息以避免缓存器溢出。但是,删除一条消息是在冒险,因为重发的请求有可能不能得到响应。</p><p>对于可扩展的可靠多播有若干种建议,可以在( Levine和 Garcia-Luna- Aceves1998)中找到对不同方法的比较。我们现在只简单地讨论两种非常不同的方法,它们在现存的很多方法中是具有代表性的</p><h3 id="无等级的反馈控制"><a href="#无等级的反馈控制" class="headerlink" title="无等级的反馈控制"></a>无等级的反馈控制</h3><p>要获得可扩展的可靠多播方案,关键问题在于减少返回给发送方的反馈消息的数目。在一些广域网应用中流行的一种模式是<strong>反馈抑制(feedback suppression)</strong>。这种方法是(Floyd等1997)所开发的<strong>可扩展可靠多播(Scalable reliable multicasting,SRM)</strong>协议的基础,它以以下方式进行工作。<br>首先,在SRM中,接收方从来都不会对多播消息的成功传送进行确认,而是只在丢失消息时进行报告。探测消息如何丢失的问题留给应用程序处理。只有否定确认作为反馈返回。当接收方发现它丢失了一条消息时,它就向组中的其他成员多播它的反馈。<br>多播反馈可以使组中的其他成员抑制自己的反馈。假定多个接收方都丢失了消息m,它们中的每一个都需要向发送方S返回一个否定确认以使m被重发。但是,如果我们假定重发总是向整个组进行多播,那么只要有一个重发请求到达S就足够了。<br>由于这个原因,一个没有接收到消息m的接收方R延迟一个随机的时间然后发送反馈消息。也就是说,在过了一段随机时间之后再请求重发。如果同时有其他对m的重发请求到达R,那么R就抑制自己的反馈,因为它知道m会短期内进行重发。在理想的情况下,这种方法中只有一个反馈消息到达S,然后S重发m。这种方法如图8.10所示<br><img src alt="几个接收方要发送重发请求，但是第一个重发请求抑制了其他的请求"></p><p>反馈抑制被证明具有相当好的可扩展性,它被大量的 Internet应用程序,例如共享白板用作底层机制。但是这种方法也有一些严重的问题。首先,要确保只有一个重发请求返回给发送方需要每个接收方都对反馈消息进行相当准确的调度。否则还是会有很多接收方同时返回它们的反馈。在散布于广域网上的多个进程组中设置定时器不是容易的事<br>另外一个问题是多播反馈也会中断其他成功接收消息的进程。换句话说,其他接收方不得不接收并处理对它们无用的消息。要解决这个问题,唯一的方法就是使没有接收到消息m的进程加入到一个独立的多播组来接收m,在( Kasera等1997)中对此进行了说明。不幸的是,这样的方法要求以一种效率很高的方式来管理组,这在广域系统中很难做到。一种更好的方法是把丢失相同消息的接收方编组,共享同一个反馈消息和重发的通道。可以在(Liu等1998)中找到这种方法的细节。</p><p>使接收方进行本地恢复有助于提高SRM的可扩展性。特别是,如果一个成功地接收到消息m的接收方收到一个重发请求,它就可以决定甚至在重发请求到达原始的发送方之前就多播m。可以在(Floyd等1997;Liu等1998)中找到更多的有关细节。</p><h3 id="分等级的反馈控制"><a href="#分等级的反馈控制" class="headerlink" title="分等级的反馈控制"></a>分等级的反馈控制</h3><p>刚才介绍的反馈抑制基本上是一种无等级的方法。但是,要在非常大的接收方组中获得可扩展性,就需要采用分等级的方法。从根本上说,可靠多播的分等级方法以图8.11所示的方式进行工作<br><img src alt="分等级的可靠多播。每个本地协作者都把消息转发给它的孩子然后再处理重发请求"></p><p>为了简化,我们假定只有一个发送方需要向一个非常大的接收组进行多播。接收组分为很多子组,组织成树的形式。包含发送方的子组构成了树的根。在每个子组中,任何一种可以为小的组工作的可靠多播方案都可以使用。<br>每个子组都指定一个本地协作者,它负责处理子组中包含的接收方的重发请求(Hofmann1996)。本地协作者具有自己的历史缓存器。如果协作者本身丢失了消息m,它就请求父子组的协作者重发m。在基于确认的方法中,如果接收到消息,本地协作者就向它的父亲发送一个确认。如果协作者从它的子组的所有成员以及它的孩子那里接收到对消息m的确认,那么就可以从历史缓冲中删除m。</p><p>分等级的方法中的主要问题在于树的建立。在很多情况下需要动态建立树。一种方法是使用底层网络的多播树(如果存在的话)。在原理上,这种方法强化网络层中的每个多播路由器的作用,可以按照刚才所讲的方式把它们作为本地协作者来使用。不幸的是,对现存的计算机网络进行改选并不容易。<br>总之,建立可以扩展到跨越广域网络的大量接收方的可靠多播是一个困难的问题。不存在一个最好的方法,每种方法都会导致新的问题出现,所以在我们被这些问题难住之前还需要在这个领域中进行大量的研究。</p><h2 id="原子多播"><a href="#原子多播" class="headerlink" title="原子多播"></a>原子多播</h2><p>现在我们返回到需要在存在进程失败的情况下获得可靠多播的情况。特别是,在分布式系统中经常需要保证消息要么就被发送给所有的进程,要么就不向任何进程一个也不发送。另外,如果传送的话,通常还需要所有的消息都按相同的顺序发送给所有的进程。这种方式称为<strong>原子多播问题(atomic multicast problem)</strong></p><p>为了理解为什么原子性的重要性,我们来考虑一个作为在分布式系统上建立的应用程序基础的复制数据库。分布式系统提供了可靠的多播功能。特别是,它允许建立可以可靠接收消息的进程组。因此,复制的数据库作为一组进程被建立,每个进程用于一个副本。更新操作总是向所有副本进行多播,然后在本地执行。换句话说,我们假定使用的是活动的复制协议</p><p>假定现在要执行一系列的更新,但是在一个更新执行期间,一个副本崩溃了,于是该副本上的更新就丢失了。但是另一方面,在其他的副本上的更新被正确执行了。<br>当崩溃的副本恢复时,它可以恢复到它崩溃之前的状态,但是它可能会错过一些更新在这一点上,让它与其他副本保持状态一致是基本的要求。使一个副本与其他副本保持相同的状态需要我们确切地知道错过了哪些操作以及它们是按什么次序执行的</p><p>现在假定底层的分布式系统支持原子多播。在这种情况下,在一个副本崩溃之前发送给所有副本的更新操作或者是在所有的正常副本上都执行,或者是一个都不执行。特别是,在使用原子多播的情况下,只有在所有正确操作的副本就组成员关系达成一致时,操作才能执行。换句话说,如果其余的副本达成一致,认为崩溃的副本不再属于该组,那么更新就可以执行。<br>当崩溃的副本恢复时,它就被强迫再次加入该组。在它重新注册为组成员之前没有更新操作转发给它。加入一个组需要使它的状态与其他的组成员保持一致。因此,原子多播可确保没有故障的进程对数据库保持一致的视图。当一个副本从故障中恢复并重新加入组时,原子多播强制它与组的其他成员一致。</p><h3 id="虚拟同步"><a href="#虚拟同步" class="headerlink" title="虚拟同步"></a>虚拟同步</h3><p>存在进程失败时的可靠多播可以根据进程组和组成员关系的变化进行准确的定义。下面我们来区分一下接收消息和发送消息。特别指出的是,我们采用如图8.12中的模式,其中的分布式系统由通信层组成。消息在这个通信层中进行发送和接收。接收到的消息在发送到高层的应用程序之前放在通信层的本地缓存器中。<br><img src alt="分布式系统中的消息接收和消息发送的逻辑组织"></p><p>原子多播的总体思想是多播消息m应该唯一地跟它应该传送到的一个进程表相关联。这个表对应于一个组视图,也就是关于包含在组中的进程集的视图。很重要的一点是列表中的每个进程都具有相同的视图。换句话说,它们都同意m应该被传送给它们中的每一个而且不被传送到别的进程。</p><p>现在假定m在发送方具有组视图G时进行多播。此外,假定在发生多播时另一个进程加入或离开了组。组成员关系的这个改变被宣告给G中的所有进程。换句话说,通过多播个vc消息宣布一个进程加入或离开,视图的改变就发生了。现在有两个多播消息在同时进行传输:m和vc。我们需要保证要么在vc传送到G中的每个进程之前把m传送到每个进程,或者根本不传送m。要注意到这个要求有些类似于第6章中讨论过的全序多播。<br>这里出现了一个问题,如果m没有被传送到任何一个进程,怎么能说这种协议是可靠的多播协议呢?原则上,只有一种情况下m的传送允许失败:当组成员关系的改变是由于m的发送方崩溃造成的结果时。在这种情况下,或者是G里的所有成员都知道这个新成员的异常结束,或者没有一个成员知道。作为选择,m可以被每个成员忽略,这对应于在发送m之前发送方崩溃的情况。<br>这种更强的可靠多播保证多播到组视图G的消息被传送给G中的每个正常进程。如果消息的发送方在多播期间崩溃,那么消息或者被投递给所有剩余的进程,或者被每个进程忽略。具有这种属性的可靠多播被称为<strong>虚拟同步(virtually synchronous)</strong>(Birman和Joseph1987)。</p><p><img src alt="虚拟同步多播的原理"><br>考虑一下图8.13所示的4个进程。在某个时刻,进程P1加入了一个进程组,然后这个进程组就由P1、P2、P3和P4组成。在多播了一些消息之后,进程P3崩溃了。但是在崩溃之前它成功地将消息多播到了进程P2和P4,但是没有多播到P1。但是,虚拟同步保证这个消息根本不会被传送,这就有效地建立起一种情况,使得在P3崩溃之前消息从来没有被发送。<br>在从组中删除P3之后,通信在剩余的组成员之间进行。后来P3恢复了,它可以在它的状态进行更新之后再次加入该组。</p><p><strong>虚拟同步的原理</strong>是所有的多播都在视图改变之间进行。换句话说,视图改变作为一个屏障,不能跨越它进行多播。它类似于在上一章中讨论过的分布式数据存储中的同步变量。在视图改变时进行的所有多播都在视图改变生效之前完成。虚拟同步的实现并不烦琐,下面我们进行详细的讨论。</p><h3 id="消息排序"><a href="#消息排序" class="headerlink" title="消息排序"></a>消息排序</h3><p>虚拟同步允许应用程序开发者认为多播是在不同的时期中发生的,不同的时期可以按照组成员关系的改变来划分。然而还没有谁发表关于多播的排序的论文。通常有4种不同的排序方法:</p><ol><li>不排序的多播;</li><li>FIFO顺序的多播;</li><li>按因果关系排序多播;</li><li>全序多播。</li></ol><p><strong>可靠的、不排序多播(reliable, unordered multicast)</strong>是一种虚拟同步多播,它对接收进程发送的消息的次序不做任何保证。要解释这一点,我们假定可靠多播由一个提供发送和接收原语的库支持。接收操作在消息发送到它之前阻塞调用进程。</p><p><img src alt="同一个组中的通信进程。每个进程中的时间的顺序按垂直顺序排列"><br>现在假定发送方P1把两条消息多播给一个组,同时该组中的两个其他进程正在等待消息到达,如图8.14所示。假定在多播期间进程不会崩溃也不会离开该组,有可能P2的通信层先接收到消息m1,然后是m2。因为没有消息顺序约東,所以消息可能是按它们被接收的顺序被传送给P2。相反,P3的通信层有可能首先接收到m2,然后才是m1,然后把它们按相同的顺序传送给P3。</p><p><img src alt="同一组中的4个进程，具有两个不同的发送方，在FIFO多播下可能的消息传送操作"><br>在<strong>可靠的FIFO多播(reliable FIFO-ordered multicast)</strong>情况下,通信层被强制按照消息发送的顺序传送来自同一进程的消息。考虑如图8.15所示的在一个四个进程的组中的通信。使用FIFO的顺序,只会介意一件事情,消息m1总是在m2之前传送,同样,消息m3总是在m4之前传送。组中的所有进程都必须遵守该规则。换句话说,当P3的通信层先接收到m_out2时,在把它传送给P3,之前必须等待m_out1的接收与传送。但是,关于由不同进程发送的消息的传送顺序没有约束。换句话说,如果进程P2在m3之前接收到了m1,它可能以那种顺序传送这两个消息。同时,进程P3可能在接收到m1之前接收到了m3。FIFO顺序说明P3可能在传送ml之前传送m3,尽管这种传送顺序与P2不同。</p><p>最后,采用<strong>可靠的按因果关系排序多播(reliable causally-ordered multicast)</strong>来传送消息可以保留不同的消息之间的潜在因果关系。换句话说,如果在因果关系的消息m1在另一个消息m2之前,那么无论它们是否由同一个发送方多播的,每个接收方的通信层都应该在接收并传送m1之后传送m2。注意按因果关系排序的多播可以使用第5章中讨论的向量时间戳来实现</p><p>除了这三种排序,还有一种对消息传送的附加约束的排序被称为完全排序。<strong>完全排序的传送(total-ordered delivery)</strong>意味着不论消息传送是无序、FIFO顺序还是按因果关系排序,都需要在传送消息时,对所有的组成员按照相同的次序来传送。<br>例如,使用FIFO与完全排序多播的结合,图8.14中的进程P2和P3都可以首先传送消息m3,然后传送消息m1。但是,如果P2在m3之前传送了m1,而P3在m1之前传送了m3,那么就可能违背全序的约束。注意也应该考虑采用FIFO排序。换句话说,m2应该在m1之后传送,而m4应该在m3之后传送。</p><p>提供了全序的消息传送的虚拟同步可靠多播称为<strong>原子多播(atomic multicasting)</strong>。使用上面讨论的三种不同的消息排序约束,可以有6种形式的可靠多播,如图8.16所示(Hadzilacos, Toueg 1993)<br><img src alt="6种不同的虚拟同步可靠多播"></p><h3 id="实现虚拟同步"><a href="#实现虚拟同步" class="headerlink" title="实现虚拟同步"></a>实现虚拟同步</h3><p>现在我们来考虑虚拟同步可靠多播的实现。实现这种多播的一个例子是Isis,一个已经实际使用了几年的容错分布式系统。我们首先来讨论一下在(Birman等1991)中说明的有关它的实现的一些问题。</p><p>Isis中的可靠多播使用了底层网络中可用的可靠的点到点通信工具,特别是TCP。把消息m发送给一个进程组是通过把m可靠地发送给每个组成员来实现的。作为结果,尽管可以保证每个传输都成功,但还是不能保证所有的组成员都接收到m。特别是,发送方可能在把m传输给每个成员之前崩溃了。</p><p>除了使用可靠的点到点通信以外,Isis还假定来自同一个源的消息在通信层按照发送它们的顺序接收。在实践中,可以使用点到点通信的TCP连接来解决这个问题。<br>需要解决的主要问题是要保证发送到视图G的所有消息在组成员关系发生改变之前被传送到G中的所有正常进程。需要注意的第一个问题是确保G中的每个进程都接收到发送给G的所有消息。注意,因为将消息m发送到G的发送方可能在完成多播之前崩溃,有可能G中的进程永远不会接收到m。因为发送方已经崩溃,这些进程应该从其他的地方得到m。下面解释进程如何探测到它丢失了消息。</p><p>要解决这个问题,可以让G中的每个进程在确认G中的所有进程接收到m之前保留m。如果G中的所有进程都接收到m,那么m就被称为是<strong>稳定的(stable)</strong>。稳定的消息只允许传送一次。要确保稳定性,在G中选择一个任意的(可操作的)进程并要求它向其他所<br>有进程发送m就足够了。<br>更明确地说,假定当前视图为$$G_i$$,但是有必要建立下一个视图$$G_{i+1}$$。为了不失一般性,我们可以假定$$G_i$$和$$G_{i+1}$$最多相差一个进程。进程P在接收到视图改变的消息时意识到视图发生改变。这样的消息可能来自想要加入或离开组的进程,或者来自$$G_i$$中被探测到失败并要被删除的进程,如图8.17(a)所示。<br><img src alt="实现虚拟同步的过程"></p><p>当进程P接收到$$G_{i+1}$$的视图改变消息时,它首先把它拥有的$$G_i$$中任何不稳定消息的副本转发给$$G_{i+1}$$中的每个进程,然后把它标记为稳定的。回忆一下,Isis假定点到点的通信是可靠的,这样转发的消息就不会丢失。这样的转发保证,$$G_i$$中已经至少被一个进程接收到的所有消息可以被$$G_i$$中的所有正常进程接收。注意,选择单一的协作者转发不稳定消息就足够了。<br>为了表示进程P不再具有任何不稳定的消息,以及当其他进程可以建立$$G_{i+1}$$时它也就可以建立$$G_{i+1}$$,它就多播一个$$G_{i+1}$$的<strong>淹没消息(flush message)</strong>,如图8.17(b)所示。在进程从其他每个进程那里都接收到$$G_{i+1}$$的淹没消息后,就可以安全地建立新的视图,如图8.17(c)所示。<br>当进程Q接收到在$$G_i$$中发送的消息m而且Q还认为当前视图为$$G_i$$时,它就传送m而不考虑任何附加的消息排序约束。如果它已经接收到了m,它就认为消息是复制的,然后丢弃它。<br>因为进程Q最后会接收到$$G_{i+1}$$的视图改变消息,它首先转发它的不稳定消息,然后通过发送一个$$G_{i+1}$$的flush消息来屏蔽别的消息。注意,由于底层通信层进行消息排序,一个进程的flush消息总是在接收到同一进程的不稳定消息之后进行接收。</p><p>迄今为止介绍过的协议的一个主要缺点在于它不能处理当宣布新的视图改变时的进程失败。特别是,它假定在$$G_{i+1}$$中的每个成员都建立起新的视图$$G_{i+1}$$之前,$$G_{i+1}$$中的进程不会失败(这将导致下一个视图$$G_{i+2}$$)。这个问题可以通过在所有的进程还没有建立上一个改变时就宣布任意视图$$G_{i+k}$$的视图改变来解决。其中的细节留作练习。</p><h1 id="分布式提交"><a href="#分布式提交" class="headerlink" title="分布式提交"></a>分布式提交</h1><p>前面讨论的原子多播问题是一个称为分布式提交的更一般化问题中的一个例子。分布式提交的问题涉及到要使一个操作被进程组中的每个成员都执行或一个成员都不执行。在可靠多播的情况下,操作就是消息的传送。在分布式事务中,操作可能是单个站点上事务的提交,它是整个事务的一部分。分布式提交中的其他例子及其解决办法在(Hanisch2000)中进行了讨论。</p><p>分布式提交通常以设立协作者的方式建立。在简单的方案中,协作者通知所有涉及到的称为参与者的其他进程是否(本地)按要求执行操作。这种方法称为<strong>单阶段提交协议(one-phase commit protocol)</strong>。如果有一个参与者不能真正执行该操作,那么就说明它存在着明显的缺陷,因为它没有办法来通知协作者。例如,在分布式事务的情况下,不可能进行本地提交,因为这会破坏并发控制约束。<br>在实践中需要更复杂的方法,最常用的是两阶段提交协议,下面将对此进行详细讨论.这种协议的主要缺点是不能有效地处理协作者失败的情况。后来又研究出了三阶段提交,我们也要讨论它。</p><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p><strong>两阶段提交协议(two-phase commit protocol,2PC)</strong>是由Gray(1978)提出的。为了不失一般性,我们考虑一个分布式事务,其中有很多进程作为参与者,每个进程都运行在不同的机器上。假定没有故障发生,协议就由以下两个阶段组成,每个阶段又由两步组成(请参阅Bernstein等1987)</p><ol><li>协作者向所有的参与者发送一个<code>VOTE_REQUEST</code>消息</li><li>当参与者接收到<code>VOTE_REQUEST</code>消息时,就向协作者返回一个<code>VOTE_COMMIT</code>消息通知协作者它已经准备好本地提交事务中属于它的部分,否则就返回一个<code>VOTE_ABORT</code>消息。</li><li>协作者收集来自参与者的所有选票。如果所有的参与者都表决要提交事务,那么协作者就进行提交。在这种情况下它向所有的参与者发送一个<code>GLOBAL_COMMIT</code>消息。但是,如果有一个参与者表决要取消事务,那么协作者就决定取消事务并多播一个<code>LOBAL_ABORT</code>消息</li><li>每个提交表决的参与者都等待协作者的最后反应。如果参与者接收到一个<code>GLOBAL_COMMIT</code>消息,那么它就在本地提交事务,否则当接收到一个<code>GLOBAL_ABORT</code>消息时,就在本地取消事务</li></ol><p>表决阶段的第一阶段由第(1)、(2)步组成。第二阶段是决定阶段,由第(3)、(4)步组成这4个步骤由图8.18中有限状态图来说明。<br><img src alt="2PC中协作者参与者的有限状态机"></p><p>当在发生故障的系统中使用这个基本的2PC协议时就会出现一些问题。首先,注意到协作者和参与者都具有阻塞等待消息的状态。因为当一个进程崩溃,而其他进程又正在无限等待来自该进程的消息时,这个协议很容易崩溃。因此使用了定时机制。在以下内容中将对这个机制进行解释<br>看一下图8.18中的有限状态机,可以看出在其中三个状态中,协作者和参与者都被阻塞,等待某个消息到来。首先,参与者可能在<code>INIT</code>状态等待来自协作者的<code>VOTE_REQUEST</code>消息,如果在一段时间之后还没有接收到这个消息,那么参与者就简单地在本地中止事务,然后向协作者发送一个<code>VOTE_ABORT</code>消息<br>同样,协作者可能在<code>WAIT</code>状态阻塞,等待来自每个参与者的表决。如果在某段时间之后没有接收到所有的表决,那么协作者就决定中止表决,然后向所有的参与者发送<code>GLOBAL_ABORT</code>消息。<br>最后,参与者可能在<code>READY</code>状态阻塞,等待协作者发送的全局表决消息。如果在给定的时间内没有接收到消息,参与者不能简单地决定中止事务。它必须查明协作者发送的是什么消息,要解决这个问题,最简单的方法就是让每个参与者在协作者再次恢复之前阻塞。<br>一种更好的方法是让一个参与者P与另一个参与者Q联系,以便根据Q的当前状态来决定做什么。例如,假定Q到达了状态<code>COMMIT</code>,那么就有可能协作者在崩溃之前只向Q发送了<code>GLOBAL_COMMIT</code>消息。显然这个消息没有发送给P。因此,P应该决定进行提交。同样,如果Q的状态为<code>ABORT</code>,那么P也可以安全地进行中止。<br>现在假定Q还在状态<code>INIT</code>,当协作者已经向所有的参与者发送了<code>VOTE_REQUEST</code>消息,但是这个消息只到达P(然后它用<code>VOTE_COMMIT</code>消息作为应答),而没有到达Q时就是这种情况。换句话说,协作者在多播<code>VOTE_REQUEST</code>时崩溃了。在这种情况下,中止事务是安全的,P和Q都可以把状态转换为<code>ABORT</code>.<br>最困难的情况发生在当Q也在<code>READY</code>状态等待协作者的响应的时候。特别是,如果所有的参与者都处在<code>READY</code>状态,那么它们就无法做出决定。问题在于尽管所有的参与者都想要提交,但是还需要协作者的表决才能做出最后的决定。因此,协议在协作者恢复之前阻塞。</p><p>在图8.19中对不同的操作进行了总结。<br><img src alt="参与者P在READY状态下与另一个参与者Q联系时采取的行动"></p><p>要确保进程可以真正恢复,必须在持久性存储器中保存它的状态。(如何以容错的方式保存数据在本章后面进行讨论)。例如,如果一个参与者处于<code>INIT</code>状态,它就可以在恢复时安全地决定在本地中止事务并通知协作者。同样,如果它已经做出了诸如处于<code>COMMIT</code>或<code>ABORT</code>状态时何时崩溃的决定时,它将按顺序恢复到该状态,并向协作者重发它的决定。<br>当参与者在<code>READY</code>状态下崩溃时就会出现问题。在这种情况下,当它恢复时不能确定自己下一步做什么,即不能确定是提交还是中止事务。因此,就要强制它与其他参与者进行联系来看下一步要做什么,这与上面介绍的在<code>READY</code>状态下超时的情况类似。</p><p>协作者只有两个需要跟踪的关键状态。当开始2PC协议时,应该记录它进入了<code>WAIT</code>状态,这样就可以在恢复之后向所有的参与者重发<code>VOTE_REQUEST</code>消息。同样,如果它在第二阶段中做出决定,那么只要记录该决定就足够了,这样就可以在恢复时进行重发这个决定。</p><p>在图8.20中给出了对协作者执行的操作的总结。协作者首先向所有的参与者多播一个消息以收集它们的表决。随后记录它进入了<code>WAIT</code>状态,然后等待来自参与者的表决。<br>协作者的操作:<br><img src alt="在两阶段提交协议中协作者采取的操作"></p><p>如果不仅没有收集到所有的表决,而且在给定的时间内没有再接收到更多的表决,那么协作者就假定有一个或多个参与者崩溃了。因此,它就中止事务,然后向(剩余的)参与者多播一个<code>GLOBAL_ABORT</code>消息。<br>如果没有崩溃发生,那么协作者就会收集到所有的表决。如果所有的参与者和协作者都表决要提交,那么协作者就首先把一个<code>GLOBAL_COMMIT</code>记入日志,然后发送给所有的进程。否则协作者就多播一个<code>GLOBAL_ABORT</code>(在把它记入本地日志之后)。</p><p>图8.21(a)说明了参与者执行的步骤。首先,进程等待来自协作者的表决请求。注意这个等待可以由在该进程的地址空间中运行的一个独立线程来进行。如果没有消息到来,那么事务就简单地被中止。显然协作者已经崩溃了。</p><p>参与者的操作:<br><img src alt="在两阶段提交协议中参与者采取的步骤和处理初入的决定要求的步骤"></p><p>在接收到表决请求之后,参与者决定为提交一个事务进行表决,首先在本地日志中记录它的决定,然后通过发送一个<code>VOTE_COMMIT</code>消息来通知协作者。然后参与者必须等待全局决定,假定这个决定(来自协作者)按时到达,那么就简单地把它记录到本地日志中,然后执行。<br>但是,如果参与者在等待协作者的决定到来时超时,它就执行一个终止协议,首先向其他进程多播一个<code>DECISION_REQUEST</code>消息,然后阻塞,等待响应。当响应到达时(可能来自协作者,假定它最后恢复了),这个参与者就把决定写入它的本地日志,然后处理它.<br>每个参与者都应该准备好接收来自其他参与者为做全局决定而发出的请求。假定每个参与者都开启了一个线程与参与者的主线程并发执行,如图8.20(b)所示。这个线程在接收到决定请求之前处于阻塞状态。只有在与之相关的参与者已经做出最后决定时该线程才对其他进程有帮助。换句话说,如果协作者已经把<code>GLOBAL_COMMIT</code>或<code>GLOBAL_ABORT</code>写到了本地日志中,那么它就至少向这个进程发送了它的决定。另外,线程也要在与之相关的参与者还处在<code>INIT</code>状态时发送<code>GLOBAL_ABORT</code>,就像前面讨论的那样。在所有其他的情况下,接收线程都没有帮助作用,请求的参与者也不能得到响应。</p><p>我们已经看到参与者有可能需要在协作者恢复之前阻塞。当所有的参与者都从协作者那里接收到<code>VOTE_REQUEST</code>消息并进行处理,而在同时协作者崩溃时,就会发生这样的情况。在这种情况下,参与者在要采取的最后行动的问题上不能协调一致地做出决定。因此,2PC被称为<strong>阻塞提交协议(blocking commit protocol)</strong>。</p><p>有一些方法可以避免阻塞。(Babaoglu和 Toueg1993)描述了一种方法,它使用一个多播原语,该原语中接收方立刻把它接收到的消息向其他所有进程进行多播。这种方法允许参与者即使在协作者没有恢复时也能到达最后决定。另一种方法是三阶段提交协议,它是本章的最后一个主题,我们下面就要讨论它。</p><h2 id="三阶段提交"><a href="#三阶段提交" class="headerlink" title="三阶段提交"></a>三阶段提交</h2><p>两阶段提交的一个问题在于当协作者崩溃时,参与者不能做出最后的决定。因此参与者可能在协作者恢复之前保持阻塞。(Skeen1981)开发了一种2PC的变种,称为<strong>三阶段提交协议(three-phase commit protocol,3PC)</strong>,它避免了在出现故障停机时的阻塞过程。尽管3PC在文章中广泛出现,但它在实际中用得并不多,因为在2PC中阻塞的情况很少发生。<br>我们讨论这个协议,是因为它提供了解决分布式系统中的容错问题的更多看法。</p><p><img src alt="3PC中协作者与参与者的有限状态机"><br>像2PC一样,3PC也可以用一个协作者和一些参与者来进行说明。它们各自的有限状态机如图8.22所示。该协议的本质在于协作者和每个参与者都满足以下两个条件</p><ol><li>没有一个可以直接转换到<code>COMMIT</code>或<code>ABORT</code>状态的单独状态;</li><li>没有一个这样的状态:它不能做出最后决定,而且可以从它直接转换到<code>COMMIT</code>状态。</li></ol><p>在(Skeen, Stonebraker1983)中说明了这两个条件是使提交协议不阻塞的充分必要条件。</p><p>3PC中的协作者首先向所有的参与者发送一个<code>VOTE_REQUEST</code>消息,然后等待到来的应答。如果任意一个参与者投票中止事务,那么最后决定就是中止该事务,协作者发送一个<code>GLOBAL_ABORT</code>消息。但是如果事务可以提交,就发送一个<code>PREPARE_COMMIT</code>.消息。只有在每个参与者都确认它已经准备提交时,协作者才发送最后的<code>GLOBAL_COMMIT</code>消息,这时事务才真正提交。</p><p>同样会有一些进程在等待消息到来时阻塞的情况。首先,如果参与者在<code>INIT</code>状态时等待来自协作者的投票要求,假定协作者已经崩溃,那么它最终会转换到<code>ABORT</code>状态。这种情况下与2PC中相同。与此类似,协作者可能在<code>WAIT</code>状态等待来自参与者的投票。当超时发生时,协作者就认为参与者已经崩溃,通过多播一个<code>GLOBAL_ABORT</code>消息来中止事务.<br>现在假定协作者在<code>PRECOMMIT</code>状态阻塞,当超时时它就认为一个参与者已经崩溃,但是可以知道那个参与者已经投票要提交事务。因此,协作者可以通过多播一个<code>GLOBAL_COMMIT</code>消息来指示可操作的参与者提交。另外,当崩溃的参与者再次启动时,它要依赖恢复协议来最终提交事务中属于它的部分。<br>参与者P可能在<code>READY</code>状态或<code>PRECOMMIT</code>状态阻塞。当超时时,P只能认为是协作者崩溃,所以它需要决定下一步做什么。与2PC中相同,如果P与其他处于<code>COMMIT</code>(或<code>ABORT</code>)状态的参与者联系,那么P也应该转换到该状态。另外,如果所有的参与者都处于<code>PRECOMMIT</code>状态,那么事务就可以安全提交。<br>与2PC相同,如果另一个参与者Q还处于<code>INIT</code>状态,那么就可以安全地中止事务。只有别的参与者都不处于<code>PRECOMMIT</code>时Q才能处于<code>INIT</code>状态,记住这一点很重要只有协作者在崩溃前已经到达<code>PRECOMMIT</code>状态并接收到每个参与者的提交表决时,参与者才可能到达<code>PRECOMMIT</code>状态。换句话说,没有参与者处于<code>INIT</code>状态而其他的参与者处于<code>PRECOMMIT</code>状态。<br>如果P可以联系的每个参与者都处于<code>READY</code>状态,那么事务应该被中止。要记住的一点是另外的参与者可能崩溃然后又恢复。但是,P(而不是任何其他可操作的参与者)知道崩溃的参与者在恢复之后的状态。如果进程恢复到INIT状态,那么决定中止事务是唯一正确的决定。在最坏的情况下,进程可以恢复到<code>PRECOMMIT</code>状态,但是在这种情况下,中止事务不会造成任何损害。</p><p>与2PC相比,3PC的主要不同点在于以下的这种情况:崩溃的参与者可能恢复到了<code>COMMIT</code>状态而所有其他参与者还处于<code>READY</code>状态。在这种情况下,其余的可操作进程不能做出最后的决定,不得不在崩溃的进程恢复之前阻塞。在3PC中,只要有可操作的进程处于<code>READY</code>状态,就没有崩溃的进程可以恢复到<code>INIT</code>、 <code>ABORT</code>或<code>PRECOMMIT</code>之外的状态。因此存活进程总是可以做出最后决定。<br>最后,如果进程P可以到达状态<code>PRECOMMIT</code>(并形成多数),那么提交事务就是安全的。这里说明在所有其他的进程至少处于<code>READY</code>状态的情况下,崩溃的进程可以恢复到<code>READY</code>、 <code>PRECOMMIT</code>或<code>COMMIT</code>状态</p><p>有关3PC的更多细节可以在文献(Bernstein等1987)和(Chow, Johnson1997)中找到。</p><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><p>迄今为止我们主要集中于讨论允许容错的算法。但是,一且发生了故障,使发生故障的进程恢复到正确的状态就是基本的问题了。下面我们首先说明恢复到正确状态到底意味着什么,然后说明如何通过检查点和消息日志的方式记录并恢复分布式系统的状态</p><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>容错的基本要求是从错误中恢复。回忆一下,错误是系统中可能导致失败的部分。错误恢复的总体想法是用正确的状态取代错误的状态。从本质上说,有两种形式的错误恢复。</p><p>在<strong>回退恢复(backward recovery)</strong>中,主要问题是要将系统从当前的错误状态回到先前的正确状态。要做到这一点,必须定时记录系统的状态,以便当发生错误时恢复到记录的状态。每次记录系统的当前状态时,就称为设置一个<strong>检查点(checkpoint)</strong>。<br>错误恢复的另一种形式是<strong>前向恢复(forward recovery)</strong>。在这种情况下,当系统进入错误状态时,不是回退到以前的检查点处的状态,而是尝试从可以继续执行的某点开始把系统带入一个正确的新状态。前向错误恢复机制的关键在于它必须预先知道会发生什么错误。只有在这样的情况下才有可能纠正错误并转到新的状态。</p><p>考虑一下可靠通信的实现,就很容易解释前向错误恢复与回退错误恢复之间的区别。要从分组丢失中恢复,通常的方法是让发送方重发该分组。实际上,分组重发就是尝试着回退到以前的正确状态,也就是发送丢失的分组时的状态。因此,通过分组重发获得的可靠通信就是应用回退错误恢复技术的一个例子。<br>还有一种可供选择的方式是使用一种称为<strong>擦除修正(erasure correction)</strong>的方法。这种方法是从其他成功传送的分组中建立丢失的分组。例如,在一个(n,k)块的擦除码中,一组k个源分组被编码为一组n个已编码的分组,这样任意k个已编码的分组都可以重建出原来的k个源分组。典型的值为k=16或k=32,而且$$k&lt;n\le 2k$$,请参阅(Rizo1997)。如果没有足够的分组被传送,发送方就不得不继续发送分组直到先前丢失的分组可以被重建为止。擦除修正是一种前向错误恢复方法的典型例子。</p><p>一般说来,回退错误恢复技术作为一种从分布式系统故障中恢复的机制被广泛应用。回退错误恢复的一个重要优点在于它是一种通用的方法,不依赖于任何特定的系统或进程。换句话说,它可以作为一项通用的服务集成到分布式系统的中间层中。<br>但是,回退错误恢复也有一些问题(Singhal, Shivaratri1994)。首先,把一个系统或进程恢复到原先的状态通常是一个相对开销较大的操作。例如,如接下来的部分讲述的那样,要从进程崩溃或站点失败中恢复通常需要做很多工作。<br>第二,因为回退错误恢复机制不依赖于实际使用的分布式应用程序,不能保证一旦进行了恢复就不再发生相同或类似的失败。如果需要这样的保证,那么通常需要应用程序在恢复中参与错误处理。换句话说,回退错误恢复机制通常不能提供完全的故障透明性。<br>最后,尽管回退错误恢复需要设置检查点,但也决不会回退到某些状态。例如,如果一个(可能是恶意的)人从自动柜员机上取走了1000美元时,那么即使自动柜员机立即回退这些钱也很难追回。与此类似,在大多数UNIX系统中输入:<code>bin/rm -fr</code>.之后,要从错误的工作目录中恢复到先前的状态绝大多数人可能是无能为力的。有些事情是不可逆的。</p><p>通过检查点可使系统恢复到先前的正确状态。但是,设置检查点通常是一个开销很大的操作,可能引起严重的性能问题。因此,很多容错的分布式系统把检查点与<strong>消息日志(message logging)</strong>相结合。在这种情况下,在设置检查点后,一个进程在发送消息之前对它进行记录(称为<strong>基于发送方的日志(sender-based logging)</strong>)。一种可供选择的方法是让接收进程在把到来的消息传送到它所执行的应用程序之前先记录消息。这种方法也称为<strong>基于接收方的日志(recelver-based logging)</strong>。当接收进程崩溃时,需要恢复到最近的检查点的状态,并从这个状态重放被发送的消息。把检查点与消息日志相结合使得有可能恢复到最近检查点的状态而无需付出设置检查点的代价.</p><p>在仅使用检查点方法与另外还使用日志的方法之间还有另一个重要的不同。在只使用检查点的系统中,进程将被恢复到设置检査点时的状态,它们的行为将与在发生故障之前不同。例如,因为通信时间是不确定的,消息可能以不同的次序发送,而导致接收方的不同响应。但是,如果使用了消息日志,那么就会发生从上次检查点之后事件的真实重放。这样的重放使得与外部世界相互作用更加容易。</p><p>我们来考虑一下由于用户提供了错误的输人而导致故障的情况。如果只使用检查点那么系统为了恢复到真正相同的状态,就不得不在接受用户输入之前设置检查点。而如果还使用消息日志,就可以使用一个较老的检查点,然后在用户应该提供输入的那一点之前进行事件的重放。在实践中,使用较少的检查点与消息日志相结合的方式比使用很多检查点的方式更有效。</p><p><strong>稳定存储</strong><br>要恢复到先前的状态,就有必要安全地存储恢复所需的信息。在这种情况下,安全性意味着恢复信息不仅要经得住进程崩溃与站点故障的考验,而且还要能经得住各种存储介质故障的考验。当在分布式系统中进行恢复时,稳定存储起着重要的作用。我们在这里对它进行简单的讨论。</p><p>存储可以分为三类。首先是普通的RAM存储,当掉电或机器崩溃时其中的信息会丢失。然后是磁盘存储,它不受CPU故障的影响,但是在磁盘头损坏的情况下会丢失信息。<br>最后介绍一种<strong>稳定存储(stable storage)</strong>,它被设计可以经得住除了诸如洪水或地震之类的灾难以外的任何情况的考验。稳定存储可以使用一对普通的磁盘来实现,如图8.23(a)所示。驱动器2中的每个块都是驱动器1中对应块的准确副本。当更新一个块时,首先对驱动器1中的块进行更新及验证,然后对驱动器2上的相同块进行相同的工作。<br><img src alt="稳定存储"><br>假定驱动器1已经更新,但是系统在更新驱动器2之前崩溃,如图8.23(b)所示。在恢复时磁盘可以逐块进行比较。只要两个对应的块不同,就可以假定驱动器1是正确的(因为驱动器1总是在驱动器2之前进行更新),所以就把新的块从驱动器1复制到驱动器2。完成恢复过程之后,两个驱动器就又是相同的了。<br>另外一个潜在的问题是块的自然损坏。微小的尘埃或日常的磨损都可以使以前有效的块突然在没有原因或警告的情况下发生校验和错误,如图8.23(c)所示。当探测到这样的错误时,损坏的块可以从另一个驱动器上对应的块中重新生成。<br>由于它的特点,稳定存储很适合于诸如原子事务这样需要高度容错的应用程序。数据被写入稳定存储然后再读出以验证它们是否被正确写入,这样以后数据丢失的机会就变得很小在下面两节中,我们将讨论与检查点和消息日志有关的更多细节。(Elnozahy等1996)提供了分布式系统中检查点与日志的一个调查。可以在(Chow,Johnson1997)中找到不同的算法细节。</p><h2 id="检查点"><a href="#检查点" class="headerlink" title="检查点"></a>检查点</h2><p>在容错的分布式系统中,回退错误恢复需要系统把它的状态有规律地保存到稳定存储中。分布式系统的状态已经在第5章进行了讨论。特别是,我们着重强调了记录一致全局状态的必要性,它也被称为<strong>分布式快照(distributed snapshot)</strong>。在分布式快照中,如果进程P记录了一条消息的接收,那么就应该有一个进程Q记录了该消息的发送。毕竟消息必须是来自某个地方的。<br>在回退错误恢复方法中,每个进程都按时把它的状态保存到本地可用的稳定存储中.要在进程或系统失败之后进行恢复,就需要我们从这些局部状态中建立一致的全局状态。特别是,最好恢复到最近的分布式快照,这种快照也被称为<strong>恢复线路(recovery line)</strong>。换句话说,恢复线路就对应于最近的一致性切面,如图8.24所示.<br><img src alt="恢复路线"></p><h3 id="独立的检查点"><a href="#独立的检查点" class="headerlink" title="独立的检查点"></a>独立的检查点</h3><p>不幸的是,每个进程的检查点是以一种不协调的方式来按时记录它的本地状态的,这种分布式本性使得要找到一个恢复线很困难。要找到恢复线需要每个进程都回退到它最近保存的状态。如果这些本地状态不能组成一个分布式快照,那么就需要进行进一步的回退下面我们说明一种寻找恢复线的方法。这种折叠回退的过程可能会导致<strong>多米诺效应(domino effect)</strong>,如图8.25所示。<br><img src alt="多米诺效应"></p><p>当进程P2崩溃时,我们需要把它的状态恢复到最近保存的检查点。与之类似,进程P1也需要进行回退。不幸的是,这两个最近保存的本地状态不能组成一个一致的全局状态,P2保存的状态表明了消息m的接收,但是没有其他进程说明其为发送方。因此,P2需要回退到更早的状态。<br>但是,P2要回退到的下一个状态不能用作分布式快照的一部分。在这种情况下,P1将记录消息m的接收,但是没有这一消息被发送的记录事件,因此有必要把P1回退到以前的状态。在这个例子中,恢复线就是系统的最初状态</p><p>由于进程独立地设置本地检查点,所以这种方法也被称为<strong>独立的检查点(independent check pointing)</strong>方法。另一种可以选择的方法是像我们下面要讨论的那样设置全局协调的检査点,但是协调需要全局同步,这可能会引起一些性能问题。独立检查点的另一个缺点是每个本地存储都需要按时清理,例如通过运行一个特定的分布式垃圾收集器来进行清理。但是它主要的缺点还是恢复线的计算。<br>实现独立的检查点需要记录依赖关系,应按照进程可以共同回退到一个一致的全局状态的方法来进行记录。用CPi(m)来表示进程Pi采用的第m个检查点,用INTi(m)来表示检查点CPi(m-1)与CPi(m)之间的间隔。<br>当进程Pi按INTi(m)的间隔发送消息时,它就在接收进程中加入(i,m)对。当进程Pj按INTj(n)的间隔接收消息时,就使用(i,m)的索引对,它记录了INTi(m)→INTj(n)的依赖关系。然后,当Pj采用检查点CPj(n)时,它就把这个依赖关系与恢复信息的其他部分起写入它的本地稳定存储中。<br>现在假定进程Pi在某个时刻需要回退到检查点CPi(m-1)。要确保全局一致性,我们需要确保所有从Pi那里接收到了按间隔INTi(m)发送的消息的进程都回退到在接收这个消息之前的检查点状态。特别是,在我们的例子中,进程至少需要回退到检查点CPj(n-1)。如果CPj(n-1)导致了不一致的全局状态,那么还需要进行更多的回退。</p><p>计算恢复线需要对每个进程在设置检查点时记录的时间间隔依赖关系进行分析。我们不讨论更多的细节,可以证明:这样的计算是相当复杂的,与协调检查点相比,独立检查点对这些计算的需求也是不尽合理的。另外,它不是支配性能因素的进程之间的协调,相反,需要把状态保存到本地稳定存储中,它还造成一些额外开销(Einozahy等1992)。因此,协调检查点使用得更为普遍,它也比独立检查点更为简单</p><h3 id="协调检查点"><a href="#协调检查点" class="headerlink" title="协调检查点"></a>协调检查点</h3><p>顾名思义,在<strong>协调检查点(coordinated checkpointing)</strong>中,所有的进程都同步地把它们的状态写到本地稳定存储中。协调检查点的<strong>主要优点</strong>是所保存的状态自动保持全局一致,</p><p>这样就可以避免导致多米诺效应的折叠回退。可以使用第5章中讨论的分布式快照算法来协调检査点。这种算法是非阻塞的检查点协调的一个例子。</p><p>一种比较简单的方法是使用两阶段的阻塞协议。首先协作者向所有进程多播一个<code>CHECKPOINT_REQUEST</code>消息。当进程接收到这样的消息时就设置一个本地检查点,通过它正在执行的应用程序将随后传递给它的消息进行排队,然后向协作者确认它已经设置了检查点。当协作者接收到所有进程的确认时,它就多播一个<code>CHECKPOINT_DONE</code>消息让(阻塞的)进程继续执行.</p><p>很容易看出这种方法可以使全局状态一致,因为没有即将进来的消息注册为检查点的部分。其原因在于任何跟随在设置检查点的请求之后的消息都不被认为是本地检查点的部分。同时,在接收到<code>CHECKPOINT_DONE</code>消息之前对即将发出的消息(当通过运行的应用程序传递给检查点进程的时候)在本地进行排队。</p><p>对这种算法的一种改进是只对那些依赖协作者的恢复的进程多播检查点请求而忽略其他进程。如果一个进程在设置了上个检查点之后接收到了与协作者发送的消息直接或间接相关的消息,那么这个进程就是依赖于协作者的。这称为<strong>增量快照(incremental snapshot)</strong>.<br>要设置一个增量快照,协作者只对那些在上次设置检查点之后对之发送了消息的进程多播检查点请求。当进程P接收到这样的请求时,它就把请求转发给那些在上次检查点之后P本身向之发送了消息的所有进程,等等。一个进程只转发一次请求。当确认所有的进程之后,使用第二次多播来引发实际的检查点,然后所有的进程继续执行。</p><h2 id="消息日志"><a href="#消息日志" class="headerlink" title="消息日志"></a>消息日志</h2><p>考虑到设置检查点是一个开销很大的操作,特别是该操作涉及到向稳定存储中写入状态,需要寻找一种可以减少检查点的数目但是还允许恢复的技术。在分布式系统中有一种重要的技术消息日志。</p><p>消息日志的<strong>基本思想</strong>是:如果消息的传输可以重放,那么我们就能够到达一个全局一致的状态而不需要从稳定存储中恢复该状态。它使用一个检査点状态作为开始点,然后简单地把从该点以后发送的所有消息都重发并进行处理.</p><p>假定采用<strong>分段确定模式(piecewise deterministic model)</strong>,这种方法可以很好地工作.在这种模式中,假定每个进程的执行都有一连串的间隔,事件是在这些间隔中发生的。这些事件与我们在第6章中讨论过的Lamport的先发生关系中的事件相同。例如,一个事件可能是一条指令的执行、一条消息的发送等。假定分段确定模式中的每个间隔都以一个非确定性的事件开始,例如一条消息的接收。但是,这个时刻之后进程的执行就是完全确定的。一个时间间隔以发生非确定性的事件之前的最后一个事件结束。<br>实际上,如果以相同的非确定性事件作为开始进行重放,那么一个间隔的重放可以具有已知的结果,也就是说,以一种完全确定的方式进行重放。因此,如果我们在这样的模式中记录下所有的非确定性事件,就有可能以一种确定的方式完全重放整个进程的执行。</p><p>考虑到要从进程崩溃中恢复到一个全局一致的状态时消息日志是必需的,准确地知道什么时候对消息进行记录是很重要的。 Alvisi和 Marzullo(1998)介绍的方法说明,如果我们关注现存的消息日志方案如何处理孤儿进程,那么可以容易地描述消息日志方案的特征。<br><strong>孤儿进程(orphan process)</strong>就是在其他进程崩溃之后还存在的进程,但是它的状态与恢复之后的崩溃进程不一致。图8.26中的情况就是一个例子。进程Q从进程P与R那里分别接收到消息m1和m2,然后把消息m2发送给R。但是,与其他消息不同,消息m2没有进行日志记录。如果进程Q崩溃然后恢复,那么要恢复Q只需要重放记录了的消息,在我们的例子中就是m1,因为m2没有进行记录,它的传输也就不会被重放,这意味着m2的传输不会发生。<br><img src alt="在恢复之后不正确的重放导致孤儿进程"><br>但是Q恢复之后的情况是与它恢复之前不一致的。特别是,R保留了在崩溃之前发送的消息,但是在重放崩溃之前发生的事情时该消息的接收与传送还没有发生。很明显,这样的不一致应该避免。</p><p><strong>描述消息日志方案的特征</strong><br>为了描述不同的消息日志方案的特征,我们使用在文献(Alvisi, Marzullo1998)中说明的方法。认为每个消息m都具有头部,头部中包含了重发m并正确处理它所需的所有信息。例如,每个头部都包含了发送方和接收方的标识符以及一个用来识别它的序列号。另外还有一个传送号码用来确定它应该在何时被传送给接收应用程序。<br>如果消息不再被丢失就被称为是<strong>稳定的(stable)</strong>,例如因为它被写入了稳定存储。因此可以使用重放稳定消息的传输来进行恢复。</p><p>每个消息m都导致产生一个进程组DEP(m),它依赖于m的传送。特别是,DEP(m)由那些接收m的进程组成。另外,如果另一个消息m’由于因果关系也要依赖m的传送,而且m被传送给进程Q,那么Q也包含在DEP(m)中。注意,m是按因果关系依赖于m的传送的,如果它由先前传送m的同一个进程发送,或者它传送了另一个按因果关系依赖于m的传送的消息。<br>COPY(m)进程集由这样一些进程组成:它们具有m的副本,但是该副本不在它的本地稳定存储中。当一个进程传送消息m时,它就也成为COPY(m)的成员。注意,COPY(m)由那些可以移交m的副本的进程组成,这些副本可以用来重放m的传输。如果所有这些进程都崩溃了,那么重放m的传输显然就是不可能的。<br>使用这些表示,现在很容易就可以准确定义孤儿进程是什么了。假定一些进程在分布式系统中崩溃了,Q是幸存的进程之一。如果Q包含在DEP(m)中,在COPY(m)中的每个进程都崩溃了的同时存在消息m,那么Q就是一个孤儿进程。换句话说,如果一个进程依赖于m,但是没有办法来重放m的传输时它就是一个孤儿进程。</p><p>要避免产生孤儿进程,需要确认:如果COPY(m)中的每个进程都崩溃了,在DEP(m)中没有幸存的进程。换句话说,DEP(m)中的所有进程都应该已经崩溃了。如果我们能保证不论何时一个进程成为了DEP(m)的成员,它也要成为COPY(m)的成员,那么就可以满足这个条件。换句话说,不论何时一个进程要依赖于m的传送,那么它就总要保持m的一份副本。</p><p>可以使用两种方法来做到这一点。第一种方法称为<strong>悲观日志协议(pessimistic logging protocol)</strong>。这个协议认为对于每个非稳定的消息m,都最多有一个进程依赖它。换句话说,悲观日志协议确保每个非稳定的消息m都最多被传送给一个进程。注意只要m被传送给进程P,P就成为COPY(m)的成员<br>最坏的情况就是P在m还没有被记录的时候就崩溃了。使用悲观日志,在传送m之后,如果还没有确保m被写到稳定存储就不允许P发送任何消息。因此,没有其他进程会依赖m的传送,这就没有了重放m的传输的可能性。这种方法可以避免孤儿进程.<br>相反,在<strong>乐观日志协议(optimistic logging protocol)</strong>中,在发生崩溃之后才进行实际的工作。特别是,假定对某个消息m,COPY(m)中的每个进程都崩溃了。在乐观的方法中,DEP(m)中的任何孤儿进程都被回退到一个不再属于DEP(m)的状态。很明显,乐观日志协议需要跟踪依赖关系,这使它们的实现变得更复杂。</p><p>像在(Einozahy等2002)中指出的那样,悲观日志要比乐观的方法简单得多,所以在实际的分布式系统设计中它是消息日志的首选方法.</p><h2 id="面向恢复的计算"><a href="#面向恢复的计算" class="headerlink" title="面向恢复的计算"></a>面向恢复的计算</h2><p>处理恢复的一个有关方法是从头开始。这种掩盖故障的方法的<strong>基本原理</strong>是,为了恢复而优化可能会更划算,从而使得系统避免处于长时间的故障之中。这种方法由称为<strong>面向恢复的计算(recovery- oriented computing)</strong>( Canda等2004a).</p><p>面向恢复的计算有几个优点。其中一个是,只需要重新启动部分系统和因特网服务器(Canda等2004b,2006)。为了使得可以只启动部分系统,其关键是故障被正确地局部化了。此时,重新启动只是意味着删除掉确定组件的实例以及在这些组件上进行的线程,并(经常)重新开始有关的请求。注意,故障局部化本身可能就不是一件简单的事情(Steiner和Sethi,2004).<br>为了使重新启动成为一个确实可行的恢复技术,要求组件尽量分离,使得不同组件之间尽量少或没有关联。如果组件之间存在很强的关联,那么故障本地化和分析仍然要求在故障发生时,需要应用传统的恢复技术使这个服务器重新启动,而且这不比我们上面刚讨论的技术更有效。</p><p>面向恢复的计算另一个优点是,在已变化的环境下,可以应用检查点和恢复技术而不影响系统的继续运行。这里基本思想是,如果给予程序更多的缓冲空间、内存在分配之前进行清零、改编消息传送的顺序(只要这不影响消息的语义就可以)等等,很多故障是可以避免的Qin等2005)。关键思想是处理软件故障(到目前为止所讨论的很多技术针对都是基于硬件故障的)。因为软件运行是高度可确定的,改变运行环境就可以扭转局面,而且无需修理任何东西。</p>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> distributed-system </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> distributed system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统 - 一致性和复制]]></title>
      <url>http://www.wrran.com/blog/2017/12/28/review/distributed-system/7-consistency-and-replication/</url>
      <content type="html"><![CDATA[<blockquote><p>三个臭皮匠赛过诸葛亮</p></blockquote><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>分布式系统的一个重要问题是数据的复制。对数据进行复制一般是为了增强系统的可靠性或提高性能。实现数据复制的一个主要难题是保持各个副本的一致性。通俗地说,这意味着在更新一个副本时,必须确保同时更新其他副本;否则,数据的各个副本将不再相同。本章将深入讨论复制数据的一致性的真正含义,以及实现这种一致性的各种方法。<br>首先,我们概要地介绍复制的用途,以及它与可扩展性的关系。然后介绍什么是真正的一致性。一种重要的一致性模型是多个进程同时访问共享数据的情况。在这种情况下,根据什么进程希望何时读取和更新共享数据,同时知道其他进程正在访问该数据,就可以明确地表示一致性。<br>通常,在大规模分布式系统中有效地实现共享数据的一致性模型是很困难的。而且,在很多情况下可以采用较为简单的模型。它们也往往比较容易实现。以客户为中心的一致性模型就是其中一种。这种模型从一个单一的(可能是移动的)客户的角度来关注一致性。我们将在单独的一节中讨论这种以客户为中心的一致性模型。<br>一致性仅仅是问题的一个方面,我们还要考虑如何真正地实现一致性。这里主要有两个问题需要考虑。首先,我们关注的是副本的管理,这不仅要考虑到副本服务器的放置,还有考虑到内容是如何在这些服务器之间分发的。<br>第二个问题是如何保持多个副本的一致性。在大多数情况下,应用程序都要求数据保持很强的一致性。简单地说,这意味着数据更新必须快速地传播给每个副本。实现这种强致性有多种不同的方法,这些方法将在单独的章节中进行讨论。另外,我们还将讨论一类特殊的一致性协议,即缓存协议。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本节首先讨论进行数据复制的主要原因。我们将复制作为一种实现可扩展性的技术进行讨论，并指出一致性如此重要的原因。</p><h2 id="进行复制的原因"><a href="#进行复制的原因" class="headerlink" title="进行复制的原因"></a>进行复制的原因</h2><p>进行数据复制主要处于两个目的：可靠性和性能。首先，数据复制可以提高系统的可靠性。如果一个文件系统已经实现数据复制,那么当一个副本被破坏后,文件系统只需转换到另一个数据副本就可以继续运行下去。同样,通过维护多个副本,系统可以更好地防止数据破坏。例如,假设一个文件存在三个副本,而且每个读写操作都在各个副本上执行。这样,可以保护数据不会因为一个失败的写操作而受到破坏,因为此时至少两个副本的值是正确的。<br>进行数据复制的另一个目的是提高性能。当分布式系统需要在服务器数量和地理区域上进行扩展时,复制对于提高性能是相当重要的。例如,当需要访问由单一服务器管理的数据的进程数不断增加时,系统就需要进行服务器数量上的扩充。在这种情况下,通过对服务器进行复制,随后让它们分担工作负荷,就可以提高性能。<br>地理区域上的扩展也可能需要进行数据复制。其基本思想是,如果在使用数据的进程附近放置一份该数据的副本,那么进程访问数据所花费的时间将减少。对于这个进程来说性能就相对地提高了。但这个示例也说明了复制给性能带来的益处是难以评估的。虽然一个客户进程可能获得较好的性能,但是这也可能导致为维持所有副本的更新而消耗了更多的网络带宽。</p><p>如果复制有助于提高可靠性和性能,那么谁还会反对呢?然而,进行数据复制是需要付出代价的。复制所带来的问题是多个副本可能导致一致性方面的问题。一旦某个副本被修改了,那么它将不同于其他所有的副本。因此,必须对所有的副本进行同样的修改以确保一致性。执行这些修改的确切时间和方式决定了复制代价的大小。</p><p>为了便于理解这个问题,来看看改善Web页面访问时间的示例。如果不采用特别的方法,从远程Web服务器获取一个页面有时甚至需要几秒的时间才能完成。为了提高性能,web浏览器通常都在本地存储一个以前获取的该Web页面的副本(也就是说,web浏览器对Web页面进行<strong>缓存(cache)</strong>。如果用户需要再次访问那个页面,浏览器会自动返回本地副本。这样,用户所觉察到的访问时间是非常短的。然而,如果用户总是想获得最新版本的页面,他可能就会不那么走运了。问题在于,如果此时对页面进行了更新,而这些更新还没有传播到被缓存的副本,那么缓存的副本就是过时的了。<br>为了解决这个问题,一种方法是禁止浏览器保存本地副本,由服务器完全负责复制事宜。然而,如果用户附近没有数据副本,这种方法会导致访问时间的延长。另一种方法是由Web服务器标识出无效的缓存副本并对它们进行更新,但是这种方法要求服务器跟踪所有的高速缓存,并向它们发送消息。这可能会降低服务器的整体性能。我们将在下面接着讨论性能与可扩展性的问题。</p><h2 id="作为扩展技术的复制"><a href="#作为扩展技术的复制" class="headerlink" title="作为扩展技术的复制"></a>作为扩展技术的复制</h2><p>为了提高性能,<strong>复制</strong>和<strong>缓存</strong>作为扩展技术得到了广泛的应用。可扩展性问题往往以性能问题的形式出现。将数据和对象的副本放置在使用它们的进程的附近,可以减少访问时间,提高性能,从而解决可扩展性问题。<br>可能要一个付出的代价是使副本保持为最新的数据要求更多的网络带宽。例如,一个进程P每秒访问一个本地副本N次,而这个副本自身每秒更新M次。假设每次更新都完全刷新本地副本的原有版本。如果N&lt;&lt;M,也就是说,访问与更新的比率很低,那么我们所面临的情况是,很多本地副本的更新版本从未被P访问过,使得为这些版本更新而付出的网络通信毫无用处。在这种情况下,最好不要在P附近安装本地副本,或者应该采用其他更新副本的策略。后面还会继续讨论这一问题.<br>然而,一个更为严重的问题是,保持多个副本间的一致性本身就可能存在严重的可扩展性问题。直观地看,当多个副本总保持相同的时候,这些副本的集合是一致的。这意味着在任何副本上执行读操作都将返回相同的结果。因此,在一个副本上执行更新操作时,无论这操作是在哪个副本上启动或执行的,这一更新操作都应该在后续操作发生前传播到所有副本。</p><p>这种类型的一致性有时不规范地(也不准确地)称为<strong>强一致性</strong>,如同所谓的同步复制所提供的一致性(我们将在下一节给出一致性的准确定义,并引入一系列一致性模型)。其关键思想是<strong>以单个的原子操作或事务的形式在所有副本上执行更新</strong>。不幸的是,当这种原子操作涉及到大量的、可能广泛散布在大型网络中的副本,同时要求原子操作快速完成时,实现这些操作是相当困难的。<br>其中的困难来自于需要同步化所有副本这一事实。从本质上说,这意味着所有副本首先需要就本地执行更新的确切时间达成共识。例如,副本可能需要使用Lamport时间戳来决定执行操作的全局顺序,或由一个协调器来分配这样一个顺序。全局同步需占用大量通信时间,特别是副本散布于广域网时更是如此。</p><p>现在我们处于进退两难的境地。一方面,可扩展性问题可以通过采用复制和缓存技术得到缓解。而另一方面,保持所有副本的一致性通常要求全局同步,而全局同步必然造成性能的严重下降。这似乎有些得不偿失<br>在很多情况下,唯一可行的解决方法是放宽在一致性方面的限制。也就是说,如果可以<strong>放松“更新必须以原子操作的方式执行”</strong>这一要求,就可以避免进行(瞬间的)全局同步,从而可以获得较好的性能。所付出的代价是各个副本可能并不总是相同的。事实表明,<strong>一致性可被放宽的程度主要取决于复制数据的访问和更新模式,同时还取决于这些数据的用途。</strong></p><p>在以下几节中,我们将先讨论一系列一致性模型。这些模型提供一致性的准确定义。然后,我们将讨论通过分发和一致性协议实现一致性模型的不同方法。有关一致性和复制的不同分类方法可以参见(Gray等1996; Wiesmann等2000)。</p><h1 id="以数据为中心的一致性模型"><a href="#以数据为中心的一致性模型" class="headerlink" title="以数据为中心的一致性模型"></a>以数据为中心的一致性模型</h1><p>通常,总是在讨论共享数据的读操作和写操作时讨论一致性问题。这些共享数据是通过分布式共享存储器、分布式共享数据库或分布式文件系统实现的。在本节中,我们将使用更广义的术语,即<strong>数据存储(data store)</strong>。数据存储可以物理地分布在多台机器上。特别是,假设每个可以访问数据存储中的数据的进程都有整个数据存储的一个本地或邻近的副<br>本,写操作将传播到其他副本,如图所示。一个更改数据的数据操作被归类为写操作,否则归类为读操作。<br><img src alt="数据存储的一般组织结构"></p><p><strong>一致性模型(consistency model)</strong>实质上是进程和数据存储之间的一个约定。即,如果进程同意遵守某些规则,那么数据存储将正常运行。正常情况下,一个进程在一个数据项上执行读操作时,它期待该操作返回的是该数据在其最后一次写操作之后的结果。<br>在没有全局时钟的情况下,精确地定义哪次写操作是最后一次写操作是十分困难的。作为替代的方法,我们需要提供其他的定义,因此产生了一系列的一致性模型。每种模型都有效地限制了在一个数据项上执行一次读操作所应返回的值。正如可以预料到的,带有较少限制的模型比较容易使用,而带有较多限制的模型使用起来则比较困难。当然,在另一方面,容易使用的模型的执行效果不如较复杂的模型那样好。这就是生活。</p><h2 id="持续一致性"><a href="#持续一致性" class="headerlink" title="持续一致性"></a>持续一致性</h2><p>从前面的讨论可以清楚地看出,对复制数据问题没有最好的解决方法。复制数据会导致一致性问题,这用一般方法不能有效地解决。除非放宽对一致性的限制才有希望获得有效的解决方法。但是也没有放宽一致性的通用标准:哪些东西可以容忍很大程度上是取决于应用程序。</p><p>有多种不同的方法来为应用程序指定它们能容忍哪些不一致性。(Yu和Vahdat 2002)给出了一种通用方法,为定义不一致性区分了<em>三个相互独立的坐标轴</em>:副本之间的数值偏差、副本之间新旧程度的偏差以及更新操作顺序的偏差。他们称这些偏差形成了<strong>持续一致性(continuous consistency)</strong>的范围。</p><p>其数据具有数值语义的应用程序可以用按数值偏差来度量不一致性。一个明显的示例是股票市场价格记录的复制。在这种情况下,应用程序可能会指定两个副本的偏差不能超过0.02美元,这就是<strong>绝对数值偏差(absolute numerical deviation)</strong>。也可以指定<strong>相对数值偏差(relative numerical deviation)</strong>,表示两个副本之间的差别不能超过多少(例如0.5%)。数值偏差可以这样来理解:已应用于给定的副本但还没有应用于其他副本的更新数目。例如,一个Web缓存可能还没有得到Web服务器执行的一批操作。在这种情况下,数值的相关偏差又称为权重。</p><p>新旧偏差与副本最近一次更新有关。对某些应用程序来说,只要副本提供的旧数据不是太旧,它是可以容忍的。例如,天气预报通常要滞后一段时间(如几个小时)。在这种情况下,主服务器会定期地接收更新信息,但在一段时间内只给副本传播一次更新信息。</p><p>最后,在有些应用程序中,只要可以界定副本之间的差异,就允许不同的副本采用不同的更新顺序。这些更新的一种方法是,暂时性地把这些更新应用到一个本地副本,等待所有副本达成全局一致。因此,可能需要回滚某些更新,在成为永久更新之前,以不同的顺序进行更新。直观上来看,顺序偏差比另外两种一致性偏差更难掌握。我们将给出一些示例来阐述清楚。</p><p><strong>一致性单元</strong></p><p>为了定义非一致性,Yu和 Vahdat引入了<strong>一致性单元</strong>(consistency unit,简称为conit)。一致性单元表示的是其一致性可以度量的单元。例如,在股票交易的示例中,就可以把表示单个股票的记录定义为一个一致性单元。另一个示例就是单个的天气预报。</p><p>为了给出一致性单元的一个示例,同时解释数值偏差和顺序偏差,请看下图所示的两个副本。每个副本i维护一个二维向量时钟VC。我们使用(t,i)来表示副本i在逻辑时间t中执行的一个操作。<br><img src alt="阐述一致性偏差的示例"><br>在这个示例中,我们可以看到两个副本作用在一个含有数据项x和y的一致性单元上。这两个变量都假设被初始化为0。副本A从副本B接收操作<code>5,B: x&lt;-x+2</code>并使其为永久性的(也就是说,该操作被提交给A,且不能回滚)。副本A有三个暂时的更新操作(8,A)、(12,A)和(14,A),这给它带来的顺序偏差为3。还要注意的是,由于最后的操作是(14,A),A的向量时钟变成了(15,5).<br>A还没有看到来自B的唯一操作是(10,B),使其数值偏差为1。这本示例中,该偏差的权重可以表示为A的(已提交)值x和y,与A还没有接收到的来自B的操作产生的结果之间的最大差分。A的已提交值是(x,y)=(2,0),而(A还没有接收到的)B操作产生了y=5的差分。<br>同样的推理可以证明,B有两个暂时的更新操作(5,B)和(10,B),这意味着它的顺序偏差为2。因为B没有接收到来自A的操作,因此其向量时钟变成了(0,11)。数值偏差为3,总权重为6。</p><p>注意,<strong>这里需要在维护细颗粒的一致性单元与粗颗粒的一致性单元之间进行平衡</strong>。如果一致性单元表示的是大量数据,如一个完整的数据库,那么为所有数据的更新汇集成一个一致性单元。因此,迟早会使得副本处于非一致的状态。例如,在下图中,假设两个副本之间相差不超过一个输出更新。在这种情况下,当图(a)的数据项更新了第一个副本,那么第二个也需要被更新。如果如图(b)所示的那样选择更小的一致性单元,那么情况就不是这样了。这里副本仍认为是最新的。这个问题重要的部分原因是,包含在一致性单元中的数据项是完全独立使用的,这种情况被称为<strong>虚假共享(falsely share)</strong>一个一致性单元。<br><img src alt="为一致性单元选择适当的粒度"><br>但是,使得一致性单元太小并不是好主意,原因很简单,这样的话,需要管理的一致性单元总数也增加了。换句话说,这里需要考虑到管理一致性单元的费用。管理费用可能会对整体性能有负面影响,因此需要给予考虑。<br>从概念上来说,一致性单元为满足一致性需求提供了一种很吸引人的方法,但在把它们放到实际使用中之前,还需要处理两个重要的问题。首先,为了确保一致性,需要一些协议关于持续一致性的协议将在本章后面讨论。</p><p>第二个问题是,持续程序开发人员必须为他们的应用程序指出一致性需求。实践表明,获得这种需求可能会非常困难。编程人员往往不熟悉处理复制问题,更不要说让他们去理解一致性的详细信息了。因此,编程接口必须是简单且容易理解的。可以把持续一致性实现为一种工具包,对编程人员来说,这种工具包就像是一个函数库,他们可以把它链接到他们的应用程序中去。可以把一个一致性单元声明为只是一个数据项的一次更新。例如,下面伪代码段：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AffectsConit(ConitQ, 1);</span><br><span class="line">appen messege m to queue Q;</span><br></pre></td></tr></table></figure><p></p><p>表示把一个消息附加到队列Q中,其中队列Q属于一个名为ConitQ的一致性单元。同样,现在也可以如下声明与一致性单元有关的操作:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DependsOnConit(ConitQ, 4, 0, 60);</span><br><span class="line">read message m from head of queue Q;</span><br></pre></td></tr></table></figure><p></p><p>在这种情况下,对DependsOnConit的调用指明,数值偏差、顺序偏差和新旧程度偏差必须分别限制在4、0和60(秒)。这可以解释为,其他副本最多只能有4个未接收到的更新操作,无暂时的本地更新,在60秒钟内必须检查Q的本地副本的新旧程度。如果这些需求没有完全满足,底层中间件将把Q的本地副本置于可以执行读操作的状态。</p><h2 id="一致的操作顺序"><a href="#一致的操作顺序" class="headerlink" title="一致的操作顺序"></a>一致的操作顺序</h2><p>过去的几十年以来,除了持续一致性以外,人们对以数据为中心的一致性模型做了大量工作。一种重要的模型来自并发程序设计。在并行和分布式计算中,面临着这样一个事实:多个进程需要同时共享资源并访问这些资源,研究人员寻求描述当共享资源被复制时的并发访问的语义。这就至少产生了一种重要的、被广泛使用的一致性模型。下面,我们来关注顺序一致性,我们还将讨论一种更弱的变体,即因果一致性。</p><h3 id="顺序一致性"><a href="#顺序一致性" class="headerlink" title="顺序一致性"></a>顺序一致性</h3><p>下面我们将使用一种特殊的表示法,沿一个时间轴来绘制一个进程的操作。时间轴总是水平绘制的,时间从左到右增长。符合$$W_i(x)a$$和$$R_i(x)b$$分别表示进程$$P_i$$把数值a写入数据项x,以及进程$$P_i$$从数据项x读取数据后返回数值b。假设每个数据项初始时为NIL。当不会混淆是哪个进程访问数据时,我们将把W和R的索引省略掉。<br><img src alt="作用于相同数据项上的两个进程的行为"><br>上图所示的示例往数据项x写入数据,把数据项x的值修改为a。注意,原则上,操作$$W_1(x)a$$首先在$$P_1$$的本地副本上执行,然后传播给其他副本。在这个示例中,$$P_2$$随后读取值NIL,然后后(从其本地副本中)读取值a。这里我们可以看到,把x的更新传播给$$P_2$$花费了一些时间,这是可以接受的。</p><p><strong>顺序一致性(sequential consistency)</strong>是一种重要的以数据为中心的一致性模型。它是由Lamport(1979)在解决多处理器系统的共享存储器时首次提出的。通常,数据存储满足以下条件时,称为是顺序一致的:<strong>任何执行结果都是相同的,就好像所有进程对数据存储的读、写操作是按某种序列顺序执行的,并且每个进程的操作按照程序所制定的顺序出现在这个序列中</strong>。<br>以上定义的意思是,当进程在多台(可能)不同机器上并发运行时,任何读、写操作的有效交叉都是可接受的行为,但是所有进程都看到相同的操作交叉。注意,这里并未提及时间,也就是说,这里并未提及“最近一次”对一个对象的写操作。在这里,进程可以“看到”所有进程的写操作,但是只能看到它自己的读操作。</p><p><img src alt="顺序一致性的示例"><br>从图中可以看出,时间不起作用。假设有4个进程对同一数据项x进行操作。图(a)中的进程$$P_1$$对数据项x执行W(x)a写操作,随后(绝对时间),进程$$P_2$$也执行了一次写操作,将x的值设置为b。然而,进程P3和P4先读到值b,然后才读到值a。换句话说,进程P2的写操作发生在进程P1的写操作之前。<br>而图(b)违背了顺序一致性,因为不是所有的进程看到了相同的写操作交叉。特别是对进程$$P_3$$而言,数据项好像首先变为b,然后变为a。而进程$$P_4$$却得到数据项的最终值b</p><p>为了更具体地理解顺序一致性的含义,让我们来看看下图。(Dubois等1988)所示的三个并发执行的进程$$P_1$$、$$P_2$$和$$P_3$$。在这个例子中,数据项是三个整型变量x、y和z,它们存储在顺序一致(也可能是分布的)的共享数据存储中。假设每个变量的初始值都是0。在本例中,赋值语句与写操作对应,而显示语句与该时刻它所带两个参数的读操作对应。假定所有语句都是不可分割的。<br><img src alt="三个并发执行的进程"><br>各种交叉执行序列都是可能的。对于6个独立的语句而言,将有720(即6!)种可能的执行序列,其中某些序列可能违背了程序顺序。假设120(即5!)种序列以<code>x&lt;-11</code>开始,一半的序列(即60种)在<code>y&lt;-1</code>之前执行了<code>print(x,z)</code>,那么这些序列就违背了程序顺序。然后这其中的一半(即30种)序列在<code>z&lt;-1</code>之前执行了<code>print(x,y</code>),也违背了程序顺序。这样,只有120种的四分之一的序列(即30种)是有效的。以<code>y&lt;-1</code>开始的序列有30种有效序列,以<code>z&lt;-1</code>开始的有效序列也有30种。因此,总共有90种有效的执行序列。下面是其中4种有效序列。<br><img src alt="四种有效执行顺序"></p><p>在图(a)中,三个进程以如下顺序运行:首先运行$$P_1$$,然后运行$$P_2$$,最后运行$$P_3$$.而另外三个示例则说明了虽然在时间上不同但同时有效的语句的交叉。三个进程都输出两个变量的值。因为每个变量可取的唯一值都是初始值(0)或所赋的值(1),所以每个进程生成一个两位的字符串。<code>Prints</code>后的数字是显示在输出设备上的实际输出。<br>如果将$$P_1$$、$$P_2$$和$$P_3$$的输出按照输出顺序连接起来,那么所得到的6位字符串说明了每种语句交叉的特点,如图所示的<code>Signature</code>字符串。下面我们将使用该字符串(而不是输出结果)来表示语句的执行顺序。<br>不是所有64个签名模式都是允许的。例如,<code>00000</code>就是不允许的,因为它意味着显示语句在赋值语句之前执行,这违反了语句必须按程序顺序执行的要求。另一个例子是<code>001001</code>。前两位为<code>00</code>,意味着当$$P_1$$执行显示语句时,b和c的值都是0。只有$$P_1$$在$$P_2$$或$$P_3$$启动之前执行这条语句才会出现这种情况。接下来的两位为<code>10</code>,意味着$$P_2$$必须在$$P1$$启动后而$$P_3$$仍未启动前执行。最后两位为<code>01</code>,意味着$$P_3$$必须在$$P_1$$启动前完成。而我们已经看到$$P_1$$必须先执行,所以,<code>001001</code>也是不允许的。</p><p>简而言之,90个不同的有效语句顺序产生各种各样不同的程序结果(虽然少于64种)，这些都是满足顺序一致性假设前提的结果。<strong>进程与分布式的共享数据存储间的协议是,进程必须只接受有效的程序结果。</strong>换句话说,进程必须只将上所示的4种结果以及所有其他有效结果视为正确答案。如果出现其中任何一种结果,进程都必须正常地运行。仅对其中部分结果可以运行,而对另一些结果不能运行的程序违背了数据存储的协议,是不正确的。</p><h3 id="因果一致性"><a href="#因果一致性" class="headerlink" title="因果一致性"></a>因果一致性</h3><p><strong>因果一致性(causal consistency)模型</strong>(Hutto和 Ahamad1990)表示的是一种弱化的顺序一致性模型,因为它将具有潜在因果关系的事件和没有因果关系的事件区分开来。在前面讨论向量时间戳时,我们已经遇到了因果关系的问题。如果事件B是由事件A引起的,或受到事件A的影响,那么因果关系必然要求其他每个人先看到事件A,再看到事件B.</p><p>考虑一个分布式数据库的示例。假设进程$$P_1$$对数据项x执行了写操作。然后,进程$$P_2$$先读取x,然后对y执行写操作。这里,对x的读操作和对y的写操作具有潜在因果关系,因为y的计算可能依赖于$$P_2$$所读取的x的值(也就是$$P_1$$所写的值)。另一方面,如果两个进程自发且同时地对两个不同的数据项执行写操作,这两个事件就不具备因果关系。无因果关系的操作称为是<strong>并发的(concurrent)</strong>。</p><p>如果数据库是因果一致的,那么它必须服从以下条件:<strong>所有进程必须以相同的顺序看到具有潜在因果关系的写操作。不同机器上可以以不同的顺序看到并发的写操作</strong>。</p><p><img src alt="因果一致性的示例"><br>上图是一个因果一致性的示例。这里的事件顺序是因果一致的存储所允许的,但该顺序是顺序一致的存储或严格一致的存储所禁止的。值得注意的是,写操作$$W_2(x)b$$和$$W_1(x)c$$是并发的,所以没有必要要求所有进程以相同的顺序看到它们。</p><p><img src alt="因果一致性的正反例"><br>现在,我们看看另一个示例。图(a)中,$$W_2(x)b$$潜在地依赖于$$W_1(x)a$$,这是因为b可能是使用$$R_2(x)a$$所读取的值进行计算的结果。两个写操作是因果相关的,所以所有进程必须以相同的顺序看到这两个操作。因此,图(a)是不正确的。但是,图(b)删除了读操作,所以$$W_1(x)a$$和$$W_2(x)b$$现在是并发的写操作了。因果一致的存储并不要求并发的写操作是全局有序的，所以图(b)是正确的。图(b)反映了顺序一致性存储所不能接收的一种情况。</p><p>实现因果一致性要求追踪哪些进程看到了哪些写操作。这就意味着必须构建和维护一张记录哪些操作与哪些操作有关的关系图。一种实现方式就是前面所讨论的向量时间戳。后续也将继续讨论使用向量时间戳捕获因果关系的方法。</p><h3 id="分组操作"><a href="#分组操作" class="headerlink" title="分组操作"></a>分组操作</h3><p>顺序一致性和因果一致性是在读写操作层面上定义的。这种粒度层是有历史原因的：这些模型最初是为了共享内存的多处理器系统开发的,在硬件层面上真正实现的。<br>这些一致性模型的粒度在很大情况下与应用程序提供的粒度并不匹配。我们可以看到,共享数据的程序之间的并发性往往是通过互斥和事务的同步化机制来控制的。在程序层面的读写操作包含在ENTER_CS和LEVEL_CS两个操作中了,其中CS表示的是<strong>临界区(critical section)</strong>。正如在之前所介绍的那样,进程间的同步化是通过这两个操作来完成的。在分布式数据存储中,这意味着已成功运行ENTER_CS的进程可以确保在它的本地存储中的数据是最新的。此时,它就可以在其本地数据存储中安全地运行一系列的读写操作,然后通过调用LEVEL_CS封装起来。</p><p>基本上,在程序中由一系列读写操作所作用的数据是被保护的,不让并发地访问,从而不会有该读写操作系列作为一个整体所产生的结果之外的其他东西。封装在一起的读写操作系列又分成了自动运行的单元,从而产生了粒度层。</p><p>为了实现这一点,我们需要有关于ENTER_CS和LEVEL_CS操作的精确语义。这些语义可以以共享的<strong>同步化变量(synchronization variable)</strong>来描述。有不同的方法来使用这些变量。我们将介绍常用的方法,其中的每个变量具有某些相关的数据,这些数据合起来就是共享数据的完整集。我们采用的约定是,当某个进程进入临界区时,它必须获得相关的同步化变量,同样,当它离开临界区时,要释放这些变量。注意,进程的临界区中的数据可能与不同的同步化变量相关。</p><p>每个同步化变量都有其当前拥有者,即最后获得它的进程。该拥有者可以反复进入和退出临界区,无需在网络上发送任何消息。如果某个进程现在不拥有某个同步化变量但想要获得它,该进程就必须往该变量的当前拥有者发送一个消息,请求拥有权以及与该同步化变量相关的数据的当前值。也有可能在非互斥模式中,多个进程同时拥有某个同步化变量,它们可以读取但不能写有关的数据。<br>现在,我们就可以提出如下应满足的标准:</p><ol><li>在一个进程对被保护的共享数据的所有更新操作执行完之前，不允许另一个进程执行对同步化变量的获取访问</li><li>如果一个进程对某个同步化变量正进行互斥模式访问，那么其他进程就不能拥有该同步化变量，即使是非互斥模式也不行</li><li>某个进程对某个同步化变量的互斥模型访问完成后，除非该变量的拥有者执行完操作，否则任何其他进程对该变量的下一个非互斥模型访问也是不允许的.</li></ol><p>第一个条件表示,当一个进程获得拥有权后,这种拥有权直到所有被保护的数据都已更新为止。换句话说,对被保护数据的所有远程修改都是可见的。第二个条件表示,在更新一个共享数据项之前,进程必须以互斥模式进入临界区,以确保不会有其他进程试图同时更新该共享数据。第三个条件表示,如果一个进程要以非互斥模式进入临界区,必须首先与该同步化变量的拥有者进行协商,确保临界区获得了被保护共享数据的最新副本。</p><p>下图显示了一个名为<strong>入口一致性(entry consistency)</strong>的示例。在这个示例中,不是作用在整个共享数据上,而是把锁与每个数据项关联起来。在这种情况下,$$P_1$$获得了x,修改x一次,然后在获得y。进程$$P_2$$获得了x,但没有获得y,因此它可以从x读取值a,但如果读取y则为NIL。因为进程$$P_3$$首先获得了y,所以当$$P_1$$释放y时,P3可以读得值b。<br><img src alt="入口一致性的合法事件顺序"></p><p>人口一致性的编程问题之一是,<strong>正确地把数据与同步化变量相关联</strong>。一种简单的方法是显式地告诉中间件将要访问哪个数据,就像声明哪个数据库表将被一个事务修改一样。在基于对象的方法中,我们可以隐式地把唯一的同步化变量与每个已声明的对象相关联,有效地串行化对该对象的所有调用。</p><h3 id="一致性与相干性"><a href="#一致性与相干性" class="headerlink" title="一致性与相干性"></a>一致性与相干性</h3><p>至此,有必要澄清两个很有关联的概念的区别。到此为止,我们所讨论的模型都是用于处理在一个数据项集上进行读写操作的进程。<strong>一致性模型(consistency model)</strong>描述的是多个进程并发地作用于数据的数据集。如果该数据集遵守该模型描述的规则,那么就称之为一致性的。<br>数据一致性关注的是数据项集,而<strong>相干性模型(coherence model)</strong>关注的只是单个数据项(Cantin等2005)。在这种情况下,我们假设某个数据项在多个地方被复制,当各个副本遵守相干模型定义的规则时,我们称之为相干的。一种常见的模型是顺序一致性模型,现在只应用于单个数据项。它表示,在并发写数据的情况下,所有进程最终都将看到相同的更新顺序。</p><h1 id="以客户为中心的一致性模型"><a href="#以客户为中心的一致性模型" class="headerlink" title="以客户为中心的一致性模型"></a>以客户为中心的一致性模型</h1><p>上一节讲述的一致性模型的目的在于从数据存储的角度提供系统级别的一致性。一个重要的假设是并发进程可能同时更新数据存储,而在发生这种并发更新时,必须提供一致性。例如,在基于对象的人口一致性的情况下,数据存储保证向调用对象的进程提供该对象的一个副本。这个副本可以反映出对该对象所做的所有改变,而这些改变可能是其他进程做出的。在调用的过程中,也可以保证其他的进程不会干扰调用,也就是说,向调用进程提供的是独占性访问。<br>维持共享数据的顺序一致性的同时能够处理共享数据上的并发操作,对于分布式系统而言是非常重要的。由于性能原因,可能只有当进程使用诸如事务处理和锁一类的同步机制时,系统才能保证顺序一致性。</p><p>本节中,我们将讨论一类特殊的分布式数据存储。这里讨论的数据存储的特点是:不会出现同时发生的更新操作,或者当出现同时发生的更新操作时,可以容易地解决它们。大部分操作是读取数据的操作。我们将讨论的数据存储提供一种很弱的一致性模型,称为最终一致性。通过引人特殊的以客户为中心的一致性模型,事实证明,可以以一种开销相对低的方法隐藏许多不一致性。</p><h2 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h2><p>进程实际以并发方式操作的程度与所需保证的一致性的程度可能不同。并发操作只以有限的形式出现的示例很多。例如,在许多数据库系统中,大多数进程几乎从不执行更新操作,而只从数据库读取数据,有时只有一个或少数几个进程会执行更新操作。那么,现在的问题是应该以多快的速度进行更新操作,才能使更新对只读进程有效。</p><p>另一个示例是世界范围的命名系统,例如DNS。DNS名称空间被划分成域,每个域分配一个命名授权机构,由该命名授权机构担当这个域的所有者。只有授权机构才被允许更新名称空间中它所负责的部分。因此,这个系统根本不会出现两个更新相同数据的操作所导致的冲突(即,<strong>写-写操作冲突(write-write conflict)</strong>)。唯一需要处理的情况是<strong>读写操作冲突(read-write conflict)</strong>。事实证明,这种情况通常允许以懒惰方式传播更新操作,也就是说,读进程只有在更新操作执行一段时间后才能看到这个更新操作。<br>还有一个示例是WWW。实际上,在所有的情况下,Web页面是由单一的授权机构更新的,例如,Web站点管理员或页面的实际所有者。通常情况下,不存在需要解决的写写操作冲突的问题。但是,为了提高效率,通常配置浏览器和Web代理在本地高速缓存中保存一份已下载页面,并在用户下次请求该页面时返回高速缓存中的副本。两种类型的Web高速缓存都存在一个重要问题,那就是它们可能返回过时的Web页面。也就是说,与实际可从Web服务器获得的页面相比,向客户返回的高速缓存页面是一个较旧版本的页面。事实证明,许多用户认为这种不一致性是可接受的。</p><p>这些示例可以看作是能容忍相对较高程度的不一致性的（大规模的）分布式复制的数据库的案例。它们的共同之处是，如果在一段很长的时间内没有更新操作，那么所有的副本将逐渐称为一致的。这种形式的一致性被称为<strong>最终一致性(eventual consistency)</strong>.</p><p>因此,满足最终一致性的数据存储具有<strong>以下属性</strong>:没有更新操作时,所有副本逐渐成为相互完全相同的副本。最终一致性实际上只要求更新操作被保证传播到所有副本。如果假设只有一小部分进程可以执行更新,那么写写操作冲突就相对比较容易解决了。因此,最终一致性的实现通常开销比较小。<br>只要客户总是访问同一副本,最终一致的数据存储就会工作得很好。但是,当客户访问不同的副本时,问题就出现了。下图所示的移动用户访问分布式数据库的示例较好地描述了这一问题。<br><img src alt="移动用户访问分布式数据库的不同副本的原理"><br>移动用户是以透明的方式连接到一个数据库副本来访问数据库的,也就是说,运行在用户便携式计算机上的应用程序不知道它实际在哪个副本上进行操作。假设用户执行几个更新操作,然后断开了与数据库的连接。后来,他要再次访问数据库时,他可能移动到了其他位置,或者他可能使用不同的接入设备访问数据库。此时,用户可能连接到一个与上次连接不同的副本,如上图所示。然而,如果先前执行的更新操作还没有传播到这个副本,那么用户就会注意到这个不一致。特别是,他可能期望看到所有先前所做的改变,但是相反,他所看到的可能是好像根本没有做过任何改变一样</p><p>对于最终一致性的数据存储而言,这个示例很有代表性。问题是由用户有时可能对不同的副本进行操作的事实引起的,引入<strong>以客户为中心的一致性(client-centric consistency)</strong>可以缓解这一问题。<strong>本质上,以客户为中心的一致性为单一的客户提供一致性保证,保证该客户对数据存储的访问的一致性。它并不为不同客户的并发访问提供任何一致性保证。</strong></p><p>以客户为中心的一致性模型起源于关于Bayou的工作(请参见(Terry等1994,和Terry等1998))。 Bayou是为移动计算开发的数据库系统,该系统假设网络连接是不可靠的,而且易于受到多种性能问题的影响。无线网络和跨越范围较广的网络,例如因特网,都属于这类网络。</p><p>Bayou本质上区分了4种不同类型的一致性模型。为了解释这些模型,我们将再次讨论物理上分布于多台机器上的数据存储。当一个进程访问这个数据存储时,它通常连接到其本地(或最近)可用的副本上,尽管原则上任何副本都可以很好地为其提供数据。所有读写操作都是对这个本地副本进行操作。数据更新最终将被传播到其他副本。为了简化问题,我们假设数据项拥有一个关联的所有者,这个所有者就是那个唯一被允许修改该数据项的进程。通过这种方法,我们可以避免写写操作冲突。</p><p>我们使用以下的标记法描述以客户为中心的一致性模型。设$$x_i[t]$$表示$$t$$时刻本地副本$$L_i$$中数据项$$x$$的版本。初始化后,对$$L_i$$中的$$x$$进行一系列写操作将得到版本$$x_i[t]$$。我们将这些操作的集合记为$$WS(x_i[t])$$。如果在随后的$$t_2$$时刻,$$WS(x_i[t_1])$$中的操作也已经在本地副本$$L_i$$上执行完毕,那么我们记为$$WS(x_i[t_1];x_j[t_2]$$)。如果从上下文环境可以清楚地判断出操作顺序或时间顺序,那么时间下标将被省略。</p><h2 id="单调读"><a href="#单调读" class="headerlink" title="单调读"></a>单调读</h2><p>第一个以客户为中心的一致性模型是单调读的一致性模型。如果数据存储满足以下条件,那么称该数据存储提供<strong>单调读一致性(monotonic- readconsistency)</strong>:如果一个进程读取数据项x的值,那么该进程对x执行的任何后续读操作将总是得到第一次读取的那个值或更新的值.也就是说,单调读一致性保证,如果一个进程已经在t时刻看到x的值,那么以后它不再会看到较老版本的x的值。</p><p>下面,我们讨论一个分布式的电子邮件数据库,作为应用单调读一致性的一个示例。在这个数据库中,每个用户的邮箱可能分布式复制于多台机器上。邮件可以被插入到在任何位置的邮箱中。但是,数据更新是以一种懒惰(即,按需更新)方式传播的。假设一个用户在旧金山读取他的邮件。假定只读取邮件不会影响邮箱,也就是说,消息不会被删除,不会被存储到子目录下,甚至不会被标记为已读。当用户飞到纽约后,再次打开他的邮箱时,单调读一致性可以保证当他在纽约打开他的邮箱时,邮箱中仍然有旧金山的邮箱里的那些消息。</p><p>下图以图形的方式描述了单调读一致性,其中的标记法与以数据为中心的一致性模型所用的标记法相似。在垂直轴上,$$L_1$$和$$L_2$$表示数据存储的两个不同的本地副本。水平轴表示时间.<br><img src alt="单一进程P对同一数据存储的两个不同本地副本所执行的读操作"><br>在图中,进程P先在$$L_1$$对x执行了一次读操作,得到值$$x_1$$(在那一时刻)。该值是在$$L_1$$执行的$$WS(x_1)$$中的写操作的结果。后来,P在$$L_2$$对x执行了一次读操作,即图中的$$R(x_2)$$。为了保证单调读一致性,$$WS(x_1)$$中的所有操作都应该在执行第二个读操作前传播到L2。也就是说,我们需要确保$$WS(x_1)$$是$$WS(x_2)$$的一部分,记为$$WS(x_1;x_2)$$。<br>与之相对照,图(b)表示不保证单调读一致性的情况。进程P在$$L_1$$读取$$x_1$$后,又在$$L_1$$执行$$R(x_2)$$操作。然而,$$L_2$$只执行了$$WS(x_2)$$中的写操作。此时,不能保证集合$$WS(x_2)$$同样包含$$WS(x_1)$$中的所有操作.</p><h2 id="单调写"><a href="#单调写" class="headerlink" title="单调写"></a>单调写</h2><p>在很多情况下,写操作以正确的顺序传播到数据存储的所有副本是非常重要的。这种性质被描述为单调写一致性。<strong>单调写一致性(monotonic- write consistency)</strong>的数据存储应满足以下条件:一个进程对数据项x执行的写操作必须在该进程对x执行任何后续写操作之前完成。<br>因而,完成一个写操作意味着不管后续操作的启动位置,执行这个后续操作的副本都能反映出同一进程先前执行的写操作的结果。也就是说,在数据项x的副本上执行的写操作只有在该副本已经通过任何先前的写操作进行更新之后才能被执行,而这些先前执行的写操作可能发生在x的其他副本上。<br>注意,单调写一致性与以数据为中心的FIFO一致性相似。<strong>FIFO一致性的本质是，同进程执行的写操作必须在任何地方以正确的顺序执行</strong>。这一顺序限制也适用于单调写致性,只是我们这里考虑的是仅为单一进程维持的一致性,而不是为许多并发进程维持的一致性。</p><p>每个写操作完全覆盖x的当前值时,没有必要将x的副本更新为最新值。然而,写操作通常只修改数据项的部分状态。让我们来考虑一个软件库。在很多情况下,更新这种库是通过替换一个或多个函数来实现下一版本的。单调写一致性保证,如果在库的一个副本上执行数据更新,那么前面(在其他副本上)执行的所有数据更新都将首先执行。此后,所得的库将确实是最新版本的库,并将包括所有以前各个版本的更新。</p><p><img src alt="单一进程P对同一数据存储的两个不同本地副本所执行的写操作"><br>上图是单调写一致性的例子。图(a)中,进程P在本地副本$$L_1$$对x执行一次写操作,记为操作$$W(x_1)$$。然后,进程P对x再执行一次写操作,但是这次是在$$L_2$$处执行,如图中的$$W(x_2)$$。为了保证单调写一致性,先前在$$L_1$$执行的写操作必须已经传播到$$L_2$$。这就解释了图中$$L_2$$处出现操作$$W(x_1)$$,以及它出现在$$W(x_2)$$之前的原因。<br>与之相对照,图(b)表示不保证单调写一致性的情况。与图(a)相比,图中没有向副本$$L_2$$传播的$$W(x_1)$$。也就是说,它不能保证在x的副本上执行第二次写操作时,x的副本的值与执行完$$W(x_1)$$时的值相同或比之更新。</p><p>注意,在单调写一致性的定义中,同一进程的写操作的执行顺序与这些操作的启动顺序相同。一个相对较弱的单调写形式是写操作的结果仅当所有先前的写操作也都已经执行完毕才能被看到，但是它们的执行顺序可能与这些操作的最初启动顺序不同。这种一致性可应用于写操作是可交换的情况，此时写操作的顺序的确是不必要的。</p><h2 id="读写一致性"><a href="#读写一致性" class="headerlink" title="读写一致性"></a>读写一致性</h2><p>下面介绍一种与单调写一致性有密切关系的以客户为中心的一致性模型。如果数据存储满足以下条件,那么称该数据存储提供<strong>读写一致性(read-your-writes consistency)</strong>:一个进程对数据项x执行一次写操作的结果总是会被该进程对x执行的后续读操作看见。也就是说，一个写操作总是在同一个进程执行的后续读操作之前完成，而不管这个后续读操作发生在什么位置。</p><p>在更新Web的HTML页面后浏览更新效果时,经常遇到缺乏读写一致性的情况。更新操作通常是通过标准的编辑器或文字处理器实现的,它们将新版本页面存储在Web服务器所共享的文件系统上。用户的web浏览器可能在它从本地Web服务器请求这个文件之后,再访问这个文件。但是,一旦文件已经被访问过,服务器或浏览器通常都会为以后的访问缓存一个本地副本。因此,当Web页面被更新时,如果浏览器或服务器返回高速缓存的副本而不返回原文件的话,用户将看不到更新的结果。读写一致性可以保证,如果编辑器和浏览器被集成到一个单一的程序中,那么页面更新后,高速缓存是无效的,所以将获取和显示被更新的文件。<br>更新密码时也会出现相同的情况。例如,Web上的电子图书馆通常要求输入账号和相应的密码。但是,密码的修改可能需要一些时间才能生效,这可能导致用户有几分钟的时间不能进入图书馆。这种延迟可能是由于系统使用一个单独的服务器管理密码,而加密的密码传播到图书馆的多个服务器可能需要一定时间造成的。</p><p><img src alt="读写一致性的正反例"><br>图(a)表示了一个提供写读一致性的数据存储。注意,图(a)与之前单调读非常相像,只是这里的一致性是通过进程P执行的最后一次写操作确定的,而不是通过进程P的最后一次读操作确定的。<br>在图(a)中,进程P执行了一次写操作$$W(x_1)$$,然后在一个不同的本地副本处执行了一次读操作。读写一致性保证,写操作的结果可以被所有后续的读操作看到。这一过程表示为$$WS(x_1;x_2)$$,它表示$$W(x_1)$$是$$WS(x_2)$$的一部分。与之相对照,在图(b)中,$$W(x_1)$$不在$$WS(x_2)$$之中,这意味着进程P执行的前一个写操作的结果还没有传播到。</p><h2 id="写读一致性"><a href="#写读一致性" class="headerlink" title="写读一致性"></a>写读一致性</h2><p>最后一种以客户为中心的一致性模型是这样的模型,即更新是作为前一个读操作的结果传播的。如果数据存储满足以下条件,那么称该数据存储提供<strong>写读一致性(writes-follow-reads consistency)</strong>:同一个进程对数据项x执行的读操作之后的写操作,保证发生在与x读取值相同或比之更新的值上。<br>也就是说,进程对数据项x所执行的任何后续的写操作都会在x的副本上执行,而该副本是用该进程最近读取的值更新的。</p><p>写读一致性可以用于保证,网络新闻组的用户只有在已经看到原文章之后才能看到它的回应文章。为了理解这个问题,我们假设一个用户先读了一篇文章A.然后,他回应了一篇文章B。通过要求保证写读一致性,B被写入新闻组的任何副本之前,A也必须已经被写入那个副本。注意,只读取文章的用户不需要任何特定的以客户为中心的一致性模型。读写一致性保证,当且仅当原文章存储在某个本地副本上时,该文章的回应文章才被存储在这个本地副本上。</p><p><img src alt="写读一致性的正负例"><br>上图表示了这种一致性。在图(a)中,一个进程在本地副本$$L_1$$处读取x。写入刚才所读取值的写操作也出现在$$L_2$$处的写操作集合中。稍后,同一进程在$$L_2$$处执行了一次写操作。注意,$$L_2$$处的其他进程也看到了那些写操作。而图(b)中的数据存储无法保证$$L_2$$处执行的操作是在与L1处所读的那个副本一致的副本上执行的。</p><h1 id="复制管理"><a href="#复制管理" class="headerlink" title="复制管理"></a>复制管理</h1><p>对任何支持复制的分布式系统来说，一个关键的问题是决定何处、何时、由谁来放置副本，以及用何种机制来保持副本的一致性。副本放置的问题本身又要分成两个子问题：副本服务器放置问题和内容放置问题。这两者之间的差别很微妙但很重要，且这两个问题的界线往往不是很清楚。副本服务器的放置关心的是，找到放置托管（部分）数据存储的服务器的最佳位置。内容放置负责找到放置内容的最佳服务器。注意，这往往意味着，我们所找寻的是单个数据项的最佳位置。显然，在内容放置发生之前，必须先放置副本服务器。接下来将介绍这两种不同的放置问题，然后讨论管理被复制内容的基本机制。</p><h2 id="副本服务器的放置"><a href="#副本服务器的放置" class="headerlink" title="副本服务器的放置"></a>副本服务器的放置</h2><p>副本服务器的放置问题之所以没有被集中地研究,其原因很简单,它往往更多的是管理和商业问题而不是优化问题。然而,对客户和网络属性的分析有助于做出决策。</p><p>计算副本服务器的最佳位置的方法有很多,但都要归结到优化问题,其中,需要从N个位置中选出K个来(K&lt;N)。这些问题是计算复杂性的,只能通过探索式求解。(Qiu等2001)以客户与位置之间的距离作为起点。距离可以通过延时或带宽来度量。假定已放置了k个服务器(即还剩$$N-k$$个位置),该解决方法在某个时间里选取一个服务器,使得服务器与其客户之间的平均距离最小。<br>(Radoslavov等2001)提出的另一种方法是忽略客户的位置,只采用由自治系统形成的因特网拓扑。把<strong>自治系统(autonomous systen,AS)</strong>看作为一个网络是最好不过了,其中,所有结点都运行相同的路由协议,该协议由单个组织来管理。到2006年1月为止才20000个自治系统。 Radoslavov等首次考虑了最大的自治系统,在含有最大数量的网络接口(即链接)的路由器上放置一台服务器。然后,对第二大的自治系统反复使用该算法,以此类推。<br>事实证明,假定客户均匀地分布在因特网中(与现有的拓扑结构有关),对客户不敏感的服务器的放置可以获得与对客户敏感的服务器的放置类似的结果。这种假设在多大程度上为真的并不清楚。人们仍没有很好地研究它.</p><p>这些算法的一个问题是,它们的计算代价高。例如,前面两种算法的复杂度都高于$$O(N^2)$$,其中$$N$$为要查看的位置点。在实践中,这意味着,即使是几千个位置点,一个计算可能就需要运行几十分钟。这是不可接受的,特别是在出现<strong>瞬时拥塞(flash crowds)</strong>(即对某个站点有一个突然的高峰请求,这在因特网中是经常发生的)时。在这种情况下,快速地确定副本服务器的位置很重要,然后就可以为内容放置选择一个特定服务器。</p><p>(Szymaniak等2006)开发了一种方法,利用这种方法,可以快速地标识放置副本的一个区域。一个区域被标识为访问相同内容的结点集,且结点之间的延时小。这种算法的目标是首先选择最能满足需要的区域,即具有最多结点的,然后让该区域中的某个结点作为副本服务器。</p><p>最后,设想在m维空间中定位结点,正如前面所介绍的那样。其基本思想是,标识K个最大集群,把每个集群中的结点赋给托管已复制内容。要标识这些集群,可以把整个空间划分为多个单元。选择K个密度最大的单元放置副本服务器。一个单元就是一个m维的超立方体。对二维空间来说,它对应的是一个长方形。<br>显然,单元的大小很重要,如图所示。如果单元选择过大,那么会有多个结点的集群包含在同一个单元中。在这种情况下,为这些集群选择的副本服务器就会太少了。另方面,单元过多,又会导致选择了太多的副本服务器。<br><img src alt="为服务器的防止碘选择一个合适的单元大小"><br>事实证明,合适的单元大小可以以一个简单的函数形式来计算,该函数计算两结点之间的距离,以及所需副本的数量。可以证明,有了单元的大小,该算法的性能与近似最佳算法的同样好(Qiu等2001),而且复杂性要低得多,为$$O(N\times<br>max{\mathrm{log}(N),K})$$。实践表明,为64000个结点计算20个最佳副本放置点大约需要50,000次。因此,副本服务器的放置可以实时完成。</p><h2 id="内容复制与放置"><a href="#内容复制与放置" class="headerlink" title="内容复制与放置"></a>内容复制与放置</h2><p>让我们把视线从服务器放置转移到内容放置上来。有关内容复制与放置，从逻辑上可以组织为三种不同类型的副本，如下图所示。<br><img src alt="将数据存储的不同类型的副本逻辑地组织成三个同心环"></p><h3 id="永久副本"><a href="#永久副本" class="headerlink" title="永久副本"></a>永久副本</h3><p>永久副本可以被视为构成分布式数据存储的副本的初始集。很多情况下,永久副本的数量很小。以Web站点为例。一个Web站点的分布通常采用以下两种形式之一。第一种形式的分布是,在单个位置的有限数量的服务器上复制构成站点的文件。一旦接收到请求,就将该请求转发到其中一台服务器,例如,使用循环提示器策略来进行转发。<br>分布式Web站点的第二种形式是<strong>镜像(mirroring)</strong>。在这种情况下,Web站点被复制到有限数量的服务器上,这些服务器称为<strong>镜像站点(mirror site)</strong>,它们在地理上散布于因特网之中。在很多情况下,客户只是从提供给他们的镜像站点列表中选择一个镜像站点。被镜像的站点与基于群集的Web站点有共同之处,即站点只有少量的副本,而这些副本或多或少是使用静态配置的。</p><p>相似的静态组织方式也出现在分布式数据库中。同样,数据库可以被分布地复制在很多服务器上,这些服务器一起形成服务器群通常称之为<strong>无共享体系结构(shared-nothing architecture)</strong>,该体系结构强调处理器既不共享磁盘也不共享内存,另外,数据库也可能分布地被复制在地理上分散的几台服务器上。在联合数据库中通常部署这种体系结构。</p><h3 id="服务器启动的副本"><a href="#服务器启动的副本" class="headerlink" title="服务器启动的副本"></a>服务器启动的副本</h3><p>与永久副本相对,服务器启动的副本是为提高性能而存在的数据存储的副本,该副本是在初始化数据存储的所有者时创建的。例如,位于纽约的一个Web服务器就是这样的般,这台服务器可以相当方便地处理输入的请求,但是可能发生以下情况:它突然在几天内接收到来自远离服务器的意外位置的大量请求(最近的Web历史中已经在一些场合出现过这种突发大量请求情况)。在这种情况下,在产生请求的地区安装一些暂时副本可能是值得的。</p><p>Web托管服务解决了动态放置副本的问题。这些服务在本质上提供了一个散布于因特网的(相对静态的)服务器集。这些服务器可以维护属于第三方的web文件,并提供对这些文件访问。为了提供优化的功能,这些托管服务可以动态地把文件复制到需要这些文件以提高性能的服务器,也就是接近发出请求的客户的服务器那里。</p><p>服务器启动的副本的一个问题是决定创建或删除副本的确切位置和时间。(Rabinovich等1999)描述了一种Web托管服务中实现文件动态复制的方法。设计该算法的目的是为了支持Web页面可在哪些原因下假设更新的个数与读请求的个数相比相对较少。该算法使用文件作为数据单元,其工作方式如下所述。<br>动态复制的算法需要考虑两个问题。第一,复制可能是为了减轻一台服务器的负载而进行的;第二,一台服务器上的指定文件可能被转移或复制到对这些文件提出很多请求的客户附近的服务器。下面,我们只集中考虑第二个问题。我们也不考虑一些细节问题,关于这些细节问题请见(Rabinovich等1999).</p><p>每台服务器跟踪每个文件的访问计数以及提出这些访问请求的位置。特别是,假设对于一个给定的客户C,每台服务器都可以确定Web托管服务中的哪台服务器最靠近C(例如,可以从路由数据库获得这一信息)。如果客户端C1和客户端C2共享最靠近的服务器P,那么所有来自C1和C2对服务器Q的文件F的访问请求一起被Q记入单一的访问计数cntQ(P,F)之中。下图显示了这种情形。<br><img src alt="对来自不同客户的访问请求计数"></p><p>当对服务器S上的指定文件F的请求数量下降到删除阈值del(S,F)之下时,服务器S可以删除该文件。因而,该文件的副本的数目减少了,这可能导致其他服务器的工作负载增加。可采用特殊的方法来保证每个文件至少仍存在一个副本。<br>复制阈值rep(S,F)指出对指定文件的请求数量过高,以至于值得将该文件复制到另一台服务器上。通常所选择的复制阈值比删除阈值高。如果请求的数量位于删除阈值和复制阈值之间,那么只允许转移该文件。也就是说,在这种情况下,至少保持该文件的副本的个数不变,这一点是十分重要的。</p><p>当服务器Q决定重新评估它存储的文件的位置时,它检查每个文件的访问计数。如果服务器Q上文件F的访问请求的总数低于删除阈值del(Q,F),那么它将删除F,除非F是最后一个副本。此外,如果对于某台服务器P,cntQ(P,F)超过Q上F的请求总数的半数以上,服务器Q请求服务器P接管F的副本。也就是说,服务器Q将试图把F转移到P。</p><p>向服务器P转移文件F不可能总能成功。例如,因为P的负载总是很重或者P没有磁盘空间就会造成文件转移不成功。在这种情况下,Q将试图在其他服务器上复制F。当然,只有对Q上的F的访问请求的总数超过复制阈值rep(Q,F)时才会发生复制。服务器从Web托管服务中最远的服务器开始,检查其中所有的服务器。如果对于某台服务器R,cntQ(R,F)超过对Q上的F的所有请求,并达到某个比例,Q就会试图把F复制到R.</p><p>服务器启动的复制正在逐渐地流行起来,特别是在上面介绍的Web托管服务的环境下。注意,只要可以保证每个数据项至少由一台服务器托管,那么只使用服务器启动的复制而不使用任何永久副本就足够了。然而,永久副本仍常常用作备份工具或用作允许被修改以保证一致性的唯一副本,而服务器启动的副本则被用于在客户附近放置只读副本.</p><h3 id="客户启动的副本"><a href="#客户启动的副本" class="headerlink" title="客户启动的副本"></a>客户启动的副本</h3><p>一类重要的副本是在客户初始化时创建的副本。普遍将客户启动的副本称为<strong>客户高速缓存(Client cache)</strong>。其实,高速缓存是一种本地存储工具,客户使用它暂时存储刚刚请求的数据的副本。在原则上,高速缓存的管理是完全由客户负责的。客户从中获取数据的数据存储不负责保持高速缓存数据的一致。然而,如同我们所看到的,在很多情况下,客户可能要依靠数据存储通知它被缓存的数据什么时候过时。</p><p>客户高速缓存只用于改善数据的访问时间。通常,当一个客户想要访问某些数据时,它连接该数据存储的最近的副本,从该副本获得它想读取的数据,或者将它刚刚修改的数据写入该副本。当大部分操作仅是读取数据时,客户在附近的高速缓存中存储所请求的数据可以提高性能。这个高速缓存可以位于客户所在的机器中,也可以位于客户所在局域网中的另一台单独的机器中。下一次需要读取该数据时,客户可以简单地从这个本地高速缓存中获得数据。只要读取所获得的数据时,数据没有被改变,这种模式会工作得很好。</p><p>例如,通常数据将在高速缓存中保存一段有限的时间,这样做是为防止使用完全过时的数据,或只是为其他数据腾出空间。当被请求的数据可以从本地副本获得时,我们称其为<strong>高速缓存命中(cache hit)</strong>。为了提高高速缓存命中数量,可以让多个客户共享高速缓存。其基本假设是来自客户C1的数据请求可能也对来自客户C2附近的其他客户的请求有用。<br>这一假设的正确性在很大程度上取决于数据存储的类型。例如,传统文件系统几乎不共享文件,这使得共享高速缓存毫无意义。同样,事实证明,使用Web高速缓存来共享数据已失去市场了,部分原因是由于网络和服务器性能的提高。</p><p>客户高速缓存的放置也相对简单:通常将高速缓存放置在客户所在的机器上,或者将其放置在客户所在的局域网上由各个客户共享的机器上。然而,在某些情况下,系统管理员会引入更高级的高速缓存。他们在一些部门或组织之间放置共享高速缓存,或者甚至在整个地区,例如省或国家内放置共享高速缓存。</p><p>另一种方法是在广域网的几个特定点放置高速缓存服务器,让客户查找距离最近的服务器。当客户查找到最近的服务器后,它请求这台服务器保留它先前从其他服务器获得的数据的副本。我们将在本章后面讨论一致性协议时再继续讨论缓存问题。</p><h2 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h2><p>复制管理还负责（已更新）内容往相关副本服务器上的传播。这是有代价的，稍后我们将介绍。</p><h3 id="状态与操作"><a href="#状态与操作" class="headerlink" title="状态与操作"></a>状态与操作</h3><p>一个重要的设计问题是将要实际传播哪些信息。基本上有三种可能:</p><ol><li>只传播更新的通知;</li><li>把数据从一个副本传送到另一个副本;</li><li>把更新操作传播到其他副本。</li></ol><p><strong>无效化协议(invalidation protocol)</strong>使用传播通知方式。无效化协议通知其他副本已发生了更新操作,这些副本所包含的数据不再有效。无效化消息可以指定数据存储的哪些部分被更新了,那么实际上只有部分副本是无效的。重要的问题是只传播一个通知而不传播别的消息。每当请求在无效的副本上执行操作时,一般需要先根据数据存储支持的特定的一致性模型更新那个副本。<br>无效化协议的主要优点是它几乎不占用网络带宽。所需传送的唯一信息是关于哪些数据不再有效的说明。当更新操作与读操作相比较多时,也就是说,读写比率相对很小时,这种协议通常工作得非常好。</p><p>例如,在一个数据存储中,更新是通过向所有副本发送被修改的数据传播的。如果被修改的数据很多,并且更新操作与读操作相比发生得更频繁,那么我们可能遇到以下情况:接连发生两个更新操作,而这两个更新操作之间没有读操作。因而,第一次向所有副本传播的更新实际上是无用的,因为它将被第二个更新操作的结果覆盖。相反,在这种情况下,发送数据已被修改的通知可能更加高效。</p><p>在多个副本间传送被修改的数据是第二种选择,在读对写比率相对较高时,这种方法十分有用。在这种情况下,更新是有效的可能性较高,因为从某种意义上来说,被修改的数据会在下一个更新操作发生前被读取。不传播被修改的数据,而将这些修改记入日志,然后仅传送那些日志以节约带宽也是可以的。另外,更新经常是通过将多个修改压缩到一个消息中的方式被组合传送的,从而减少通信开销。</p><p>第三种方法根本不传送任何数据修改,而告诉每个副本它应该执行的更新操作,这种方法又称为<strong>主动复制(active replication)</strong>。它假设每个副本由一个进程代表,该进程能够通过执行操作来“主动地”保持它所关联的数据为最新的数据(Schneider1990)。主动复制的主要优点是假设一个操作所关联的参数相对较少,传播更新的带宽代价通常可以达到最小。另一方面,每个副本可以获得更多的处理能力,在操作相对复杂的情况下更是如此。</p><h3 id="拉协议与推协议"><a href="#拉协议与推协议" class="headerlink" title="拉协议与推协议"></a>拉协议与推协议</h3><p>另一个设计问题是,更新是拉式的还是推式的。<strong>基于推式的方法(push-based approach)</strong>又称为<strong>基于服务器的协议(server-based protocol)</strong>。在这种方法中,甚至不需要其他副本请求更新,这些更新就被传播到那些副本那里。永久副本和服务器启动的副本之间通常使用基于推式的方法。基于服务器的协议应用于多个副本常常需要维持相对较高程度的一致性的时候,也就是说,当副本需要保持完全相同的时候。</p><p>需要保持较高程度的一致性是基于这样一个事实:通常有许多客户共享永久副本和服务器启动的副本,以及较大的共享的高速缓存,而这些客户轮流地执行操作,主要执行读操作。因而,每个副本上读与更新之比率相对较高。在这些情况下,基于推式的协议是高效的,因为每个被推的更新可以对一个或更多读程序有用。另外,基于推式的协议使一致的数据在被请求时立即有效。</p><p>相反,在<strong>基于拉式的方法(pull-based approach)</strong>中,一台服务器或客户请求其他服务器向它发送该服务器此时持有的任何更新。基于拉式的协议,又称为<strong>基于客户的协议(client-based protocol)</strong>,通常被用于客户高速缓存。例如,Web高速缓存使用的一种通用策略是先检查被缓存的数据项是否仍然是最新的。当高速缓存接收到对数据项的请求,而该数据项仍对本地有效的时候,高速缓存查看原始的Web服务器,以确定那些数据项自从被缓存后是否被修改过。如果那些数据项被修改过,那么被修改的数据首先被传送到高速缓存,然后才被返回给请求数据的客户。如果那些数据项没有被修改过,那么就向客户返回被缓存的数据。也就是说,客户轮询服务器以查看是否需要更新高速缓存.</p><p>在读与更新之比率相对较低时,基于拉式的方法是高效的。非共享的客户高速缓存通常属于这种情况,此时客户高速缓存只有一个客户。然而,即使在许多客户共享一个高速缓存,在被缓存的数据项很少被共享时,也可证明基于拉式的方法是高效的。与基于推式的方法相比,基于拉式的策略的主要缺点是在高速缓存没有命中时,响应时间会增大.</p><p>比较基于推式的方法和基于拉式的方法时,需要做出一些权衡,如下表所示。简单起见,我们以一个客户服务器系统为例,该系统由一个单一的、非分布式的服务器和一些客户进程构成,每个客户进程都有它们自己的高速缓存。</p><table><thead><tr><th style="text-align:left">问题</th><th style="text-align:left">基于推式</th><th style="text-align:left">基于拉式</th></tr></thead><tbody><tr><td style="text-align:left">服务器的状态</td><td style="text-align:left">客户副本和高速缓存的列表</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">发送的消息</td><td style="text-align:left">更新(以及以后可能获取的更新)</td><td style="text-align:left">轮询和更新</td></tr><tr><td style="text-align:left">客户响应时间</td><td style="text-align:left">立即(或获取更新的时间)</td><td style="text-align:left">获取更新的时间</td></tr></tbody></table><p>基于推式的协议中的一个重要问题是服务器需要跟踪所有的客户高速缓存。状态较多的服务器不但通常缺少容错能力,而且跟踪所有的客户高速缓存也可能在服务器端引入相当大的额外开销。例如,在基于推式的方法中,Web服务器可能需要跟踪数以万计的客户高速缓存。每次Web页面被更新时,服务器将需要遍历持有该页面的副本的客户高速缓存的列表,然后向这些客户高速缓存传播更新。但是更糟的是,如果客户由于缺少空间而清除了一个页面,那么它必须通知服务器,这又导致了更多的通信.<br>在这两种方法中,需要在客户和服务器之间发送的消息也有所不同。在基于推式的方法中,唯一的通信是服务器向每个客户发送更新。当更新实际上仅是无效化消息时,客户需要进行其他通信以获取被修改的数据。在基于拉式的方法中,客户必须轮询服务器,并在必要时获取被修改的数据<br>最后,在两种方法中客户响应时间也是不同的。当服务器将被修改的数据推入客户时,客户的响应时间显然是0。当推入无效化消息时,响应时间与基于拉式的方法中的响应时间相同,该响应时间由客户从服务器获取被修改的数据的时间决定。</p><p>这些代价权衡导致出现了一种更新传播的混合形式————<strong>基于租用的更新传播</strong>。<strong>租用(lease)</strong>是服务器所作的承诺,它将在指定的时间内把更新推给客户。当租用到期时,客户被迫轮询服务器以实现更新,并在必要时拉出被修改的数据。另一种方法是在前一个租用到期时,客户请求一个新的租用以实现更新的推入。</p><p>租用的概念最初是由Gray和Cheriton(1989)提出的。这是他们为基于推式的策略和基于拉式的策略之间的动态转换提供的一种便利机制。(Duvyuri等2000)描述了一种灵活的租用系统,该系统允许租用期限根据不同租用标准动态调整。他们对以下三种类型的租用进行区分(注意,在所有的情况下,只要租用没有到期,更新都是由服务器负责推入的)。</p><p>首先,是一种基于数据项“年龄”的租用,数据项的“年龄”取决于该数据项最后一次被修改后的延续时间。其基本假设是长时间内未被修改的数据可能会在将来的一段时间内仍不会被修改。基于Web的数据已表明这一假设是合理的。与所有租用具有相同过期时间的方式相比,为预期保持不变的数据项授予一个长期的租用可以使更新消息的个数大大地减少。<br>另一种租用是基于特定客户请求更新高速缓存副本的频率的租用。使用基于更新频率的租用时,服务器将为需要经常刷新其高速缓存的客户分配一个长期的租用,而为只偶尔请求特定数据项的客户分配一个使用该数据项的短期租用。该策略的效果是服务器基本上只跟踪其数据受欢迎的那些客户,此外,那些客户端也被提供了较高程度的一致性。<br>最后一种租用是基于服务器的状态空间开销的租用。当服务器意识到它会逐渐过载时,它会降低分配给客户的新租用的使用期限。这一策略的效果是服务器需要跟踪的客户变少,这是因为租用到期很快。也就是说,服务器动态地转换到一个状态较少的操作模式从而减轻了服务器负载以使其可以更高效地处理请求。</p><h3 id="单播与多播"><a href="#单播与多播" class="headerlink" title="单播与多播"></a>单播与多播</h3><p>与推式更新或拉式更新相关的一个问题是决定应使用单播还是多播。在单播通信中,当作为数据存储的一部分的服务器向其他N台服务器发送其更新时,它通过发送N个单独的消息实现,即向每台服务器发送一个消息。使用多播通信时,底层的网络负责向多个接收者高效地发送一个消息。<br>在很多情况下,使用可用的多播工具是比较廉价的。一种极端的情况是所有副本都位于同一个局域网,此时,硬件广播是可用的。在这种情况下,广播或多播一个消息的开销并不比一个单一的点对点消息传送开销大。但单播更新的效率会较低。</p><p>与基于推式的方法结合时,多播常常可以高效地传播更新。在这种情况下,一个决定向其他一些服务器推出更新的服务器仅使用一个单一的多播组来发送它的更新。相反,使用基于拉式的方法时,通常只有一个单一的客户或服务器请求更新其副本。在这种情况下,单播可能是最高效的方法</p><h1 id="一致性协议"><a href="#一致性协议" class="headerlink" title="一致性协议"></a>一致性协议</h1><p>到目前为止,我们的注意力主要集中在各种一致性模型和一致性协议的一般设计问题。本节我们通过几个一致性协议的示例来集中讨论一致性模型的实际实现。<strong>一致性协议(consistency protocol)</strong>描述了特定一致性模型的实现。我们按照有关一致性模型的组织结构,先介绍以数据为中心的模型,然后介绍以客户为中心的模型。</p><h2 id="持续一致性-1"><a href="#持续一致性-1" class="headerlink" title="持续一致性"></a>持续一致性</h2><p>作为关于持续一致性工作的一部分，Yu和Vahdat还开发了一些处理三种一致性的协议。下面我们将简要介绍一些解决方法，为清楚起见，省去了一些细节内容。</p><h3 id="限定复制的数字偏差"><a href="#限定复制的数字偏差" class="headerlink" title="限定复制的数字偏差"></a>限定复制的数字偏差</h3><p>我们首先来看一种把数值偏差限定在一定范围内的解决方法。这里的目的同样不是深入每个协议的细节,而是给出一般的思想。</p><p>我们来看看往单个数据项x写数据的操作。每个写操作W(x)都有一个相关的权重,表示一个用于更新x的数值,记作weight(W(x)),或简写为weight(w)。为简单起见,我们假设weight(W)&gt;0。开始时,每个写操作W被提交给N个可用副本服务器之中的一个服务器,在这种情况下,该服务器就成为了该写操作的源,记作origin(W)。当我们在某个特定的时间考察系统时,可以看到会有多个已提交的写操作需要传播给所有服务器。最后,每个服务器$$S_i$$会保持一个写操作日志$$L_i$$,该日志记录了服务器在其本地副本x上执行的写操作。<br>设如下的TWL[i,j]是源自服务器$$S_j$$并由服务器$$S_i$$运行的写操作:<br>$$<br>\mathrm{TW}[i,j]=\sum{\mathrm{weight}(W)\vert\mathrm{origin}(W)=S_j&amp;W\in L_i}<br>$$</p><p>注意,Tw[i,j]表示的是提交给$$S_i$$的总的写操作。我们的目标是,对任意时间t,使得服务器$$S_i$$的当前值$$v_i$$在数据项x的实际值$$\mathrm{v}(t)$$的一定范围内发生偏差。该实际值完全由所有已提交的写操作来确定。即,如果v(0)是x的初始值,那么<br>$$v(t)=v(0)+\sum_{k=1}^{N}\mathrm{TW}[k,k]$$<br>$$v_i=v(0)+\sum_{k=1}^N\mathrm{TW}[i,k]$$<br>注意,其中$$v_i\le v(t)$$。这里我们只关注绝对偏差。特别地,对每个服务器S,指定一个限$$\delta$$,这样就需要确保$$v(t)-v_i\le\delta$$</p><p>提交给服务器$$S_i$$的写操作需要传播给其他所有服务器。这里有不同的方法来完成,其<br>中,感染协议可以实现更新的快速传播。在任何情况下,当服务器$$S_i$$把来自$$S_j$$的一个写操作<br>传播给$$S_k$$时,$$S_k$$可以知道写操作发送时的值TW[i,j]。换句话说,$$S_k$$可以维护一个视图<br>$$\mathrm{TW}_k[i,j]$$,它相信$$S_i$$会有一个Tw[i,j]值。显然,<br>$$0\le\mathrm{TW}_k[i,j]\le\mathrm{TW}[i,j]\le\mathrm{TW}[j,j]$$</p><p>整个思想是,当服务器$$S_k$$知道$$S_i$$与提交给$$S_k$$的更新操作步调不一致时,它就把写操作<br>从其日志中转发给$$S_i$$。该转发操作可以有效地把$$S_k$$的视图$$\mathrm{TW}_k[i,k]$$往$$\mathrm{TW}[i,k]$$靠近,使得偏差$$(\mathrm{TW}[i,k]-\mathrm{TW}_k[i,k])$$更小。尤其是当应用程序提交一个新的写操作时,$$S_k$$会把其视图往$$\mathrm{TW}[i,k]$$推进,这将使得$$(\mathrm{TW}[i,k]-\mathrm{TW}_k[i,k])$$大于$$\delta/(N-1)$$。本章后面有个练习,证明这种推进可以确保$$v(t)-v_i\le\delta$$。</p><h3 id="限定复制的新旧程度偏差"><a href="#限定复制的新旧程度偏差" class="headerlink" title="限定复制的新旧程度偏差"></a>限定复制的新旧程度偏差</h3><p>有很多种方法把副本的新旧程度限定在指定的范围内。一种简单的方法让服务器$$S_k$$保持一个实时的向量时钟$$\mathrm{RVC}_k$$,其中,$$\mathrm{RVC}_k[i]=T(i)$$意为到时间T(i)时,$$S_k$$看到了已提交给$$S_i$$的所有写操作。在这种情况下,我们假定每个已提交的写操作由其初始服务器添加时间戳,T(i)表示的是$$S_i$$的本地时间。</p><p>如果副本服务器之间的时钟是松散同步化的,那么一个可接受的限定新旧程度的协议是这样的:只要服务器$$S_k$$通知$$T[k]-\mathrm{RVC}_k[i]$$将超出指定的界限,那么它就开始拉入来自$$S_i$$的时间戳晚于$$\mathrm{RVC}_k[i]$$的写操作.</p><p>注意,在这种情况下,副本服务器按照在其他地方发出的写操作,负责使其x的副本保持为最新的。相反,当要维护数值界限时,使用的是一个推方法,通过转发写操作来让原始服务器使副本保存为最新的。在限定新旧程度的情况下,推写操作的问题是,当事先不知道最大的传播时间时,无法保证一致性。这种情况可以通过拉入更新得到改善,因为多个服务器有助于使服务器的x的副本保持为最新的。</p><h3 id="限定顺序偏差"><a href="#限定顺序偏差" class="headerlink" title="限定顺序偏差"></a>限定顺序偏差</h3><p>在持续一致性中,顺序偏差是由以下事实引起的:副本服务器会暂时性地应用已提交给它的更新。因此,每个服务器都有一个暂时写操作的本地队列,这些写操作应用到x的本地副本中的顺序还需确定。通过指定暂时写操作队列的最大长度,就可以限定顺序偏差.</p><p>因此,检测何时需要执行顺序一致性很简单:当本地队列的长度超过指定的最大长度时。此时,服务器不再接受任何新提交的写操作,而是按照应执行的写操作的顺序,通过与其他服务器协商,尝试提交暂时写操作。换句话说,就是需要执行一个暂时写操作的全局一致的顺序。要这样做有很多种方法,但在实践中使用较多的是基于主备份的协议和基于法定数量的协议。下面我们来讨论这些协议。</p><h2 id="基于主备份的协议"><a href="#基于主备份的协议" class="headerlink" title="基于主备份的协议"></a>基于主备份的协议</h2><p>在实践中,我们可以看到,分布式应用程序所遵循的一致性模型往往是相当容易理解的。这些模型包含有用于限定新旧偏差的模型,以及用于限定数值偏差的模型。关于处理操作的一致顺序的模型,顺序一致性,尤其是其操作可以通过加锁或事务来分组的模型很流行。<br>对应用程序开发人员来说,一致性模型一旦变得稍微有些难以理解,即使性能可以提高,它们也会被忽视。这里的底线是,如果一致性模型的语义直观上不清楚,应用程序开发人员要构建正确的应用程序就很困难。简单性是值得肯定的(合理性大概也是如此)。<br>事实证明,在顺序一致性中,基于主备份的协议比较盛行。在这些协议中,数据存储中的每个数据项有一个相关的主备份,该主备份负责协调在x上的写操作。根据主备份是否固定在一个远程服务器上,还是将主备份移动到启动写操作的进程那里之后写操作是否可在本地执行,可以区分各种基于主备份的协议。下面我们来看看这类协议。</p><h3 id="远程写协议"><a href="#远程写协议" class="headerlink" title="远程写协议"></a>远程写协议</h3><p>支持复制的基于主备份的最简单协议是一种所有读操作和写操作都转发给单个固定的远程服务器的协议。读操作可以在本地执行。这种方案又称为<strong>主备份协议(primary-backup protocol)</strong>。主备份协议的工作原理如下图所示。要在数据项x上执行一个写操作的进程,会把该操作转发给x的主服务器。该主服务器在其x的本地副本上执行更新操作,随后把该更新转发给备份服务器。每个备份服务器也执行这个更新操作,并往主服务器回送一个确认消息。当所有备份服务器都更新了它们的本地副本后,主服务器回送一个确认消息给初始进程。<br><img src alt="远程写协议"></p><p>这种方法存在一个潜在的性能问题,就是启动更新的进程在被允许继续执行前,可能需要等待相对较长的时间。实际上,在这种方法中,更新是以一种阻塞操作的方法来实现的。另一种方法是使用非阻塞的方法。只要主服务器已经更新了其x的本地副本,它就返回一个确认消息。然后,它再通知备份服务器也执行这个更新。<br>非阻塞的主备份协议中的主要问题是它的容错能力。在阻塞方法中,客户端进程确切地知道其他若干台服务器备份了更新操作。但是在非阻塞的方法中,情况并不是这样。我们将在后面内容展开讨论容错问题。</p><p>主备份协议提供了一种实现顺序一致性的简单方法,因为主服务器可以对所有进来的写操作进行全局时间排序。显然,无论使用哪个备份服务器执行读操作,所有进程都会以相同的顺序看到所有的写操作。同样,在阻塞协议中,进程将总会看到它们最近执行的写操作的结果(注意,非阻塞协议不采取特殊措施时不能保证这一点)。</p><h3 id="本地写协议"><a href="#本地写协议" class="headerlink" title="本地写协议"></a>本地写协议</h3><p>主备份协议的一种变体是,其主副本在要执行写操作的进程之间迁移。如前所述,当某个进程要更新数据项x时,它先定位x的主副本,然后把它移到自己的位置上,如下图所示。这种方法的主要优点是,可以在本地执行多个连续的写操作,而读操作仍可以访问其本地副本。但是,只有使用非阻塞协议,在主备份完成更新后,通过该协议将更新传播到其他副本时,才可能实现这个优点。<br><img src alt="本地写协议"></p><p>主备份的本地写协议也可应用于能够在离线模式下操作的移动计算机。离线前,移动计算机成为每个它期望更新的数据项的主服务器。离线时,所有更新操作都在本地执行,而其他进程仍可以执行读操作(但不能执行更新操作)。稍后,再次连接时,更新从主服务器传播到备份服务器,使数据存储再次达到一致的状态。</p><p>非阻塞、本地写的基于主机的协议是这种方案的最后一个变体,它常常用于分布式系统。在这种情况下,有一个固定的中心服务器,通过它,可以进行所有的写操作,就像是远程写主备份一样。但是,该服务器可以临时允许一个副本服务器执行一系列的本地更新操作,因此可以显著地提高性能。当副本服务器完成后,更新操作被传播给中心服务器,从这里再把它们分发给其他的副本服务器</p><h2 id="复制的写协议"><a href="#复制的写协议" class="headerlink" title="复制的写协议"></a>复制的写协议</h2><p>在复制的写协议中，写操作可以在多个副本上执行，而不是像基于主备份的副本那样只在一个副本上执行。主动复制和基于多数表决的一致性协议的区别在于：主动复制中的操作被转发到所有副本。</p><h3 id="主动复制"><a href="#主动复制" class="headerlink" title="主动复制"></a>主动复制</h3><p>在主动复制中,每个副本有一个相关联的进程,该进程执行更新操作。与其他协议相比,更新通常是通过引起更新的写操作来传播的。也就是说,该操作被发送到每个副本。但是,使用前面讨论的方法发送更新也是可以的。</p><p>主动复制的一个问题是操作需要在各地以相同的顺序执行,因而需要一种全序的多播机制。这种多播可以用Lamport时间戳来实现。但是,Lamport时间戳用于大型分布式系统时的扩展性不好。一种替代的方法是使用中心协调器,又称为<strong>定序器(sequencer)</strong>来实现全序。一种方法是先将所有操作转发到定序器,由定序器为每个操作分配一个唯一的序列号,随后将这些操作转发给所有副本。操作按照其序列号顺序执行。显然,这种全序多播的实现与基于主备份的一致性协议非常相似。注意,使用定序器并不能解决可扩展性问题。事实上,如果需要全序的多播机制,那么结合Lamport时间戳和定序器的对称多播可能是必不可少的。这种解决方法在(Rodrigues等1996)中有所描述。</p><h3 id="基于多数表决的协议"><a href="#基于多数表决的协议" class="headerlink" title="基于多数表决的协议"></a>基于多数表决的协议</h3><p>支持复制的写协议的另一种方法是使用<strong>表决(voting)</strong>,该方法最先由Thomas(1979)提出,并由Gifford(1979)一般化。其<strong>基本思想</strong>是要求客户在读或写一个复制的数据项之前向多个服务器提出请求,并获得它们的许可。</p><p>下面以一个简单的示例来说明该算法工作原理。考虑一个分布式文件系统,假设其文件被复制在N个服务器上。我们规定:要更新一个文件,客户必须先联系至少半数加一个服务器(即多数服务器),并得到它们同意后执行更新。一旦它们同意更新,该文件将被修改,这个新文件也将与一个新版本号关联。该版本号用于识别文件的版本,对于所有新更新的文件,它们的版本号是相同的。<br>要读取一个复制文件,客户也必须联系至少半数加一个服务器,请求它们返回该文件关联的版本号。如果所有的版本号一致,那么该版本必定是最新的版本,这是因为剩余服务器的个数不够半数以上,试图只更新剩余服务器的请求将会失败。<br>例如,如果系统有5个服务器,一个客户确定其中3个服务器持有第8版本的文件,那么其余2个服务器不可能持有第9版本的文件。毕竟,所有成功地从第8版本到第9版本的更新需要得到3个而不只是2个服务器的许可。</p><p>实际上,Gifford的方案比这个方法更加通用。在Gifford的方案中,一个客户要读取具有N个副本的文件,它必须组织一个<strong>读团体(read quorum)</strong>,该读团体是$$N_R$$个以上服务器的任意集合。同样地,要修改一个文件,客户必须组织一个至少有$$N_W$$个服务器的<strong>写团体(write quorum)</strong>。$$N_R$$和$$N_W$$的值应满足以下两个限制条件:</p><ol><li>$$N_R+N_W&gt;N$$</li><li>$$N_W&gt;N/2$$</li></ol><p>第一个限制条件用于防止读写操作冲突,而第二个限制条件用于防止写写操作冲突。只有在适当个数的服务器同意参与文件的读写后,客户才能读或写该文件。</p><p><img src alt="表决算法的三个示例"><br>为了理解该算法的工作方式,我们以图(a)为例,其中$$N_R=3$$且$$N_W=10$$。假设最近的写团体由服务器C~L的10个服务器组成。任何随后由三个服务器组成的读团体必须至少包含一个该集合中的服务器。客户查看版本号时,它会知道哪个服务器是最新的,并选择那个服务器。<br>在图(b)和(c)中,我们看到了另外两个示例。图(b)中的示例可能发生写写操作冲突,这是因为$$N_W\le N/2$$。特别地,如果一个客户选择{A,B,C,E,F,G}作为它的写操作集,而另一个客户选择{D,H,1,J,K,L}作为它的写操作集,那么显然会遇到麻烦,因为我们接受了这两个更新,没有检测是否会发生冲突。<br>图(c)所示的情形特别有趣,因为它设置$$N_R$$为1,这使它可以通过找到并使用复制的文件的任何副本来读取该文件。但是,它所付出的代价是写更新需要获取所有副本。这种方法通常称为<strong>“读一个,写全部”(read-one,write-ll, ROWA)</strong>。</p><h2 id="高速缓存相关性协议"><a href="#高速缓存相关性协议" class="headerlink" title="高速缓存相关性协议"></a>高速缓存相关性协议</h2><p>高速缓存形成了一类特殊的复制,因为它们通常由客户而不是服务器控制。高速缓存相关性协议保证高速缓存与服务器启动的副本一致,在原理上,高速缓存相关性与迄今为止我们讨论的各种一致性协议有没有多大差别。</p><p>关于高速缓存的设计与实现方面的研究很多,特别是在共享存储器的多处理器系统环境中。很多方法基于底层硬件的支持,例如假设可以实现侦听或高效的广播。基于中间件的分布式系统建立在通用的操作系统之上,在这种环境中,基于软件来解决高速缓存问题的方法备受关注。此时,通常使用两个单独的标准来划分高速缓存协议。</p><p>首先,不同的高速缓存解决方法在<strong>相关性检测策略(coherence detection strategy)</strong>上有区别,即实际检测不一致性的时间不同。静态的解决方法假定编译器在运行之前执行必要的分析,并确定哪些数据可能因为它们被缓存而实际导致了不一致性。编译器仅插入一些避免不一致性的指令。动态解决方法通常应用于本书所研究的各种分布式系统。在这些解决方法中,不一致性是在运行时检测的。例如,检查服务器,查看被缓存的数据自从被缓存后是否被改变过</p><p>在分布式数据库中,根据事务处理期间进行检测的确切时间,可将动态的基于检测的协议进一步精确分类。Franklin等(1997)将其分为以下三类。第一类,在事务处理期间访问高速缓存的数据项时,客户需要检验该数据项是否仍与(可能是复制的)服务器中的该数据项一致。在检查完一致性之前,事务处理不能开始使用缓存的数据。<br>第二类方法是在进行一致性检验时,继续执行事务处理,该方法是最优的方法。它假设事务处理启动时高速缓存的数据是最新的。如果稍后证实该假设是错误的,那么事务处理将不得不异常中止。<br>第三类方法是只有事务处理委托检验时才检验高速缓存的数据是否是最新的。这类方法与上一章所讨论的乐观并发控制方法类似。实际上,事务处理只是启动对缓存的数据的操作,并希望得到令人满意的结果。在所有工作都完成后,再检验被访问的数据的一致性。如果事务处理使用的是过时的数据,那么事务处理被异常中止。</p><p>高速缓存相关性的另一个设计问题是<strong>相关性实施策略(coherence enforcement strategy)</strong>,该策略决定高速缓存如何与服务器存储的各副本保持一致。最简单的解决方法是完全不允许缓存共享数据,而是将共享数据仅保存在服务器上。服务器使用前面讨论的基于主备份的协议或复制的写协议来维护一致性,客户只允许缓存私有数据。显然,这种解决方法只能提供有限的性能改善。<br>当共享数据可以被缓存时,实现高速缓存的一致性可采用两种方法。第一种方法是每当一个数据项被修改后,服务器都向所有高速缓存发送无效化消息。第二种方法是仅传播更新。大多数高速缓存系统使用其中一种方法来实现高速缓存的一致性。有时,一些客户服务器数据库动态地选择发送无效化消息或发送更新。</p><p>最后,我们还需要考虑进程修改被缓存的数据时可能发生的情况。使用只读高速缓存时,更新操作只能由服务器执行,然后服务器根据某个分发协议来确保更新被传播到各个高速缓存。很多系统使用基于拉式的方法。此时,如果客户检测到它的高速缓存已经过时,它就向服务器请求更新</p><p>另一种方法是允许客户直接修改被缓存的数据,并将更新转发给服务器。<strong>直写式高速缓存(write-through cache)</strong>采用这种方法,分布式文件系统常使用这种直写式高速缓存。实际上,直写式高速缓存类似于基于主备份的本地写协议,客户的高速缓存成为一个临时的主备份。为了保证顺序一致性,客户必须被授予独占写的特权,否则可能发生写写操作冲突。<br>直写式高速缓存潜在地提供较其他方法更好的性能,这是因为所有的操作都可以在本地执行。如果我们通过允许在通知服务器更新之前执行多个写操作来推迟传播更新,那么性能可以得到进一步的改善。这种方法导致了<strong>回写式高速缓存( write-back cache)</strong>的出现,这种回写式高速缓存也主要应用于分布式文件系统。</p><h2 id="实现以客户为中心的一致性"><a href="#实现以客户为中心的一致性" class="headerlink" title="实现以客户为中心的一致性"></a>实现以客户为中心的一致性</h2><p>作为一致性协议的最后一个主题，让我们来看看如何实现以客户为中心的一致性。如果忽略性能问题，实现以客户为中心的一致性相对来说还是简单的。下面我们先描述一下这种实现，然后介绍一个更为实际的实现。</p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>在以客户为中心的一致性的一种简化实现中,每个写操作W都被分配一个全局唯一的标识符。服务器把该标识符赋给提交写操作的客户。在持续一致性中,我们称该服务器为W的源。然后,对于每个客户,我们跟踪两个操作集。客户的读操作集是由客户所执行的读操作相关的写操作组成的。同样,写操作集由客户执行的写操作的标识符组成。</p><p>单调读一致性的实现如下。当一个客户在一台服务器上执行一个读操作时,该服务器获得客户的读操作集,检查所有已标识的写操作是否已经在本地执行(这个集的大小可能会引起性能问题,下面将讨论这一问题的解决方案)。如果没有,那么它就联系其他服务器以确保执行读操作之前将本地副本更新。另一种方法是将读操作转发到已经执行了这些写操作的服务器那里执行。读操作执行后,在所选择的服务器上执行的写操作以及与读操作相关的写操作会被加入客户的读操作集。<br>注意,这里应该可以确定在读操作集中标识的写操作所发生的确切位置。例如,写操作标识符可能包括启动该操作的服务器的标识符。例如,要求那台服务器将写操作记入日志以便在其他服务器上重新执行这个写操作。另外,写操作应该以启动它们的顺序执行。让客户生成一个全局唯一的序列号,并将这个序列号包含于写操作标识符之中,就可以实现写操作的排序。如果每个数据项只能被它的所有者修改,那么后者就可以提供这个序列号。</p><p>单调写一致性的实现方式与单调读一致性的实现方式类似。每当一个客户在服务器上启动一个新的写操作,客户的写操作集都会转交到该服务器(同样,由于性能需求,这个写操作集的不能过大。下面将讨论另一种可选择的解决方案)。然后,该服务器确保先执行被标识的写操作,并按正确的顺序执行这些写操作。执行新操作之后,该操作的写标识符将被加入写操作集。注意,使用客户的写操作集更新当前服务器可能会造成客户的响应时间的大幅增加。</p><p>同样,写后读一致性要求执行读操作的服务器已经看到客户的写操作集的所有写操作执行读操作之前,可以简单地从其他服务器获取这些操作,尽管这可能导致较差的响应时间。或者,客户端软件可以查找已经执行了已标识写操作的服务器,写操作在客户的写操作集中标识。</p><p>最后,读后写一致性可以通过这一方法实现,即先使用在客户的读操作集中标识了的写操作更新所选择服务器,然后将写操作的标识符以及读操作集中的标识符(这些操作现在已经成为与刚刚执行的写操作相关的操作)加入到写操作集中。</p><h3 id="提高效率"><a href="#提高效率" class="headerlink" title="提高效率"></a>提高效率</h3><p>很容易看出,与每个客户关联的读操作集和写操作集可能变得非常大。为了维持这些集合的可控制性,客户的读操作和写操作根据会话分成组。通常,一个<strong>会话(session)</strong>与一个应用程序关联:应用程序启动时,打开会话,应用程序结束时,关闭会话。但是,会话也可能与暂时结束的应用程序关联,例如用于电子邮件程序的用户代理就是这样的。每当客户结束会话,其关联的集合将被完全清空。当然,如果一个客户打开一个从不关闭的会话时与该客户所关联的读操作集和写操作集仍可能变得非常大。</p><p>简单实现的主要问题在于<strong>如何表示读操作集和写操作集</strong>。每个集合由一些写操作的标识符组成。每当客户向服务器转发一个读请求或写请求时,标识符的集合也将被转交给这台服务器,以查看该服务器是否已经执行了所有与该请求相关的写操作。</p><p>按照如下方式使用向量时间戳可以更高效地表示这一信息。首先,每当服务器接受个新的写操作W时,它首先按上面所述方法为该操作分配一个全局唯一的标识符和一个时间戳ts(W)。随后在该服务器上执行的写操作将被分配一个更高值的时间戳。每台服务器$$S_i$$都维护一个向量时间戳$$\mathrm{WVC}_i$$,其中$$\mathrm{WVC}_i[j]$$的值等于$$S_i$$已接受并执行的、由服务器$$S_i$$启动的最后一个写操作的时间戳。<br>每当客户发出在一个特定的服务器上执行读或写操作O的请求时,该服务器都返回该操作当前的时间戳和该操作O的结果。然后,用向量时间戳表示读操作集和写操作集。对于任何会话A,我们构造一个向量时间戳$$\mathrm{SVC}_A$$,其中$$\mathrm{SVC}_A[i]$$被设置为集合A中所有由服务器$$S_i$$启动的操作的时间戳的最大值:$$\mathrm{SVC}_A[i]=\max{ts(W)\vert W\inA &amp; origin(W)=S_i}$$.<br>换句话说,会话的时间戳总是表示应用程序所看到的最后一个写操作,其中该应用程序作为会话的一部分正在运行中。使用来自同一个服务器的单个时间戳来表示所有的写操作,就可以进行简化。</p><p>另一个示例是，假设作为会话A的一部分的客户登录到服务器$$S_i$$。该客户把$$\mathrm{SVC}_A$$传递给$$S_i$$.假设$$\mathrm{SVC}_A[j]&gt;\mathrm{WVC}_i[j]$$.这意味着$$S_i$$还没看到来自$$S_j$$的写操作。根据一致性的要求，服务器$$S_i$$在回复客户之前必须获取这些写操作。一旦执行了这些操作，服务器$$S_i$$将返回其当前的时间戳$$\mathrm{WVC}_i$$。此时,$$\mathrm{SVC}_A$$调整为：$$\mathrm{SVC}_A[j]=\max{\mathrm{SVC}_A[j], \mathrm{WVC}_i[j]}$$<br>同样，我们可以看到，在分布式系统中，向量时间戳提供了一种表示历史记录的优雅而紧凑的方法。</p>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> distributed-system </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> distributed system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统 - 同步化]]></title>
      <url>http://www.wrran.com/blog/2017/12/28/review/distributed-system/6-synchronization/</url>
      <content type="html"><![CDATA[<blockquote><p>三个臭皮匠赛过诸葛亮</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在前面,我们已经讨论了进程及进程间的通信。虽然进程间通信很重要,但它并不是分布式系统的全部内容。与之紧密相关的问题是<em>进程间如何协作和同步</em>。进程协作通过命名方式得到部分支持,进程协作使得进程可以共享资源,或者一般地说是共享实体<br>本章中,我们主要集中精力研究进程间是如何同步的。例如,多个进程不能同时访问个共享资源(例如打印机),而是相互协作,彼此授权暂时地独占访问。另一个例子是多个进程有时可能需要就事件的顺序达成一致,比方说来自进程P的消息m1是在来自进程Q的消息m2之前还是之后被发送出去。<br>实践表明,分布式系统的同步常常比单处理器或者多处理器系统中的同步更加困难。本章中讨论的问题及其解决方法本质上是比较常见的,它们出现在分布式系统的许多不同情况下。<br>我们从基于真实时间的同步问题开始讨论,接着讨论以相对排序的方式而不是以绝对时间的方式来实现的同步。我们也要讨论分布式全局状态的概念,以及如何通过进程同步来记录全局状态。<br>在许多情况下,一组进程能指定一个进程作为协作者是重要的,这可以通过选举算法来实现。我们将在单独的一节中讨论各种各样的选举算法。<br>与同步相关的两个主题是分布式系统中的互斥和分布式事务。分布式互斥保护共享资源不被多个进程同时访问。分布式事务也作类似的事情,但是它通过高级的并发控制机制来优化访问。互斥和事务将在单独的小节中讨论。</p><h1 id="时钟同步"><a href="#时钟同步" class="headerlink" title="时钟同步"></a>时钟同步</h1><p>在集中式系统中,时间是明确的。当进程想知道时间时,它就进行一次系统调用,然后系统内核就会告诉它。如果进程A询问时间,稍后进程B也询问时间,那么进程B获取的时间值将比进程A获取的时间值大,或者可能相等,但无论如何不会小于后者。在分布式系统中,取得时间上的一致是不容易的。<br>由于时间是人们思考问题的基础,并且容易看到,所有的时钟没有完全同步可能导致很多程序无法正常运行,所以我们先从一个简单问题开始有关同步的学习:是否有可能对分布式系统中的所有时钟进行同步?</p><h2 id="物理时钟"><a href="#物理时钟" class="headerlink" title="物理时钟"></a>物理时钟</h2><p>几乎所有的计算机都有一个计时电路。尽管一般使用“时钟”这个词来表达这些设备,但它们实际上不是通常意义的时钟,把它们称为<strong>计时器(timer)</strong>可能更恰当一点。计算机的计时器通常是一个精密加工过的石英晶体。石英晶体在其张力限度内以一定的频率振荡,这个频率取决于晶体本身如何被切割及其受到张力的大小。有两个寄存器与每个石英晶体相关联,一个是<strong>计数器(counter)</strong>,另一个是<strong>保持寄存器(holding register)</strong>。石英晶体的每次振荡使计数器减1。当计数器减为0时,产生一个中断,计数器从保持计数器中重新装入初始值。这种方法使得对一个计时器进行编程,令其每秒产生60次中断(或者以任何其他希望的频率产生中断)成为可能。每次中断称为一个<strong>时钟滴答(clock tick)</strong>。</p><p>在单机单时钟的情况下,如果这个时钟有少许偏差是不会有多大问题的。因为这台机器上的所有进程使用同一个时钟,所以它们内部仍然会保持一致。真正重要的是相对时间。<br>一旦引入多CPU系统,每个CPU都有自己的时钟,情况将发生变化。尽管石英晶体振荡的频率通常是相当稳定的,但仍不可能保证不同计算机中的石英晶体都以完全相同的频率在振荡。实际上,当一个系统有n台计算机时,所有n个晶体都将以略微不同的速度振荡,导致(软)时钟逐渐不同步;当同时读这些时钟值时,将得到不同的值。这种时间值的不同称为<strong>时钟偏移(clock skew)</strong>。时钟偏移的后果就是那些期望与文件、对象、进程或消息相关的时间(即所使用的时钟)不仅正确,而且独立于产生它们的机器的程序可能失败。</p><p>在一些系统(例如实时系统)中,真实的时钟时间是很重要的。对于这些系统,外部物理时钟是必须的。考虑到效率和冗余,通常认为使用多个物理时钟比较合适,但有两个问题:(1)我们如何使它们与真实世界的时钟同步呢?(2)我们如何使这些时钟彼此同步?<br>第一个问题涉及到UTC的历史，此处不再赘述。</p><h2 id="时钟同步算法"><a href="#时钟同步算法" class="headerlink" title="时钟同步算法"></a>时钟同步算法</h2><p>所有同步算法都有相同的系统基础模型,我们下面对其进行描述。假设每台机器都有一个每秒产生$$H$$次中断的计时器。当计时器产生中断时,中断处理程序将软件时钟加1,软件时钟记录从过去某一约定时间开始的滴答(中断)数。我们将这个时钟值称为$$C$$。更具体地说,当UTC时间为$$t$$时,机器P上的时钟值为$$\mathrm{Cp}(t)$$。最理想的情况是对所有的p和t,都有$$\mathrm{Cp}(t)=t$$;换言之,$$dC/dt$$的理想值为1。<br>真正的计时器并不是每秒精确地中断$$H$$次。理论上,当H=60时,计时器应每小时产生216000个滴答。实际上,现代计时器芯片所能达到的错误率大约是$$10^{-5}$$,这意味着每台具体机器的计时器每小时可以产生的滴答次数在215998到216002之间。更准确地说,若<br>存在某一常数$$\rho$$,使得:<br>$$1-\rho\le\frac{dC}{dt}\le 1+\rho$$<br>那么可以说计时器在它的规定范围内工作。<br>这个常量$$\rho$$由厂商规定,称为<strong>最大偏移率(maximum drift rate)</strong>。稍慢的、精确的及稍快的时钟如下图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/relation%20of%20utc%20and%20timer.PNG" alt="当时钟以不同的速率滴答时，时钟时间和UTC之间的关系"></p><p>若两个时钟以相反的方向偏离UTC,在它们同步后的$$\delta t$$时,它们间的最大可能差值是$$2\rho\delta t$$。如果操作系统设计者要保证每两个时钟之间的差值不超过$$\epsilon$$,那么时钟必须至少每$$epsilon/2\rho$$秒重新同步一次。各种算法的差异在于实现重新同步的方法不同。</p><h3 id="网络时间协议"><a href="#网络时间协议" class="headerlink" title="网络时间协议"></a>网络时间协议</h3><p>很多协议中常用的方法是由Cristian(1989)提出的,那就是让客户与<strong>时间服务器(time server)</strong>联系。时间服务器可以精确地提供当前时间,因为它装备了一个WwV接收器或一个精确的时钟。当然,问题是,何时与该服务器联系,消息延时也会使得报告的时间过时。<br>其中的技巧是对这些延时做出很好的估计。请看图中所描绘的情况。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/get%20real-time%20from%20time-server.PNG" alt="从一个时间服务器得到当前时间"></p><p>在这种情况下,A发送一个请求给B,时间为$$T_1$$。反过来,B会记录接收时间$$T_2$$(依据自己的时钟),并返回一个响应消息,时间为$$T_3$$,该时间比$$T_2$$晚。最后,A记录下响应消息达到的时间$$T_4$$。假设从A到B的传输延时与从B到A的大致相同,即$$T_2-T_1\approx T_4-T_3$$。这样,A就可以计算出与B的时间偏差:<br>$$\theta=T_3-\frac{(T_4-T_1)+(T_4-T_3)}{2}=\frac{(T_2-T_1)+(T_3-T_4)}{2}$$<br>当然,时间是不准许往后退的。如果A的时钟快了,$$\theta&lt;0$$,表示原则上A应该把它的时钟往后调。这是<strong>不准许</strong>的,因为这将会导致严重的问题。这种修改必须逐步进行。一种方法如下。假设把计时器设置为每秒产生100个中断。正常情况下,每个中断将添加10毫秒。当减慢时,每个中断例程只添加9毫秒,直到校正完成。同样,通过在每个中断中添加11毫秒,时钟也可以逐步往前调</p><p><strong>网络时间协议(network time protocol, NTP)</strong>在服务器之间创建了两条连接。换句话说,B也可以探查A的当前时间。偏差$$\theta$$的计算同上,而延时$$\delta$$的计算如下<br>$$\delta=\frac{(T_2-T_1)+(T_4-T_3)}{2}$$<br>可以先将每个$$(\theta, \delta)$$对缓存起来,最后以$$\delta$$的最小值作为两个服务器之间的延时,从而,相应的$$\theta$$值就是最可靠的偏差。</p><p>原则上,对称地应用NTP也可以让B参照A来调整它的时钟。但是,如果已知B的时钟更精确,那么这种调整就是愚蠢的了。要解决这个问题,NTP把服务器分成多个层。含有<strong>参考时钟(reference clock)</strong>的服务器(如Wwv接收器或原子时钟)称为1层服务器(stratum-1 server)(时钟本身为0层)。当A与B联系时,如果它的层比B的要高,那么它只调整自己的时间。而且,经过同步化后,A将比B高一层。换句话说,如果B是k层服务器,且A的初始层已经大于k,那么,经过时间调整后,A就变成了(k+1)层服务器。由于NTP的对称性,如果A的层数比B的低,那么B将按照A来调整自己。NTP有很多重要的特性,其中很多是与错误的识别和屏蔽有关,还有一些是与安全攻击有关。</p><h3 id="Berkeley算法"><a href="#Berkeley算法" class="headerlink" title="Berkeley算法"></a>Berkeley算法</h3><p>在很多算法(如NTP)中,时间服务器是被动的。其他机器定期向时间服务器询问时间,时间服务器所做的就是回答它们的请求。 Berkeley Unix系统采取了完全相反的方法。<br>该系统中的时间服务器(实际上是时间守护程序)是主动的,它定期地询问每台机器的时间。基于这些回答,它计算出一个平均时间,并告诉所有其他机器将它们的时钟拨快到一个新的时间,或者拨慢,直到某个指定的减少量达到为止。这种方法<strong>适合于</strong>没有WWv接收器的系统。时间守护程序的时间必须由操作者定期手工设置。下图描述了这种方法。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/berkeley%20time%20sync.PNG" alt="Berkeley时钟同步算法"><br>在上图(a)中,在3:00时,时间守护程序把它的时间告诉其他机器,并询问它们各自的时间。在上图(b)中,各台机器将它们各自的时间与时间守护程序时间的差值告诉时间守护程序。有了这些值,时间守护程序计算出它们的平均值,并通知各台机器如何调整各自的时钟,如上图(c)所示。<br>很多情况下,所有机器达成同一时间就足够了,没有必要使它们的时间与广播中所播的时间（实际时间）一致。在图中示例,不会手工调整守护程序的时钟,假使其他结点都没有与外部计算机通信,也不会有什么危害。人人都乐意与当前时间达成一致,而不关心这个值是否与实际的时间有何联系。</p><h3 id="无线网络中的时钟同步"><a href="#无线网络中的时钟同步" class="headerlink" title="无线网络中的时钟同步"></a>无线网络中的时钟同步</h3><p>更传统的分布式系统中一个重要的优点是,我们可以很容易而且很有效地部署时间服务器。而且,大多数机器可以相互联系,准许信息的相对分散。这些假设在很多<strong>无线网络</strong>(最著名的就是传感器网络)中就不再有效了。结点是受资源限制的,多跳路由很昂贵。而且,针对能量消耗的优化算法往往很重要。这些以及其他因素使得需要为无线网络设计不同时钟的同步化设计算法。下面我们将介绍一种解决方法。</p><p><strong>参考广播同步化(reference broadcast synchronizat1on,RBS)</strong>是一种时钟同步化协议,它与其他协议很不相同。首先,该协议没有假设具有精确时间的结点。它不是为所有结点提供UTC时间,而只是在内部实现时钟的同步化,就像Berkeley算法样。第二,到目前为止我们所讨论的方法是用来为发送器和接收器实现同步,基本上是遵循双向协议。RBS与这种模式不同,它只是使接收器同步化,发送器则位于该循环之外。</p><p>在RBS中,发送器广播一个参考消息,让接收器调整它们的时钟。一个关键因素是,在传感器网络中,信号到其他结点的时间大致是固定的。在这种情况下的传播时间是从消息离开发送器的网络接口那一刻开始计算的。因此,消息传输中两个重要的变源(即构建消息所花费的时间和访问网络所花费的时间)对延时的计算不再其作用了，图示如下。注意,在诸如NTP的协议中,消息在网络接口中传输是就把时间添加到其中了。而且,由于无线网络是基于内容的协议,通常无法确定消息在真正传输之前已经花费了多少时间。这些不确定因素在RBS中都被去除了。所留下的是在接收器中的传送时间,但这个时间比网络访问时间小很多。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/critical%20path%20of%20rbs%20and%20normal-situation.PNG" alt="RBS与通常情况下的关键路径"></p><p>RBS的基本思想很简单:当一个结点广播一个参考消息m时,每个结点P只是记录它接收到m的时间$$T_{p,M}$$。注意,$$T_{p,M}$$是从p的本地时钟读取的。忽视时钟偏差,两个结点p和q就可以交换各自的传送时间,以便计算相互的相对偏差:<br>$$\Delta[p,q]=\frac{\sum_{k=1}^M(T_{p,k}-T_{q,k})}{M}$$<br>其中,$$M$$是发送的参考消息总数。这个信息很重要:结点p将知道q的时钟值相对于自己时钟值的偏差。而且,如果它存储了这些偏差,就没有必要调整自己的时钟,这就可以节省能量消耗。但是,时钟是会变化的。这导致的结果是,上面计算的平均偏差将不再有用:最后发送的值没有第一个精确。而且,随着时间的流逝,偏移量将增加。<br>这可以通过一种非常简单的方法来进行补偿:他们不是计算平均值,而是应用标准线性回归来计算偏差,如下面函数所示:<br>$$\Delta<a href="t$=\alpha t+\beta$
常数$$\alpha$$和$$\beta$$可以从$$(T_{p,k},T_{q,k}">p,q</a>$$对计算出来。这种新方法可以通过结点p来更精确地计算出q的当前时钟,反之亦然。</p><h1 id="逻辑时钟"><a href="#逻辑时钟" class="headerlink" title="逻辑时钟"></a>逻辑时钟</h1><p>至此,我们假设时钟同步化是与实际时间相关的。但是,在许多应用中,只要所有的机器具有相同的时间就够了,这个时间不一定要与实际时间相同。依据相对时间的算法通常将时钟称为<strong>逻辑时钟(logical clock)</strong>。<br>在一篇著名的论文中,Lamport(1978)阐明,尽管时钟同步是可能的,但它不是绝对必要的。如果两个进程不进行交互,那么它们的时钟也无需同步,这是因为即使没有同步也觉察不出来,并且也不会产生问题。他进一步指出,通常,重要的不是所有的进程在时间上完全一致,而是它们在事件的<strong>发生顺序</strong>上要达成一致。<br>本节我们将讨论Lamport算法,这是一个逻辑时钟同步化的算法。我们还要讨论一个称为向量时间戳的Lamport扩展算法。</p><h2 id="Lamport逻辑时钟"><a href="#Lamport逻辑时钟" class="headerlink" title="Lamport逻辑时钟"></a>Lamport逻辑时钟</h2><p>为了同步逻辑时钟，Lamport定义了一个称为<strong>“先发生”</strong>（happens-before）的关系。表达式<code>a-&gt;b</code>读作“a在b之前发生”,意思是所有进程一致认为事件a先发生,然后事件b才发生。这种先发生关系有两种情况：</p><ol><li>如果a和b是同一个进程中的两个事件,且a在b之前发生,则<code>a-&gt;b</code>为真。</li><li>如果a是一个进程发送消息的事件,而b为另一个进程接收这个消息的事件,则<code>a-&gt;b</code>也为真。消息不可能在发送之前就被接收,也不能在发送的同时被接收,这是因为消息需要一定时间才能到达接收端</li></ol><p>先发生关系是一个传递关系,所以若<code>a-&gt;b</code>且<code>b-&gt;c</code>,则<code>a-&gt;c</code>。如果事件x和y发生在两个互不交换消息的进程中(也不通过第三方间接交换消息),那么<code>x-&gt;y</code>不真,<code>y-&gt;x</code>也同样不真。这两个事件称为<strong>并发的(concurrent)</strong>,这意味着无法说(或者不必说)这两个事件什么时候发生,哪个事件先发生。</p><p>我们需要一种测量时间的方法,使得对于每个事件a,我们都能为它分配一个所有进程都认可的时间值C(a)。这些时间值必须具有如下性质:<strong>如果<code>a-&gt;b</code>,那么<code>C(a)&lt;C(b)</code></strong>。重述我们前面陈述的情况,若a和b是同一进程中的两个事件,且a在b之前发生,则C(a)&lt;C(b)。与此类似,如果a是一个进程发送消息的事件,而b是另一个进程接收该消息的事件,那么C(a)和C(b)必须赋予大家都认可的具有C(a)&lt;C(b)关系的值。另外,<strong>时钟时间值C必须总是前进(增加)不能倒退(减少)</strong>。校正时间的操作是给时间加上一个正值,而不能是减掉一个正值。</p><p>现在我们来看一看Lamport算法怎样为事件分配时间。考虑如下图所示的三个进程。各个进程运行在不同的机器上,每台机器都有自己的时钟,它们以各自不同的速率工作。如图所示,当进程0的时钟滴答了6次时,进程1的时钟滴答了8次,进程2的时钟则滴答了10次。每个时钟均以一个不变的速率工作,但是由于晶体之间的差异,各时钟的工作速率不同。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/1/Lamport%E7%AE%97%E6%B3%95%E6%A0%A1%E6%AD%A3%E4%B8%89%E4%B8%AA%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%B8%8D%E5%90%8C%E6%97%B6%E9%92%9F.PNG" alt="Lamport算法校正三个进程的不同时钟"><br>在时刻6,进程0将消息A发送给进程1,消息的传输时间取决于信任哪个时钟。不管怎样,当它到达时,进程1的时钟值为16。如果消息携带有自身的起始时间6,那么进程1将会推算该消息从进程0到进程1需要10个滴答。这个值的确是可能的。依此类推,消息B从进程1到进程2需要16个滴答,这也是可能的。<br>现在出现了有趣的问题。从进程2到进程1的消息C在时刻60离开,却在时刻56到达。与之类似,从进程1到进程0的消息在时刻64离开,却在时刻54到达。这些值显然是不可能的。必须防止这种情况出现。<br>Lamport的解决方法直接遵循先发生关系。既然m3在时刻60离开,那么它只能在时刻61或更晚的时刻到达。所以,每个消息都应携带依据发送者时钟的发送时间。当消息到达并且接收者时钟显示的时间值比消息的发送时间早时,接收者就将它的时钟调到一个比发送时间大1的值。在上图中,我们看到m3现在到达的时间是61。与此类似,m4到达的时间是70。</p><p>为了准备有关向量时钟的讨论,让我们来更精确地规则化这个过程。这里,很重要的点是,要区分在前面内容中所介绍过的软件的三个不同层:网络层、中间件层和应用层,如下图所示。这是中间件层的一个典型部分。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/1/%E5%9C%A8%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%ADLamport%E9%80%BB%E8%BE%91%E6%97%B6%E9%92%9F%E7%9A%84%E5%AE%9A%E4%BD%8D.PNG" alt="在分布式系统中Lamport逻辑时钟的定位"><br>要实现Lamport逻辑时钟,每个时钟$$P_i$$维护一个局部计数器$$C_i$$。这些计数器按如下步骤进行更新:</p><ol><li>在执行一个事件之前，$$P_i$$执行$$C_i\leftarrow C_i+1$$</li><li>当进程$$P_i$$发送一个消息m给$$P_j$$时，在执行第一步的操作之后，把m的时间戳$$\mathrm{ts}(m)$$设置为等于$$C_i$$</li><li>在接收消息m时，进程$$P_j$$调整自己的局部计数器为$$C_j\leftarrow \max{C_j,\mathrm{ts}(m)}$$，之后执行第一步，并把该消息传送给应用程序</li></ol><p>在某些情况下,还需要一个<strong>附加条件</strong>:即两个事件不会完全同时发生。为了实现这个目标,我们可以将事件发生所在的进程号附加在时间的低位后,并用小数点分开。例如,进程$$P_i$$中的事件都发生在时刻40,那么就记为40.i。注意,如果a发生在进程P的C(a)时刻,那么,通过把事件时间赋值为$$C(a)\leftarrow C_i(a)$$,就可以得到我们最初寻找的全局时间值的分布式实现。</p><p><strong>示例：全序多播</strong><br>作为Lamport时间戳的一个应用，让我们来考虑下已经把一个数据库复制到几个站点的情况。例如，为了提高查询的效率，银行可能在两个不同的城市都保存一个账户数据库的副本，如纽约和旧金山。一个查询总是被发送到最近的那个副本。查询的快速应答在一定程度上是以较高的更新开销为代价的，这是因为每次更新都必须在每个副本上执行。</p><p>事实上,对更新的要求更严格。假设一位旧金山的客户想在他的账户中存进100美元,且当前他账户上有1000美元。与此同时,纽约的银行职员要向该账户加进1%的利息。此数据库的两个副本都应该执行这两次更新操作。但是,由于网络中的传输延迟,这两次更新可能以图所示的顺序到达,而分别在不同的数据库中产生不同的更新效果。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/1/%E6%9B%B4%E6%96%B0%E4%B8%80%E4%B8%AA%E5%A4%8D%E5%88%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E5%AE%83%E5%A4%84%E4%BA%8E%E4%BA%86%E4%B8%80%E7%A7%8D%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E7%8A%B6%E6%80%81.PNG" alt="更新一个复制的数据库使它处于了一种不一致的状态"><br>我们要处理的问题就是<strong>在每个副本上的两个更新操作应该以相同的顺序执行</strong>。其实对于一致性而言，遵循哪个顺序是无关紧要的；真正重要的是两个副本完全相同。一般来说，上述情形需要进行一次<strong>全序多播（totally-ordered multicast）</strong>，即一次将所有的消息以同样的顺序传送给每个接收的多播操作。Lamport时间戳可以用于以完全分布式的方式实现全序多播。<br>考虑一组彼此互相多播消息的进程。每个消息都以它的发送者的当前逻辑时间作为时间戳。当一个消息被多播时，理论上它也被传送给它的发送者。另外，假定来自同一个发送者的消息以它们被发送的顺序被接收，并且没有任何消息的丢失。<br>进程接收到一个消息后，将它放进一个本地队列中，并根据它的时间戳进行排序。然后接收者向其他所有进程广播一个确认消息。如果我们按照Lamport算法来校正本地时钟，那么接收到的消息的时间戳总是早于确认消息的时间戳。该方法有趣的地方是所有的进程最终将有相同的本地队列副本（就好像没有消息被删除一样）。只有当队列中的一个消息处于队列头，并且已经被所有其他进程确认的时候，进程才可以将它传送给运行中的应用程序。此时把消息从队列中删除并传送给应用程序，相关的确认消息可以被简单地删除。因为每个进程都有相同的队列，所以在任何地方，所有的消息都以相同的顺序交付。换言之，我们已经建立了全序多播。</p><p>正如我们将要看到的，对于复制服务来说，为了让这些服务在任何地方都可以以相同的顺序执行相同的操作，全序多播是一个重要的工具。由于复制所遵循的处理过程基本上与相同的有限状态机相同，因此又被称为<strong>状态机复制(state machine replication)</strong>。</p><h2 id="向量时钟"><a href="#向量时钟" class="headerlink" title="向量时钟"></a>向量时钟</h2><p>Lamport逻辑时钟导致分布式系统中的所有事件都要经过排序以具有这样的性质：如果事件a在事件b之前发生，那么a也应该排在b之前，即$$\mathrm{C}(a)&lt;\mathrm{C}(b)$$<br>但使用Lamport时间戳之后，指通过比较事件a和b各自的时间值$$\mathrm{C}(a)$$和$$\mathrm{C}(b)$$,无法说明它们之间的关系。换句话说，$$\mathrm{C}(a)&lt;\mathrm{C}(b)$$不能说明事件a就是在事件b之前发生。还需要另外一些信息。<br>为了便于介绍，我们来考虑如下图所示的三个进程发送的消息。$$\mathrm{T}_{snd}(m_i)$$表示在该逻辑时间发送消息$$m_i$$，同样$$\mathrm{T}_{rev}(m_i)$$表示在逻辑时间接收消息$$m_i$$。这样，我们就知道，对每个消息有$$\mathrm{T}_{snd}(m_i)&lt;\mathrm{T}_{rev}(m_i)$$，但从$$\mathrm{T}_{snd}(m_i)&lt;\mathrm{T}_{rec}(m_i)$$中我们可以得到什么结论呢？<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/2/%E4%BD%BF%E7%94%A8%E9%80%BB%E8%BE%91%E6%97%B6%E9%92%9F%E8%BF%9B%E8%A1%8C%E5%B9%B6%E5%8F%91%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%81.PNG" alt="使用逻辑时钟进行并发消息传送"><br>如果$$m_i=m_1$$且$$m_j=m_3$$，那么我们就可以知道，这些值对应着进程$$P_2$$发生的事件，说明$$m_3$$的确是在接收消息$$m_1$$之后发送的。这表明消息$$m_3$$的发送与消息$$m_1$$的接收有关。我们还知道$$\mathrm{T}_{rec}(m_1)&lt;\mathrm{T}_{snd}(m_2)$$，但消息$$m_2$$的发送与消息$$m_1$$的接收无关。</p><p>上面的陈述是想突出Lamport时间戳并不能捕获<strong>因果关系(causality)</strong>。因果关系可以通过<strong>向量时钟(vector clock)</strong>来捕获。分配给事件a的向量时钟$$\mathrm{VC}(a)$$具有下列性质：如果对某一事件b，有$$\mathrm{VC}(a)&lt;\mathrm{VC}(b)$$，那么认为事件a在因果关系上先于事件b。向量时钟的创建是通过让每个进程$P_i$维护一个向量$$\mathrm{VC}_i$$来完成的，该向量具有下面两个性质：</p><ol><li>$$\mathrm{VC}_i[i]$$是目前为止进程$$P_i$$发生的事件的数量</li><li>如果$$\mathrm{VC}_i[j]=k$$，则进程$$P_i$$知道进程$$P_j$$中已经发生了$$k$$个事件。因此，$$P_i$$知道$$P_j$$的逻辑时间</li></ol><p>第一个性质是通过在进程$$P_i$$中的新事件发生时递增$$\mathrm{VC}_i[i]$$来维护的。第二个性质是通过在所发送的消息中携带向量来维护的。具体来说，要执行以下步骤：</p><ol><li>在执行一个事件之前，$$P_i$$执行$$\mathrm{VC}_i[i]\leftarrow\mathrm{VC}_i[i]+1$$</li><li>当进程$$P_i$$发送一个消息m给$$P_j$$时，在执行第一步的步骤后，把m的时间戳$$\mathrm{ts}(m)$$设置为等于$$\mathrm{VC}_i$$</li><li>在接收消息m时，进程$$P_j$$通过为每个$$k$$设置$$\mathrm{VC}_j[k]\leftarrow\max{\mathrm{VC}_j[k],\mathrm{ts}(m)[k]}$$来调整自己的向量。之后，再执行第一步并把消息传递给应用程序。</li></ol><p>注意，如果事件a具有事件戳$$\mathrm{ts}(a)$$，那么$$\mathrm{ts}(a)[i]-1$$表示在进程$$P_i$$中先于a所处理的事件数量。因此，当进程$$P_j$$从进程$$P_i$$接收一个时间戳为$$\mathrm{ts}(m)$$的消息时，它知道进程$$P_i$$在发送消息m之前发生了多少事件。更为重要的是，进程$$P_j$$还知道进程$$P_i$$发送消息m之前其他进程发生了多少事件。换言之，时间戳$$\mathrm{ts}(m)$$告诉接收者其他进程中有多少事件发生在发送消息m之前，并且m可能在因果关系上与哪些事件有关。</p><h3 id="强制因果有序通信"><a href="#强制因果有序通信" class="headerlink" title="强制因果有序通信"></a>强制因果有序通信</h3><p>使用向量时钟,就有可能确保所有先于某个消息的所有消息接收后才传送这个消息。要使这种方案可行,我们假设消息是在一组进程中进行多播的。注意,<strong>因果有序多播(causally-ordered multicasting)比我们前面讨论的全序多播更弱</strong>。尤其是如果两个消息互相没有任何关系时,并不用关心以哪种顺序传送给应用程序。它们可能在不同的地方以不同的顺序进行传送。<br>而且,我们还假设只在发送和接收消息时才调整时钟。特别是在发送消息时,进程$$P_i$$只将$$\mathrm{VC}_i[i]$$增加$$1$$。当它接收一个时间戳为$$\mathrm{ts}(m)$$的消息m时,它只对每个$$k$$将$$\mathrm{VC}_j[k]$$在$$\max(\mathrm{VC}[k],\mathrm{ts}(m)[k]}$$之间进行调整。<br>现在,假设进程$$P_j$$从进程$$P_i$$接收一个(向量)时间戳为$$\mathrm{ts}(m)$$的消息m。把该消息传送到应用层将被延时,直到以下两个条件满足为止:</p><ol><li>$$\mathrm{ts}(m)[i]=\mathrm{VC}_j[i]+1$$</li><li>$$\mathrm{ts}(m)[k]\le\mathrm{VC}_j[k], \text{if } k\neq i$$</li></ol><p>第一个条件表示,消息m是进程$$P_j$$希望从进程$$P_i$$接收的下一条消息。第二个条件表示,当进程$$P_i$$接收发送消息m时,$$P_j$$已经接收到了所有来自进程$$P_i$$的消息。注意,这里没有必要让进程$$P_j$$延迟其自己消息的传送。<br>作为一个示例,来看看下图所示的三个进程$$P_0$$、$$P_1$$和$$P_2$$。在本地时间$$(1,0,0)$$进程$$P_0$$发送消息m到其他两个进程。该消息由进程$$P_1$$接收后,进程$$P_1$$决定发送消息m<em>,它比m先到达进程$$P_2$$。此时,m</em>的传送被进程$$P_2$$延迟,直到m被接收且传送给了$$P_2$$的应用层。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/2/%E5%BC%BA%E5%88%B6%E5%9B%A0%E6%9E%9C%E9%80%9A%E4%BF%A1.PNG" alt="强制因果通信"></p><h3 id="关于有序消息交付的说明"><a href="#关于有序消息交付的说明" class="headerlink" title="关于有序消息交付的说明"></a>关于有序消息交付的说明</h3><p>有些中间件系统,尤其是IsIs和它的后继Horus,提供了对全序和因果排序的可靠多播的支持。对于应由消息通信层支持排序还是由应用层处理排序存在一些争议。事情还没有解决,更重要的是,这种争议今天仍存在。<br>让通信层处理消息排序存在两个主要问题。首先,因为通信层不能判断消息包含的内容,所以只能捕获潜在的因果关系。例如,来源相同的两个完全独立的消息总是被通信层标记为因果相关的。这种方法过于严格,可能会导致效率问题。第二个问题是,并不是所有的因果关系都可以捕获。假设Alice张贴了一篇文章。如果随后她打电话给Bob,告之她刚才所写的内容,Bob可能没有看见Alice发在新闻系统上的文章就发了一篇文章作为回复。换句话说,由于外部通信,Bob和Alice的张贴之间有了因果关系。这个因果关系却不会被网络新闻系统所捕获。<br>本质上，像许多其他特定于应用的通信问题一样，排序问题可以根据通信的具体应用而得到充分的解决。在系统设计中，这也被称为<strong>端对端参数(end-to-end argument)</strong>。只具有应用层解决方案的系统的一个缺点是，开发者不得不关注与应用系统的核心功能不直接相关的问题。例如，当开发一个诸如网络新闻这样的消息系统时，排序问题可能并不是最重要的问题。在这种情况下，让低层的通信层处理排序问题可能比较方便。</p><h1 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h1><p>分布式系统的基础是多进程之间的并发和协作。在很大情况下,这也就意味着进程将需要同时访问相同的资源。为了保证这种并发访问不会崩溃资源或使得它不一致,需要一些解决办法来保证进程的互斥访问。本节将介绍一些已发表的更为重要的分布式算法。</p><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>分布式互斥算法可以分为两种不同的类型。在<strong>基于令牌的解决方法(token-based solution)</strong>中,互斥是通过在进程之间传递一个特殊的消息来实现的,这个消息称为<strong>令牌(token)</strong>。这里只有一个令牌,拥有该令牌的进程就准许访问共享资源。完成后把该令牌传递给下一个进程。如果某个进程拥有该令牌但不需要访问资源,那么它就只是把该令牌往下传递。<br>基于令牌的解决方法有一些重要的特性。首先,按照进程的组织结构,可以很容易地确保每个进程都有机会访问资源。换句话说,它们避免了饥荒(starvation)。第二,由于简单,可以很容易地避免死锁(deadlock)。然而,基于令牌的解决方法的重大缺陷是很严重的个:如果令牌丢失(例如,拥有令牌的进程崩溃了),就需要重新开启一个复杂的分布式进程,以确保创建一个新的令牌,但总之,这也是唯一的一个令牌。<br>另外,很多分布式遵循的是<strong>基于许可的方法(permission-based approach)</strong>。在这种情况下,一个进程如果需要访问资源,首先需要获得其他进程的许可。授予这样一种许可的方法有很多,下面章节将介绍其中一些。</p><h2 id="集中式算法"><a href="#集中式算法" class="headerlink" title="集中式算法"></a>集中式算法</h2><p><strong>在分布式系统中达到互斥的最直接的方法是仿照单处理器系统中的方法,选举一个进程作为协作者</strong>(例如,运行在具有最大网络地址号的机器上的进程)。无论何时一个进程要访问共享资源,它都要向协作者发送一个请求消息,说明它想要访问哪个资源并请求准许。奶果当前没有其他进程访问资源,协作者就发送准许的应答消息,如下图(a)所示。收到应答后,该请求进程即可访问资源。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/3/%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%AE%97%E6%B3%95.PNG" alt="集中式算法"><br>现在假设另一个进程,即进程2,请求准许访问资源,如图(b)所示。协作者知道一个与此不同的进程正在访问资源,所以它不能准许该请求。拒绝进入的方法依系统而定。在图(b)中,协作者只是<em>不进行应答</em>,这样就阻塞进程2,因为进程2正在等待应答。另一种方式,协作者也可以发送一个<em>“拒绝请求”</em>的应答。不管采用哪种方法,协作者都将进程2的请求放到队列中,并等待更多的消息到来。<br>当进程1释放资源时,它向协作者发送一个消息以让协作者释放它的独占访问,如图(c)所示。该协作者从处于等待状态的请求队列中取出第一个进程,并向该进程发送一个允许进入消息。如果该进程仍然处于阻塞状态(也就是说这是发送给它的一个消息),它将解除阻塞并访问资源。如果已经明确发送一个消息拒绝准许,那么该进程将不断查询进入的消息,或者稍后进入阻塞状态。不管使用了哪种方法,当进程获得准许,它就能够访问资源。</p><p>显然,该算法保证了互斥的实现,即协作者在某一时刻只让一个进程访问资源。它也很公平,因为准许请求的顺序同接收它们的顺序是一致的。没有进程会处于永远等待状态(不会出现饿死的情况)。此方法也易于实现,对每个共享资源只需3条消息(请求、准许和释放)。对很大实际的解决方法,其简单性很有吸引力。<br>但是,集中式方法也存在缺点。<strong>协作者是一个单个故障点</strong>,所以如果它崩溃了,整个系统可能瘫痪。在一般情况下,如果进程在发出请求之后被阻塞,那么请求者就不能区分“拒绝进人”和协作者已经崩溃这两种情况,因为上述两种情况都没有消息返回。此外,在规模较大的系统中,单个协作者会成为性能的瓶颈。然而,其简单性带来的好处大于潜在的缺点。而且,正如后面示例所示的那样,分布式解决方法并不比这更好。</p><h2 id="非集中式算法"><a href="#非集中式算法" class="headerlink" title="非集中式算法"></a>非集中式算法</h2><p>只有单个的协作者往往是一种较差的方法。我们来看看一种非集中式的解决方法。Lin(2004)提出了一种投票算法,它可以使用基于DHT的系统来运行。本质上,其解决方法是按如下方式<strong>扩展了集中式协作者</strong>。假定每种复制了$$n$$次。通过并发进程,每个副本有其自身的协作者用于控制访问。<br>但是,只要某个进程要访问资源,它只需从$$m&gt;n/2$$个协作者中获得多数投票即可。与前面介绍的集中式解决方法不同,我们假设,当某个协作者没有获得访问某个资源的许可时(如果访问许可授给了另外一个进程,就会这样),它将告诉请求者。</p><p>这种算法主要是使得原来的集中式算法少受单个协作者失效的影响。它假设当某个协作者崩溃时，能迅速地恢复，但会忘记崩溃前的所有投票。其风险是，重置将使得协作者忘记它前面已经授权某进程访问资源的许可，因此，在其恢复后，可能错误地把该许可又赋给了另外一个进程。<br>设$$p$$为时间段$$\delta t$$里协作者重置的概率，那么在相同的时间段里，$$m$$个协作者中有$$k$$个进行重置概率为：<br>$$P(k)={m \choose k }p^k(1-p)^{(m-k)}$$<br>假设要破坏投票算法的正确性,至少应有$$(2m-n)$$个协作者需要重置,那么发生这种情况的概率为$$\sum_{k=2m-n}^{n}P(k)$$。为了加深读者对其含义的理解,假设我们正使用一个基于DHT的系统,其中每个结点分享3个小时时间。设$$\delta t$$为10秒,这被认为是单个进程要访问共享资源的保守值。当$$n=32$$且$$m=0.75n$$时,违反正确性的概率小于$$10^{-40}$$。该概率肯定小于所有资源的可用性。</p><p>为了实现这种算法,Lin(2004)使用了一个基于DHT系统,其中一个资源被复制了$$n$$次。假设该资源具有唯一的名称”rname”。那么就可以假设把第i个副本命名为”rname-i”，使用一个已知的散列函数,就可以用”rhame-i”来计算出一个唯一键值。因此,给定一个资源名,每个进程可以生成$$n$$个键值,从而可以查找出每个副本对应的结点(并控制对给副本的访问)。<br>如果对资源的访问被拒绝(即某个进程获得了少于$$m$$的投票),那么它将在一个随机选择的时间后再进行下一次尝试。这种方案的问题是,如果很多结点要访问同一资源,将证明其实用性大大降低。换句话说,如果太多的结点去竞争获得许可,最终使得谁也得不到足够的投票,从而使得资源谁也用不了。这个问题的解决方法可以在(Lin等2004)找到。</p><h2 id="分布式算法"><a href="#分布式算法" class="headerlink" title="分布式算法"></a>分布式算法</h2><p>拥有单个故障点往往是不可接受的,所以研究者开发了分布式互斥算法。Lamport在1978年发表的关于时钟同步的论文中首次提出了一种分布式互斥算法。Ricart和Agrawala(1981)对它作了进一步的改进。本节将讨论他们的方法。</p><p>Ricart和Agrawala算法要求系统中的所有事件都是<strong>完全排序</strong>的。也就是说,对于每对事件,比方说消息,哪个事件先发生必须非常明确。之前给出的Lamport算法是一种完成这种排序的方法,该算法还能用于为分布式互斥提供时间戳。<br>该算法的工作过程如下:当一个进程要访问一个共享资源时,它构造一个消息,其中包含它要访问的资源名、它的进程号和当前(逻辑)时间。然后,它将该消息发送给所有其他的进程,理论上讲也包括它自己。假设消息的传送是可靠的,也就是说,没有消息丢失。<br>当一个进程接收到来自另一个进程的请求消息时,它根据自己与消息中的资源相关的状态来决定它要采取的动作。可以分为三种情况:<br>a. 若接收者没有访问资源,而且也不想访问它,就向发送者发送一个OK消息。<br>b. 若接收者已获得对资源的访问,那么它就不进行应答,而是将该请求放人队列中。<br>c. 如果接收者想访问资源但尚未访问时,它将收到的消息的时间戳与包含在它发送给其他进程的消息中的时间戳进行比较。时间戳最早的那个进程获胜。如果收到的消息的时间戳比较早,那么接收者向发送者发回一个OK消息。如果它自己的消息的时间戳比较早,那么接收者将收到的请求放入队列中,并且不发送任何消息。</p><p>发送许可请求后,进程进行等待,直到其他所有进程都给予了许可消息为止。一旦得到所有进程的许可,它就可以继续了。当它完成后时,它向其队列中的所有进程发送OK消息,并从队列中删除。</p><p>我们来理解一下该算法的工作原理。如果没有冲突,显然,该算法正常工作。然而,假设两个进程同时试图访问同一资源,如图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/3/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95.PNG" alt="分布式算法"><br>进程0给每个进程发送一个时间戳为8的请求,然而,与此同时,进程2给每个进程发送了一个具有时间戳12的请求。进程1不想访问该资源,所以它给两个发送者都发回OK消息。进程0和进程2都发现了它们之间有冲突,都比较时间戳。进程2发现它失败了,所以它向进程0发送OK消息准许其访问。进程0现在把来自进程2的请求放入它的队列中,以便以后处理,然后访问该资源,如上图(b)所示。当进程0完成时,它将进程2的请求从队列中删除,并给进程2发送OK消息,准许进程2继续,如图(c)所示。该算法<strong>之所以能工作</strong>,是因为它规定了在产生冲突的情况下,具有最小时间戳的进程获胜,并且每个进程都对时间戳的顺序达成了一致.<br>注意,在上图中,如果进程2比进程0早发送消息,使得进程0在自己发送请求前收到了进程2的请求,并准许进程2访问资源,那么有根本的不同。在这种情况下,进程2在接收到进程0的请求时,会发现自己已经获得对资源的访问,那么它就不会给进程0发送应答,而是将该请求放入自己的队列中。</p><p>与前面讨论的集中式算法一样,该算法实现的互斥也不会发生死锁或饿死现象。每次需要$$2(n-1)$$个消息,这里的$$n$$是系统中的进程数目。这种算法的一个<strong>最大的优点</strong>是不存在单个故障点。<br>不幸的是,单个故障点被$$n$$个故障点所取代。如果任何一个进程崩溃,它就不能回答请求。这种不应答被错误地解释为拒绝请求,这样就阻塞了所有请求进入所有临界区的后续进程。因为$$n$$个进程之一发生故障的可能性至少是单一协作者发生故障的$$n$$倍,所以这样算法比前面的要糟糕$$n$$倍,同时要求有更多的网络流量。<br>该算法的这个弱点可用我们前面提到的技巧来修补。当请求到达时，接收者无论是准许还是拒绝都发送应答。一旦请求或者应答消息丢失，发送者超时，它就继续发送请求消息，直到收到一个应答消息为止,或者直到发送者得出目的进程已崩溃的结论为止。在一个请求被拒绝后,发送者将进入阻塞状态,以等待OK消息。<br>该算法的<strong>另一个问题</strong>是,要么必须使用多播通信原语,要么每个进程都必须自己维护组成员的列表,该列表中包括进入组的进程、离开组的进程以及崩溃的进程。该方法最适用于进程数目较少并且从不改变组成员的情况。<br>最后,回顾集中式算法存在的一个问题,即<em>处理所有请求时会产生瓶颈问题</em>。在分布式算法中,所有进程要参与决定共享资源的访问许可。即使有一个进程不能处理这种负载,那么让每个进程都并行地做完全相同的事情也是不可能的。<br>可以对该算法进行各种小的改进。例如,从所有进程获得访问许可其实并不必要。真正需要的是一种防止两个进程同时访问资源的方法。可以把该算法修改为,当一个进程从<em>大多数</em>进程获得许可(而不需获得所有进程的许可)时,它就可以获得访问许可。当然,在该算法的这种变体中,一个进程许可另一个进程后,它在第一个进程释放许可之前,是不能授给其他进程相同的许可了。</p><p>但是,这种算法与原来的集中式算法相比更慢、更复杂、花费更高,而且更不健壮。既然如此,为什么还要研究该算法呢?原因之一是它说明了<strong>分布式算法至少也是可能实现的,这点我们开始并不知道</strong>。另外,通过指出它的不足,可以鼓励未来的理论家们试着创造出更具实用性的算法。最后,就像吃菠菜和在高中学习拉丁语一样,可能会有某些东西对你是有好处的。这需要花些时间去发现。</p><h2 id="令牌环算法"><a href="#令牌环算法" class="headerlink" title="令牌环算法"></a>令牌环算法</h2><p>下图示意了在分布式系统中实现互斥的一种完全不同的方法。这里是一个总线式网络(例如以太网),如图(a)所示,进程没有固有的顺序。在软件中,可以构造出一个逻辑环,在该环中,为每个进程分配了一个它在环中的位置,如图(b)所示。环的位置可以按照网络地址或以其他方式来分配。按照什么顺序进行排列并不重要。重要的是每个进程要知道谁在它的下一个位置上。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/3/%E4%BB%A4%E7%89%8C%E7%8E%AF%E7%AE%97%E6%B3%95.PNG" alt="令牌环算法"><br>当环初始化时,进程0得到一个<strong>令牌(token)</strong>。该令牌绕着环运行,用点对点发送消息的方式把该令牌从进程$$k$$传到进程$$k+1$$(以环大小为模)。进程从它邻近的进程得到令牌后,检查自己是否需要访问资源。如果要,那么它就继续,完成它要做的工作,然后释放资源。在该进程完成后,它沿着环继续传递令牌。这里不准许进程在释放资源后,使用同一令牌立即再次访问资源。如果一个进程得到了邻近进程传来的令牌,但是它并不想访问资源,那么它就把令牌沿环往下传递。因而,当没有进程要访问资源时,令牌就绕环高速地传递。</p><p>该算法的正确性是显而易见的。在任何时刻都只有一个进程拥有令牌,所以实际上只有一个进程才能访问资源。由于令牌以预定顺序在进程间循环传递,所以不会发生饿死现象。一旦某个进程要访问资源,那么最差的情况是等到其他所有进程都使用了这个资源后。<br>同样,该算法也存在问题。如果令牌丢失了,那么它必须重新生成令牌。实际上,<strong>检测令牌丢失是很困难的</strong>,这是因为网络中令牌两次出现的时间间隔是不确定的。一小时没有发现令牌并不意味着它就丢失了,也许某个进程还在使用它。<br>如果有进程崩溃,该算法也会出现麻烦,但是恢复起来却比其他算法更容易。如果我们要求每个进程在收到令牌后发出确认信息,那么当一个进程的邻近进程试图把令牌传递给它但是没有成功时,就会检测到这个崩溃的进程。这时,就可以将这个崩溃的进程从组中删除,令牌的持有者将令牌沿环传给这个崩溃进程的下一个进程,如果必要,传给再下一个。当然,这样做就需要每个进程都维护当前环的配置信息。</p><h2 id="四种算法的比较"><a href="#四种算法的比较" class="headerlink" title="四种算法的比较"></a>四种算法的比较</h2><p>下面简略地比较一下我们已讨论的四种互斥算法。在下表中列举了这四个算法及它们的三个关键性质:进程访问和释放资源所需的消息数目,访问资源的延迟(假设消息在网络中顺序传递),以及每个算法存在的问题。</p><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:left">消息数</th><th style="text-align:left">延迟</th><th style="text-align:left">问题</th></tr></thead><tbody><tr><td style="text-align:center">集中式</td><td style="text-align:left">3</td><td style="text-align:left">2</td><td style="text-align:left">协作者崩溃</td></tr><tr><td style="text-align:center">非集中式</td><td style="text-align:left">3mk,k=1,2,…</td><td style="text-align:left">mk</td><td style="text-align:left">会发生饥饿，效率低</td></tr><tr><td style="text-align:center">分布式</td><td style="text-align:left">2(n-1)</td><td style="text-align:left">2(n-1)</td><td style="text-align:left">任何进程崩溃</td></tr><tr><td style="text-align:center">令牌环</td><td style="text-align:left">1~$$\inf$$</td><td style="text-align:left">0~n-1</td><td style="text-align:left">令牌丢失，进程崩溃</td></tr></tbody></table><p>集中式算法是最简单也最有效的。使用这种算法,进入和离开临界区一次只需要三个消息:一个请求进入消息、一个许可进入消息和一个释放退出消息。在非集中式算法中,这些消息需要m个协作者执行一次,而现在则可能需要进行多次尝试(为此引入了变量k)。分布式算法要求(n-1)个请求消息,每个消息对应于其他的进程,以及(n-1)个授权消息,这样总共有2(n-1)个(我们假定只使用点对点的通信通道。)对令牌环算法,这个数是变化的。如果每个进程都总想进入临界区,那么令牌每传递一步就会导致一次进出,这样平均每进入一次临界区就需要一个消息。在另一种极端的情况下,有时令牌可能在环中绕行了几个小时也没有进程要进入临界区。在这种情况下,每进入一次临界区需要的消息数目是不确定的。<br>对于这四种算法来说,从进程想进人一个临界区到它真正进入临界区的这段延迟时间也是不同的。当使用资源的时间很短时,产生延迟的主要困素是如何访问资源的实际机制。当使用资源时间较长时,产生延迟的主要因素是等待其他进程使用的时间。在上表中显示的是前一种情况。在集中式算法中,进入一次临界区只需两个消息时间,而在非集中式算法中,则需要3mk个消息时间,其中k是需要进行的尝试次数。假设消息是一个接一个地发送,那么在分布式算法中需要2(n-1)个消息时间。对于令牌环算法,所需的时间从0(恰好接到令牌)到n-1(恰好刚刚释放令牌)个消息时间里变化<br>最后,除非集中式算法外,其余三种算法在进程崩溃的情况下都损失惨重。为了避免进程崩溃造成整个系统瘫痪,必须引入一些专门的措施和额外的复杂性。很有讽刺意味的是,分布式算法甚至比集中式算法对进程的崩溃更敏感。在容错系统中,这些算法都不适用,但是如果进程不经常崩溃,这些算法还是可以使用的。非集中式算法对进程的崩溃不那么敏感,但进程可能会发生饥饿,需要特殊方法来保证其效率。</p><h1 id="结点的全局定位"><a href="#结点的全局定位" class="headerlink" title="结点的全局定位"></a>结点的全局定位</h1><p>在分布式系统中,随着结点数目的增长,任意结点要与其他结点保持联系也就变得很困难。这对运行诸如路由、多播、数据放置、査找等之类的分布式算法很重要。我们已经见过不同的示例,其中,大型的结点集被组织成特定的拓扑结构,从而有助于这些算法的有效运行。本节将来看看另一种与<em>计时问题</em>有关的组织形式。<br>在<strong>几何覆盖网络(geometric overlay network)</strong>中，每个结点给予一个$$m$$维几何空间位置，这样，在该空间中的两个结点之间的距离反映了实际的性能度量。最简单也最使用的示例是，结点间的距离对应于它们之间的延时。换言之，给定两个结点P和Q，那么距离$$\mathrm{d}(P, Q)$$反映的是消息从P到Q传输所花费的时间；反之亦然。<br>几何覆盖网络的应用很多。请看这样一种情况，服务器O中的Web站点复制给了因特网上的多个服务器$$S_1, \cdots, S_k$$。当客户C从O请求一个网页时，O将把该请求转发给离C最近的服务器，也就是那个能做出最佳响应时间的那个服务器。如果C和每个副本服务器的几何位置都是已知的，那么O就选择$$\mathrm{d}(C,S_i)$$最小的服务器$$S_i$$。注意，这种选择只需要在O做本地处理即可。也就是说，无需提取C和每个副本服务器之间的所有延迟。<br>另一个示例是最佳副本替换,我们将在下面的文章详细讨论。再来看一个Web站点,它已收集了其客户的位置。如果该站点把其内容复制给$$K$$个服务器,那么它就可以计算出$$K$$个替换副本的最佳位置,使得客户到副本的平均响应时间最小。如果客户和服务器具有能反映结点间延时的几何位置,完成这种计算是不值得一提的。<br>最后一个示例来看看基于位置的路由(position-based routing)。在这种方案中,只是使用定位信息来把消息转发给目的地。例如,一个很简单的路由算法是让每个结点把消息转发给离目的地最近的邻结点。可以很容易证明,这种算法无需汇集,只需用本地信息来做决定。这里无需传播链接信息给网络中的所有结点,就像常用的路由算法那样。</p><p>理论上,在$$m$$维几何空间定位一个结点需要$$m+1$$个到位置已知的结点的距离度量。通过m=2的情况就很容易明白这一点,如图所示。假设结点P要计算自己的位置,它需要计算出到另外三个位置已知的结点的距离。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/4/%E5%9C%A8%E4%BA%8C%E7%BB%B4%E7%A9%BA%E9%97%B4%E4%B8%AD%E8%AE%A1%E7%AE%97%E7%BB%93%E7%82%B9%E7%9A%84%E4%BD%8D%E7%BD%AE.PNG" alt="在二维空间中计算结点的位置"><br>就像在GPS中一样，通过求解如下三个不等式，结点P就可以计算出自己的坐标$$(x_p,y_p)$：<br>$$<br>d_i=\sqrt{(x_i-x_p)^2+(y_i-y_p)^2}, i=1,2,3<br>$$<br>$$d_i$$对应与P到位于$$(x_i,y_i)$$的结点的延时。该延时可以取往返延时的一半来估算，但应当明白的是，该值随着时间的过去将会有所不同。P每次重新计算其位置时，其结果都是不同的。而且如果其他结点使用P的当前位置来计算它们的坐标，则应该脑际，P位置的误差会影响到其他结点定位的精度。<br>而且,还要明白的是,利用不同结点计算出的距离往往也是不一致的。例如,假设要计算图所示的一维空间距离。在这个示例中,我们将看到,尽管R到Q的距离是2.0,$$\mathrm{d}(P,Q)$$为1.0,但$$\mathrm{d}(P,R)$$却是3.2,显然这与另两个测量不一致。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/4/%E5%9C%A8%E4%B8%80%E7%BB%B4%E7%A9%BA%E9%97%B4%E4%B8%AD%E8%B7%9D%E7%A6%BB%E6%B5%8B%E9%87%8F%E4%B8%8D%E4%B8%80%E8%87%B4.PNG" alt="在一维空间中距离测量不一致"><br>图中还提示了如何改进这种情况。在我们的示例中,只要在二维空间中计算其位置就可以解决这种不一致性。但是,如果要处理多个度量时,这往往不是一种通用的解决方法。事实上,考虑到因特网延时度量可能会违反<strong>三角不等式(triangle inequality)</strong>,通常不可能完全解决这种不一致性。三角表达式表示,在几何空间中,对任意的三个结点P、Q和R,总有不等式$$\mathrm{d}(P,R)\le\mathrm{d}(P,Q)+\mathrm{d}(Q,R)$$成立。</p><p>有多种方法来解决这些问题。(Ng和Zhang2002)提出的一种方法是使用$$L$$个特殊结点$$b_1,\cdots,b_L$$,,称为<strong>地标(landmark)</strong>。先度量每两个地标之间的延时$$\mathrm{d}(d_i,b_j)$$,然后用中心结点来计算每个地标的坐标。最后,中心结点寻求最小化下面的合计误差函数:<br>$$<br>\sum_{i=1}^{L}\sum_{j=i+1}^{L}[\frac{\mathrm{d}(b_i,b_j)-\hat{\mathrm{d}}(b_i,b_j)}{\mathrm{d}(b_i,b_j)}]^2<br>$$<br>其中,$$\hat{\mathrm{d}}(d_i,b_j)$$对应于几何距离,即结点$$d_i$$和$$b_j$$定位后的距离.<br>最小化合计误差函数中隐含的参数是维数$$m$$。这里显然有$$L&gt;m$$,但我们可以为$$m$$选择一个比$$L$$小很多的值。在这种情况下,结点P度量它到$$L$$个地标中的每个地标的距离,<br>并通过最小化如下算式来计算其坐标:<br>$$<br>\sum_{i=1}^{L}[\frac{\mathrm{d}(b_i,P)-\hat{\mathrm{d}}(b_i, P)}{\mathrm{d}(b_i,P)}]^2<br>$$<br>事实证明,选择好地标,$$m$$可以小至6或7,而对任意结点P和Q,$$\hat{\mathrm{d}}(P,Q)$$与实际延时$$\mathrm{d}(P,Q)$$的差异不会大于因子系数2.</p><p>处理这种问题的另一种方法是把结点集视作为一个巨型系统,结点与其余每个结点之间是通过弹簧连接在一起的。在这种情况下,$$\vert\mathrm{d}(P,Q)-\hat{\mathrm{d}}(P,Q)\vert$$表明了结点P和Q被替换的程度与弹簧系统在静止状态有关。可以证明,通过让每个结点(轻微地)改变其位置,系统将趋向一个最佳组织结构,其中的合计误差是最小的。</p><h1 id="选举算法"><a href="#选举算法" class="headerlink" title="选举算法"></a>选举算法</h1><p>很多分布式算法需要有一个进程作为协作者、发起者或者其他某种特殊的角色。<strong>通常,由哪个进程充当这个特殊的角色并不重要,重要的是它们中要有一个进程来充当。</strong>本节讨论用于选举出一个协作者的算法(这里使用协作者来作为那个特殊进程的通用名字)。<br>如果所有的进程都完全相同,没有任何区别,那么就无法选择其中的一个作为特殊进程。因此,我们假设每个进程有一个唯一的编号,例如它的网络地址(为了简单起见,我们假设每台机器只有一个进程)。通常,选举算法试着找出进程号最大的进程,将它指定为协作者。各个算法在找出这个进程时使用的方法有所不同。<br>此外，我们还假设每个进程都知道所有其他进程的进程号。但进程并不知道当前哪些进程正在运行，以及哪些进程崩溃了。<strong>选举算法的目标</strong>是确保发起选举后，当所有的进程都同意选出的新协作者时选举结束。</p><h2 id="传统的选举算法"><a href="#传统的选举算法" class="headerlink" title="传统的选举算法"></a>传统的选举算法</h2><p>我们先来看看两种传统的选举算法,从而了解一下在过去的十来年里算法研究人员都在做些什么。在随后的章节中,我们将关注一下选举问题的新应用。</p><h3 id="欺负算法"><a href="#欺负算法" class="headerlink" title="欺负算法"></a>欺负算法</h3><p>第一个例子来看看由Garcia-Molina(1982)提出的<strong>欺负算法(bully algorithm)</strong>。当任何一个进程发现协作者不再响应请求时,它就发起一次选举。进程P按如下过程主持一次选举:</p><ol><li>P向所有编号比它大的进程发送一个ELECTION消息;</li><li>如果无人响应,P获胜并成为协作者;</li><li>如果有编号比它大的进程响应,则由响应者接管选举工作。P的工作完成.</li></ol><p>任何时候,一个进程只能从编号比它小的进程得到一个ELECTION消息。当有ELECTION消息到达时,接收者回送一个OK消息给发送者,表明它仍然在运行,并且接管选举工作。然后接收者主持一个选举,除非它正有一个选举。最终,除了一个进程外,其他所有进程都将放弃,那个进程就是新的协作者。它将选举获胜的消息发送给所有进程,通知这些进程自己是新的协作者。<br>当一个以前崩溃了的进程现在恢复过来时,它将主持一次选举。如果该进程恰好是当前正在运行的进程中进程号最大的进程,它将赢得此次选举,接管协作者的工作。<strong>这样,最大的进程总是取胜,故称为“欺负算法”</strong>。</p><p>在下图中,我们看到了欺负算法如何工作的例子。该图显示了由8个进程组成的进程组,编号从0到7。以前进程7是协作者,但是它崩溃了。进程4第一个注意到这一点,所以它发送ELECTION消息给所有比它大的进程,即进程5、6、7,如图(a)所示。进程5和6都用OK消息进行了应答,如图(b)所示。进程4接到第一个应答就知道它的工作已经结束了。它知道,有进程号比它大的进程将接管它的工作并成为协作者。它剩下的工作就是等着看谁将是获胜者(尽管此时它已经可以猜到结果了)。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/5/%E6%AC%BA%E8%B4%9F%E9%80%89%E4%B8%BE%E7%AE%97%E6%B3%95.PNG" alt="欺负选举算法"><br>在图(c)中,进程5和6都主持选举,每个进程都只将消息发送给比自己进程号大的进程。在图(d)中,进程6告诉进程5它将接管成为协作者。此时进程6知道进程7已经崩溃了,它(进程6)将是获胜者。如果从磁盘或其他地方可以获得一些表明原有的协作者在哪里失效的状态信息,那么此时进程6就必须承担所需工作。当进程6准备好接管时,它向所有正在运行着的进程发送一个COORDINATOR消息。当进程4接收到这个消息后,它就可以继续当发现进程7崩溃了时它正要做的工作,但是这次是以进程6作为协作者了。这样,进程7的故障得到了处理,工作可以继续了。<br>如果进程7重新启动,它将向其他所有进程发送一个COORDINATOR消息,让它们服从自己的协调。</p><h3 id="环算法"><a href="#环算法" class="headerlink" title="环算法"></a>环算法</h3><p>另一个选举算法是基于环(ring)的使用。不像其他一些环算法,该算法不使用令牌。假设进程按照物理或逻辑顺序进行了排序,那么每个进程就都知道它的后继者是谁了。当任何一个进程注意到协作者不工作时,它就构造一个带有它自己的进程号的ELECTION消息,并将该消息发送给它的后继者。如果后继者崩溃了,发送者沿着此环跳过它的后继者发送给下一个进程,或者再下一个,直到找到一个正在运行的进程。在每一步中,发送者都将自己的进程号加到该消息列表中,以使自己成为协作者的候选人之一。<br>最终,消息返回到发起此次选举的进程。当发起者进程接收到一个包含它自己进程号的消息时,它识别出这个事件。此时,消息类型变成COORDINATOR消息,并再一次绕环运行,向所有进程通知谁是协作者(成员列表中进程号最大的那个)以及新环中的成员都有谁。这个消息在循环一周后被删除,随后每个进程都恢复原来的工作。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/5/%E4%BD%BF%E7%94%A8%E7%8E%AF%E7%9A%84%E9%80%89%E4%B8%BE%E7%AE%97%E6%B3%95.PNG" alt="使用环的选举算法"><br>如图示意了当进程2和5同时发现以前的协作者进程7崩溃了时,将会发生什么。这两个进程各自构造一个ELECTION消息,并且让它们相互独立地绕环运行。最后,两个消息都将绕环走过全程,进程2和5分别将它们转化为COORDINATOR消息,这两个消息拥有相同的成员,相互顺序也相同。两个消息再绕环一周后都被删除。有多余的消息循环没有害处,最多是花费了一点带宽,但这也不是浪费。</p><h2 id="天线系统环境中的选举算法"><a href="#天线系统环境中的选举算法" class="headerlink" title="天线系统环境中的选举算法"></a>天线系统环境中的选举算法</h2><p>传统的选举算法基于的假设在无线系统环境中往往是不切实际的。例如,<strong>传统的选举算法假设消息传送是可靠的,网络的拓扑结构也是不会改变的</strong>。在大多数无线网络环境中,尤其是在移动自主网络中,这些假设都是错误的。</p><p>已开发的能在自主网络中工作的选举协议为数不多。(Vasudevan等2004)提出了一种能处理<em>结点失效</em>和<em>网络分区</em>的解决方法。这种方法的一个重要特性是,可以选举出最佳的领导者,而不是像在前面介绍的解决方法中那样只是随机的。其协议工作如下。为了简化起见,这里我们只是关注自主网络而忽略其中的结点是可以移动的。</p><p>来看一个无线自主网络。要选举一个领导者,网络中的任意结点(称为资源)可以通过往其紧邻结点(即与其在一条边上的结点)发送一条ELECTION消息来开始一个选举。当结点第一次接收到ELECTION消息时,它把该发送者指定为其父结点,然后把ELECTION消息发送给它的所有紧邻结点(其父结点除外)。当结点从某个结点(不是父结点)接收到一条ELECTION消息时,它只是确认这一接收。<br>当结点R指定结点Q为其父结点时,它把ELECTION消息转发给所有紧邻结点(结点Q除外),并在确认来自Q的ELECTION消息之前,等待来自其他结点的确认消息。这种等待的顺序很重要。首先要注意的是,已选择了父结点的邻结点会立即响应R。更为特别的情况是,如果所有邻结点都已经有了父结点,R就是一个叶结点,并可以快速响应Q。在这样做的同时,它还向Q报告诸如其电池寿命和其他资源容量的信息。<br>随后,利用这些信息,Q就可以将R的容量与其他下游结点的进行比较,并选择最合格的结点作为领导候选者。当然,Q之所以发送一条ELECTION消息,是因为其父结点P也已经这么做了。反过来,当Q最终确认了前面由P发送的ELECTION消息时,它同样会把最合格的结点发送给P。这样,源结点最终就知道哪个结点选作领导者最好,然后它就可以把这个信息广播给所有其他结点了。<br>当发起了多个选举时,每个结点只能决定加入其中的一个。每个源结点用一个唯一的标识符来标记自己的ELECTION消息。结点只参与具有最高标识符的选举,同时停止参与其他选举。只要稍作修改,该协议就可以在网络分区以及有结点加入和离开的情况中使用。详细信息请参见(Vasudevan等2004)。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/5/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E9%80%89%E4%B8%BE%E7%AE%97%E6%B3%95.PNG" alt="无线网络中的选举算法"><br>在上图中解释了该过程。结点用a~j进行标记,同时还标记了它们的容量。结点a通过向结点b~j广播一个ELECTION消息来发起选举,如图(b)所示。然后,ELECTION消息被传播给所有结点,直到如图(e)所示的情况为止,这里我们省略了由结点f和i发出的广播。然后,每个结点向其父结点报告具有最佳容量的结点,如图(f)所示。例如,当结点g从其孩子结点e和h接收到确认消息时,它就知道h是最佳结点,然后把[h,8]传播给其父结点b。最后,源结点就知道结点h是最佳领导者,并把这一信息<br>广播给所有其他结点。</p><h2 id="大型系统中的选举算法"><a href="#大型系统中的选举算法" class="headerlink" title="大型系统中的选举算法"></a>大型系统中的选举算法</h2><p>到目前为止我们所讨论的算法通常是应用在相对较小是分布式系统中。而且,这些算法只关注单个结点的选举。在很多情况下,需要选举多个结点,例如在点对点网络中的<strong>超级点(superpeer)</strong>。在本节中,我们来特别关注一下超级点的选举问题。<br>要满足超级点的选举,(Lo等2005)列举了以下一些需求:</p><ol><li>一般的结点访问超级点的延时要低;</li><li>超级点应平均地分布在覆盖网络中</li><li>相对于覆盖网络中的所有结点,应有一部分预定义的超级点;</li><li>每个超级点无需为固定数目的一般结点服务。</li></ol><p>幸运的是,在大多数点对点系统中,如果覆盖网络是结构化的(如基于DHT的系统),或者是随机非结构化的(如可以用基于gossiping的解决方法实现),这些需求的满足还是相对简单的。</p><p>在基于DHT的系统中,基本思想是<strong>为超级点预留一部分标识符</strong>。回忆可知,在基于DHT的系统中,每个结点接收一个随机的且统一赋予的$$m$$位标识符。现在,假设预留前(即最左边的)$$k$$位来标识超级点。例如,如果需要$$N$$个超级点,那么任意键值的前$$\lceil \mathrm{log}_2(N)\rceil$$位可用来标识这些结点.</p><p>为了便于解释,我们假设有一个(小型的)Chord系统,$$m=8$$,$$k=3$$。要查找负责特定键值$$p$$的结点,首先可以把査询请求路由给如下模式的结点:<code>P AND 11100000</code>，然后把给结点视作超级点。注意,每个结点id可以通过查询<code>id AND 11100000</code>来看看该请求是否路由给了自己,以检查它是否是一个超级点。假设结点标识符统一地赋给了结点,可以看到,总共$$N$$个结点中平均有$$2^{k-m}$$个超级点。<br>一种完全不同的方法是在$$m$$维几何空间中定位结点,我们前面已经介绍过。在这种情况下,假设我们需要在整个覆盖网络中均匀地放置$$N$$个超级点。其基本思想很简单:总共$$N$$个令牌分布在$$N$$个随机选择的结点中。没有哪个结点可以拥有不止一个令牌。每个令牌表示一个推动力,推动另一个令牌向前移动。结果是,如果所有令牌发挥相同的推动力,那么它们就会相互之间移开,并均匀地分布在几何空间中。<br>这种方法要求结点含有的令牌了解其他令牌的信息。Lo等提议使用goss1plng协议,利用它,令牌的推动力就分散在整个网络中。如果某个结点发现总的推动力超过了某个阀值,那么该结点就向其合力的方向移动如图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch6/5/%E4%BD%BF%E7%94%A8%E6%8E%A8%E5%8A%A8%E5%8A%9B%E5%9C%A8%E4%BA%8C%E7%BB%B4%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%A7%BB%E5%8A%A8%E4%BB%A4%E7%89%8C.PNG" alt="使用推动力在二维空间中移动令牌"><br>当某个令牌被一个结点拥有了给定长的时间,该结点就会把自己提升为超级点。</p>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> distributed-system </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> distributed system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统 - 通信]]></title>
      <url>http://www.wrran.com/blog/2017/12/21/review/distributed-system/4-communication/</url>
      <content type="html"><![CDATA[<blockquote><p>三个臭皮匠赛过诸葛亮</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>进程间通信是所有分布式系统的核心。分布式系统中的通信都是基于底层网络提供的低层消息传递机制的。如前所述，通过消息传递来描述通信过程比使用基于共享存储器的原语来描述要更困难。现在分布式系统中常常还有数千甚至数百万进程，这些进程分散在诸如因特网的不可靠网络中。除非用其他技术来代替计算机网络的原始通信功能，否则要开发大规模分布式应用程序是十分困难的。</p><p>在本章，将讨论进行通信的进程必须遵守的协议，且把讨论重点放在协议的分层结构上。然后讨论四个广泛使用的通信模型：远程过程调用（remote procedure call, RPC）、远程方法调用（remote method invocation, RMI）、面向消息的中间件（message-oriented middleware， MOM）以及流（stream）。之外还讨论了发送数据到多个接收器（称为多播）的常见问题。</p><p>分布式系统中的远程过程调用（RPC）通信模型的目的在于将消息传递的大部分复杂性隐藏起来，它比较适用于客户-服务器应用程序。在许多分布式应用程序中，通信并不遵循严格的客户-服务器交互模式。在这种情况下，事实证明，从消息的角度来考虑会更恰当。然而，计算机网络的低层通信功能由于缺乏分布式透明性，从许多方面来说并不适用。另一种方法是使用高层消息队列模型，在这种模型中，进行通信的方式与电子邮件系统的通信方式非常类似。因此面向消息的中间件（MOM）也值得好好学习。随着多媒体分布式系统的出现，很多系统都缺乏对诸如音频和视频这样的连续媒体通信的支持，因此有必要引入流（stream）的概念。面向流的通信可以在有时间限制的条件下支持消息的连续流。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>该节将简要讨论网络通信协议，因为这些是构成所有分布式系统的基础。</p><h2 id="分层协议"><a href="#分层协议" class="headerlink" title="分层协议"></a>分层协议</h2><p>由于没有共享存储器，分布式系统中的所有通信都是基于（低层）消息交换的。而这就需要制定多种这样的协定（agreement），如用多高的电压来表示低电平信号等。简言之，必须在不同层次上指定多种协定，其中包括从位传输的低层细节到消息表示的高层细节在内的各层。为了更加方便地对通信中涉及的多个不同层次进行处理，并解决其中存在的问题，<strong>国际标准化组织（ISO）</strong>颁布了一个参考模型，该模型清楚地标明了通信涉及的各个层次，为这些层次给出了标准名称，并且指出各层执行的特定任务。该模型被称为<strong>开放式系统互连参考模型（open systems interconnection reference model）</strong>，常简称为ISO OSI模型或OSI模型。<br>OSI模型是设计用来支持开放式系统间的通信的。所谓开放式系统是准备通过一系列标准规则来与其他开放式系统通信的系统，这些规则规定了发送和接收的消息的格式、内容以及相应的含义。对这些规则进行归纳总结，加以形式化，就形成了<strong>协议（protocol）</strong>。为了使得一组计算机能够通过网络互相通信，它们必须使用相同的协议。可以将协议划分为两大类。一类是<strong>面向连接（connection oriented）</strong>的协议，使用这种协议，消息发送方和接收方必须首先显式地确立连接，可能还需要就采用的协议进行协商，然后两者才能进行数据交换。在通信完毕之后，它们必须释放（终止）连接。电话系统就是一个面向连接的通信系统。一类是<strong>无连接（connectionless）</strong>协议，使用这种协议，交换数据之前不需要有建立连接的过程，消息发送方只需要在准备好的时候开始传送第一个消息即可。将信件投入邮箱就是无连接通信的一个例子。<br>在OSI模型中，通信过程划分为七层，如下图所示。每一层负责处理通信中某一个特定方面的问题。这样就可以把要解决的问题划分成多个易于处理的部分，每个部分都可以相对独立地进行处理。每一层都规定了与上面一层之间的接口，接口中包含一组操作，这些操作共同定义了该层向其用户提供的服务。每一层都有自己的协议（通话的主题和要采用的技术），可以单独改变某一层的协议，而不会对另一层造成影响。分层协议的可贵之处正是在于它带来的这种独立性。随着技术的发展，可以对任何层单独进行改进，而不会对其他层造成影响。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/ISO%20OSI%20model.PNG" alt="OSI模型中的层、接口及协议"><br>特定系统中使用的协议集称为<strong>协议簇（protocol suite）</strong>或者<strong>协议栈（protocol stack）</strong>，将参考模型与其实际的协议区分开来是很重要的。</p><h3 id="低层协议"><a href="#低层协议" class="headerlink" title="低层协议"></a>低层协议</h3><p>OSI协议组中的三个最低层协议，这三层共同实现了计算机网络的基本功能。<br>物理层协议制定了电气、机械和信号方面的标准。物理层中的关键问题是0和1信号分别使用多高的电压、每秒传输多少位及是否同时进行双向传播等。另外，该层还关心网络链路器（插头）的尺寸和形状，以及插头上针脚的个数和各引脚的作用。<br>物理层只负责传输位，只要没有错误发生，就没有任何问题。但实际上，通信网络是容易发生错误的，因此需要采用某种机制来检测并且纠正这些错误。而这些都是<strong>数据链路层</strong>的主要任务。该层将若干位组成一个称为<strong>帧（frame）</strong>的单元，并通过计算校验和的方式检查每一帧是否被正确接收。<br>在局域网环境下，发送方一般不需要了解接收方所在的位置，它只需要将消息放在网络上，然后接收方取走消息即可。而在广域网中，消息从发送方传送到接收方的过程中，可能需要经过很多<strong>跳（hop）</strong>，在每一条中，都要选择一条传出线路。如何选择最佳路径的问题被称为<strong>路由（routing）</strong>，这就是<strong>网络层</strong>的首要任务。<br>目前应用最广泛的网络协议可能就是无连接的<strong>网际协议（Internet Protocol, IP）</strong>，它是因特网协议簇中的一部分。不需要先建立连接就可以发送<strong>IP包</strong>，每个IP包彼此独立地发送到目的地，而且在包内部不指定或记录路径。</p><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><p>有一些服务对于构建网络应用程序是必需的，但在网络层接口中却没有提供，这些服务由传输层实现。从这个意义上说，传输层构成了基本网络协议栈的最后一部分，也就是说，传输层底层网络转换成可供应用程序开发人员使用的形式。<br>发送方发给接收方的包可能在传输途中丢失。虽然某些应用程序可能拥有自定义的错误恢复手段来进行处理，但多数程序还是希望连接是可靠的。<strong>传输层</strong>的任务就是提供这种可靠的连接服务。这样，应用层在把消息交付给传输层的时候，消息就会按预期的那样被无损地送达给接收方。<br>可靠的传输连接（根据定义，是面向连接的）既可以建立在面向连接的网络服务之上，也可以建立在无连接的网络服务之上。如果是前者，所有的包都将依照发送时的次序到达接收方；如果是后者的话，由于各包经过的路线可能不同，后发送的包有可能先到达。由传输层中的软件负责将所有的包依照原来的顺序排列好，以维持传输连接就像一根大管子的假象。提供这种点对点的通信方式是传输层的重要特征之一。<br>因特网传输协议称为<strong>传输控制协议（transmission control protocol, TCP）</strong>。TCP与IP结合成的TCP/IP协议是目前网络通信中的事实标准。因特网协议簇也支持无连接的传输协议，该协议称为<strong>通用数据报协议（universal datagram protocol, UDP）</strong>，从本质上说它只不过是附加了某些次要内容的IP协议。不需要面向连接协议的用户程序通常使用UDP。另外还有些传输协议是为了某种专用用途而定制的，如<strong>实时传输协议（real-time transport protocol, RTP）</strong>就是为了支持实时数据传输的协议。</p><h3 id="高层协议"><a href="#高层协议" class="headerlink" title="高层协议"></a>高层协议</h3><p>在传输层之上，OSI又划分为另外三层。在实践中，只用到了其中的应用层。事实上，在因特网协议簇中，传输层之上的所有内容都合到了一起。<br>会话层本质上是传输层的增强版本，它提供了对话控制，用于跟踪正在谈话的是哪一方，它还提供了同步功能。ISO模型中低层主要考虑的问题是如何将要传输的所有位从发送方可靠而高效地传送给接收方，而在表示层中主要考虑的则是这些位所表示的意义。OSI应用层起初是准备用来容纳一组标准网络应用程序的，如电子邮件、文件传输等。<br>还有为数不少的对多数应用程序十分有用的通用协议，但这些协议并不能算是传输协议。在多数情况下，这些协议只能归入中间件协议的范畴。</p><h3 id="中间件协议"><a href="#中间件协议" class="headerlink" title="中间件协议"></a>中间件协议</h3><p>中间件是一种应用程序，它在逻辑上位于应用层中，但在其中包含有多种通用协议，这些协议代表各自所在的层，独立于其他更加特别的应用。可以在高层通信协议和用于建立各种中间件服务的协议间做出区分。如认证协议可以为声称的身份提供证明，认证协议与任何特定的应用程序都没有紧密的联系，但是可以作为一种通用服务集成到中间件系统中；同样，允许通过验证的用户和进程对其拥有授权的资源进行访问的授权协议本质上也是通用的、与应用程序无关的；而规定在一组进程中，某种操作要么由全部进程共同完成、要么不执行的提交协议，也是广泛使用的；最后一个例子是关于分布式锁定协议的，该协议可以保护资源免受分布于多台机器上的一组进程的并发访问，同样该协议也可以用于实现通用中间件服务，但同时又是高度独立于任何特定应用程序的。<br>中间件通信协议支持高层通信服务，如进程以高度透明的方式调用远程机器上的过程的协议；同样也有用于对实时数据传输进行设定并使其保持同步的协议，这种实时数据传输是多媒体之类的应用程序所需要的；最后，某些中间件系统还提供了可靠的多播服务，该服务的规模可以达到遍及广域网上数以千计的接收方。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/Adjusted%20OSI%20model.PNG" alt="调整后的网络通信参考模型"><br>采用这种方案进行分层可以形成一种改进的通信参考模型，如上图所示。与OSI模型相比，会话层和表示层由一个单一的中间件层代替，该层中包含有与应用程序无关的协议。这些协议不属于我们刚才讨论的低层。原来的传输服务可以作为一个中间件服务来提供，无需改动。这种方案与在传输层提供的UDP有异曲同工之处。同样，中间件通信服务中可以包含消息传递服务，这与由传输层提供的相似。</p><h2 id="通信类型"><a href="#通信类型" class="headerlink" title="通信类型"></a>通信类型</h2><p>为理解中间件为应用程序提供的各种通信方式，可以把中间件视为客户-服务器计算的一种服务，如下图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/middleware%20as%20service%20by%20application.PNG" alt="在应用层通信中把中间件视为一种分布式服务"><br>通信可以分为持久通信和瞬时通信。对于<strong>持久通信（persistent communication）</strong>，提交传输的消息一直由通信中间件存储，直到该消息被传送给接收方为止。在这种情况下，中间件将会在一个或多个存储设备中存储该消息。因此，对发送应用程序来说，在消息提交后，就没有必要持续运行了；同样，在消息提交之后，接收应用程序也没有必要持续运行。而对于<strong>瞬时通信（transient communication）</strong>，通信系统只有在发送和接收应用程序正在运行时才能存储消息。如果由于传输中断或者因为接收方当前不在活动状态，中间件就不能传递消息了，而是把它丢弃掉。<br>通信除了可以是持久或者瞬时之外，也还有同步或者异步的区别。<strong>异步通信（asynchronous communication）</strong>的特征是，发送方在提交要传输的消息后立即往下进行，这意味着消息在提交后立即由中间件（临时）存储起来；对于<strong>同步通信（synchronous communication）</strong>，发送方将被阻塞，直到知道其请求被接收以后。但同步通信发生时刻还有着细微区别，由以下三种：一种是，发送方可能被阻塞，直到中间件通知它请求传输已经完成；一种是，发送方为同步化，直到其请求被传送给目标接收方；最后一种是，通过让发送方一直等到其请求被完全处理，换句话说就是，直到接收方返回一个响应，就可以实现同步化。在实际应用中，最常见的是持久和提交请求时同步化的组合，对很多消息队列系统来说，这是一种常用方案；同样，瞬时通信与在请求完全处理后的同步化的组合使用也很广泛，这种方案与远程过程调用相符。<br>除了持久性和同步性外，还需要区分的是不连续和流通信。不连续通信是指各方以消息进行通信，每个消息组成一个完整的信息单元；流通信则可以一个接一个地发送多个消息，这些消息按照它们发送的顺序是相互有关联的，或者是一种临时关系。</p><h1 id="远程过程调用"><a href="#远程过程调用" class="headerlink" title="远程过程调用"></a>远程过程调用</h1><p>许多分布式系统是基于进程间的显式消息交换的，然而消息的发送和接收过程无法隐藏通信的存在，而通信的隐藏对于在分布式系统中实现访问透明性是极为重要的。<br>远程方法过程调用（Remote Procedure Call, RPC）作为处理上述问题的一种通信处理方法，想法简单也十分精妙，成为了许多分布式系统的基础。RPC认为应该允许程序调用位于其他机器上的进程。当机器A上的进程调用机器B上的进程时，A上的调用进程被挂起，而B上的被调用进程开始执行。调用方可以通过使用参数将消息传送给被调用方，然后可以通过传回的结果得到消息。编程人员看不到任何消息传递过程。</p><h2 id="基本的RPC操作"><a href="#基本的RPC操作" class="headerlink" title="基本的RPC操作"></a>基本的RPC操作</h2><p>本节先讨论常规的过程调用，然后解释如何把调用本身划分为分别在不同机器上执行的客户部分和服务器部分。</p><h3 id="常规过程调用"><a href="#常规过程调用" class="headerlink" title="常规过程调用"></a>常规过程调用</h3><p>在常规过程调用中，有些问题需要注意。其中一个问题就是，参数传递可以采用<strong>传值调用（call-by-value）</strong>和<strong>引用调用（call-by-reference）</strong>。对于被调用过程而言，传值调用的参数（也称为数值参数）仅仅相当于已被初始化的局部变量，被调用过程可以按照对这种参数进行修改，但是所做的改动并不会影响到调用端该参数的值。而对于采用引用调用传递的参数（也被称为引用参数），传入的是指向变量的指针，如果被调用过程使用该参数并修改了其指向的内容，这就会导致其也修改了位于调用者过程中的变量内容。另外还有一种不太常见的机制，称为<strong>复制-还原调用（call-by-copy/restore）</strong>。该调用过程是：首先由调用方将变量复制到堆栈中，这一步与传值调用相同；随后在调用完毕之后，将堆栈中的变量复制回去，覆盖掉调用方中该变量原先的值。多数情况下，该调用的结果与引用调用相同，但某些情况下会导致不同的语义，如将同一个参数在参数列表中出现多次。</p><h3 id="客户与服务器存根程序"><a href="#客户与服务器存根程序" class="headerlink" title="客户与服务器存根程序"></a>客户与服务器存根程序</h3><p>RPC背后隐含的思想就是尽量使得远程过程调用具有与本地调用相同的形式。也就是说，希望RPC是透明的，即调用过程不应该发现被调用的过程实际是在另一台机器上执行，反过来也一样。<br>假定程序需要从某个文件中读取数据，程序员在代码中执行<code>read</code>调用来取得数据。在传统系统中，<code>read</code>例程由链接器从库中提取出来，然后链接器再将它插入到目标程序中。<code>read</code>过程是一个短过程，一般通过执行一个等效的系统调用来实现。也就是说，<code>read</code>过程是一种位于用户代码与本地操作系统之间的接口。虽然<code>read</code>执行了代码调用，但它本身依然是通过将参数压入堆栈的常规方式调用的，这样程序员就不会知道<code>read</code>究竟干了什么。<br>而RPC通过类似的途径来获得了这种透明性。当<code>read</code>实际上是一个远程过程时（如在文件服务器所在机器上运行的过程），库中就放入<code>read</code>的另一个版本，被称为<strong>客户存根（client stub）</strong>。该版本过程与之前的“本地”<code>read</code>过程的调用次序相同；另一个相同点是都执行了本地操作系统调用。唯一的不同点是它不要求本地操作系统提供数据，而是将参数打包成一个消息，然后请求将此消息发送给服务器，如下图所示。在对<code>send</code>调用之后，客户存根调用<code>receive</code>过程，随即阻塞自己，直到收到响应消息。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/rpc%20in%20server%20-%20client.PNG" alt="客户与服务器之间的RPC原理"><br>当消息送达服务器后，服务器上的操作系统将它传递给<strong>服务器存根（server stub）</strong>。服务器存根是客户存根在服务器端的等价物，它用来将网络输入的请求转换为本地过程调用。服务器存根一般先调用<code>receive</code>，然后被阻塞，等到消息输入。收到消息之后，服务器存根将参数由消息中提取出来，然后以常规方式调用服务器上的相应过程。从服务器的角度来看，过程就好像是由客户直接调用了一样：参数和返回地址都位于堆栈中。服务器执行所要求的操作，随后将得到的结果以常规的方式返回给调用方。调用完毕之后，服务器存根要将控制权交还给客户发出调用的过程，它将结果（缓冲区）打包成消息，随即调用<code>send</code>将结果返回给客户。此后，服务器存根一般会再次调用<code>receive</code>，等待下一个输入的请求。<br>客户机器接收到消息之后，客户操作系统会发现该消息属于某个客户进程（实际上该进程是客户存根，但操作系统无法对两者做出区分）。操作系统将消息复制到相应的缓冲区中，随后解除对该客户进程的阻塞。客户存根检查该消息，并将结果提取出来并复制给调用者，然后以通常的方式返回。当调用者在<code>read</code>调用进行完毕后重新获得控制权时，它所知道的唯一的事情就是已经得到了所要的数据，而并不知道实际操作是发生在本地还是远程。<br>整个方法的精妙之处在于客户可以简单的忽略不关心的内容。客户所涉及的操作只是通过执行普通的（本地）过程调用来访问远程服务，它并不需要直接调用<code>send</code>和<code>receive</code>。消息传递的所有细节都隐藏在双方的库过程中，就像传统库中隐藏了执行实际系统调用的细节一样。</p><p>总的说来，远程过程调用包含下列步骤：</p><ol><li>客户过程以正常的方式调用客户存根</li><li>客户存根生成一个消息，然后调用本地操作系统</li><li>客户端操作系统将消息发送给远程操作系统</li><li>远程操作系统将消息发送给服务器存根</li><li>服务器存根将参数提取出来，然后调用服务器</li><li>服务器执行要求的操作，操作完成后将结果返回给服务器存根</li><li>服务器存根将结果打包成一个消息，然后调用本地操作系统</li><li>服务器操作系统将含有结果的消息发送回客户端操作系统</li><li>客户端操作系统将消息交给客户存根</li><li>客户存根将结果从消息中提取出来，返回给调用它的客户过程</li></ol><p>所有这些步骤的总效果就是，将客户过程对客户存根发出的本地调用转换成对服务器过程的本地调用，而客户和服务器都不会意识到有中间步骤的存在。</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>客户存根的功能是将得到的参数打包成消息，然后将消息发送给服务器存根。在本节，将讨论RPC系统中涉及的一些参数传递方面的问题。</p><h3 id="传递值参数"><a href="#传递值参数" class="headerlink" title="传递值参数"></a>传递值参数</h3><p>把参数打包进入消息中的过程称为<strong>参数列集（parameter marshaling）</strong>。在进行RPC时，客户存根将调用者传入的参数放入到消息中，同时还在消息中添加要调用的过程的名称或者编号，这是为了在服务器支持多个不同调用的情况下指明要求执行的是哪一个调用。消息送达服务器后，服务器存根对该消息进行分析，以判明需要调用哪个过程，然后执行相应的调用。服务器运行完毕后，服务器存根重新取回控制权，并将服务器得到的结果打包成为消息送回给客户存根，客户存根随即将结果从消息中提取出来，把结果值返回给客户过程。<br>但在上述过程中，还需要注意不同系统下字符编码系统是否一致（如EBCDID字符码或ASCII字符码）、整型数表示方式（如以1的补码还是以2的补码）是否一致、字节排列次序（大端格式还是小端格式）是否相同等问题。</p><h3 id="传递引用参数"><a href="#传递引用参数" class="headerlink" title="传递引用参数"></a>传递引用参数</h3><p>而较值参数更困难的问题是：指针（更广义的还包括引用）如何传递？<br>解决方案的一种是完全禁止使用指针和引用，但由于指针和引用是非常重要的，因此该解决方案极不可取。还有种方式是用复制-还原调用机制来代替引用调用，虽然不完全相同，但一般来说是行之有效的。如在上述<code>read</code>调用的例子中，假定客户存根知道第二个参数指向一个字符型数组，且知晓该数组的大小，就可以将该数组复制到消息中，发送给服务器。服务器存根随后使用指向数组的指针来调用服务器程序，服务器使用指针所作的改动直接影响了属于服务器存根的缓冲区。当服务器完成操作之后，服务器存根将原先的消息送回给客户存根，客户存根再将它复制回客户进程。<br>当然针对第二种方式，还有些优化策略：如果存根知道缓冲区对服务器来说是输入参数还是输出参数，就可以省略其中的一个复制步骤。如果数组对服务器而言是输入参数，就不需要将数组复制回客户存根；如果数组是输出参数，则客户存根最初发送的消息就不用加入该数组了。<br>但我们也要认识到，虽然目前提出了处理指向简单数组和结构的指针的办法，但是依旧没法处理一般意义上的指针，即指向任意数据结构。某些系统试图将指针直接传递给服务器存根，然后在该服务器过程中生成特殊代码以使用这种指针，如服务器可以向客户发回一个请求，要求提供引用的数据。</p><h3 id="参数说明和存根生成"><a href="#参数说明和存根生成" class="headerlink" title="参数说明和存根生成"></a>参数说明和存根生成</h3><p>要隐藏对远程过程调用，必须使调用者和被调用者就互相交换的消息格式达成一致，并且在进行诸如传递复杂数据结构之类的操作时遵循相同步骤。换句话说，RPC的双方必须遵循相同的协议。<br>RPC协议需要对消息格式做出规定，还需要让客户和服务器就诸如整型、字符、布尔量等简单数据结构的表示方法达成一致。有了这些信息，就可以对消息进行明确的解释，而不会产生歧义。<br>在编码规则已经详尽到每一位之后，剩下的事情就是让调用者和被调用者就消息的实际交换达成一致。例如，可以决定采用诸如TCP/IP之类的面向连接的传输服务，也可以采用不可靠的数据报服务。如果是后者，还必须由客户和服务器自己实现一套错误控制方案，并将该方案作为RPC协议的一部分。<br>在完整地定义了RPC协议之后，需要实现客户存根和服务器存根。幸运的是，相同协议所使用的存根在用于不同的过程时，不同点仅仅在于面向应用程序的接口。接口由一组由服务器实现的可供客户调用的过程组成，可以用编写客户或者服务器的同一种编程语言来编写（虽然严格来说并不必要）。为了进一步简化，接口通常使用<strong>接口定义语言（Interface Definition Language, IDL）</strong>来说明。用IDL说明的接口可以与适当的编译时接口或者运行时接口一起编译到客户存根过程和服务器存根中。<br>在实践中发现使用接口定义语言可以显著简化基于RPC的客户-服务器应用程序。由于生成客户存根和服务器存根很容易，所有基于RPC的中间件系统都提供了IDL，以对应用程序开发提供支持。</p><h2 id="异步RPC"><a href="#异步RPC" class="headerlink" title="异步RPC"></a>异步RPC</h2><p>与在常规过程调用中的情形一样，当客户调用远程过程时，客户会被阻塞，直到有应答返回为止。在没有结果要返回的情况下这种严格的请求-应答方式是不必要的，它只会导致客户过程向远程过程发出调用请求之后处于阻塞状态，从而无法进行本来能够进行的其他有用的工作。<br>为了支持以上的状况，RPC系统可以提供称为<strong>异步RPC（asynchronous RPC）</strong>的功能。在异步RPC中，服务器在接收到RPC请求后立即向客户送回应答，之后再调用客户请求的过程。应答的作用是向客户确认服务器已经准备开始处理该RPC请求。客户接收到服务器的确认消息之后，将不会阻塞，而是继续向下执行。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/server%20-%20client%20in%20rpc.PNG" alt="RPC中客户-服务器间的交互过程"><br>如果在应答返回时客户还没有做好接收的准备，从而没有做出任何动作，在这种情况下异步RPC也有用处。如客户可能想取得一组主机的网络地址以便后续使用，当命名服务正在搜集这些地址的时候，客户可能想做其他事情。在这种情况下，通过两步异步RPC来进行客户与服务器间的通信就很有意义：客户首先对服务器进行调用，把要查询的主机名单交给服务器，并且客户在接收到服务器关于已收到主机名单的确认之前继续执行其他的程序；第二步调用是由服务器发出的，它对客户进行调用，将查询到的地址清单交给客户。两步异步RPC结合起来也被称为<strong>延迟的同步RPC（deferred synchronous RPC）</strong>。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/server%20-%20client%20in%20deferred%20synchronous%20rpc.PNG" alt="客户和服务器通过两个异步RPC进行交互"><br>还存在其他一些异步RPC的形式。如在一种被称为<strong>单向RPC（one-way RPC）</strong>中，客户向服务器发送请求之后立即继续执行其他的程序，也就是说，客户不等待服务器返回接受请求的确认。它的问题在于，如果无法确保可靠性，客户就无法确定它发出的请求是否将得到处理。</p><h1 id="面向消息的通信"><a href="#面向消息的通信" class="headerlink" title="面向消息的通信"></a>面向消息的通信</h1><p>远程过程调用和远程对象调用都有助于隐藏分布式系统中的通信，也就是说增强了访问透明性。但这两种机制并不总适用。特别是当无法保证发出请求时接收端一定正在执行的情况下，就必须有其他的通信服务。同时，RPC和RMI的同步特性造成客户在发出的请求得到处理之前被阻塞，因而有时也需要采用其他办法。<br>“其他办法”就是消息传递机制。在本节，将重点讨论分布式系统中面向消息的通信。首先详细讨论同步方式的本质及其含义；随后讨论在通信过程中参与通信的各方都处于执行状态的消息传递系统；最后分析消息队列系统，即使通信的另一方在通信开始时并为执行，该系统也能允许进程相互交换信息。</p><h2 id="面向消息的瞬时通信"><a href="#面向消息的瞬时通信" class="headerlink" title="面向消息的瞬时通信"></a>面向消息的瞬时通信</h2><p>很多分布式系统和应用程序直接构建在由传输层提供的简单的面向消息模型之上。面向消息的系统是中间件解决方案的一部分，为更深入地理解和评价它，首先讨论通过传输层套接字进行的消息传递。</p><h3 id="Berkeley套接字"><a href="#Berkeley套接字" class="headerlink" title="Berkeley套接字"></a>Berkeley套接字</h3><p>传输层接口的标准化十分重要，它为程序员提供了一个简单的但可以使用传输层提供的全部（消息传递）协议的原语集合。同时，标准化的接口还使得不同机器之间的应用程序移植变得容易。<br>从概念上说，<strong>套接字（socket）</strong>是一种通信端点。如果应用程序要通过底层网络发送某些数据，可以把这些数据写入套接字，然后再从套接字读出数据。对应于每一种特定的传输协议，本地操作系统都要使用一个实际的通用端点，而套接字形成了位于实际通信端点之上的一个抽象层。在下文中，将重点讨论用于TCP协议的套接字原语，如下图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/atom%20of%20socket%20tcp_ip.PNG" alt="TCP/IP套接字原语"><br>服务器一般执行前四个原语，而且按照图中所列顺序执行。调用套接字原语时，调用者创建一个新的通信端点，该端点是用于某种特定的传输协议的。从内部来说，创建一个通信端点意味着本地操作系统储备一定的资源，以供特定协议在发送及接收消息时存放消息使用。<code>bind</code>原语将本地地址与新创建的套接字相关联。如服务器应该将其所在机器的IP地址及一个可能是公开的端口号绑定到套接字上。所执行的绑定操作将告知操作系统，服务器希望只在指定的地址和端口上接收消息。<code>listen</code>原语只能在面向连接的通信中调用。这是一种非阻塞的调用，它允许本地的操作系统保留足够大小的缓冲区来存放用户希望接受的最大数目的连接。<code>accept</code>原语则会阻塞调用者，直到有连接请求达到为止。当请求到达时，本地操作系统将创建一个与原先的套接字属性相同的套接字，随后将新套接字返回给调用者。这种方法可以让服务器派生出新进程，由它来处理新连接的实际通信过程；在此期间服务器则返回到原来的状态，并等待原先套接字上新的连接请求。<br>再来看下客户端的情况。同样，首先必须使用<code>socket</code>原语创建一个套接字，但不必将套接字显式绑定到本地地址上，这是因为操作系统可以在连接建立的时候为其动态分配端口。<code>connect</code>原语要求其调用者指定一个传输层地址，以便将连接请求发送到该地址。调用<code>connect</code>后客户被阻塞，直至连接成功为止。随后双方使用<code>write</code>和<code>read</code>原语开始进行消息交换，其中<code>write</code>原语用来发送数据，而<code>read</code>原语用来接收数据。最后要关闭连接。使用套接字来关闭连接是一个对称的过程，只有客户和服务器都调用了<code>close</code>原语，连接才真正关闭。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/connection-oriented%20communcation%20by%20socket.PNG" alt="使用套接字的面向连接通信模式"><br>上图总结了客户和服务器通过套接字进行面向连接通信的一般模式。</p><h3 id="消息传递接口（MPI）"><a href="#消息传递接口（MPI）" class="headerlink" title="消息传递接口（MPI）"></a>消息传递接口（MPI）</h3><p>随着高性能多计算机系统的出现，开发人员开始寻求有助于更加方便地编写高效率应用程序的面向消息原语。这就要求原语应该提供一个位于适当层次上的抽象以简化应用程序开发，且实现这些原语所花费的开销要尽可能小。但由于两方面原因，套接字被认为不太满足要求：一是套接字所在的抽象层不对，它只提供了简单的<code>send</code>和<code>receive</code>原语；二是套接字被设计为利用通用的协议栈如TCP/IP进行网络通信，而并不适用于为高速互联网开发的专用协议，这些协议要求接口能够提供一些更为高级的特性，如不同的缓冲和同步方式。<br><strong>消息传递接口（Message-Passing Interface, MPI）</strong>是为了并行应用程序设计的，因而是为瞬时通信量身定做的。它直接使用的是底层网络。同时它还假定诸如进程崩溃或网络分区之类的严重故障是致命的，因此不要求这些故障能够自动恢复。<br>MPI假定通信在一个已知进程组内发生。每个组都分配一个标识符，而组内的每一个进程也分配一个局部标识符。因此，一个（组标识符，进程标识符）对就可以唯一地确定消息的来源或者目的地，可以用来代替传输层地址。<br>MPI的核心是一些消息传递原语，最直观的如下图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/atom%20of%20mpi.PNG" alt="MPI中一些最直观的消息传递原语"><br>MPI中的不同原语可以相互替换使用，而不影响程序的正确性。对于MPI为何支持如此之多的通信方式的官方解释是，这可以赋予程序员充分的机会来进行性能优化。</p><h2 id="面向消息的持久通信"><a href="#面向消息的持久通信" class="headerlink" title="面向消息的持久通信"></a>面向消息的持久通信</h2><p>本小节将讨论一类重要的面向消息的中间件服务，一般被称为<strong>消息队列系统（message-queuing system）</strong>，或者<strong>面向消息的中间件（message-oriented middleware, MOM）</strong>。消息队列系统为持久异步通信提供多种支持。这类系统的本质是，提供消息的中介存储能力，这样就不需要消息发送方和接收方在消息传输过程中都保持激活状态。与上述的一个重要区别在于，消息队列系统的设计目标一般是支持那些时间要求较为宽松的消息传输，如那些要求几分钟完成的传输，而不适用于那些必须在几秒钟内甚至几微妙内完成的传输。</p><h3 id="消息队列模型"><a href="#消息队列模型" class="headerlink" title="消息队列模型"></a>消息队列模型</h3><p>消息队列系统背后的基本思想是，应用程序可以通过在特定队列中插入消息来进行通信。消息由一系列通信服务器依次进行转发，最终送达目的地。即使在消息发送过程中接收方的机器未处于运行状态，消息也能送到。在实践中，多数通信服务器彼此直接相连，也就是说消息一般直接传递给目的服务器。原则上，每一个应用程序都拥有归其私有的消息队列，其他应用程序可以发送消息到该队列中。队列只能由相应的（也就是拥有该队列的应用程序）读取，但也可能有多个应用程序共享单个队列。<br>消息队列系统的重要特征之一是，通常只能确保发送方发出的消息最终能够插入到接收方的队列中，并不保证消息到达的时间，甚至不保证消息一定会得到读取，这完全由接收方来决定。<br>这些语义允许使用松散耦合的通信方式。因此在消息进入接收方的消息队列时，接收方不必处于运行状态。同样，当发送方所发送的消息被接收方从消息队列中取出的时候，发送方也不必处于运行状态。发送方和接收方可以彼此完全独立地运行。事实上，某个消息一旦进入到队列，就将一直保留到从队列中移除为止，而与其发送方或者接收方是否正在运行无关。根据发送方和接收方运行状态的不同，一共有四种组合，如下图所示。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/four%20ways%20of%20client-server%20message-queue.PNG" alt="使用队列的松散耦合通信的四种组合方式"><br>在上图(a)中，发送方和接收方在消息的整个传输过程中都是运行的。在图(b)中，只有发送方在运行，而接收方并不运行，也就是说，处于一种无法进行消息交付的状态，但是发送方仍然可以发送消息。在(c)中显示的是一种发送方没有运行而接收方在运行的状态。在这种情况下，接收方可以读出发送给它的消息。而在图(d)中，虽然发送方和接收方都不在运行，但是消息可以由系统存储（可能还进行了传输）。</p><p>原则上，消息中可以包含任何数据。唯一重要的是，应该对消息进行正确的<strong>编址</strong>。在实践中，寻址是通过给出目的消息队列的名字来实现的，该名字在系统范围内是唯一的。在某些情况下，可能对消息的大小做出了限制，不过底层系统也可能会以一种对应用程序完全透明的方式来对较大消息的分段及重组进行管理。采用这种方法将会使得向应用程序提供的基本接口变得特别简单，如下图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/basic%20interfaces%20of%20message%20queue%20system.PNG" alt="消息队列系统队列的基本接口"></p><p>发送方调用<code>put</code>原语把要添加到某个指定队列中的消息传递给底层系统。这个调用是非阻塞的。而<code>get</code>原语是一个阻塞性调用，调用<code>get</code>原语，获得授权的进程将取出指定队列中等待最久的消息。只有在队列为空时，进程才会被阻塞。这个调用还有几种变体形式，使用这些变体形式可以在队列中搜索给定的消息，如可以根据给定的优先级或者某种匹配模式来搜索。<code>poll</code>原语是<code>get</code>原语的非阻塞性的变体形式，调用<code>poll</code>时，如果队列为空或者找不到指定的消息时，调用进程将会简单地直接继续运行。最后，多数消息队列系统也允许进程注册一个处理程序，称为<strong>回调函数（callback function）</strong>，在有消息进入队列时系统将自动调用该处理程序。回调还可以用于在没有进程运行的时候，自动启动一个进程以从队列中获取消息。这常常是在通过在接收方一端驻留一个<strong>守护程序（daemon）</strong>来实现，该程序对队列进行持续的监视，如果有消息进入就进行相应的处理。</p><h3 id="消息队列系统的一般体系结构"><a href="#消息队列系统的一般体系结构" class="headerlink" title="消息队列系统的一般体系结构"></a>消息队列系统的一般体系结构</h3><p>本小节将详细讨论一般消息队列系统的外部特征。其隐含的第一项限制就是：消息只能够放入发送方的本地队列，也就是与发送方位于同一台机器上的队列，至少也应该是附近的机器（如同一个局域网下的机器）上的队列。这种队列被称为<strong>源队列（source queue）</strong>。同样，只能从本地队列中读出消息。然而，放入队列的消息中将会包含对其将要传输到的<strong>目标队列（destination queue）</strong>的说明。由消息队列系统负责向发送方和接收方提供队列，并对消息由源队列向目的队列传输过程进行管理。<br>在分布式系统中，很重要的一点是：全部队列的集合是分布在多台机器上的。因此，对于要传输消息的消息队列系统来说，它应该维护一个从队列到其所在网络位置之间的映射关系，这在实践中就意味着需要维护一个（也许是分布式的）数据库，其中存储到网络位置所对应的<strong>队列名（queue name）</strong>，如下图所示。也应该注意到，这种映射关系与在因特网上用来传输电子邮件的<strong>域名解析系统（domain name system, DNS）</strong>是完全类似的。如向逻辑邮件地址<a href="mailto:`steen@cs.vu.nl" target="_blank" rel="noopener">`steen@cs.vu.nl</a>`发送邮件，邮件系统将会请求DNS找到接收方的邮件服务器所在的网络地址（也就是IP地址），服务器用该地址来进行实际的消息传输。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/relation%20of%20addr-queue%20and%20addr-network.PNG" alt="队列级编址与网络级编址之间的关系"></p><p>队列由<strong>队列管理器（queue managers）</strong>来管理。一般来说，队列管理器与发送或者接收消息的应用程序直接交互。然而，也有一些特殊的队列管理器发挥了路由器或者中继器的作用：它们将输入的消息转发到其他的队列管理器。通过这种方式，消息队列系统可以主键演变成为完整的应用级<strong>覆盖网络（overlay network）</strong>，该覆盖网络位于原来的计算机网络之上。<br>由于多种原因，使用中继器可以带来便利性。比如说，在很多消息队列系统中，没有能对队列-位置映射进行动态维护的通用命名服务。而如果队列网络的拓扑是静态的，每个队列管理器就都需要维护一份队列-位置映射的副本。在大规模队列系统中这种方案很容易就会导致网络管理方面的问题。一种解决方案就是，使用若干了解网络拓扑的路由器。如果发送方A将目的地为B的消息放入其本地队列中，该消息将会首先传输到最近邻的路由器，在下图中就是R1。在这里，路由器R1知道如何将该消息往B的位置转发。比如说，R1可以从B的名字推断出应该将消息转发给路由器R2.采用这种方式，只有在路由器需要添加队列或者删除队列时进行更行操作，而其他队列管理器都需要知道最邻近的路由器所在位置即可。中继器一般有助于构建可扩展的消息队列系统。然而，显而易见的是，随着队列网络规模的迅速增长，如果还用人工来配置网络，网络很快就会变得难以管理。唯一的解决方法是采用动态路由。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/organzation%20of%20message-queue-system%20with%20routers.PNG" alt="含有路由器的消息队列系统的一般组织结构"></p><p>使用中继器的另一个原因是，中继器允许对消息进行二次处理。比如说，基于安全方面或者容错的考虑，可能要在日志中记录消息。甚至某些特殊形式的中继器发挥着网关的作用，将消息转换成接收方能够理解的格式。<br>最后，中继器也可以用于多播的目的。在这种情况下，输入的消息被简单地放入每一个发送队列中。</p><h3 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h3><p>消息队列系统的重要应用领域之一就是将现有的应用程序与新应用程序一同集成进个单一的、结构紧密的分布式信息系统中去。要进行集成,就要求应用程序必须能够理解所接收到的消息,这实际上也就是要求发送方送出的消息所用的格式必须与接收方的消息格式相同。<br>这种方法存在的问题是,每一次在系统中添加需要不同消息格式的应用程序时,每个可能的接收方都必须进行改动,以便能够识别新的格式。<br>另一种方法是,各方达成一致,都采用一种公用的消息格式,就像传统网络协议那样。不幸的是,这种方法在消息队列系统中一般并不适用。问题在系统运行所在的抽象层次上。公用消息格式只在使用该格式的所有进程确实有足够的共同之处的情况下才有意义。如果组成分布式信息系统的应用程序间的差异非常大(这是常有的情况),那么即使最好的公用格式也只不过意味着一串字节序列。<br>虽然规定了少数供特定的应用程序域使用的公用消息格式,但是一般的方法还是倾向于提供几种共存的不同格式,并提供在各种格式之间尽可能简单地转换手段。在消息队列系统中,转换是由队列网络中特定结点完成的,这些结点称为<strong>消息转换器( message broker)</strong>。消息转换器在消息队列系统中扮演了应用层网关的角色,其<strong>主要目的</strong>在于将输入消息的格式转换为目的应用程序能够理解的格式。要注意,<em>对于消息队列系统来说,消息转换器也只不过是一个应用程序而已</em>,如下图所示。换句话说,一般不认为消息转换器是队列系统的一个主要部分。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/organzation%20of%20message-broker%20in%20message-queue-system.PNG" alt="消息队列系统中消息转换器的一般结构"></p><p>消息转换器可以像一个消息格式重新编排工具一样简单。拥有更高级设置的消息转换器可以扮演应用层网关的角色,比如处理Ⅹ.400消息格式与因特网电子邮件格式之间的转换。在这种情况下,常常不能够保证输入消息中包含的所有信息都能够实际转换为输出消息中相对应的内容。<br>但更为常见的是为高级的全业应用集成( enterprise application integration,EAI)使用消息转换器,如之前所介绍的一样。在这种情况下,除了进行消息转换之外转换器还要根据正在交互的消息匹配应用程序。这种模型称为<strong>发布/订阅(publish/subscribe)</strong>,应用程序以发布的形式来发送消息。它们可能发布一个关于主题X的消息,然后发送给转换器。那些已经说明了它们对主题X的消息感兴趣的应用程序(也就是说,它们订购了这些消息)将接收来自转换器的这些消息。<br>消息转换器的核心是一个数据库,数据库中的规则规定了如何将格式为T1的消息转换为格式为T2的消息。问题在于如何定义这些规则。</p><h3 id="消息队列系统说明"><a href="#消息队列系统说明" class="headerlink" title="消息队列系统说明"></a>消息队列系统说明</h3><p>在之前讨论中，可以看到消息队列系统与电子邮件服务十分类似。<br>电子邮件系统与消息队列系统相比较,特别之处在于<strong>前者的目的</strong>主要在于为最终用户提供直接支持。这就说明了为什么有多种群件应用程序是直接基于电子邮件系统的。另外,电子邮件系统可能有一些特殊的需求,例如,自动消息过滤、高级消息数据库支持(比如,为了更方便地取得先前存储的数据的需要)等。<br><strong>普通消息队列系统的目标</strong>并不仅仅在于为最终用户提供支持。建立这样的系统要解决的重要问题是:要为进程间的持久通信提供支持,无论该进程是在运行用户程序,在处理对数据库的访问,还是在进行计算等,都必须能够支持其通信。这就导致消息队列系统的需求与纯粹的电子邮件系统不同。比如说,电子邮件系统一般不需要提供可靠的(有保证的)消息传递、消息的优先级、日志功能、高效的多播、负载平衡、容错性等。<br>因此,通用的消息队列系统的应用范围很广,包括电子邮件、工作流、组件以及批处理。然而,它最重要的应用领域是将一组数据库(也许分散在广阔区域)或者数据库应用程序集成进多个数据库(信息)系统中去。比如说,一个涉及若干个数据库的査询可能需要切分成为几个子查询,然后将这些子查询转发给相应的数据库。在这个过程中可以利用消息队列系统所提供的基本方法来将每个子查询打包进消息中去,然后将消息发送给相应的数据库。</p><h1 id="面向流的通信"><a href="#面向流的通信" class="headerlink" title="面向流的通信"></a>面向流的通信</h1><p>到目前为止，所讨论的通信都是对某种程度上独立且完整的信息单元进行交换。如调用某个过程或者方法的请求、对这种请求的响应以及消息队列系统中应用程序间的消息交换都属于这种类型的通信。这种类型通信的典型特征是，它并不在乎通信究竟在哪个确切时间发生。虽然系统可能会运行得过快或过慢，但是同步对于通信的正确性没有影响。<br>而在某些形式的通信过程中，同步扮演了关键的角色。如采用16位样本序列表示的音频流，每一个样本通过PCM来表示声波的振幅。假设该音频流需要达到CD音质，则需要对原始声波进行频率为44100Hz的采样。为了复现原声，也要求音频流中的样本必须按照次序来播放，且播放的两个样本间的时间间隔必须严格为1/44100s。如果以别的速率来播放，就会造成播放的声音与原声不同。<br>本节即讨论分布式系统应该提供怎样的功能，来为时间敏感的消息交换（如音频流和视频流）提供支持。</p><h2 id="为连续媒体提供支持"><a href="#为连续媒体提供支持" class="headerlink" title="为连续媒体提供支持"></a>为连续媒体提供支持</h2><p>为时间敏感的信息交换提供支持一般表示为<em>连续媒体</em>提供支持。在这里,<strong>媒体</strong>是指传送信息的手段,其中包括存储以及传输介质、如监视器之类的显示媒介等。媒体的重要类型是信息的表示方式,也就是信息在计算机系统中的编码方式。对于不同类型的信息要使用不同的表示形式。比如说,文本一般用 ASCII或者 Unicode来进行编码。图像可以采用GIF或者JPEG等格式来表示。而计算机系统中的音频流可以采用诸如PCM的16位样本来编码。<br>在<strong>连续(表示)媒体(continuous (representation) media)</strong>中,了解不同数据项之间<em>在时间上的联系</em>是正确解释数据含义的基础。我们已经给出过这样的例子:通过播放某个音频流以复现原来的声音。作为另一个例子,我们来考虑一下运动。运动可以通过一系列图像来表现,这些图像必须以相同的间隔时间T来连续显示,T一般为30~40ms。如果要正确地表现运动过程,不但要以正确的顺序显示图像,还要以恒定的显示速率—每秒1/T幅图像来显示。<br>与连续媒体相反,<strong>离散(表示)媒体(discrete (representation) media)</strong>的特征是:数据项之间的时间联系对于正确解释数据含义并不重要。离散媒体的典型例子包括文本、静态图像的表示,还有对象代码及可执行文件等。</p><p>为了对时间敏感的信息进行交换,分布式系统一般都提供对数据流的支持。<strong>数据流(data stream)</strong>是数据单元的序列,可以应用于离散的媒体,也可以应用于连续媒体。比如说,UNIX中的管道或者TCP/IP连接就是面向字节的离散数据流的例子。而播放音频文件时般要求在文件与音频设备之间建立连续数据流<br>对于连续数据流来说,同步是极为关键的。为了捕捉同步状况,要对不同的传输模式做出区分。在<strong>异步传输模式(asynchronous transmission mode)</strong>下,流中的数据项是逐个传输的,但是对某一项在何时进行传输并没有进一步的限制。这是采用离散数据流时常见的情况。比如说,文件可以作为数据流来传输,但是每一数据项传输完成的确切时间通常是无关紧要的。在<strong>同步传输模式( synchronous transmission mode)</strong>下,数据流中每一个单元都定义了一个<em>端到端最大延迟时间</em>。数据单元的传输时间是否远远小于最大允许延迟并不重要。比如说,传感器以某个特定的采样率对温度值进行采样,然后将采样结果通过网络传给操作员。在这种情况下,很重要的一点是必须确保端到端的网络传输时间小于采样间隔时间,但是如果采样结果的传输速度大大超过所需的最低值是没有关系的。最后,还有一种<strong>等时传输模式(isochronous transmission mode)</strong>,在这种模式中数据单元必须按时传输,也就是数据传输的端到端延迟时间必须同时受到上限和下限的约束,端到端延迟时间上限和下限也称为<strong>边界延迟抖动</strong>。等时传输模式在表现视频和音频方面扮演了关键角色,因此它对分布式多媒体系统极为有用。在本节中,我们只考虑使用等时传输的连续数据流,简称为流。</p><p>流可以很简单,也可以很复杂。一个简单流(simple stream)只包含有单个数据序列,而一个复杂流(complex stream)由若干相关的简单流—子流(substream)构成。复杂流中各子流之间的关系常常是时间敏感的。比如说,立体声音频可以使用包含两个子流的复杂流来传输,其中每个子流代表一个声道。然而,这两个子流必须是始终保持同步的,这一点很重要。换句话说,来自两个流的数据单元都必须成对传输,以确保产生立体声的效果。另一个复杂流的例子是关于影片传输的。这种流由单个视频流,以及两个用于以立体声方式传输电影中声音的音频流。第4个流用来传输字幕或者翻译成其他语言的文字。这里,各子流间的同步依然是重要的。如果无法做到同步,就无法完整地复现影片。</p><p>从分布式系统的角度,可以区分支持流所需的各种元素。为简单起见,这里只关注<em>已存储数据与原始数据的流传输</em>。在后一种情况下,数据被实时捕捉并在网络上发送给接收方。这两种情况的主要差别是,原始数据的流传输留给调整流的机会少。我们可以为连续多媒体数据流描述一个一般的客户服务器体系结构,如下图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/client-server%20of%20multimedia-data%20stream%20transport.PNG" alt="用于已存储的多媒体数据的流传输的客户-服务器体系结构"><br>这个体系结构揭示了很多需要处理的重要问题。首先,多媒体数据,尤其是视频和音频,需要充分压缩以便减少所需的存储空间,特别是网络容量。从通信的角度来看,更为重要的是控制传输的质量和同步化问题。我们将在后面讨论这个问题。</p><h2 id="流与服务质量"><a href="#流与服务质量" class="headerlink" title="流与服务质量"></a>流与服务质量</h2><p>时间敏感的(以及其他非功能性的)需求一般统称为<strong>服务质量(quality of service,QoS)</strong>需求。这种需求描述了底层分布式系统及网络在确保传输质量方面的需要。连续数据的QoS主要关注时间、容量以及可靠性。在本节中我们将详细讨论QoS以及它与创建流之间<br>的关系。</p><p>从应用程序的角度来看QoS需求，在很多情况下,可以简化为指定如下一些特性:</p><ol><li>数据传输所要求的比特率。</li><li>创建会话的最大延时(例如,应用程序何时可以开始发送数据)</li><li>端到端的最大延时(例如,数据单元到达接收端花费多少时间)</li><li>最大延时抖动。</li><li>最大往返延时。</li></ol><p>注意,可以对这些特性进行很多的改进。但是,当处理基于因特网协议栈的面向流的通信时,我们必须接受这样一个事实:通信的基础是由一种非常简单且卓有成效的数据报服务IP形成的。现在,很多(尽管不是全部)支持面对流通信的分布式系统都是构建在因特网协议栈的上面。关于QoS说明就这么些(实际上,IP是提供了一些QoS支持,但很少被实现)。</p><p>如果底层系统只提供传送服务,分布式系统就可以尽可能地隐藏掉服务质量的缺乏这里有多种机制可以部署。</p><p>首先,情况并不像到目前为止所描述的那样糟糕。例如,因特网通过它的<strong>区分服务(differentiated services)</strong>,为不同类型的数据提供服务。发送主机可以把输出数据包标记为属于哪一类型,包括快速转发(expedited forwarding)类型。快速转发类型指定当前路由器应以绝对优先级来转发数据包。另外还有一种确保型服务(assured forwarding),其中的数据流量分为四种子类,如果网络发生拥塞,有三种方式来丢弃数据包。因此,确保型服务定义了各种优先级,这些优先级可以赋给数据包,从而允许应用程序把时间敏感的数据包与无关紧要的数据包区分开来。</p><p>除了这些网络层面的解决办法,分布式系统还可以帮助接收方获得数据。尽管可用的工具并不多,但有一种特别有用,它<strong>使用缓冲区来减少抖动</strong>。其原理很简单,如下图所示。假设当数据包在网络上传输时有不同的延时,接收方先把它们存储在缓冲区中。这样,直到总是有足够的数据包进入缓冲区,接收方就可以以固定的速率把数据包传递给应用程序。但这种方案也有糟糕的情况，如图所示的第八个数据包。接收方缓冲区的大小对应于数据包传递给应用程序的9秒钟。但是,第八个数据包到达接收方花费了11秒钟,此时,缓冲区已完全空了。这就导致出现应用程序的<em>回放间隔</em>。唯一的解决办法是增加缓冲区的大小。但这个解决方案的又一明显缺陷就是,接收应用程序可以开始回放缓冲区中的数据包的延时同样增加了。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/ways%20to%20avoid%20vibration.PNG" alt="使用缓冲区来减少抖动"><br>还可以使用其他技术。我们知道,底层的有效服务也可能丢失数据包。为了从服务质量上补偿这种丢失,需要应用纠错技术。通常,要求发送方重传丢失的数据包是不可能的,因此需要应用转发纠错(forward error correction)技术。一种著名的技术是以这样一种方式给输出数据包编码:n个中接收了k个数据包,就足以重构这k个数据包。</p><p>这里可能出现的一个问题是,单个的数据包可能含有多个音频和视频帧。因此,当某个数据包丢失,接收方在播放帧时会发现一个较大的间隔。这种情况可以通过<strong>交错传输</strong>来避免,如下图所示。以这种方式,当某个数据包丢失时,在连续多个帧中导致的间隔分布较。但要注意的是,与非交错传输相比,这种方法要求有更大的接收缓冲区,因此使得接收应用程序的开始延时更高。例如,考虑图中情形,要播放前4帧,接收方需要等到4个数据包都已传送,而不是像非交错传输那样只需一个数据包。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/result%20of%20packet-losing.PNG" alt="数据包丢失的结果"></p><h2 id="流同步"><a href="#流同步" class="headerlink" title="流同步"></a>流同步</h2><p>多媒体系统中一个重要的问题是,不同的流(可能都是复杂流),可能要互相保持同步。流同步涉及的问题是要在流之间保持时间上的关联,流同步有两种类型。<br>最简单的一种同步是<strong>在离散数据流与连续数据流之间保持同步</strong>。我们来考虑一下Web上的带有音频的幻灯片放映。幻灯片以离散数据流的形式由服务器传输给客户,而同时客户要播放特定的(一部分)音频以配合当前放映的幻灯片,而音频也是从服务器取得的。在这种情况下,音频流必须与幻灯片的演示保持同步。<br>要求更加苛刻的一类同步是<strong>连续数据流之间的同步</strong>。日常生活中就有这方面的例子:放映影片时视频流必须与音频流保持同步,这常常称为<strong>口型同步</strong>。另一个例子是放送立体声。立体声音频流由两个子流组成,每个子流代表一个声道。要正确地表现立体声,就要求两个子流保持紧密的同步:只要子流间相差20S就足以导致立体声失真。</p><p>同步是在建立<strong>流的数据单元</strong>这个层次上的。也就是说,只要让两个流的数据单元保持同步,就可以让两个流同步。对数据单元的选择高度依赖于看待数据流的抽象层次。让我们来更具体地考虑一下前面提过的CD音质的(单声道)音频流。在最适当的粒度上,这种流呈现为16位样本序列。如果采样频率为44100Hz,在理论上每约23ps就必须进行一次同步。实践证明,如果要达到高质量的立体声效果,这种级别的同步确实是必需的。</p><p>现在的问题是,到底是如何做到同步的。需要先搞清楚两个问题:(1)流同步的两个基本机制;(2)在网络环境下这些机制的分布式版本。</p><p>可以在不同的抽象层次上来观察同步机制。从最低的层次上看,同步是通过显式地对单个流的数据单元进行操纵来实现的,其原理如下图所示。在本质上,存在一个专门在少数几个简单流上执行读写操作的进程,该进程确保这些操作遵守指定的时间及同步约束条件。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/the%20principle%20of%20explicit%20synchronization%20on%20the%20level%20of%20the%20data%20unit.PNG" alt="在数据单元层次上进行显式同步的原理"><br>例如,我们来考虑部用两个输入流来表示的影片。视频流中包含有未经压缩的低质量图像,分辨率为320×240像素,每个像素由一个字节表示,这样的图像中每个视频数据单元的大小为76800字节。假定图像要以30Hz的频率显示,那么每幅图像就要持续3ms。假定音频流包含的音频样本组成了大小为11760字节的单元,那么每个单元就相当于33ms的音频。如果输入进程的输入速率为2.5MB/s，只要每33ms读取一次图像并读取一次音频数据块就可以做到口型同步了。<br>这种方法的缺陷在于,完全由应用程序来负责实现同步,但它只有低层功能可用。更好的做法是,向应用程序提供接口,允许它更加方便地对流和设备进行控制。回到上一个例子,假定视频显示有一个控制接口,允许指定图像显示的速率。该接口还提供注册用户处理程序的功能,每当有k个新图像到达的时候该用户处理程序就被调用。音频设备也可以提供相似的接口。通过这些控制接口,应用程序开发人员可以编写出简单的监控程序,它由两个处理程序组成,每个处理程序负责处理一个流,并由两个处理程序相配合,共同检查视频流和音频流是否完全同步,并且在必要的时候调整视频或音频单元的显示或播放速率。如下图所示的例子对于许多多媒体中间件系统来说是很典型的。多媒体中间件提供了一组接口用于控制视频流和音频流,其中包括控制诸如显示器、照相机和麦克风等设备的接口。每个设备和每个流都有自己的高级接口,其中包括在发生某些事件时通知应用程序的接口,后者用来编写用于流同步的处理程序。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/the%20principle%20of%20synchronization%20on%20the%20level%20of%20the%20interfaces.PNG" alt="通过高级接口支持同步的原理"></p><p>需要注意的另一个问题是,同步机制的分布性。<br>首先,由请求同步的子流组成的复杂流的接收方需要了解同步究竟要达到哪些要求。也就是说,<strong>它必须使完整的同步说明(synchronization specification)在本地可用</strong>。在实践中一般是隐式地将不同流多路复用到包含所有数据单元(其中含用于同步的数据)的单个流中。但是MPEG流采用了另一种同步方案。活动图像专家组(motion picture experts group, MPEG)标准定义了一组用于视频及音频压缩的算法。现在已经有了若干种MPEG标准。比如MPEG-2,该标准原来是用来将广播级质量的视频压缩到4~6Mb/s。在MPEG2中,可以将数目不限的连续流和离散流合并到单个流中。每个输入流先转换成包的流,包中带有由基于90kHz的系统时钟给出的时间戳,这些包的流又被多路复用为一个节目流(program stream),节目流中的包长度是可变的,而这些包的共同点在于其带有相同的时基。在接收端需要对节目流进行多路分离,此时再一次利用包中的时间戳作为流间同步的基本机制。<br>另一个重要的问题是,<strong>应该选择在发送方还是接收方进行同步</strong>。如果由发送方来处理同步,就可以将许多流合并成单个流,并且使用另一种类型的数据单元。让我们来再次考虑一下前面例子。例子中,由两个各代表一个声道的子流构成了立体声音频流。一种可能采取的做法是将两个子流彼此独立地传输给接收方,由接收方进行两个流之间的同步。很明显,由于每个子流的延迟可能不同,要做到同步是非常困难的。更好的做法是在发送方将两个子流合并起来,得到的流中的数据单元是由成对的样本构成的,分别来自左右声道的两个样本组成一对,这样接收方只要读取数据单元并将它分离成左声道样本和右声道样本就行了,在这种情况下,两个声道的延迟相同。</p><h1 id="多播通信"><a href="#多播通信" class="headerlink" title="多播通信"></a>多播通信</h1><p>在分布式系统通信中的一个重要主题是对多个接收方发送数据的支持,也称为<strong>多播通信</strong>。在很长一段时间里,这个主题属于网络协议的研究领域,其中已实现和发展了网络层和传输层解决办法的很多提议。在所有解决方法中,一个主要的问题是<em>为信息传播创建通信通路</em>。在实践中,这里包含了大量管理工作,在很大情况下需要人工干预。而且,只要无集中的提议,ISP是不愿意支持多播的。<br>随着点对点技术,尤其是结构化覆盖网络管理的出现,通信通路的创建更简单了。由于点对点解决方法通常是部署在应用层,因此已引入了多种应用层多播技术。在本节中将简要地介绍这些技术。<br>除了创建显式的通信通路,多播通信还可以以其他方法来完成。本节还将介绍基于gossip的信息传播,它提供了一种简单(但往往效率更低)的多播方法。</p><h2 id="应用层多播"><a href="#应用层多播" class="headerlink" title="应用层多播"></a>应用层多播</h2><p>应用层多播的基本思想是<strong>结点组织成一个覆盖网络,然后用它来传播信息给其成员</strong>。其中一个重要的因素是,网络路器不在组成员中。因此,覆盖网络的结点之间的连接可以跨越多个物理链接,于是,与网络层路由的消息相比,覆盖网络之中的路由消息并不是最佳的。<br>一个关键的问题是覆盖网络的构建。这里主要有两种方法。第一种是,<strong>结点本身直接组织成树</strong>,这意味着每对结点之间只有唯一一条路径。另一种方法是,<strong>结点组织成一个网状网络</strong>,其中的每个结点都有多个邻点,而且一般情况下,每对结点中间有多条路径。这两种方法之间的主要区别是,<em>后者往往能提供更高的健壮性</em>:如果某个连接断开(例如某个结点失效),无需立即重组整个覆盖网络,仍然可以传播信息。</p><p>为了使事情更加具体,我们来看看一个相对简单的方案,即在Chord中构建多播树。这种方案最初是为Scribe提出的,它是一种应用层多播方法,构建在Pastry之上。 Pastry也是一种基于DHT的点对点系统。<br>假设某个结点要开始一个多播会话。它只需生成一个多播标识符(假设为mid),这只是一个随机选择的160位密钥。然后查找SUCC(mid),它负责该密钥的结点,把它提升为多播树的根结点,用来把数据发送给感兴趣的结点。为了加入该树,结点P只需运行LOOKUP(mid)操作,其结果是,含请求加入到多播组mid的查找消息将从P路由到SUCC(mid)。在成为根结点时,加入请求要通过多个结点。假设它首先到达结点Q。如果Q从没有见过加入到mid的请求,那么它将成为该多播组的一个<strong>转发器(forwarder)</strong>。此时,P成为了Q的一个孩子,且Q继续把加入请求转发到根结点。如果下一个结点(假设为R)仍不是转发器,它将成为一个转发器,记录Q为其孩子,并继续发送加入请求。另一方面,如果Q(或R)已经是mid的一个转发器,它仍会把前一个发送方(即分别为P或Q)记录为其孩子,但不再需要把加入请求发送给根结点,因为Q(或R)已经是多播树的成员了<br>按照定义,显式地请求加入到多播树的结点(如P)同时也是转发器。这种方案的结果是,我们在覆盖网络上构建了含两种类型的结点的多播树:一种是纯粹的转发器,起帮助作用;另一种是兼作转发器的结点,它含有加入树的显式请求。<br>至此,多播很简单:结点只是通过反复运行LOOKUP(mid)操作,把多播消息发送给树的根结点,这样,消息就可以沿着树被发送。注意,这里只是简要地描述了Scribe中的多播,并没有完全反映其原始设计思想。</p><p><strong>覆盖网络的构建</strong><br>从上面简要的描述可以清楚地看出,一旦把结点组织成了一个覆盖网络,构建一棵树并不困难,但要构建一棵高效的树却并不简单。注意,在目前的介绍中,对参与树的结点的选择并没有考虑任何性能问题:它纯粹是基于通过覆盖网络的消息的(逻辑)路由。</p><p>为了理解这个问题,来看看下图。该图显示了只有4个结点的小集合,它们组织成了一个简单的覆盖网络,其中结点A形成了多播树的根结点。穿越物理链接的代价如图所示。只要A多播一个消息给其他结点,可以看到,该消息将穿越每个链接〈B,Rb〉、〈Ra,Rb〉、〈Rc,Rd)和〈D,Rd〉两次。如果我们构建的不是从B到D而是从A到C的覆盖链接,那么该覆盖网络就更高效。如果要穿越〈Ra,Rb)和〈Rc,Rd〉链接,这种配置就可以节省一半。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch4/relation%20of%20overlay%20network%20links%20and%20network%20routers%20links.PNG" alt="覆盖网络的链接和实际网络层中路由器的链接之间的关系"></p><p>应用层多播树的质量通常以三种不同的尺度来度量:链接树、相对延时补偿和树成本。<br><strong>链接树(link stree)</strong>定义每个链接,并计算数据包通过同一链接的次数。链接树比1大,是因为尽管从逻辑上来说,一个数据包可以沿两个不同的连接转发,但这些连接中的一部分实际上对应的是相同的物理链接,如上图所示。<strong>伸缩(stretch)</strong>或<strong>相对延时补偿(relative delay penalty,RDP)</strong>计算覆盖网络中两个结点之间的延时比,以及两个结点在底层网络中的延时。例如,在覆盖网络中,从B到C的消息经过路由器B→Rb→Ra→Rc→C,总成本为59个单位。但是,在底层网络中,消息可能按路径B→Rb→Rd→Rc→C路由,其总成本为47个单位,伸缩比为1.255。显然,在构建覆盖网络时,其目标是最小化这种总的伸缩比,或所有结点对的平均RDP。最后,<strong>树成本(tree cost)</strong>是一个全局尺度,往往与最小化总的链接代价有关。例如,如果某个链接的代价就是两个端结点之间延时,那么,优化树代价就相当于找到一棵最小生成树,其中,传播信息到所有结点的总时间最小。</p><p>为了简化问题,假设一个多播组具有一个相关的已知结点,它负责跟踪加入到树的结点。当一个新结点发出一个加入请求时,它会与这个会合结点(rendezvous node)联系,以获得成员列表(可能是一部分)。其目的是选择可以作为该新结点的父亲的最好成员,它该选<br>择谁?这里有多种可选的不同建议,其解决方法也很不相同。</p><p>例如,考虑只有一个源结点的多播组。在这种情况下,最好结点的选择是显而易见的:它应该就是源结点(因为在这种情况下可以保证伸缩比等于1)。但是,在这样做时,要引入一个星形拓扑,其中源结点位于中间。不难想象,源结点很容易过载。换句话说,结点的选择往往限制在这样一种方法:只能选择那些其邻点数不多于k个的结点,其中k为设计参数。这种限制使得树创建算法大大地复杂化了,一个好的解决方法可能要求已有树的一部分进行重构对这个问题的各种解决方法提供了一个扩展概述和评价。作为说明,让我们来仔细看看一个特殊的类型,称为<strong>交换树(switch-tree)</strong>。其基本思想很简单。假设我们已有一个多播树,其中唯一的一个源结点作为根。在该树中,结点P通过删除到当前父结点的链接,创建到另一个结点的链接,就可以交换其父结点。交换链接的唯一限制是,新的父结点永远也不可能是以P为根结点的子树的一个成员(因为如果是的话,就会分解这棵树,并生成一个循环),新的父结点也不能有太多的后继子结点。需要后者是为了减少任一结点转发消息的负载。<br>有不同的标准可用于决定交换父结点。简单的一种是优化到源的路由,当消息要多播时可以有效地最小化延时。每个结点有规律地接收其他结点的信息(后面将解释这样做的一种特定方法)。此时,结点根据从路由器到源的延时,可以评估另一个结点是否更适合作为其父结点,如果是,则开始交换父结点。另一种标准是,判断到其他潜在的父结点的延时是否比到当前父结点的更短。如果每个结点都以此为标准,那么理论上结果树的总延时为最小的。换句话说,这也就是前面已解释过的优化树成本的一个示例。但是,要构建这样的树需要更多的信息,但事实证明,这种简单的方案对构建近似的最小生成树很有启发性。</p><p>这里还没有解决的一个重要问题是结点的失效。在交换树情况下,一个简单的解决方法是,只要某个结点知道其父结点失效了,那么它就以根结点作为其父结点。此时,就可以像正常情况一样进行优化处理,最终把该结点放置在多播树的恰当位置。</p><h2 id="基于gossip的数据通信"><a href="#基于gossip的数据通信" class="headerlink" title="基于gossip的数据通信"></a>基于gossip的数据通信</h2><p>对传播信息来说,一种日益重要的技术是依靠感染行为(epidemic behavior)。研究人员观察了疾病是如何在人群中扩散的,于是进行了很长时间的调查,看看是否可以开发些简单的技术来在超大型分布式系统中进行信息扩散。这些感染协议(epidemic protocol)的<strong>主要目的</strong>是使用本地信息在大型结点集中快速地传播信息。<br>要解释这些算法的一般原理,我们假定特定数据项的更新都是从单个结点发起的。这些就可以避免写冲突。</p><h3 id="信息传播模型"><a href="#信息传播模型" class="headerlink" title="信息传播模型"></a>信息传播模型</h3><p>正如其名所表示的那样,感染算法是基于流行病理论的。流行病研究的是传染病的传播的。在大型分布式系统中,要传播的不是疾病,而是信息。对分布式系统中有关传染病的研究的目标也是完全不同的:身体组织是尽最大努力防止传染病在大量人群中传播,而分布式系统的感染算法设计人员则试图<strong>尽可能快地用新信息“感染”所有结点</strong>。<br>借用来自传染病的术语,分布式系统的某个结点如果具有要传播到其他结点的数据,则称之为<strong>已感染的(infected)</strong>。还没有接收到数据的结点称为<strong>易受感染的(susceptible)</strong>。最后,不会传播其数据的已更新结点称为<strong>已隔离的(removed)</strong>。这里我们假定可以区分新旧数据,因为其数据可能已加时间戳或版本号了。<br>一种流行的传播模型是<code>anti-entropy</code>。在这种模型中,结点P随机选取另一结点Q,然后与Q交换更新信息。这里,交换更新信息的方法有如下三种:</p><ol><li>P只是把它自己的更新信息发出给Q,即为基于”push”的方法;</li><li>P只是从Q那里获得更新信息,即为基于”pull”的方法;</li><li>P和Q相互发送更新信息给对方,即为基于”push-pull”的方法</li></ol><p>如果要快速传播更新信息,那么只是使用基于”push”的方法并不是一个好的选择。显然,这可以如下来理解。首先,注意到,在基于push的方法中,更新信息只能由已感染的结点来传播。但是,如果已感染的结点很多,那么每个结点选择一个易感染的结点的概率就相对小。同样,某个结点要长时间保持为易感染的机会也简单,因为它不会被已感染的结点选中。<br>相反,在基于push的方法中,如果易感染的结点很多,那么其工作得就更好。在这种情况下,传播更新信息基本上是由易感染的结点来触发的。此时,这种结点接触已感染的结点的机会也就大,从而可以从那里获得更新信息,并同样变成为已感染的结点。<br>这表明,如果只有一个结点是已感染的,使用<code>anti-entropy</code>模型的任意一种方法,更新信息都会通过所有结点迅速传播,但”push-pull”方法最好。在一段时间里,如果每个结点作为发起者与随机选择的另一个结点进行了至少一次更新信息交换,则定义为一轮(round)。可以证明,传播单个更新信息到所有结点需要$$\mathrm{O}(\mathrm{log}(N))$$轮,其中$$N$$为系统的结点数。这的确表明,传播更新信息很快,而且是可扩展的。</p><p>这种方法的一个特殊变体称为<strong>流言传播(rumor spreading)</strong>,或简称为<strong>gossiping</strong>。它的工作原理如下。如果结点P正好刚更新数据项x,那么它将与任意结点Q通信,并把更新信息发送给Q。但是,有可能Q被另外一个结点已更新了。在这种情况下,P可能不再传播<br>该更新信息的概率为1/k。换句话说,它变为了已隔离的。<br>gossiping完全类似于现实生活。当Bob有热点新闻要传播时,他可能打电话给他的朋友Alice。像Bob一样,Alce也可能告诉她的朋友。但是,当她给她的某个朋友(比如是Chuck)打电话时, Chuck可能会告诉她,他已经知道这个新闻了。Alice可能就不再打电话告诉其他朋友了,如果他们已经知道了,该如何是好呢？<br>事实证明, gossiping是快速传播新闻的很好方法。但是,<strong>它不能保证所有结点都真的已更新了</strong>。然而，仍旧需要特殊的方法来保证所有结点都被更新。将<code>anti-entropy</code>与<code>gossiping</code>组合起来是个成功的办法。</p><p>感染算法的一大优点是其<strong>可扩展性</strong>,因为,与其他传播方法相比,在这种方法中,其进程间的同步数目相对要小。对广域系统来说,把实际的网络拓扑结构因素考虑进去可以获得更好的结果。在某些方法中,只与少量其他结点相连接的结点,其进行通信的概率相对高些。这里的一个基本假设是,这些结点构成了一个到网络的其他远程部分的桥,因此,它们可以很快地进行通信。这种方法又称为<strong>有向gossiping(directional gossiping)</strong>,可以衍生出不同的变体。<br>这个问题涉及到大多数感染解决方法所做的一个<strong>重要假设</strong>,即某个结点可以随机选取要通信的其他结点。这意味着,原则上,所有结点之间都是相连的。在大型系统中,这种假设是永远做不到的。幸运的是,实际上并不需要这样。正如之前所述,维护一个可持续更新的部分视图,就可以把结点集组织成一个随机图。通过定期地更新每个结点的部分视图,随机选择就不再是问题了。</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>感染算法特别擅长传播更新信息。但是,它们有一个很奇怪的副作用:传播数据项的删除很困难。这个问题的实质在于,数据项的删除破坏了该项的所有信息。因此,当某个数据项从结点删除时,该结点最终将接收该数据项的旧副本,并把这些看作是它以前从没有过的更新信息。<br>解决这个问题的技巧是把数据项的删除记录为另一次更新,并保持这个删除记录。这样,副本就不会被认为是新内容了,而只是看作为由删除操作已更新的版本。删除记录是通过传播<strong>死亡证书(death certificate)</strong>来完成的。<br>当然,死亡证书带来的问题是,最后必须清除掉它们,否则,每个结点都将逐渐构建一个巨大的本地数据库,其中存储的是已删除的数据项的历史信息。有学者建议使用休眠死亡证书。每个死亡证书在创建是加上时间戳。如果可以假定在已知的有限时间<br>里,更新信息可以传播给所有结点,那么在最大传播时间后,就可以删除死亡证书。但是,为了确保删除信息真的传播给了所有结点,只需很少的一些结点维护休眠死亡证书,永远别删除掉。假设结点P为数据项x维护了这样一个证书。如果x的一个废旧更新信息到达了结点P,那么P所要做的只是再次传播x的死亡证书即可。</p>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> distributed-system </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> distributed system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[木心]]></title>
      <url>http://www.wrran.com/blog/2017/12/21/people-say/muxin/</url>
      <content type="html"><![CDATA[<blockquote><p>高山流水固难求也</p></blockquote><a id="more"></a><blockquote><p>记得早先少年时<br>大家诚诚恳恳<br>说一句 是一句</p></blockquote><blockquote><p>清早上火车站<br>长街黑暗无行人<br>卖豆浆的小店冒着热气</p></blockquote><blockquote><p>从前的日色变得慢<br>车，马，邮件都慢<br>一生只够爱一个人</p></blockquote><blockquote><p>从前的锁也好看<br>钥匙精美有样子<br>你锁了 人家就懂了</p></blockquote><blockquote><p>@木心 in 从前慢</p></blockquote><hr><blockquote><p>哀愁是什么呢<br>要是知道哀愁是什么就不哀愁了</p></blockquote><blockquote><p>生活是什么呢<br>生活是这样的</p></blockquote><blockquote><p>有些事还没有做<br>一定要做的<br>另有些事做了<br>没有做好</p></blockquote><blockquote><p>明天不散步了</p></blockquote><blockquote><p>@木心 in 明天不散步了</p></blockquote><hr><blockquote><p>请扶持我<br>我已衰老<br>已如病兽<br>请扶持我</p></blockquote><blockquote><p>@木心</p></blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5MDM1MTcyNQ==&amp;mid=2657239831&amp;idx=1&amp;sn=bf1cd7703e324e01ebef2e3043cd0bcf&amp;chksm=8b9a1215bced9b03db71b3466c16411030e4bed1827e56d295c0a5ea18adb5b052c97976fa48&amp;mpshare=1&amp;scene=1&amp;srcid=1221Ah27lUbnwr8gFtTTG7TC#rd" target="_blank" rel="noopener">他把一生过成了一首诗，怎么会有这么有趣的灵魂</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MuXin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统 - 进程]]></title>
      <url>http://www.wrran.com/blog/2017/12/18/review/distributed-system/3-processes/</url>
      <content type="html"><![CDATA[<blockquote><p>三个臭皮匠赛过诸葛亮</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>进程的概念源自于操作系统，它被定义为执行中的程序。从操作系统的角度来说，进程管理和调度也许是它要处理的最重要的问题。但对于分布式系统来说，还存在许多同等甚至更加重要的问题。<br>如为了有效地组织客户-服务器系统，常常使用多线程技术更加方便。在分布式系统中，<strong>线程的主要作用</strong>是以适当的方式来构建客户和服务器，使得通信和本地处理过程可以并行进行，从而获得性能上的提高。<br><strong>虚拟化</strong>也日益成为一个重要概念，它允许一个应用程序(可能连同操作系统在内的所有运行环境)并行地与其他程序一同运行，但高度独立于底层硬件和平台，从而达到高度的可移植性。另外，虚拟化也有利于隔离由错误和安全问题引起的系统失效。<br>进程在不同机器之间的迁移也是一个重要问题，对于广域分布式系统来说，这个问题就更为突出。进程的迁移(更明确地说是代码的迁移)有助于获得可扩展性，也可以帮助动态地配置客户和服务器。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>虽然<strong>进程(process)</strong>构成了分布式系统中的基本组成单元，但实践表明操作系统提供的用于构建分布式系统的进程在粒度上还是太大了。而就粒度而言，将每个进程细分为若干控制<strong>线程(thread)</strong>的形式更为合适，可以使构建分布式应用程序变得更加方便，且获得更好的性能。</p><h2 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h2><p>为了理解线程在分布式系统中的作用，之前需要了解进程是什么、以及进程与线程之间的关系。为了程序执行的需要，操作系统创建多个虚拟处理器，每个虚拟处理器运行一个程序。<strong>进程</strong>一般定义为执行中的程序，也即当前在操作系统的某个虚拟处理器上运行的一个程序。操作系统特别注意确保独立的进程不会有意或者无意地破坏其他独立进程运行的正确性。也就是说，多个进程并发地共享同一个CPU以及其他硬件资源，而这一事实是透明的。一般来说，操作系统需要硬件支持来实现这种隔离。<br>而为了得到这种并发透明性需要付出较高的代价。类似于进程的概念，一个线程独立地执行自己的程序代码。然而，线程与进程不同的是，它不再试图去取得高度的并发透明性，进而提升性能。因此，线程系统一般至维护用来让多个线程共享CPU所必须的最少量信息。具体而言，<strong>线程上下文(thread context)</strong>中一般只包含CPU上下文及其他的线程管理信息。如线程系统可能会记录线程正在某个互斥变量被阻塞的信息，以避免执行该线程。而其他与多线程管理不是完全必要的信息都将被忽略。由此也导致了应用程序开发人员需要自己负责在单个进程中防止数据遭到某个线程不合法的访问。<br>线程的这个理念有两层含义：首先，多线程应用程序的性能至少不会比其单线程版本差，事实上常常能提高性能；其次，由于应用程序人员需要自己负责防止非法访问，设计合理并实现简单的原则会大有益处。</p><h3 id="非分布式系统中线程用法"><a href="#非分布式系统中线程用法" class="headerlink" title="非分布式系统中线程用法"></a>非分布式系统中线程用法</h3><p>多线程的最显著好处来自于这样一个事实：只拥有单线程的进程，一旦执行了造成阻塞的系统调用，整个进程都会被阻塞。<br>多线程的另一个优点是，在多处理器系统上执行多线程程序时，可以使用并行操作技术。在此情景下，每个线程占用一个CPU，而共享的数据则存储在共享主存中。如果设计得当，这种并行操作也可以是透明的：进程可以运行在单处理系统上，只是慢一些罢了。<br>多线程技术在大型应用程序上下文中也是很有用的。传统的大型应用程序多是作为一组相互协作的程序开发出来，其中每个程序都通过独立的进程来执行。如UNIX系统上的程序间协作就是通过进程间通信(IPC)实现的。但所有IPC机制都有一个主要缺陷，就是其中的通信需要开销庞大的上下文切换。而使用独立的线程也可以来执行不同的组成部分，进而构建出应用程序。各个组成部分之间的通信完全通过数据共享来处理。线程切换可以完全在用户空间中完成，也可以由内核来掌管线程并对它们进行调度。这样就可以极大的提升性能。<br>最后，使用线程还出于纯粹的软件工程上的考虑。有许多应用程序如果用一组相互协作的线程来构建，常常是比较简便的。</p><h3 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h3><p>线程一般是以线程包的形式提供的。这种包中含有创建与销毁线程的操作，以及对诸如互斥变量及条件变量之类的同步化变量的操作。有两种实现线程包的基本方法：第一个方法是可以构造一个完全在用户模型下执行的线程库；另一种方法是由内核来掌管线程并进行调度。<br>采用用户级线程库有很多好处。首先，创建和销毁线程的开销很小。由于所有线程管理工作都保持在用户地址空间中进行，线程创建的开销主要取决于为线程堆栈的建立和分配内存的开销。同样，销毁线程的工作主要是释放线程堆栈所占用的内存，因为线程销毁后它将不会再使用这些内存。另外，用户级线程还可以通过为数不多的几条指令来实现线程上下文的切换。基本上，只需要存储CPU寄存器值就可。<br>然而，用户级线程的主要缺陷在于：对引起阻塞的系统调用的调用将会立即阻塞该线程所属的整个进程，也就阻塞了所属进程中的所有其他线程。如上例所述，如果要将大型应用程序分为若干部分来构建，所有部分在逻辑上可以同时执行，那么线程是非常有用的；但如果在执行I/O过程中发生的阻塞妨碍了其他部分的执行；此时的用户级线程对于应用程序来说就成了鸡肋。<br>上述问题都可以通过在操作系统的内核实现线程的方法来解决。但这种解决方案要求每个线程操作(创建、删除、同步化等)都必须由内核来执行，都需要系统的参与。而这也很可能意味着线程上下文切换的开销与进程上下文切换的开销一样大。结果用线程替代进程的优点也不复存在了。<br>一种可行的解决方案是采用用户级线程和内核级线程的混合形式，也被称为<strong>轻量级进程(Lightweight Process, LWP)</strong>。LWP运行在单个重量级进程的上下文中，每个进程可以包含多个LWP。除了LWP外，系统还提供用户级线程包，向应用程序提供了创建和销毁线程等普通操作。另外，包中还提供了用户线程同步的工具，如互斥变量和条件变量。值得注意的是，线程包是完全在用户空间中实现的，即执行这些线程操作并不需要内核的干预。<br>线程包可以由多个LWP共用，如下图所示。这也意味着每个LWP可以运行自己的用户级线程。建立多线程应用程序时首先要创建用户级线程，随后分配每个用户级线程到一个LWP。将线程分配到LWP的行为一般是隐式的，且向程序员隐藏。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/lightweight%20process.PNG" alt="将内核模式的轻量级进程与用户级线程结合使用"><br>用户级线程和LWP多通过以下方式结合起来：<br>线程包中有一个用户调度线程的例程。在创建LWP(一般通过系统调用来创建)的时候，LWP得到自己的堆栈，并且执行调度例程，该调度例程会寻找下一个线程来执行。如果有多个LWP存在，每个LWP都会执行该调度里程。用来跟踪当前线程集的线程表是由各个LWP共享的。通过完全在用户空间中实现的互斥标识来对该表进行保护，以确保只能对它执行互斥访问。也就是说，各个LWP间的同步并不需要任何内核支持。如果LWP找到了一个可以运行的线程，它就将上下文切换到该线程。同时其他LWP也会寻找其他可运行的线程。如果线程由于互斥变量或者条件变量需要阻塞，它就会在完成必要的管理工作之后调用调度例程。如果找到另一个可以运行的线程，就会将上下文切换成该线程拥有的上下文。这种方法的优点在于：对于执行用户级线程的LWP来说，用户级线程上下文切换只是普通的程序代码，因为上下文切换完全在用户空间中实现。<br>现在考虑更为复杂的情形：线程进行系统阻塞的调用。在这种情况下，执行过程不再处于用户模式，而是转变到内核模式中，但仍然会在当前的LWP上下文中继续执行。在当前的LWP无法继续执行时，操作系统会将上下文切换到另一个LWP，这就意味着上下文重新切换回用户模式。被选中的LWP将会简单地从上一次停止的地方继续执行。<br>上述这种方式有许多优点。首先，线程创建、销毁及同步化工作的开销相对较小，并且根本不需要内核干预。其次，如果某个进程有足够数量的LWP，则阻塞的系统调用将不会导致整个进程被挂起。最后，通过在不同的CPU上执行不同的LWP，LWP可以在多处理器中方便地应用。拥有多个处理器这一事实也可以对应用程序完全隐藏。轻量级进程与用户级线程组合的唯一缺点是：必须进行LWP的创建和销毁工作，且这些工作的开销不比内核级线程的小。但是，值得庆幸的是，这种创建和销毁LWP的工作只是偶尔进行，且完全受操作系统的控制。<br>另一种可行的解决方案与LWP相似，就是<strong>调度例程激活(scheduler activation)</strong>。调度例程激活和LWP之间的本质区别在于：在调度例程激活中，当线程在系统调用中被阻塞时，内核对线程包进行<strong>上行调用(upcall)</strong>，调用调度例程来选择下一个可执行的线程来执行。当线程释放时，也进行相同的操作。但使用上行调用破坏了分层系统的结构，因而并不为人所待见。</p><h2 id="分布式系统中的线程"><a href="#分布式系统中的线程" class="headerlink" title="分布式系统中的线程"></a>分布式系统中的线程</h2><p>线程提供了一种方便的方式允许使用会导致阻塞的系统调用而不阻塞该线程所属的整个进程。这种特性使得在分布式系统中使用线程变得特别有吸引力，因为利用它可以极为方便地将通信表述为同时维护多个逻辑连接的形式。</p><h3 id="多线程客户"><a href="#多线程客户" class="headerlink" title="多线程客户"></a>多线程客户</h3><p>为了确立高度的分布透明性，在广域网上构建的分布式系统需要隐藏较长的进程间消息传播的时间。隐藏通信时间延迟的常规方法是启动通信后立即进行其他工作。<br>如Web浏览器一般在开始获取HTML页面后随机就显示它。为了尽量隐藏通信延时，某些浏览器在接收数据的过程中开始显示这些数据。从效果上看，就好像Web浏览器在同时进行多项任务一样。实践也表明，以多线程客户的模式来开发浏览器可以显著地使问题得到简化。只要取得了主HTML文件，就可以激活多个独立的线程，它们分别负责取得页面的各个部分。每个线程都与服务器建立一个独立连接以获取数据。只要假定进行导致阻塞的调用不会将整个进程吊起，与服务器建立连接和读取数据的过程就可以使用标准的(可能导致阻塞的)系统调用来编制。在可以同时打开多个连接的情况下，使用多线程的Web浏览器还有另一个明显的好处。在前述的例子中，建立了到同一个服务器的多个连接。然而在许多情况下，Web服务器会复制到多台机器上，每个服务器负责提供一组完全相同的Web文档。复制的服务器位于同一个站点，且名字是相同的。当对Web页的访问请求到来时，该请求被转发到其中的一个服务器，转发到哪一个服务器的决策通常是通过循环策略或者某些负载平衡技术做出的。同时，使用多线程客户与不同的服务器副本建立连接，也就可以并行地进行数据传输了，且确保整个Web文档完全显示出来所需的时间与使用无复制的服务器的情况相对要短得多。这种方案在客户真正能够处理输入数据的并行流时才能发挥作用，而使用线程也正是达到这个目的的理想方式。</p><h3 id="多线程服务器"><a href="#多线程服务器" class="headerlink" title="多线程服务器"></a>多线程服务器</h3><p>在分布式系统中，多线程技术应用在服务器端的作用实质上更大。实践表明，多线程技术不仅能够显著简化服务器代码，还能够使得应用并行技术来开发高性能的服务器变得更加容易，即使在单处理器系统上也是如此。而且目前多处理器计算机广泛地用作通用工作站，所以多线程就更加有用了。<br>为了理解使用线程给编写服务器代码带来的好处，考虑一下文件服务器的组织结构，该文件服务器可能会偶尔由于等待磁盘操作而阻塞。文件服务器一般等到输入的文件请求，随后执行该请求，最后送回应答。其中一种特别流行的组织结构如下图所示。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/multi-thread%20server.PNG" alt="以分发器/工作者模型组织起来的多线程服务器"><br>图中有一个被称为<strong>分发器(dispatcher)</strong>的线程，由它来读取文件操作请求。客户发送请求到服务器的某个已知端点。在对请求进行检查后，服务器选择一个空闲的(也就是阻塞的)<strong>工作者线程(worker thread)</strong>，由它来处理该请求。工作者线程在本地文件系统上执行<em>阻塞</em>的<code>read</code>调用，执行该调用将会导致该线程被挂起直至数据从磁盘上读出为止。如果该线程被挂起了，就选择另一个线程接着执行。如可以选择执行分发起以完成更多工作，也可能选做另外一个准备就绪的工作者线程来运行。<br>现在考虑不使用多线程的情况下文件服务器的编写方式。一种可能是让文件服务器作为单个线程来工作。由文件服务器主循环程序来获得请求，检验该请求，随后执行该请求直至完成后，然后再接受另一个请求。在等待磁盘操作的时候，服务器是空闲的，但也不对其他请求进行处理，即来自其他客户的请求得不到处理。这样做的结果就是，服务器每秒能够处理的请求数目大大减少。而使用线程能够显著提升性能，且每个线程都是以通常的方式编写的。<br>除此之外，在无法使用多线程的情况下，第三种可行方法就是将服务器作为一个大的有限状态机来运行。当请求输入的时候，由唯一的线程对请求进行检查，如果可以利用缓存中的内容来满足请求当然好，如果缓存的内容无法满足就必须向磁盘发出消息，请求执行磁盘操作。然而，向磁盘发出消息之后线程并<em>不阻塞</em>，而是在状态表中记录下该请求的当前状态，随后接收下一个消息。下一个消息可能是一个开始新工作的请求，也可能会是磁盘对之前的操作请求所做的应答。如果是新工作请求，就进行该工作。如果是来自磁盘的应答，就从表中取出之前记录下的那个请求的有关信息，对应答进行处理并把结果发送给客户。如果采用这种方式，服务器必须使用<em>非阻塞性</em>的<code>send</code>和<code>receive</code>调用。在这种设计中，前两种方式的“顺序处理”模型不见了。对每一个发送和接收消息来说，计算状态都必须显式地保存下来，存储在表中。从效果上看，实质上是在以一种复杂的方式模拟线程及其堆栈。进程是作为有限状态机来运行的，它在接收到一个事件之后根据其内容来决定采取的操作。</p><p>综上，多线程的作用已经很清楚了。多线程能够保留顺序处理的思路，使用阻塞性的系统调用，且仍然能够达到并行处理的目的。使用阻塞性系统调用能使编程更加容易，且并行处理能够提升性能。单线程服务器保留了使用阻塞性系统调用所带来的方便之处的话，就得放弃性能。而有限状态机的方法通过并行获得高性能，但由于使用非阻塞性系统调用，编程上较为困难。</p><table><thead><tr><th style="text-align:center">模型</th><th style="text-align:left">特征</th></tr></thead><tbody><tr><td style="text-align:center">多线程</td><td style="text-align:left">并行，使用会导致阻塞的系统调用</td></tr><tr><td style="text-align:center">单线程进程</td><td style="text-align:left">非并行，使用会导致阻塞的系统调用</td></tr><tr><td style="text-align:center">有限状态机</td><td style="text-align:left">并行，使用非阻塞系统调用</td></tr></tbody></table><h1 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h1><p>线程和进程提供了一种同时做多件事件的方式。从效果上看，它们可以用来构建看起来像同时执行的程序。在单处理器的计算机上，这种同时执行当然只是一种感觉。由于只有一个处理器，任一时间只能是某个线程或进程的一条指令在执行。通过在线程或进程之间的快速切换，给人的感觉是多个线程和进程在同时执行。<br>这种只有单个处理器但感觉由多个处理器机制可以扩展到其他资源，导致所谓的<strong>资源虚拟化(resource virtualization)</strong>。</p><h2 id="虚拟化在分布式系统中的作用"><a href="#虚拟化在分布式系统中的作用" class="headerlink" title="虚拟化在分布式系统中的作用"></a>虚拟化在分布式系统中的作用</h2><p>如下图所示，基本上每个分布式计算系统都提供了一个给上层软件的接口层。这个接口层涵盖的范围多种多样，从处理器提供的基本指令集到很多中间件系统提供的巨大的应用程序接口集。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/organzation%20among%20program%20interface%20and%20system.PNG" alt="程序、接口与系统之间的组织结构"><br>虚拟化<em>本质</em>上是扩展或替换一个现存接口来模拟另一个系统的行为。我们先来讨论下为什么虚拟化对分布式系统很重要。<br>虚拟化在上世纪七十年代提出的最重要原因就是让老的软件可以在新的昂贵的大型机上运行。随着硬件变得便宜，计算机功能更加强大，且操作系统种类变少，虚拟化也变得不那么重要。<br>然而从九十年代开始，下面几个原因促使事情又发生了变化：<br>第一，尽管硬件和底层系统软件变化得比较快，高层软件(比如中间件和应用软件)却稳定得多。也就是说，旧有软件的维护跟不上下层平台更新的步伐。通过移植旧有软件的底层接口到新平台，虚拟化可以帮助解决这个问题；另外，这也使得一大类的现有软件可以立刻在新平台上用。<br>第二，网络变得无处不在。在实践中，这种无所不在的网络互联使得系统管理员要维护很多不同的服务器。每台服务器运行不同的应用程序，可以被客户访问。同时多种资源应该很容易地被应用程序访问。虚拟化可以提供很大的帮助：通过让每个应用程序运行在自己的虚拟机上(可能包括运行在一个通用平台上的相关库和操作系统)，平台和机器的种类可以减少。</p><p>后一种虚拟化提供了高度的移植性和灵活性，而正是这些移植性的好处使得虚拟化成为分布式系统的重要机制。</p><h2 id="虚拟机体系结构"><a href="#虚拟机体系结构" class="headerlink" title="虚拟机体系结构"></a>虚拟机体系结构</h2><p>在实践中有很多种实现虚拟化的方法。为理解不同的虚拟化技术，首先要认识到计算机系统通常在四个不同层次上提供了四个不同的接口：</p><ol><li>由<strong>机器指令</strong>组成，可由任何程序激起的硬件软件接口</li><li>由机器指令组成，只能由特权程序(如操作系统)才可以激活的硬件软件接口</li><li>由操作系统提供的<strong>系统调用(system call)</strong>组成的接口</li><li>由库调用组成的接口，通常形成了所谓的<strong>应用程序编程接口(Application Programming Interface, API)</strong>。很多情况下前述的系统调用由API隐藏。</li></ol><p>下图显示了这些不同的接口层。虚拟化实质上就是模拟这些接口层的行为。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/some%20interface%20layers%20in%20compute%20system.PNG" alt="计算机系统多种接口"></p><p>虚拟化可采用两种方式。第一，可以构建一个运行时系统(runtime system)，实质上提供一套抽象指令集来执行程序。指令可以被翻译执行(如Java运行环境)，也可以仿真执行，如在Unix平台上运行Windows应用程序。在后一种情况下，仿真器必须模拟系统调用的行为，这种虚拟化被称为<strong>进程虚拟机(process virtual machine)</strong>，用以强调虚拟化实质上作用在单个进程上。<br>另一种虚拟化方式是提供一种系统。把它做成一层完全屏蔽硬件但提供一个同样指令集(或其他硬件)的接口。关键是这个接口可以同时提供给不同的程序。如此就可以由多个不同的操作系统独立并发地运行在同一个平台。这个层通常叫做<strong>虚拟机监视器(Virtual Machine Monitor, VMM)</strong>。这种方法的典型例子就是VMware和Xen。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/process%20virtual%20machine%20and%20virtual%20machine%20moniter.PNG" alt="进程虚拟机 及 虚拟机监视器"></p><p>值得注意的是，虚拟机监视器对分布式系统的可靠性和安全性起着越来越重要的作用。由于它们能分离一个应用程序和它的环境，由错误或安全攻击引起的失败不再会影响整个机器。而且如前所述，由于虚拟机监视器进一步分离了硬件和软件，允许一个完整环境从一台机器移植到另一台机器，移植性得到了很大改善。</p><h1 id="客户"><a href="#客户" class="headerlink" title="客户"></a>客户</h1><p>这一节将更加细致地讨论客户。</p><h2 id="网络连接的用户接口"><a href="#网络连接的用户接口" class="headerlink" title="网络连接的用户接口"></a>网络连接的用户接口</h2><p>客户机器的主要任务是让个人用户和远程服务器相交互。有两种方式支持这种交互。一是，对每种远程服务，客户机都有一个独立的部分来通过网络联系这种服务。在这种情况下，一个应用级别的协议就可以处理同步，如下图中左半部分所示。第二种方式是通过提供一个方便的用户接口来对远程服务器直接访问。从效果上看，客户机只是作为终端，不需要本地存储，就有了下图右半部分所示的不依赖应用程序的方案。如果是网络连接的用户接口，一切都在服务器处理的和存储。由于互联网的扩展和手持设备变得更加成熟，并且该种方案也简化了系统管理，这种<strong>瘦客户(thin client)</strong>的方法吸引更多的注意。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/organization%20of%20servers-clients.PNG" alt="网络连接的用户接口的不同解决方案"></p><h2 id="客户端软件与分布透明性"><a href="#客户端软件与分布透明性" class="headerlink" title="客户端软件与分布透明性"></a>客户端软件与分布透明性</h2><p>客户端软件不仅仅包含用户接口。在许多情况下，客户-服务器应用程序中的部分处理和数据级工作是在客户端执行的。<br>除了用户接口和其他应用相关软件之外，客户端软件中还包含用于获得分布式透明性的组件。理论上说，客户端不应该察觉到它与远程进程的通信。相反，对于服务器来说，出于性能和正确性方面的考虑，分布常常不那么透明。<br><strong>访问透明性</strong>往往是由客户端存根处理的，该存根由服务器提供的接口定义生成。存根提供的接口与服务器所提供的相同，但前者隐藏了不同机器的体系结构上及实际通信上可能存在的差异。<br><strong>定位透明性</strong>、<strong>迁移透明性</strong>及<strong>重定位透明性</strong>的处理则方式更多。关键是要使用一个便利的命名系统，这将在后续博客中予以说明。很多时候与客户端软件的协作也很重要，如假若客户已经绑定到服务器，改变服务器的位置时就可以直接通知它。这时可以由客户的中间件负责对用户隐藏服务器的当前位置，并且在必要的时候透明地重新绑定到服务器上。即使在最坏的情况下，也只不过是客户应用程序会察觉到暂时的性能下降而已。<br><strong>复制透明性</strong>的解决方案与上述类似。假设我们现在面临的场景是一个带有副本服务器的分布式系统，可以通过将调用请求转发给每一个服务器的副本来达到复制透明性，如下图所示。客户代理将会透明地搜集所有对象的响应，并只向客户应用程序送回一个返回值。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch3/client%27s%20solution%20of%20replication.PNG" alt="使用客户端解决方案来透明地访问副本服务器"><br><strong>故障透明性</strong>往往是客户端软件需要考虑的最后一个透明性。对服务器通信故障的屏蔽一般是通过客户中间件完成的，比如说可以对客户中间件进行配置，使它不断尝试连接到某服务器，或者在进行几次尝试(并失败)后尝试连接到其他服务器。有时甚至可以让客户中间件返回它在前一次与该服务器的会话中缓存的内容。<br><strong>并发透明性</strong>可以通过专门的中介服务器来实现，特别是可以由事务监视器来实现，而且需要客户软件的支持很少。同样，<strong>持久透明性</strong>一般完全由服务器来处理。</p><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>现在来详细讨论下服务器的组织结构。</p><h2 id="常见的设计问题"><a href="#常见的设计问题" class="headerlink" title="常见的设计问题"></a>常见的设计问题</h2><p>服务器是实现特定服务的进程，这些服务是为一组客户提供的。本质上，每个服务器的组织方式都是一样的：等待来自客户的请求，随后负责处理该请求，最后等待下一个输入的请求。但具体到设计层面，可以分为<em>组织结构</em>、<em>感知端口</em>、<em>中断工作</em>及<em>有无状态</em>。</p><h3 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h3><p>服务器有几种不同组织结构：<strong>迭代服务器(iterative server)</strong>自己处理请求，并且在必要的情况下将响应返回给发出请求的客户；<strong>并发服务器(concurrent server)</strong>并不自己处理请求，而是将请求传递给某个独立线程或者其他进程来处理，自身立即返回并等待下一个输入的请求。多线程服务器是并发服务器的一个特例。并发服务器的另一种实现形式，就是每收入一个输入请求都派生出一个新进程来对其进行处理。在许多UNIX系统中都采用了这种方法。在这种方法中，由处理请求的线程或者进程负责向发出该请求的客户返回响应。</p><h3 id="感知端口"><a href="#感知端口" class="headerlink" title="感知端口"></a>感知端口</h3><p>另一个问题是客户联系服务器的地方。客户总是向服务器所在机器上的端点(end point)发送请求，端点也称为<strong>端口(port)</strong>。每个服务器都监听一个特定的端口。但客户如何感知到某个服务所对应的端口呢？<br>一种方法是为已知的服务分配一个统一的端口。这些端口由因特网号码分配管理局(IANA)来组织分配。由于已分配的端口是已知的，客户只需要找出运行服务器的机器的网络地址即可。<br>而针对那些并不需要预先分配好端口的服务而言，客户首先必须查询到该端口号。一种解决方式是在运行服务器的每台机器上都运行一个特殊的守护进程，该进程负责跟踪位于同一台机器上的服务器实现的每一项服务所使用的当前端点。另外守护进程还监听一个已知的端口。客户通过该端口与该进程进行联系，请求得到指定服务器的端口后，再与该服务器进行联系。<br>但如果每一项服务都由单独的服务器来实现，无疑是对资源的一种浪费，因为这些服务器大多都被动等待客户端的请求输入。与其对这么多被动进程进行跟踪，不如由一个<strong>超级服务器(superserver)</strong>来负责监听所有与这些服务关联的端口更有效率。当超级服务器收到请求时，它会派生出一个进程以对该请求进行进一步处理，这个派生出的进程会在处理完毕后自动退出运行。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch3/howto-bing%20client-server.PNG" alt="绑定客户-服务器的不同方式"></p><h3 id="中断工作"><a href="#中断工作" class="headerlink" title="中断工作"></a>中断工作</h3><p>在设计服务器时还需要考虑，是否可以以及怎样中断服务器的工作。比如，在FTP服务中，如果用户上传了一个庞大的文件，但突然意识到选错了文件，想要终端服务器程序，取消数据传输。针对这个问题，有以下几种方法可以做到这一点。<br>第一种在当前的因特网环境下工作得非常好(有时这是唯一的可选方法)，那就是让用户立即强行退出客户应用程序，这就自动中断与服务器之间的连接。服务器也将断开客户应用程序原来的连接，并且认为客户端发生了崩溃。第二种处理这类通信中断的方法就是在开发客户程序和服务器程序的时候考虑到对<strong>带外(out-of-band)</strong>数据发送的支持。带外数据是服务器在处理客户发送的其他所有数据之前必须处理的数据。这又可以分为两个具体的解决方案，一种是让客户将带外数据发送到一个另外的控制端口，服务器监听该端口，同时以较低的优先级监听常规数据传输的端口。另一种方式是通过发送原始请求所使用的连接来发送带外数据.如在TCP中,传输紧急数据是可能的.当服务器接收到紧急数据时，服务器就被中断，随后服务器可以检查紧急数据并且根据数据类型来决定采取何种处理方式。</p><h3 id="有无状态"><a href="#有无状态" class="headerlink" title="有无状态"></a>有无状态</h3><p>最后一个设计上的问题就是服务器是否是<strong>状态无关的(stateless)</strong>。状态无关服务器不保存其客户的状态信息，而且也不将自身的状态变化告知任何客户。如Web服务器就是状态无关的。值得注意的是在很多状态无关的设计中，服务器实际是维护客户信息的，但重要的是即使这些信息丢失，也不会打断所提供的服务。如Web服务器常会记录下所有的客户请求，这对于决定是否应该复制某些文档，和应该复制到哪儿是很有用处的。显然，若日志丢失，顶多服务器的性能会受到影响，而不会有别的什么。另外一种特别的状态无关设计就是服务器维护一种叫<strong>软状态(soft state)</strong>的信息。这种信息，服务器会维持客户状态，但仅维持一小段时间；时间到期后就删除相关客户信息，恢复到无状态行为。<br>相反，<strong>状态相关服务器(stateful server)</strong>一直保存客户端的信息直到显式地删除。而这种服务器的典型例子就是文件服务器，它让客户保留文件的本地副本，甚至进行更新操作。文件服务器维护一张表，表中条目是客户-文件对，服务器可以利用该表格来跟踪目前哪些客户拥有对哪些文件的更新许可，并且跟踪哪里的文件的版本是最新的。<br>状态相关设计的一个<em>重要好处</em>就是相对于状态无关服务器的性能提升。然而，维护服务器状态也会带来相关的主要缺陷：一般来说，状态相关服务器必须将自身的整个状态都恢复到崩溃之前，而建立恢复机制将引入相当大的复杂性；如果采用状态无关设计，就不需要采取任何特殊措施来使崩溃的服务器恢复，只要简单地重新启动运行服务器，然后继续等待客户请求达到就行了。<br>也有学者认为应当区分临时的<strong>会话(session)状态</strong>和永久状态。上面的文件服务器就是典型的会话状态：此状态和一单个用户的一系列操作相联系，因此应该仅仅维持一小段时间，而不是长久。在涉及三方的客户-服务器结构中，会话状态通常被维持。在对请求客户做出响应前，应用程序服务器需要通过一系列查询来存取数据库服务器。在这个结构中，如果客户能重新发出原来的请求，则即使会话状态丢失，也不会有实际损害。因此可以用更加简单和更加不可靠的状态记录。而永久状态记录的通常是数据库中维护的信息，如客户信息等。然而，对大多数维护会话状态意味着状态相关设计，当系统失败时要求特殊措施，需要显式地假设服务器会长时间保持状态。</p><p>在设计服务器时，无论选择采取状态无关还是状态相关的设计都不应该对服务器所提供的服务造成影响。如：如果在读取文件或者写入文件之前必须打开该文件，那么状态无关服务器就必须用这样或那样的方法模拟这一打开文件的行为。通常的解决方法是，服务器响应对文件的读写请求时首先打开指定的文件，然后再执行实际的读写操作，最后立即关闭该文件。在某些情况下，服务器需要保留客户的活动记录，以便更加有效地响应客户的请求。如在Web服务器中有时可以立即将客户引导到该客户最常浏览的页面。只有在服务器拥有关于该客户的历史信息的情况下，这种方法才能实施。如果服务器不能维持状态，一种常用的方法是让客户在发送请求的同时发送关于前一次访问的额外信息。如在Web中，这种信息常常由客户端浏览器透明地存储在cookie中。</p><h2 id="服务器集群"><a href="#服务器集群" class="headerlink" title="服务器集群"></a>服务器集群</h2><p><strong>集群计算(cluster computing)</strong>也是一种分布式系统，我们现在来仔细考察一下服务器集群的组织及由它带来的设计问题。</p><h3 id="常见的组织"><a href="#常见的组织" class="headerlink" title="常见的组织"></a>常见的组织</h3><p>简单说，服务器集群只是一组经网络连接的机器，每台机器运行一个或多个服务器。我们此处讨论的服务器集群是特指经局域网连接的机器，能够提供高带宽和低延迟。<br>多数情况下，服务器集群逻辑上由三层(tier)组成，如下图所示。第一层是一个逻辑上的交换机，由它分配客户请求给服务器。交换机在功能上可变化很多。如传输层交换机接收TCP连接请求，再转发给集群中的某个服务器。而Web服务器与之完全不同，它接收HTTP请求，但只转发一部分给应用服务器作继续处理，然后收集结果并返回HTTP响应。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch3/three-tiers%20cluster%20computing.PNG" alt="三层服务器集群通常的结构"><br>就如所有的<strong>多层(multtiered)</strong>客户-服务器体系结构一样，很多服务器集群也包含了专用于应用处理的服务器。在集群计算中，这通常是运行在高性能硬件上专用于提供计算能力的服务器。然而，在企业服务器集群中，应用程序可能只需要运行在相对低端的机器上，因为此时的瓶颈不是计算能力而是数据存取。这就出现了第三层，它由数据处理服务器组成，即文件和数据库服务器。按照服务器集群的使用目的，这些服务器可能运行在配置作为高速磁盘存取和拥有很大数据缓存的专用机器上。当然，并不是所有服务器集群都遵循这种严格的区分。常常是每台机器都有自己的本地存储，把应用和数据处理集成在单个服务器中，导致一种两层体系结构。如：当通过服务器集群处理流媒体时，通常采用两层体系结构，每台机器作为专用的媒体服务器。<br>在服务器集群提供很多服务情况下，不同机器可能运行不同的应用服务器。因此，交换机必须能够区分请求的服务，否则它不能正确地转发请求给适当的机器。很多第二层机器仅运行单个应用程序。这种限制可能来自于对适用的软件和硬件的依赖，也可能是由于不同的应用程序由不同的管理员来管理。因此，这就有可能出现某些服务器暂时空闲，但其他机器却收到了<strong>过载(overload)</strong>的请求。这种情况下暂时迁移服务到空闲机器会管用。<br>现在再来仔细讨论下由交换机组成的第一层。一个重要的服务器集群设计目标是隐藏有多个服务器的事实。也就是说，运行在远程机器上的客户应用程序不应该需要知道集群的内部组织结构。这种存取透明性通过单个访问点来实现，由某种硬件交换机实现，如一台专用机。交换机形成了集群入口，提供唯一的网络地址。为了可扩展性和可用性，服务器集群可能有多个访问点，每个访问点由一个独立的专用机器实现。但我们此处仅考虑单访问点的情况。<br>一种标准的存取服务器集群的方式是建立一个TCP连接，在这之上应用级别的请求可作为一个会话的一部分来发送。通过撤销连接可以结束会话。在传输层交换机的情况下，交换机接收到来的TCP连接请求，转发这些请求给一台服务器。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch3/tcp%20transfer.PNG" alt="TCP转发的原理"><br>当交换机收到一个TCP连接请求时，它随机找到处理该请求的最佳服务器，并转发该请求包给这个服务器。服务器反过来发送一个应答给请求的客户，但把交换机的IP地址插入到承载TCP数据段的IP包头的源地址域。注意，为了让客户继续执行TCP协议，这种欺骗是必需的，因为客户在期望交换机的应答，而不是以前从未听说过的某个服务器。显然，实现TCP转发需要<em>操作系统级别</em>的修改。</p><p>我们也可以看到，交换机对在多个服务器之间分配负荷能起到重要作用。通过决定往哪儿转发请求，交换机也决定了哪个服务器来对请求作进一步处理。交换机可以用的最简单的负载平衡策略就是<strong>轮转法(round robin)</strong>：每次都从列表中选出下一个服务器然后转发请求给它。也可以用更高级的服务器选择策略。假设集群提供多个服务，如果当请求到来时交换机能区分它们要求的服务，则交换机有更多的信息来决定往哪儿转发请求；如果服务可以通过端口来区分，则这种服务器选择就是发生在传输层。再进一步的是让交换机实际检查到来请求的负载，只有在知道负载的结构时才可用这种方法。如在Web服务器的情况下，交换机期待HTTP请求，基于这个请求的信息来决定谁来处理它。除此之外，基于Web的系统还有<strong>内容感知的请求分布(content-aware request distribution)</strong>。</p><h3 id="分布式服务器"><a href="#分布式服务器" class="headerlink" title="分布式服务器"></a>分布式服务器</h3><p>到现在为止，讨论的服务器集群通常都是相当静态地配置的。在这些集群中，通常有一个独立的管理机器用来跟踪可用的服务器，并适当地传递这些信息给别的机器，如交换机。如上所述，我们提到的绝大多数服务器集群提供单个访问点。当这个访问点失效时，无法使用集群。为了消除掉这个隐患，可以提供几个访问点，公开它们的地址。如域名解析系统能返回几个地址，所有的都对应于同一个主机名。如果其中一个地址失效，这种方法还会要求客户重试几次。但它也没有解决要求静态访问点的问题。<br>无论从用户还是服务器的观点来说，稳定性，如长期有效的访问点，都是一个所希望的特性。从另一方面来说，我们也希望在配置服务器集群(包括交换机)时有高度的灵活性。这导致了一种分布式服务器的设计。分布式服务器只是指可动态变化的一个机器群，它的访问点也可以变化，但对外却表现为一台强有力的单台机器。<br>分布式服务器的<strong>基本思想</strong>是客户从一个可靠的、高性能的、稳定的服务器受益。通过透明地组合简单的机器成为一个集群并且不依赖单台机器的可用性，有可能达到比单个高性能服务器更好的稳定性。如这样一个集群可以从用户机器上动态地配置，就像在合作的分布式系统中那样。<br>现在集中考虑如何在这样一个系统中实现一个稳定访问点。其主要的思想是利用可用的网络服务，如IP版本6的移动支持(MIPv6)。在MIPv6中，一个移动结点假设有一个<strong>宿主网络(home network)</strong>，通常呆在这个网络中并有稳定的地址，称为<strong>宿主地址(home address)</strong>。宿主网络有一特别的路由器，称为<strong>宿主代理(home agent)</strong>。当移动结点不在时，它将会处理送给移动结点的<strong>网络包(traffic)</strong>。当移动结点附着到一个外部网络时，它会收到一个临时<strong>需要的地址(care of address, CoA)</strong>，其他结点可以发送网络包给这个地址。这个临时地址通告给宿主代理，它随后就会转发送给移动结点的网络包到这个临时地址。注意，与移动结点通信的应用程序只会看到移动结点在宿主网络中的地址，而看不到那个临时地址。<br>这个原理可用来为分布式服务器提供稳定的地址。在这种情况下，给集群分配一个唯一的联系地址。联系地址是服务器生命周期内和外界通信的地址。任何时候分布式服务器都有一个结点作为联系地址的访问点，这个角色可以容易地被另一个结点取代。访问点在分布式服务器所在网络的宿主代理注册自己的地址为临时地址。这时所有的网络包都会导向访问点，它然后分配请求给当前参与分布式服务器的结点。若访问点失效，一个简单容错机制启动，另一个访问点会被选出并注册为一个新的临时地址。<br>这种简单的配置会使宿主代理和访问点成为潜在的瓶颈，因为所有的网络流量都要流经这两台机器。这种情形可以用MIPv6的一个称为<strong>路径优化(route optimization)</strong>的特性来避免。其如下工作：每当一个移动结点(宿主地址HA)注册为它的当前临时地址，记作CA，宿主代理能转发CA给客户。后者将会把(HA，CA)对存储在本地。从那时起，通信将直接送给CA。尽管客户端的应用程序还要使用宿主地址，MIPv6的底层支持软件会把这个地址翻译为CA，然后实际通信都用CA。<br>路径优化可以用来使不同的客户认为它们在和同一个服务器通信，而实际上这些客户是在和分布式服务器的不同的成员结点通信的，示意图如下。为了做到这点，当分布式服务器的访问点转发客户C1来的一个请求给结点S1(地址为CA1)时，它传递足够的信息给S1，让S1启动路径优化过程从而让客户相信S1临时地址是CA1.这将允许C1记下(HA，CA1)对。这个过程中，C1和S1的通信由访问点(还有宿主代理)来转发。这将使得宿主代理相信临时地址没有变化，从而继续和访问点通信。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch3/route%20optimization%20in%20distributed%20server.PNG" alt="分布式服务器的路径优化"><br>当然，路径优化的过程中，可能有别的客户的请求进来。这些请求会在访问点处于等待状态，直到它们可以被转发。比如说，从客户C2来的一个请求被转发给成员结点S2(地址CA2)，允许S2让客户记下(HA，CA2)对。因此，不同的客户将会直接和分布式服务器的不同的成员通信，而每个客户应用程序却觉得服务器地址只是HA。宿主代理继续和联系地址上的访问点通信。</p><h2 id="管理服务器集群"><a href="#管理服务器集群" class="headerlink" title="管理服务器集群"></a>管理服务器集群</h2><p>对外部而言，服务器集群应当表现得像单台计算机。然而当涉及到管理时，情况就很不一样了。</p><h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><p>目前为止最通用的管理服务器集群的方法是把传统的单台计算机的管理功能扩展到服务器集群上。最原始的做法是使管理员能从远程客户登录到集群的一个结点并执行本地管理命令来监控、安装和改变<strong>组件(component)</strong>。<br>稍微高级点的做法是不需要显式登录到每一个结点，而是在一个管理机器上提供接口，允许从一个或多个服务器收集信息。升级组件、增减结点等。这种方法的好处是更容易提供集体操作(即面向一组服务器的操作)。它在实践上广泛应用。<br>但是，当集群增长到超过几十个结点时，这种管理方法就很难奏效了。很多数据中心需要管理几千台服务器，它们被组织成很多互相合作的集群。对这种应用使用集中式的管理服务器是不可能的。另外，容易看到大规模集群需要持续的维修管理(包括升级)，这是因为在大规模集群的情况下失效成为常态。<br>事实证明，对大型服务器集群的支持还无规则可循。有很多应该考虑的经验方法，但没有系统性的方法来针对大规模的系统管理。尽管我们可以预期在取得更多的经验后，自我管理方案最终会应用于这一领域，但集群管理现在还基本上处于起步阶段。</p><h1 id="代码迁移"><a href="#代码迁移" class="headerlink" title="代码迁移"></a>代码迁移</h1><p>到现在为止，我们所讨论的分布式系统所进行的通信仅限于传递数据。而在某些情况下需要传递程序(甚至可能需要传递正在执行中的程序)，以简化分布式系统设计。</p><h2 id="代码迁移方案"><a href="#代码迁移方案" class="headerlink" title="代码迁移方案"></a>代码迁移方案</h2><p>我们先来探讨下代码迁移是否有好处；如果有，又具体是怎样的。</p><h3 id="进行代码迁移的理由"><a href="#进行代码迁移的理由" class="headerlink" title="进行代码迁移的理由"></a>进行代码迁移的理由</h3><p>传统上，分布式系统的代码迁移是以<strong>进程迁移(process migration)</strong>的形式进行的，这种做法十分复杂且开销庞大。而背后的理由也很简单：<strong>出于性能上的考虑</strong>。其基本的思想是：如果把进程由负载较重的机器上转移到负载较轻的机器上，就可以提升系统的整体性能。而负载常常是用CPU队列长度或者CPU利用率来衡量的，也可以使用其他性能指标衡量。<br>负载分布算法决定了任务在一组处理器上的分配和重新分布。这种算法对于计算任务繁重的系统尤其有效。然而，在许多现代分布式系统中，<em>对计算能力的优化不如通信量的减少重要</em>。这往往也是进行代码迁移的基本假定：处理数据的地点离数据所在地点越近越好。此外，由于底层平台和计算机网络的异构性，代码迁移所能够带来的性能提升常常是基于定性推导得出的，而不是通过数学模型计算出来的。<br>对于代码迁移的支持，还可以通过<em>并行</em>的使用来提升性能，而不会带来通常的并行编程所具有的复杂性。典型示例就是Web信息的搜索：以一种便于在站点之前移动的小程序的形式来实现这种搜索查询会相对简单；可以制作这种程序的多份副本，并且将每一份副本发送给不同的站点；与只使用单个程序相比，这样做可以使得速度得到线性提升。<br>除了性能提升之外，代码迁移还有一个重要的原因就是<strong>灵活性</strong>。构建分布式应用程序的传统方法是将应用程序分为不同部分，预先确定每一个部分应该在何处执行。依照这种方案执行就会产生之前讨论过的各种多层客户-服务器应用程序。<br>然而，如果代码可以在不同机器之间移动，就可以动态地配置分布式系统。比如，假定某个服务器实现了访问某个文件服务器的标准化接口。为了让远程客户访问文件服务器，服务器必须使用专门的协议。一般来说，基于这种专门协议的文件系统接口的客户端实现需要与客户端应用程序连接起来。这种方案要求在<em>开发</em>客户应用程序时就必须有可用的协议软件。另一种方法是旨在确实必要的时候让服务器提供客户的实现，也就是当客户绑定到服务器的时候。此时客户动态地下载该实现，经过某些必需的初始化步骤后激活该服务器。这种将代码由远程站点动态移来的模型要求下载和初始化代码的协议是标准化的；同时还要求下载的代码能够在客户所在机器上执行。这种动态下载客户端软件的<em>优点</em>在于，客户不需要预先安装与服务器通话所需的所有软件，可以在必要的时候将软件移来，同样也可以在不再需要该软件的时候将其丢弃。另一个<em>优点</em>是，只要接口是标准化的，就可以不受限制地改变客户-服务器协议及其实现，所做的改动并不会影响到现有的依赖于服务器的客户应用程序。但它的缺点也是存在的，最严重的缺点就是安全性方面的问题。</p><h3 id="代码迁移模型"><a href="#代码迁移模型" class="headerlink" title="代码迁移模型"></a>代码迁移模型</h3><p>虽说代码迁移只是在机器间移动代码，但该名词的内涵十分丰富。传统上，分布式系统中的通信是关于进程间数据交换的。最广义的代码迁移可以涉及在机器间移动程序，目的是在目标机器上运行该程序。在某些情况下，与进程迁移相同，必须同时移动程序执行状态，未处理信号及其他部分环境内容。</p><p>为更好地理解代码迁移的不同模型，我们遵从前人提出的框架结构，将进程划分为三段。<strong>代码段(code segment)</strong>部分包含构成正在运行的程序的所有指令；<strong>资源段(resource segment)</strong>包含指向进程所需要的外部资源的指针，这些外部资源包括文件、打印机、设备及其他进程等；最后是<strong>执行段(execution segment)</strong>，它用来存储进程的当前执行状态辆，这些状态量包括私有数据、栈和程序计数器等。<br>代码迁移的最弱形式是仅仅提供<strong>弱可移动性(weak mobility)</strong>。在这种模型中，可以只传输代码段及其某些初始化数据。弱可移动性的典型特征是，传输过来的程序总是从预先定义的几个位置之一开始执行。如Java小程序(applet)。<br>与弱可移动性相反，在支持<strong>强可移动性(strong moility)</strong>的系统中，还可以传输执行段。强可移动性的典型特征是，可以先停止运行中的进程，然后将它移到另一台机器上去，再从刚才中断的位置继续执行。很明显，强可移动性要比弱可移动性强大很多，但是也更加难以实现。</p><p>另外也可以通过是由发送者启动迁移还是接受者启动迁移来对迁移做进一步区分。在<strong>发送者启动(sender-initiated)</strong>的迁移中，代码当前驻留在哪台服务器或者正在哪台机器上执行，就由该机器来启动迁移。一般来说，往往计算服务器上载程序时后者正在哪台机器上执行，就由该机器来启动迁移。一般来说，往往计算服务器上载程序时进行的就是发送者启动的迁移。另一个例子就是通过因特网想Web数据库发送搜索程序以在该服务器上进行查询。在<strong>接受者启动(receiver-initiated)</strong>的迁移中，代码迁移的主动权掌握在目标机器手中。实例即如Java小程序。<br>接受者启动的迁移一般会比发送者启动的迁移更容易实现些。在发送者启动的迁移情形下，常常要求客户端预先在服务器上注册并通过验证。也就是说，要求服务器了解它的所有客户。相反，如果是接受者启动的迁移，代码下载工作一般可以用匿名进行。此外，服务器一般并不对客户资源感兴趣，而向客户端进行代码迁移只是为了提升客户端的性能。</p><p>在弱可移动性的情况下，迁移过去的代码是否由目标进程执行，还是重新启动一个单独的进程来执行，也存在区别。如Java小程序可以简单地由Web浏览器下载之后在浏览器的地址空间中执行。这种方法的好处就是不需要启动单独的进程，也就避免了与目标机器进行通信，而主要缺陷就是目标进程必须得到保护，以免在迁移来的代码的执行过程中受到有意或无意的侵害。单单针对这点的解决方案就是，由操作系统来进行管理，创建一个单独的进程来执行迁移来的代码。要注意，这种解决方法并没有解决刚才提出的资源访问方面的问题。<br>在强可移动性的情况下，除了直接移动正在运行的进程，也可以通过<strong>远程克隆(remote cloning)</strong>的方式来支持。与进程迁移不同，克隆将制造一份与原始进程完全相同的副本，但运行在不同的机器上。克隆的<em>优点</em>是克隆得到的进程与原来已经在多个应用程序中使用的进程极为相似，唯一的不同点在于：克隆得到的进程是在另一台机器上运行的。从这个意义上来说，通过克隆来迁移是一种分布透明性的简单方法。</p><p>代码迁移的各种不同方法如下所示：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch3/methods%20of%20code%20migration.PNG" alt="代码迁移的各种不同方法"></p><h2 id="迁移与本地资源"><a href="#迁移与本地资源" class="headerlink" title="迁移与本地资源"></a>迁移与本地资源</h2><p>上面讨论了代码段和执行段的迁移，该节关注<strong>资源段</strong>的迁移。代码迁移之所以如此困难，就是因为有时资源段在不做改动的情况下难以与其他段一同迁移。<br>为了理解代码迁移与资源段的关系，学者将进程对资源的绑定方式分为三类。<em>最强</em>的绑定方式是进程使用资源的标识符来引用资源。这种情况下，进程明确指定的只是要引用哪些资源。这种绑定被称为<strong>按标识符绑定(binding by identifier)</strong>，如进程使用URL来引用特定Web站点。进程对资源的绑定的一种<em>较弱</em>方式是，只使用资源的值。这种绑定方式被称为<strong>按值绑定(bingding by value)</strong>。此情形下，只要另一个资源能够提供一样的值，进程的执行就不会受到影响。如依赖标准库的C语言程序，本地只需要 保证这些库可用即可。进程对资源的绑定的<em>最弱</em>方式是，进程只需要指明它需要哪一种类型的资源。这种被称为<strong>按类型绑定(binding by type)</strong>，对诸如监视器、打印机等本地设备的引用都是按类型绑定的例子。</p><p>在进行迁移代码的过程中，我们常常需要在不影响进程对资源的绑定的条件下改变指向资源的引用。具体而言，需要就资源对机器的绑定方式进行考察，并区分为以下几种情况进行考虑。<strong>未连接资源(unattached resources)</strong>可以方便地在机器之间移动，这种资源一般都是与要迁移的程序相关的数据文件。<strong>附着连接资源(fastened resource)</strong>也可以进行复制或移动，但代价较大。具体实例如本地数据库等。虽然在理论上并不依赖于当前的机器，但是将它们移动到另外的环境往往是并不可行的。最后一种是<strong>紧固连接资源(fixed resource)</strong>，这种资源紧密地绑定到特定的机器或者环境中，无法进行移动。本地设备一般是紧固连接资源。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/ch3/different%20ways%20to%20different%20resources.PNG" alt="根据引用资源方式的不同所应该采取的不同做法"></p><h2 id="异构系统中的代码迁移"><a href="#异构系统中的代码迁移" class="headerlink" title="异构系统中的代码迁移"></a>异构系统中的代码迁移</h2><p>之前的讨论都有一个隐含的前提：迁移后的代码能够在目标机器上很好地执行。如果是同构网络，这个前提是成立的。然而对于异构平台基础上的分布式系统，可能各个结点各自的操作系统和机器体系结构都不同。在这种系统内的迁移就显得十分困难。<br>而异构性的解决方法非常相似，就是生成用于抽象虚拟机的与机器无关的中间码。这类解决方法的共同点是它们都依赖于虚拟机，该虚拟机要么直接解释源代码(如脚本语言)，要么就解释由编译器生成的中间代码(如Java)。<br>近些年来的工作已经开始弱化对编程语言的依赖，特别地，有些提出的方法不仅迁移进程，而且迁移整个计算环境。基本思想是拆分综合环境并给予进程对自己计算环境的同样的观感。如果适当地拆分，有可能把底层系统的一部分分离出来并把它迁移到别的机器。用这种方法，进程迁移将实际上提供某种形式的强可移动性。</p>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> distributed-system </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> distributed system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统 - 体系结构]]></title>
      <url>http://www.wrran.com/blog/2017/12/17/review/distributed-system/2-architecture/</url>
      <content type="html"><![CDATA[<blockquote><p>三个臭皮匠赛过诸葛亮</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>察看分布式系统的组织结构的方法有多种，其中常见的一种是区分软件组件集的逻辑组织和实际物理实现的差别。<br>分布式系统的组织结构主要是指组成该系统的软件组件。<strong>软件体系结构</strong>告诉我们不同的软件组件是如何组织的，它们应该如何相互作用。分布式系统的真正实现要求我们真实地把软件组件放置在真实的机器上，这样做的选择有很多种。软件体系结构的最终实例又被称为<strong>系统体系结构</strong>。<br>分布式系统的一个重要目的就是：通过提供一个中间件层，把应用程序与底层平台分开。采用这一层是一个重要的体系结构决策，其目的是提供分布式透明性。但其背后的代价就是需要不同的技术来使得中间件为可适应的。通过使分布式系统监视自己的行为，当需要时采取适当的措施，就可以获得<em>适应性</em>。这就导致了<strong>自治系统</strong>的出现，该系统多组成反馈控制循环的形式，形成了系统设计中一个重要的体系结构元素。</p><h1 id="软件体系结构"><a href="#软件体系结构" class="headerlink" title="软件体系结构"></a>软件体系结构</h1><p>我们首先将分布式系统的逻辑组织结构看为软件体系结构来开始其体系结构的讨论。体系结构样式是根据组件、组件之间互相的连接方式、组件之间的数据交换以及这些元素如何集成到一个系统中来定义的。<strong>组件</strong>是一个模块单元，它具有并且可以提供良好定义的接口，在其环境中是可替换的。<strong>链接器</strong>常被描述成这样一种机制：在组件之间传递通信、使组件互相协调和协作，如一个链接器可以利用远程过程调用、消息传递或数据流来形成。<br>根据组件和链接器的使用，出现了不同的配置，而被划分为不同种类，下列四种是其中最为重要的：</p><ol><li>分层体系结构。</li><li>基于对象的体系结构。</li><li>以数据为中心的体系结构。</li><li>基于事件的体系结构。</li></ol><p><strong>分层体系结构</strong>的思想很简单：组件组成不同的层，其中$$\mathrm{L}<em>{i}$$层中的组件可以调用下面的层$$\mathrm{L}</em>{i-1}$$。其关键要素是，其控制系统是从一层到另一层的：请求是从上往下，而请求结果则从下往上。<br><strong>基于对象的体系结构</strong>是一种很松散的组织结构：基本上，每个对象都对应一个组件，这些组件是通过（远程）过程调用机制来连接的。<br><strong>以数据为中心的体系结构</strong>的思想则是：进程通信需要通过一个公用的（主动或被动的）仓库。<br><strong>基于事件的体系结构</strong>则是通过事件的传播来进行进程的通信，事件传播还可以有选择地携带数据。对于分布式系统而言，事件传播通常与<em>发布/订阅系统</em>有关。其基本思想是，进程发布事件，然后中间件将确保那些订阅了这些事件的进程才接收它们。基于事件的系统的主要优点是：进程是松散耦合的。由于进程间无需明确地引用对方，又被称为<strong>引用去耦</strong>。<br>基于事件的体系结构可以与以数据为中心的体系结构组合，形成<strong>共享数据空间</strong>。共享数据空间的基本是，进程也可以是去耦的：它们不需要两者在通信发生时都是活动的。</p><h1 id="系统体系结构"><a href="#系统体系结构" class="headerlink" title="系统体系结构"></a>系统体系结构</h1><p>确定软件组件、这些组件之间的交互及它们的位置就是软件体系结构的一个实例，又被称为<strong>系统体系结构</strong>。下面将介绍集中式和非集中式组织结构及各种混合形式。</p><h2 id="集中式体系结构"><a href="#集中式体系结构" class="headerlink" title="集中式体系结构"></a>集中式体系结构</h2><p>许多研究人员和实践人员都认为：根据从服务器请求服务的客户来考虑问题，有助于我们理解和管理分布式系统的复杂性。<br>在基本的客户-服务器模型中，分布式系统中的进程被分为两组（可能有重叠）。<strong>服务器</strong>是实现特定服务的进程，如文件系统服务或数据库服务；<strong>客户</strong>是通过往服务器发送请求来请求服务、然后等待服务器回复的进程。这种客户-服务器交互又被称为<strong>请求-回复行为</strong>。<br>如果底层网络很可靠（如在局域网中），通过简单的无连接协议就可以实现客户和服务器之间的通信。使用无连接协议的一个明显有点是<em>高效</em>。只要消息不丢失或损坏，请求-回复协议就能很好地工作。但是该协议很难抵抗突发的传输故障。我们唯一能做的大概就是，当没有回复消息到来时，让客户程序重新发送请求。但问题是，客户无法检测原始请求消息是否丢失，也无法检测回复消息的传输是否发生了故障。如果回复消息丢失，则重新发送请求消息会导致执行两次相同的操作。如果某个操作可以重复多次而无害处，则被称为<strong>幂等的</strong>。由于有些请求不是幂等的，因此不能用某一个解决方法来处理消息的丢失问题。<br>另外，在广域网这种通信并不可靠的情形下，更多客户-服务器使用可靠的基于连接的协议，尽管这种解决方法可能会有较低的性能。在这种情况下，一旦客户要请求一个服务，它首先得在发送该请求之前创建一个到该服务器的连接。通常，该服务器使用同一连接来发送回复消息，然后断开该连接；创建和断开连接的开销较高，当请求和回复消息较小时更是如此。</p><h3 id="应用分层"><a href="#应用分层" class="headerlink" title="应用分层"></a>应用分层</h3><p>假如很多客户-服务器应用程序的作用是支持用户对数据库的访问，则可以将其划分为如下三层：</p><ol><li>用户接口层：含有直接与用户交互所需的一切，如显示管理</li><li>处理层：通常包含有应用程序</li><li>数据层：管理要使用的实际数据</li></ol><p>客户通常实现用户接口层。该层由允许终端用户与应用程序交互的程序组成。复杂的用户接口程序之间区别很大。<br>与用户接口层和数据层不同，处理层没有太多的共同点。<br>客户-服务器模型中的数据层含有用于维护实际数据的程序，应用程序可以在这些数据上进行操作。该层的一个重要属性是其数据往往是*<em>持久的</em>，即即使应用程序没有运行，数据也会保存在某个地方以供日后使用。数据层往往在服务器端实现。除了存储数据外，数据层还负责保持不同应用程序之间的数据一致性。当数据库正在被使用时，维护数据的一致性意味着诸如表描述符之类的元数据、项约束和特定应用程序元数据也存储在这一层中。在数据层被组织成为一个关系数据库时，数据的独立性很关键：数据组装成是与应用程序无关的，其方法是组织结构的改变不会影响应用程序，应用程序也不会影响数据组织结构。在客户-服务器模型中，使用关系数据库有助于把处理层与数据层分离开来，因为处理与数据是无关的。然而，在某些应用程序中，它们操作的是复杂的数据类型，此时数据操作以对象操作的方式表示更为容易。这使得通过基于对象或对象-关系数据库来实现数据层变得有意义。</p><h3 id="多层体系结构"><a href="#多层体系结构" class="headerlink" title="多层体系结构"></a>多层体系结构</h3><p>上述讨论的三个逻辑层之间的差别，表明了物理上把客户-服务器应用分布到多个机器上的可能性。最简单的组织结构是只有两种类型的机器：1)客户机：只含有实现（部分）用户接口的程序 2)服务器：包含了其余的部分，即实现处理和数据层的程序。<br>除此之外，组织客户和服务器的另一种方法是，把上一节中介绍的处理层中的程序分布到不同的机器上。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/two-layer%20architecture.PNG" alt="Two-Layer Architecture"><br>如上图，我们先来区分只有两种机器的不同组织形式，这也被称为<strong>（物理）两层体系结构</strong>。近些年来，趋势明显：不再是把客户端软件放在终端用户机上了。在这些情况下，大多数的处理操作和数据存储在服务器端完成，其原因也很简单：尽管客户机可以做不少工作，但它们问题也更多，难以管理。把更多的功能放在客户机上，使得客户端软件更容易出错，且更依赖于客户端的底层平台（如操作系统和资源）。从系统管理的角度来说，使用<strong>胖客户（fat client）</strong>并不是最优的；相反，使用(a)~(c)的<strong>瘦用户</strong>配置更容易，可以使得用户接口更简单，获得客户可察觉的性能提升。<br>现在再来考虑更为复杂的情形，有时候服务器可能需要更多层次。三层体系结构的一个典型示例就是事务处理。如前所述，名为事务处理监视器的单独进程负责协调所有事务，这些事务可能分散在不同的数据服务器上。</p><h2 id="非集中式体系结构"><a href="#非集中式体系结构" class="headerlink" title="非集中式体系结构"></a>非集中式体系结构</h2><p>多层客户-服务器把应用程序分成用户接口层、处理层和数据层。不同层直接对应应用程序的逻辑组织结构。在某些商业环境中，分布式处理就等同于把客户-处理器应用程序组织成一个多层体系结构。这种类型的分布被称为<strong>垂直分布性（vertical distribution）</strong>，其特征就是：垂直分布下是通过按逻辑把不同组件放在不同机器上来获得的。同样，从系统管理的角度来说，具有垂直分布性有助于：功能可以从逻辑上和物理上分割在多台机器上，每台机器按照特定的功能组进行定制。<br>在现代体系结构中经常包含了客户和服务器的分布性。被称为<strong>水平分布性（horizontal distribution）</strong>。在该类型的分布式系统中，客户或服务器可能在物理上被分割成逻辑上相等的几个部分，但每部分都操作在整个数据集中自己共享的部分，从而实现负载的平衡。接下来就将介绍一种现代的、能够支持水平分布性的系统体系结构，被称为<strong>点对点系统（peer-peer system）</strong>。<br>从高层的角度看，构成点对点系统的进程是全部相等的。这意味着需要执行的功能由构成分布式系统的每个进程来表示。因此，进程间的很多交互是对称的：每个进程作为客户的同时又是服务器（这也被称为<strong>服务器客户（servent）</strong>）。如此，基于点对点体系结构的应用就不必操心如何组织进程的问题，即网络中的结点是由进程和表示各种可能的通信通道的链接形成的。通常，一个进程不能与另外任意一个进程直接通信，而是要通过一个可用的通信通道来发送消息。<br>现在有两种类型的覆盖网络：一种是结构化的，另一种是非结构化的。我们下面将逐一予以介绍。</p><h3 id="结构化的点对点体系结构"><a href="#结构化的点对点体系结构" class="headerlink" title="结构化的点对点体系结构"></a>结构化的点对点体系结构</h3><p>在结构化的点对点体系结构中，覆盖网络是用一个确定性的过程来构成的。使用最多的是通过一个<strong>分布式哈希表（Distributed Hash Table, DHT）</strong>来组织进程的。在基于DHT的系统中，从一个大的标识符空间中选取一个随机关键值赋给数据项，如128位的标识符；同样，我们也可以从这个标识符空间中选取一个随机数赋给该系统中的结点。实质上每一个基于DHT的系统<strong>核心</strong>就是实现一种高效且确定的方案，根据某种距离尺度把数据项的关键值唯一地映射给结点的标识符。最重要的是，当查找数据项时，会返回对应数据项的结点的网络地址；这可以通过把数据项的请求路由给相应的结点来完成。在这样的系统中，设计者要重点关注如何把结点组织成一个覆盖网络，即<strong>成员管理（membership management）</strong>。</p><h3 id="非结构化的点对点体系结构"><a href="#非结构化的点对点体系结构" class="headerlink" title="非结构化的点对点体系结构"></a>非结构化的点对点体系结构</h3><p>非结构化的点对点体系结构主要依靠<strong>随机化</strong>的算法来构造覆盖网络。其主要思想就是，每个结点维护一个邻结点列表，但该列表是一种或多或少为随机的方法来构造的；同样，数据项也是假定随机地放在结点中的。因此，当结点要定位某个特定的数据项时，它所能有效地做的唯一事情就是用一个查找查询来<em>泛洪</em>该网络。此处只关注成员管理。<br>很多非结构化的点对点系统的一个目标就是构造一个类似于<strong>随机图（random graph）</strong>的覆盖网络。其基本模型是每个结点都维护一个含有$$c$$个邻结点的列表，在理想情况下，每个这种邻结点表示都是从当前结点集中随机选择出来的“活”结点。这个邻结点列表又被称为<strong>部分视图（partial view）</strong>。</p><h3 id="覆盖网络的拓扑管理"><a href="#覆盖网络的拓扑管理" class="headerlink" title="覆盖网络的拓扑管理"></a>覆盖网络的拓扑管理</h3><p>上述的结构化和非结构化的点对点体系结构其实并不是严格独立的类型，通过仔细地交换和选择部分视图，就可以构造和维护覆盖网络的特殊拓扑结构。如下图所示，采用一种两层的方法就可以实现拓扑管理。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/two-layer%20architecture%20for%20p2p.PNG" alt="使用非结构化的点对点系统的技术构造和维护特殊覆盖拓扑的两层方法"><br>最底层构成了一个非结构化的点对点系统，其中的结点定期地交换部分视图中的项目，目的是维护一个精确的随机视图。此处的精确性是指，应该用指向随机选择的“活的”结点的项目来填充部分视图。之后最底层把其部分视图传递给更高层，再次进行另外的项目选择。这就产生了对应于所希望的拓扑结构的邻结点的第二个列表。</p><h3 id="超级对等体"><a href="#超级对等体" class="headerlink" title="超级对等体"></a>超级对等体</h3><p>在非结构化的点对点系统中，随着组织网络的增大，相关数据项的定位会变得很困难。产生这种可扩展性问题的原因也很简单，即不存在一种确定的方法把查找请求路由到特定的数据项，结点所能借助的唯一技术是泛洪该请求。但泛洪的危害很多，作为一种替代方法，很多点对点系统都提出了使用能够维护数据项索引的特殊结点。<br>这些能维护数据项索引或充当一个代理程序的结点通常被称为<strong>超级对等体（superpeer）</strong>。其常常也是组织在点对点系统网络中，形成一个分层组织结构。在这种组织结构中，每个常规对等体作为一个客户连接到超级对等体；所有往来于常规对等体的通信都先通过与该对等体关联的超级对等体的。在很多情况下，客户-超级对等体的关系是固定的：一个对等体只要加入到网络中，它就只归依于某一个超级对等体，并一直保持不变，直至它离开该网络。这无疑要求超级对等体应是生存期较长的进程，且具有较高的可用性。为弥补超级对等体的不稳定性，可以部署备用方案，如把每个超级对等体与另一个配对，并要求客户与这两个超级对等体同时连接。同时，在某些场景下与超级对等体有着固定的关联并不总是最好的解决方法。<br>但是，也应当注意超级网络引入了一个新问题，即如何选择合适结点成为超级对等体。该问题与领导者选举问题有着密切的关系，请参考后续文章。</p><h2 id="混合体系结构"><a href="#混合体系结构" class="headerlink" title="混合体系结构"></a>混合体系结构</h2><p>下面将介绍一些特殊的分布式系统，其将客户-服务器体系结构和非集中式体系结构结合在一起了。</p><h3 id="边界服务器系统"><a href="#边界服务器系统" class="headerlink" title="边界服务器系统"></a>边界服务器系统</h3><p><strong>边界服务器系统</strong>是混合体系结构中一种重要的分布式系统。这种系统部署在因特网上，其中服务器被放置在网络的“边界”上。这种边界是由企业网络和实际因特网之间的分界线形成的，如对于因特网服务提供商而言，家庭终端用户通过ISP连接到因特网，则该ISP就可以被认为是因特网的边界了。边界服务器的主要目的是在进行过滤和编码转换后提供内容服务；同时，边界服务器也可以用于优化内容和应用程序的分布性。</p><h3 id="协作分布式系统"><a href="#协作分布式系统" class="headerlink" title="协作分布式系统"></a>协作分布式系统</h3><p>混合结构也体现在<strong>协作分布式系统</strong>中。在<strong>协作分布式系统</strong>中,会先启动一个一个传统的客户-服务器结构,一旦某个结点要加入系统,就可以使用完全非集中式的组织结构以用于协作了.<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/design%20of%20BitTorrent.PNG" alt="BitTorrent的工作原理"><br>BitTorrent是一种点对点的文件下载系统，其基本思想就是：当一个终端用户要查找某个文件时，他可以从其他用户那儿下载文件块，直到所下载的文件块能够组装成完整的文件为止。要下载一个文件时，用户需要访问一个全局目录，它只是一些知名Web站点中的一个。这些目录含有指向名为<code>.torrent</code>文件的引用，该文件含有要下载特定文件的信息。其中特别的是，它会指向一个<strong>跟踪器（tracker）</strong>。跟踪器实质上是一个服务器，它保持有活动结点的精确记录，而这些结点具有所请求的文件块。一个活动结点就是当前正在下载另一个文件的结点。显然，这意味着会有很多跟踪器，但通常每个文件（或文件集）只有一个跟踪器。一旦结点确定了从哪里可以下载文件块，下载结点就变成活动的。此时，他就被强制为其他结点提供帮助，如提供他正在下载但其他结点还没有的文件块。</p><h1 id="体系结构与中间件"><a href="#体系结构与中间件" class="headerlink" title="体系结构与中间件"></a>体系结构与中间件</h1><p>中间件在应用程序和分布式平台之间形成一个层。如此设计的一个重要目的就是提供一定程度的透明性，即一定程度上向应用程序隐藏数据处理和控制的分布性。使中间件按照特定的体系结构融合到系统中，有利于使应用程序的设计变得更简单；但一个明显的缺陷是中间件可能不是应用程序开发人员脑海中的最佳选择。另外，尽管中间件意味着能提供分布式透明性，人们也多认为：特定的解决方法应该能适应应用程序的需求。这个问题的一个解决方案是：实现中间件的多个版本，每个版本按照特定类型的应用程序进行裁剪。通常认为一种更好的解决方案是：使中间件系统按照应用程序的需要能很容易配置、适应和定制；因此现在系统的开发在策略与机制之间有更严格的分离。</p><h2 id="中断器"><a href="#中断器" class="headerlink" title="中断器"></a>中断器</h2><p>从概念上来说，中断器只不过是一种软件结构，它能中断正常的控制流，从而允许其他（应用程序特定的）代码运行。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/interrupter%20for%20rpc.PNG" alt="使用中断器来处理远程对象激活"><br>为理解该机制，我们具体讨论如上图所示的情景。上述的远程对象调用是按照如下三步骤进行的：</p><ol><li>对象A提供一个本地接口，该接口与对象B提供的接口完全相同。A只需调用该接口中的一个方法即可。</li><li>A的调用转换为一个通用的对象激活，这可以通过由与A在同一机器的中间件所提供的对象激活接口来完成。</li><li>最后，该通用对象激活转换为一个消息，该消息可以通过由A的本地操作系统所提供的传输层网络接口来发送。</li></ol><p>该过程中就涉及到两个中断器。<strong>请求级中断器（Request-Level Interceptor）</strong>在A的调用被转换为通用对象激活后起作用，其要完成的是为每一个副本调用该方法。这种调用方式的美妙之处在于，只需要请求级中断器才需要知道B的副本，而其他部分完全不用知道。最后一步中<strong>消息级中断器（Message-Level Interceptor）</strong>可以协助把该激活转移到目标对象，如假想参数是一个十分巨大的数据数组，此时明智的做法就是将该数据数组切分为很多小块，并在目的地进行组装。这种拆分可以提高性能和可靠性。同样，中间件也并不需要知道这种拆分的细节，低层的中断器可以透明地处理与本地操作系统通信的其他工作。</p><h2 id="自适应软件的常见方法"><a href="#自适应软件的常见方法" class="headerlink" title="自适应软件的常见方法"></a>自适应软件的常见方法</h2><p>实际上，中断器所提供的是适应性中间件的一种方法。自适应的需要是源于：分布式应用程序所运行的环境是不断变化的。对这些变化的相应处理不是由应用程序来负责，而是把该工作放到中间件中。<br>有学者将实现软件自适应的基本技术分为以下三种：</p><ol><li>要点分离</li><li>计算映像</li><li>基于组件的设计</li></ol><p>要点分离与模块化系统的传统方法有关：把实现功能的部分与负责诸如可靠性、性能、安全等其他事情（称为额外功能）的部分分开。但利用模块化的方法把这些额外功能分开并不容易。近些年来，分离并进而把这些要点编织到分布式系统成为<strong>面向方面软件开发（Aspect-Oriented Software Developement）</strong>所要解决的主要题目。<br>计算映像指的是程序检查自己，及如有必要调整其行为的能力。这部分功能有的已经被植入到程序设计语言（如Java）中，为运行时调整提供了一个强大的工具。<br>基于组件的设计是通过组件的不同组合来支持自适应。系统可以是在设计时静态配置的，或是在运行时动态配置的。后者则要求支持<em>后绑定</em>，即一种已成功应用于程序设计语义环境中的技术。</p><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>分布式系统的软件体系结构,主要以中间件为基础,是庞大而复杂的。在很大程度上,这种庞大和复杂性是来自于提供分布式透明性的要求的。同时,应用程序具有特定的额外功能要求,这与完全实现透明性是相冲突的。这种通用性和特殊性需求之间的冲突,使得中间件应是高度灵活的.但是,付出的代价是复杂性.</p><p>考虑到现在所有大型软件系统都要求运行在网络环境下,我们可以问问自己,分布式系统的复杂性是否是试图取得分布式透明性固有的特性?当然,诸如开放性之类的问题也同样重要,但对灵活性的需要从未有像中间件那样普遍.<br>(Coyle等2003)认为所需的是应更加关注外部简单性,即利用组件构建中间件的更简单方法,以及应用程序的独立性.上面所介绍的技术的解决方案都值得探讨.但另一方面,到目前为止所提出的技术都没有被大范围地采用,它们也没有被成功地应用到大型系统的记录.</p><p>这里的基本假设是,我们所需要的自适应软件是软件应可以随着环境的变化而改变.但是,你应该问问,适应变化环境是否是改变软件的很好理由.硬件故障、安全攻击、能量消耗等看上去都是环境影响因素,都是软件所期望解决的.<br>支持自适应软件最有力、当然也是最有效的理由是,很多分布式系统是不能停机的.这个限制要求有替代和提升组件的解决方案,但不清楚上面提出的解决方案是否是处理这种可持续问题的最好办法。<br>剩余的问题是分布式系统应能对环境的变化做出反应,例如,通过更换分配资源的策略等.所有能启用自适应的软件组件都应处在合适的位置,包含在这些组件中的算法和行为指令能改变其位置.这里的困难是让这种响应行为在无人干预的情况下发生.</p><h1 id="分布式系统的自我管理"><a href="#分布式系统的自我管理" class="headerlink" title="分布式系统的自我管理"></a>分布式系统的自我管理</h1><p>分布式系统主要与它们相关的中间件需要提供常见的解决方案以屏蔽掉网络所固有的某些“坏”特性，这样它们就可以支持尽可能多的应用程序。另一方面，完全透明性并不是大多数应用程序所真正需要的，它们还需要支持特定应用程序的解决方案。基于上述原因，我们认为，分布式系统是自适应的，但主要是<strong>调整它们的运行行为，而不是软件组件</strong>。<br>当需要自适应自动完成时，系统体系结构与软件体系结构之间将会有很强的相互作用。并且，我们需要以某种方式来组织分布式系统的组件，使得其能够实现监视和调整；同时，还需要决定处理自适应的进程在何处运行。<br>本节将介绍以高级反馈控制系统的形式来组织分布式系统，它允许自动自适应变化。这种现象被称为<strong>自治计算</strong>或<strong>自主系统</strong>，其蕴含了：自我管理、自我恢复、自我配置、自我优化等。</p><h2 id="反馈控制模型"><a href="#反馈控制模型" class="headerlink" title="反馈控制模型"></a>反馈控制模型</h2><p>对自我管理系统的最常用的观点就是假设自适应是通过一种或多种<strong>反馈控制循环</strong>来实现的。相应地，以这些循环组织的系统称为<strong>反馈控制系统</strong>。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-distributed-system/logistic%20organization%20-%20feedback%20control%20system.PNG" alt="反馈控制系统的逻辑组织结构"><br>反馈控制系统的核心由需要管理的组件形成。这些组件能通过可控输入参数驱动，但它们的行为会受到所有不可控输入（也被称为干扰或噪声输入）的影响。<br>形成反馈控制循环有三个元素。首先，系统本身需要被监视，这要求对系统的各个方面进行测量。由于实际测量过程中的难度，控制反馈循环中往往包含有一个逻辑<strong>尺度预测组件（metric estimation component）</strong>。反馈循环控制的另一部分就是分析上述测量值，并把它们与参考值进行比较，即<strong>反馈分析组件</strong>，它是控制循环的核心部分，因为其包含了决定自适应的各种算法。其他的组件组是由不同的机制组成的，这些组件直接影响着系统的行为。如：副本的放置、调度优先权的改变、服务交换、因可用性而移动数据、重定向对不同服务器的请求等。分析组件需要知道这些组件对其系统行为的（预期）影响。显然，要恰当地分析所测量的数据和触发正确的动作，这些都意味着自我管理系统的开发十分困难。<br>值得注意的是，上图是自我管理系统的逻辑组织结构，它与我们讨论软件体系结构时所见到的软件逻辑组织结构相对应，而物理组织结构就可能有很大的不同了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/3108801/" target="_blank" rel="noopener">分布式系统的原理与范型</a></p>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> distributed-system </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> distributed system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式系统 - 概述]]></title>
      <url>http://www.wrran.com/blog/2017/12/16/review/distributed-system/1-introduction/</url>
      <content type="html"><![CDATA[<blockquote><p>三个臭皮匠赛过诸葛亮</p></blockquote><a id="more"></a><p>本书涉及两大块内容：分布式系统的原理及分布式应用的范型。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>随着（一）单机计算机性能的提升、价格的下降，高性能计算设备越发普及（二）高速计算机网络的发展，让计算机间的设备互联更易实现；在这两种技术的推动下，出现了与传统的<strong>集中式系统</strong>相区别的所谓的<strong>分布式系统</strong>。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在教材中给出了分布式的粗略描述：<strong>分布式系统</strong>是若干独立计算机的集合，这些计算机对于用户来说就像是单个相关系统。其内涵在软硬件上就是：硬件上，机器本身是独立的；软件上，对用户来说，就像是与单个系统打交道。<br>分布式系统的特性有：</p><ol><li>各种计算机之间的差别及计算机之间的通讯方式的差异对用户是隐藏的，用户也看不到分布式系统的内部组织结构</li><li>用户和应用程序无论何时何地都能够以一种一致和统一的方式与分布式系统进行交互</li></ol><p>为了让种类各异的计算机和网络都呈现为单个系统，分布式系统常常通过一个“软件层”（被称为<strong>中间件</strong>），该软件层在逻辑上位于由用户和应用程序组成的高层与操作系统组成的底层之间。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>分布式系统真正物有所值的四个关键目标：</p><ol><li>分布式系统必须能够让用户方便地访问资源</li><li>分布式系统必须隐藏在一个网络上分布这一事实</li><li>分布式系统必须是开放的</li><li>分布式系统必须是可扩展的</li></ol><h3 id="资源可访问性"><a href="#资源可访问性" class="headerlink" title="资源可访问性"></a>资源可访问性</h3><p>分布式系统的最主要目标是使用户能够方便地访问远程资源，并且以一种受控的方式与其他用户共享资源。</p><p>用处：协作和信息交换<br>隐患：安全性，对通信的跟踪行为</p><h3 id="透明性"><a href="#透明性" class="headerlink" title="透明性"></a>透明性</h3><p>如果一个分布式系统能够在用户和应用程序面前呈现为单个计算机系统，这样的分布式系统就被称为是<strong>透明的</strong>。<br>下面将分别介绍透明性的类别，再分析是否在任何情况下都需要保持透明性。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>透明性的概念包括如下几个方面：</p><table><thead><tr><th style="text-align:center">透明性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">访问</td><td style="text-align:left">隐藏数据表示形式的不同以及资源访问方式的不同</td></tr><tr><td style="text-align:center">位置</td><td style="text-align:left">隐藏资源所在位置</td></tr><tr><td style="text-align:center">迁移</td><td style="text-align:left">隐藏资源是否移动到另一个位置</td></tr><tr><td style="text-align:center">重定位</td><td style="text-align:left">隐藏资源是否在使用过程中移动到另一个位置</td></tr><tr><td style="text-align:center">复制</td><td style="text-align:left">隐藏是否对资源进行复制</td></tr><tr><td style="text-align:center">并发</td><td style="text-align:left">隐藏资源是否由若干相互竞争的用户共享</td></tr><tr><td style="text-align:center">故障</td><td style="text-align:left">隐藏资源的故障和恢复</td></tr></tbody></table><p><strong>访问透明性</strong>是指对不同数据表示形式及资源访问方式的隐藏。如：大端编码或小端编码；或不同操作系统中文件系统的访问方式。<br>透明性中有一大类是关于<em>资源位置</em>的。<strong>位置透明性</strong>是指用户无法判别资源在系统中的物理位置。<em>命名</em> 在确保位置透明性上发挥了重要作用：如可以通过仅为资源分配逻辑名来实现位置透明性。<strong>迁移透明性</strong>是指分布式系统中的资源移动不会影响该资源的访问方式。<strong>重定向透明性</strong>是指分布式系统中的资源可以在接受访问的同时进行重新定位，而不引起用户和应用程序的注意：如当移动通信用户从一个地点一道另一个地点时，可以一直保持手机联网。<br><em>复制</em>在分布式系统也是很重要的方面，它既可以增加系统的可用性或者提升系统性能。<strong>复制透明性</strong>是指对同一个资源存在多个副本这一事实的隐藏。其实，<em>复制透明性</em>蕴含<em>位置透明性</em>：为了对用户隐藏存在多个副本的事实，所有副本的名字都必须相同；不然系统就无法引用位于不同位置的多个副本。<br><strong>并发透明性</strong>是指在存有竞争式资源共享的分布式系统中，让任何一个用户都不会感觉到他人也在使用自己正使用的资源，即必须确保对共享资源的并发访问不会破坏资源的一致状态。一致性资源可以通过<em>锁定机制</em>来保证，也可以使用更精致的<em>事务处理机制</em>。<br><strong>故障透明性</strong>是指用户不会注意到某个资源（也许他从未听说过这个资源）无法正常工作，以及系统随后从故障中恢复的过程。这是分布式系统最为困难的问题之一；而屏蔽故障最大的困难在于无法区别<em>出现故障的资源</em>和<em>反应速度极慢的资源</em>。<br><strong>持久性透明性</strong>是指分布系统对于资源位于易失性存储器中还是位于磁盘上的隐藏。</p><h4 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h4><p>由于物理世界的限制，如信息传播速度快不过光速；或由于必须在高度的透明性和系统性能之间的权衡，不得不牺牲分布式系统中的某些某种程度的透明性。总之，在设计并实现分布式系统时，把实现分布的透明性作为目标是正确的，但应当将它与其他方面的问题结合起来考虑。</p><h3 id="开放性"><a href="#开放性" class="headerlink" title="开放性"></a>开放性</h3><p>分布式系统的另一个重要目标是<strong>开放性</strong>：分布式系统根据一系列准则来提供服务，这些准则描述了所提供服务的语法和语义。在分布式系统中，服务通常是通过<strong>接口</strong>指定的，而接口一般是通过<strong>接口定义语言</strong>来描述的。这些让<em>语法</em>的限定更加容易，而困难的<em>语义</em>在实际中常常使用自然语言来描述。<br>良好的接口规范说明应当是完整且中立的。“完整”意味着完成接口实现不可少的所有内容都已经被规定好了；“中立”是指规范说明不应描述接口的实现应该是什么样子的。完整性和中立性对于实现互操作性和可移植性很重要。<em>互操作性</em>刻画了来自不同厂商的系统或组件的两种实现能够在何种程度上共存且协同工作，这种共存和协同工作只能依赖于通过双方在公共标准中规定的各自所提供的服务来完成；<em>可移植性</em>刻画了这样的性能：如果为分布式系统A开发了某个应用程序，且另一个分布式系统B与A具有相同的接口，该应用程序在不做任何修改的情况下在B上执行的可行程度。<br><strong>开放性</strong>实质上也应当蕴含着<strong>可扩展性</strong>：可以方便地把不同开发人员开发的不同组件组合成整个系统；还必须能够方便地添加新组件、替换现有的组件，而不会对那些无须改动的组件造成影响。实现可扩展性的<strong>关键</strong>在于：要把系统组织成规模相对较小而且容易替换或者修改的组件的集合。这意味着我们不仅要提供最高层的接口定义（即对用户和应用程序可见的那部分内容），还应该提供系统内部各部分间的接口定义，且要描述它们的交互方式。在分布式系统中，进行改动的需求常常出自于某个不能对特定用户或者应用程序提供最优策略的组件。为此需要的是<strong>将策略与机制相分离</strong>。</p><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><p><strong>可扩展性</strong>在分布式系统中也是很重要的目标，包括三个方面：</p><ol><li>规模上的可扩展性。指可以方便地把更多的用户和资源加入到分布式系统中去。</li><li>地域上的可扩展性。指分布式系统中的用户和资源可以相隔极其遥远。</li><li>管理上的可扩展性。指分布式系统跨越多个独立的管理机构，仍可以方便地对其进行管理。</li></ol><p>但上述三个方面中的某个或某些常会在扩展后表现出性能的下降。</p><h4 id="可扩展性问题"><a href="#可扩展性问题" class="headerlink" title="可扩展性问题"></a>可扩展性问题</h4><p>同样我们从三个层面上来仔细看看会出现什么问题。只看<strong>规模上的可扩展性</strong>就有如下问题：</p><table><thead><tr><th style="text-align:center">概念</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">集中式服务</td><td style="text-align:left">供所有用户访问的单个服务器</td></tr><tr><td style="text-align:center">集中式数据</td><td style="text-align:left">单个在线电话薄</td></tr><tr><td style="text-align:center">集中式算法</td><td style="text-align:left">根据完整的信息来安排路由</td></tr></tbody></table><p>集中式服务的问题在于用户增多时该服务器将称为系统的瓶颈。集中式数据的问题是通信系统可能充满数据而成为系统的瓶颈。集中式算法的缺陷是需要收集系统完整的信息，并将最终的算法输出传播到整个系统，此时就不应当采用这种算法，而该采用<em>分散式算法</em>。<br><strong>分散式算法</strong>一般有下列特性：</p><ol><li>没有任何计算机拥有关于系统状态的完整信息</li><li>计算机只根据本地信息做出决策</li><li>某台计算机的故障不会使算法崩溃</li><li>没有假设存在全局性的时钟</li></ol><p><strong>地域上的可扩展性</strong>在广域网上尤为突出：一是广域网时延长，而如果采用基于同步通信开发的程序则无法忍受；二是广域网的通信本质上是不可靠的、几乎总是点对点的。<br><strong>管理上的可扩展性</strong>则更为尴尬，在许多情况下都还没有答案。这方面要解决的关键问题是在资源使用及付费、管理和安全问题上各域有着相互冲突的策略。</p><h4 id="扩展技术"><a href="#扩展技术" class="headerlink" title="扩展技术"></a>扩展技术</h4><p>由于分布式系统中的可扩展性问题表现为服务器和网络能力有限所造成的性能问题，因此基本上只有三种扩展技术：</p><ol><li>隐藏通信等待时间</li><li>分布技术</li><li>复制技术</li></ol><p>隐藏通信等待时间的技术对于解决“地域上的可扩展性”是比较适用的，其基本想法就是：尽量避免等待远程服务对请求的响应。如：当对远程计算机的某个服务发出请求时，在发出请求端，除了等待服务器响应之外，还可以利用这段时间做其他工作。本质上，以这种方式构建的应用程序是基于<strong>异步通信</strong>。当响应到来时，应用程序产生中断，并且调用专门的处理程序对前面发出的请求进行处理；另外一种选择是启动一个新的控制线程来执行请求，虽然该控制线程因为等待响应而受到阻塞，但是进程中的其他线程可以继续执行。然而，在许多应用程序无法充分利用异步通信的优点，如在交互式应用程序中客户端要根据回答再选择合适的操作。在这种情况下，较好的解决方案是<strong>减少通信的总量</strong>，如把由服务器完成的部分计算工作交由请求服务的客户端进程来进行。<br><strong>分布技术</strong>也是很重要的扩展技术，它是指把某个组件分割成多个部分，然后再将它们分散到系统中去。如因特网DNS服务，再如万维网。另外，对组件进行复制并将副本分布到系统各处也可以缓解可扩展性过程中的性能下降问题。复制不仅能够增加可用性；而且还有助于组件间的负载平衡，从而使得性能得到提高；同时，在请求者附近的一个副本也可以很大程度上隐藏通信等待时间。<br><strong>缓存</strong>是复制的一种特殊形式，其独特在于：是否要进行缓存是由访问资源的客户决定的，而不是由资源拥有者决定的。缓存与复制都存在严重的缺点：在进行缓存或复制以后，由于资源存在多个副本，修改其中的一个会导致它与其他副本不相同，进而导致<strong>一致性</strong>方面的问题。而多大程度容忍不一致性主要取决于资源的用法。高度一致性的关键问题是：对某个副本的更新必须立即传播到其他所有副本上；此外，如果两个更新操作并发执行，一般会要求每个副本都按照相同的次序进行更新。对这些情形的处理多需要采取某些<em>全局同步机制</em>，但以一种可扩展的方式来实现这样的机制是极为困难的，甚至是不可能的。因此，通过复制来提高可扩展性将会引入另一种本质上不可扩展的解决方案。</p><h2 id="类型-1"><a href="#类型-1" class="headerlink" title="类型"></a>类型</h2><p>分布式系统主要有三种不同类型：分布式计算系统、分布式信息系统和分布式嵌入系统。</p><h3 id="分布式计算系统"><a href="#分布式计算系统" class="headerlink" title="分布式计算系统"></a>分布式计算系统</h3><p>分布式系统一个重要的分类就是<strong>用于高性能计算任务的系统</strong>。<br>粗略地说，可以分为两个子分组：</p><ol><li><strong>集群计算</strong>：底层硬件是由类似的工作站或PC集组成的，通过高速的局域网紧密连接起来，且每个结点运行的是相同操作系统。</li><li><strong>网格计算</strong>：该类型的分布式系统通过构建成一个计算机系统联盟，其中的每个系统归属于不同的管理域，且在硬件、软件和部署网络技术上也差别很大。</li></ol><h3 id="分布式信息系统"><a href="#分布式信息系统" class="headerlink" title="分布式信息系统"></a>分布式信息系统</h3><p>分布式系统另一个重要分类是在组织中的应用，这些组织面临大量的网络应用，但这些应用之间的互操作性很差。<strong>分布式信息系统</strong>即是提供一种基础设施，可以把这些应用集成到企业范围内的信息系统中去。<br>我们按照集成程度进行分类。最低级的集成就是允许客户端把多个请求（可能是发往多个服务器的）封装成单个较大的请求，并使这个较大的请求作为一个<em>分布式事务处理</em>来运行（关键点是要么所有请求被运行，要么所有都不运行）。这种系统被称为<strong>事务处理系统</strong>。随着应用程序变得更加复杂，并逐步分割为各自独立的组件（<em>最明显</em>的是把数据库组件与事务处理组件分开），通过让应用程序直接与其他程序进行通信，也可以实现集成。这就是现在大型企业所关注的<strong>企业应用集成</strong>。</p><h4 id="事务处理系统"><a href="#事务处理系统" class="headerlink" title="事务处理系统"></a>事务处理系统</h4><p>事务处理的突出特征是要么所有这些操作都被运行，要么都不运行。这些操作可以是系统调用、库过程或实现语言的分支语句等。<br>具体地说，事务处理具有以下四种特性（ACID）：</p><ol><li>原子性：对外部来说，事务处理的中间状态是不可见的</li><li>一致性：事务处理不会违反系统的不变形</li><li>独立性：并发的事务处理不会互相干扰</li><li>持久性：事务处理一旦提交，所发生的改变是永久性的</li></ol><p>至此，事务处理是在单个的数据库上进行定义的。<strong>嵌套式事务处理</strong>是由多个子事务处理构成的。上面所说的<em>持久性</em>只适用于<em>最顶层</em>的事务处理。在分布式系统中，嵌套式事务处理很重要，因为它们提供了一种很自然的方法，可以把一个事务处理分布到多台机器上，它们是按照原始事务处理工作的逻辑分支进行的。在企业中间件系统的早期，负责处理分布式或嵌套式事务处理的组件在服务器或数据库级上构成了集成应用的核心。这种组件被称为<strong>事务处理监视器</strong>或简称为<strong>TP监视器</strong>。</p><h4 id="企业应用集成"><a href="#企业应用集成" class="headerlink" title="企业应用集成"></a>企业应用集成</h4><p>应用程序与其关联的数据库越是独立，就越需要有工具来把这些与数据库无关的应用程序集成到一起。特别是，应用程序组件之间应当可以直接进行通信，而不仅限于通过由事务处理系统所支持的请求/回复。应用程序间的通信需求导致出现了不同的通信模式。<br>下面介绍两类通信中间件：<br><strong>远程过程调用（Rmote Procedure Call, RPC）</strong>可以通过一个本地过程调用，有效地往另一个应用程序组件发送一个请求；本地过程调用可以使其请求封装成一个消息，并发送给被调用者；同样，过程调用的结果被发送回来并返给应用程序。而调用远程对象的技术，被称为<strong>远程方法调用（Remote Method Invocation, RMI）</strong>。RMI与RPC实质上是相同的，只不过RMI操作的是对象而不是应用程序。RPC和RMI的不足之处是：调用者和被调用者都必须正在运行之中，且必须正确地知道如何引用对方。<br>RPC和RMI的缺陷导致了<strong>面向消息的中间件（Message-Oriented Middleware, MOM）</strong>的产生：应用程序只需要发送一个消息给逻辑意义上的联系点（通常用目标来描述）；同样，应用程序也可以表明它对某些类型的消息感兴趣，通信中间件会将这些消息移交给这些应用程序。这种也被称为所谓的<strong>分布/订阅（Publish/Subscribe）</strong>系统。</p><h3 id="分布式普适（嵌入）系统"><a href="#分布式普适（嵌入）系统" class="headerlink" title="分布式普适（嵌入）系统"></a>分布式普适（嵌入）系统</h3><p>上述两类分布式系统的最大特点就是<em>稳定性</em>：结点是固定的，具有或多或少的持续性和高质量的网络连接。但移动和嵌入式计算设备的一大特点就是<strong>不稳定性</strong>是其默认的行为，并且这些设备缺乏人的管理控制或充其量由其所有者进行配置。<br>普适应用程序的需求可以归纳为以下三点：</p><ol><li>接受上下文的变化：设备必须知道其环境可能总是在变化的。</li><li>促使自主合成：普适系统中的很多设备可能被不同用户以不同的俄方时使用，因此通过用户或自动化（但可控的）干预，可以很容易地配置运行在设备上的应用程序簇。</li><li>认可共享为默认行为：普适系统中的设备要经常加入到系统中，以便访问（或提供）信息；这就要求有容易读取、存储、管理和共享信息的方法。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/3108801/" target="_blank" rel="noopener">分布式系统的原理与范型</a></p>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> distributed-system </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> distributed system </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写给未来的自己]]></title>
      <url>http://www.wrran.com/blog/2017/12/15/people-say/171215-01/</url>
      <content type="html"><![CDATA[<blockquote><p>南大虽百年，青春正鼎盛。<br>@余光中</p></blockquote><a id="more"></a><p>> 作者：余光中 &lt;</p><p><embed src="//music.163.com/style/swf/widget.swf?sid=456185374&type=2&auto=0&width=320&height=66" width="340" height="86" allownetworking="all"><br>孩子，我希望你自始至终都是一个理想主义者。<br>你可以是农民，可以是工程师，可以是演员，可以是流浪汉，但你必须是个理想主义者。<br>童年，我们讲英雄故事给你听，并不是一定要你成为英雄，而是希望你具有纯正的品格。<br>少年，我们让你接触诗歌、绘画、音乐，是为了让你的心灵填满高尚的情趣。<br>这些高尚的情趣会支撑你的一生，使你在最严酷的冬天也不会忘记玫瑰的芳香。<br>理想会使人出众。<br>孩子，不要为自己的外形担忧。<br>理想纯洁你的气质，而最美貌的女人也会因为庸俗而令人生厌。<br>通向理想的途径往往不尽如人意，而你亦会为此受尽磨难。<br>但是，孩子，你尽管去争取，理想主义者的结局悲壮而绝不可怜。<br>在貌似坎坷的人生里，你会结识许多智者和君子，你会见到许多旁人无法遇到的风景和奇迹。<br>选择平庸虽然稳妥，但绝无色彩。<br>不要为蝇头小利放弃自己的理想，不要为某种潮流而改换自己的信念。<br>物质世界的外表太过复杂，你要懂得如何去拒绝虚荣的诱惑。<br>理想不是实惠的东西，它往往不能带给你尘世的享受。<br>因此你必须习惯无人欣赏，学会惊人享受，学会与人不同。<br>其次，孩子，我希望你是个踏实的人。<br>人生太过短促，而虚的东西又太多，你很容易眼花缭乱，最终一事无成。<br>如果你是个美貌的女孩，年轻的时候会有许多男性宠你，你得到的东西太过容易，这会使你流于浅薄和虚浮；<br>如果你是个极聪明的男孩，又会以为自己能够成就许多大事而流于轻佻。<br>记住，每个人的能力有限，我们活在世上能做好一件事足矣。<br>写好一本书，做好一个主妇。<br>不要轻视平凡的人，不要投机取巧，不要攻击自己做不到的事。<br>你长大后会知道，做好一件事太难，但绝不要放弃。<br>你要懂得和珍惜感情。<br>不管男人女人，不管墙内墙外，相交一场实在不易。<br>交友的过程会有误会和摩擦，但想一想，偌大世界，有缘结伴而行的能有几人？<br>你要明白朋友终会离去，生活中能有人伴在身边，听你倾谈，倾谈给你听，就应该感激。<br>要爱自己和爱他人，要懂自己和懂他人。<br>你的心要如溪水般柔软，你的眼波要像春天般明媚。<br>你要会流泪，会孤身一人坐在黑暗中听伤感的音乐。<br>你要懂得欣赏悲剧，悲剧能丰富你的心灵。<br>希望你不要媚俗。<br>你是个独立的人，无人能抹杀你的独立性，除非你向世俗妥协。<br>要学会欣赏真，要在重重面具下看到真。<br>世上圆滑标准的人很多，但出类拔萃的人极少。而往往出类拔萃又隐藏在卑琐狂荡之下。<br>在形式上我们无法与既定的世俗争斗，而在内心我们都是自己的国王。<br>如果你的脸上出现谄媚的笑容，我将会羞愧地掩面而去。<br>世俗的许多东西虽耀眼却无价值，不要把自己置于大众的天平上，不然你会因此无所适从，人云亦云。<br>在具体的做人上，我希望你不要打断别人的谈话，不要娇气十足。<br>你每天至少要拿出两小时来读书，要回信写信给你的朋友。<br>不要老是想着别人应该为你做些什么，而要想着怎么去帮助他人。<br>借他人的东西要还，不要随便接收别人的恩惠。<br>要记住，别人的东西，再好也是别人的；自己的东西，再差也是自己的。<br>孩子，还有一件事，虽然做起来很难，但相当重要，这就是要有勇气正视自己的缺点。<br>你会一年年地长大，会渐渐遇到比你强、比你优秀的人，会发现自己身上有许多你所厌恶的缺点。<br>这会使你沮丧和自卑。<br>但你一定要正视它，不要躲避，要一点点地加以改正。<br>战胜自己比征服他人还要艰巨和有意义。<br>不管世界潮流如何变化，但人的优秀品质却是永恒的：正直、勇敢、独立。<br>我希望你是一个优秀的人。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[强化学习复习]]></title>
      <url>http://www.wrran.com/blog/2017/12/08/review/reinforcement-learning/</url>
      <content type="html"><![CDATA[<blockquote><p>Learn by Doing.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该文与《机器学习》的第16章相对应，将快速粗略的了解强化学习这一领域。</p><p>强化学习与其他学习模式不同之处，在于其<em>不只是预测</em>，更多的是要<em>做决策</em>。<br>其涉及的问题背景涉及四个不同的元素：动作空间$$A$$、状态空间$$X$$、奖赏函数：$$\mathrm{R}: X\times A\times X \mapsto \mathbb{R}$$、状态转移概率函数$$\mathrm{P}: X\times A\times X \mapsto \mathbb{R}$$，可被描述为四元组$$&lt;A, X, \mathrm{R}, \mathrm{P}&gt;$$。各个元素的关系如下图所示：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/4-keys-in-rl.PNG" alt="强化学习示意图" title="强化学习示意图"><br>而强化学习的目的在于学习出选取动作的“策略”，常记为$$\pi(\cdot)$$。就针对最终确定的动作是否为确定的，可以形式化为确定性策略$$a=\pi(x)$$；非确定性策略则为$$P(a\vert x)=\pi(x, a)$$，此时$$\pi(x, a)$$要满足概率的性质：$$\sum_{a\in A}\pi(x, a)=1$$及$$\forall{a\in A}, \pi(x, a)\ge0$$。而“策略”的好坏又建立在“回报”的概念上，即奖赏函数$$\mathrm{R}$$，常用<em>策略评价</em>的方式又分为两种：<code>T-step</code>$$\frac{1}{T}\sum_{t=1}^Tr_t$$和<code>discount</code>$$\sum_{t}^\infty\gamma^tr_t$$。</p><h1 id="马尔可夫过程"><a href="#马尔可夫过程" class="headerlink" title="马尔可夫过程"></a>马尔可夫过程</h1><p>马尔可夫过程中仅仅涉及到强化学习要素的两个：状态空间$$X$$和状态转移概率函数$$\mathrm{P}$$，故可以记为二元组$$&lt;X, \mathrm{P}&gt;$$。但同时其又满足<strong>无记忆性</strong>：$$P(x_{t+1}\vert x_t, \dots, x_0)=P(x_{t+1}\vert x_{t})$$及<strong>稳态分布</strong>：$$\underset{t\rightarrow\infty}{\mathrm{P}(x_{t+1})-\mathrm{P}(x_t)=0}$$。<br>表示马尔可夫过程，可以使用如下的状态图展示其关键的两元素：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/state_diagram-markov_process.PNG" alt="马尔可夫过程状态图" title="马尔可夫过程状态图"><br>但为了凸显$$t$$，也更易于处理，将其转为如下的水平视图：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/horizontal_state_diagram-markov_process.PNG" alt="马尔可夫过程状态图-水平视图" title="马尔可夫过程状态图-水平视图"></p><h1 id="马尔克夫回报过程"><a href="#马尔克夫回报过程" class="headerlink" title="马尔克夫回报过程"></a>马尔克夫回报过程</h1><p>与马尔可夫过程相比，马尔可夫回报过程MRP则又添加在每一个转移的路径上添加了对应的奖赏函数$$\mathrm{R}$$，构成三元组$$&lt;X, P, R&gt;$$。其状态图就如下所示<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/state_diagram-markov_reward_process.PNG" alt="马尔可夫回报过程状态图" title="马尔可夫回报过程状态图"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/horizontal_state_diagram-markov_reward_process.PNG" alt="马尔可夫回报过程状态图-水平视图" title="马尔可夫回报过程状态图-水平视图"><br>根据上图，我们也可以计算不同“策略评价”方式下的状态值函数$$V(b)=E[\sum_{t=1}^{T}r_t\vert x_0=b]$$或$$V(b)=E[\sum_{t=1}^T\gamma r_t\vert x_0=b]$$。<br>但要如何计算状态值函数才是可行的呢？如果直接进行计算，无疑会遇到“指数爆炸”问题。方法就是使用动态规划，由后往前反推着计算值函数。先计算第$$T$$步的值函数：由于无转移发生，所以将奖赏值设置为$$0$$；而在获得第$$t$$时刻的奖赏后，上一时刻$$t-1$$就可以通过递归式$$V(x)=\sum_{x’}\mathrm{P}(x’\vert x)(R(x’, x) + V(x’))$$计算得到（其中$$x’$$表示$$t$$时刻的状态）。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/solved-horizontal_state_diagram-markov_reward_process.PNG" alt="马尔可夫回报过程状态值求解" title="马尔可夫回报过程状态值求解"><br>再具体到不同的“评价策略”方式，在<code>T-step</code>下迭代$$T$$步即可；在<code>discount</code>方式下当相连时刻的值函数差值足够小时就停止：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/solved_algorithm-horizontal_state_diagram-markov_reward_process.PNG" alt="马尔可夫回报过程状态值求解算法" title="马尔可夫回报过程状态值求解算法"></p><h1 id="马尔可夫决策过程"><a href="#马尔可夫决策过程" class="headerlink" title="马尔可夫决策过程"></a>马尔可夫决策过程</h1><p>上述的马尔可夫过程与马尔可夫回报过程都只能用于观测，而无法进行干预。马尔可夫决策过程MDP通过引入动作空间$$A$$，组成四元组$$&lt;A, X, R, P&gt;$$，可进一步刻画模型对环境的干预过程。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/state_diagram-markov_decision_process.PNG" alt="马尔可夫决策过程状态图" title="马尔可夫决策过程状态图"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/horizontal_state_diagram-markov_decision_process.PNG" alt="马尔可夫决策过程状态图-水平视图" title="马尔可夫决策过程状态图-水平视图"><br>在MDP中，给定了“策略”$$\pi(\cdot)$$后，即可按照策略动作选择概率加和进而得到其累积回报：<br>$$V^{\pi}(x)=\sum_{a\in A}\pi(a\vert x)\sum_{x’\in X}P(x’\vert x,a)\Big(R(x, a, x’) + V^{\pi}(x’)\Big)$$<br>我们将形如上式的函数定义为状态值函数”state value function”：$$V^{\pi}(x)=E[\sum_{t=1}^Tr_t\vert x]$$<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/state_value_function.PNG" alt="状态值函数" title="状态值函数"><br>另外，还定义了状态动作值函数”state-action value function”：$$Q^{\pi}(x, a)=E[\sum_{t=1}^Tr_t\vert x, a]=\sum_{x’\in X}P(x’\vert x, a)\Big(R(x, a, x’)+V^{\pi}(x’)\Big)$$<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/state-action_value_function.PNG" alt="状态动作值函数" title="状态动作值函数"><br>可知，状态值函数$$V^\pi(\cdot)$$是处于某种状态$$x$$的总体评价，与具体的动作无关，而是考虑选择所有动作的可能性做出的评价；状态动作值函数$$Q^\pi(\cdot)$$则是处于某种状态$$x$$并做出动作$$a$$后的总体评价。这两种值函数有内在联系：$$V^{\pi}(x)=\sum_{a\in A}\pi(a\vert x)Q^{\pi}(x,a)$$。另外，状态动作函数$$Q^{\pi}(\cdot)$$参数涉及到动作$$a$$，因而更方便获取策略$$\pi(\cdot)$$。</p><p><strong>？最优性质</strong><br>这有两方面的含义，一是存在最优策略$$\pi^<em>$$使得$$\forall\pi,\forall x, V^{\pi^</em>}(x)\ge V^{\pi}(x)$$；二是存在最优值函数$$\forall x, V^{<em>}(x)=V^{\pi^</em>}(x)$$，且$$\forall x, \forall a, Q^<em>(x,a)=Q^{\pi^</em>}(x, a)$$。<br><em>注</em>：$$V^<em>(\cdot)$$与$$Q^</em>(\cdot)$$都不与具体的策略相关。<br><strong>Bellman Optimality Equation</strong><br>根据最优状态值的定义可以得到$$V^<em>(x)=\underset{a\in A}{\mathrm{max}}Q^</em>(x, a)$$；根据状态值函数与状态动作值函数的关系，可以得到$$Q^<em>(x,a)=\sum_{x’\in X}\mathrm{P}(x’\vert x, a)\Big(\mathrm{R}(x,a,x’)+\gamma V^</em>(x’)\Big)$$。至此，将得到下式：<br>$$Q^<em>(x,a)=\sum_{x’ \in X}\mathrm{P}(x’\vert x, a)\Big(\mathrm{R}(x,a,x’)+\gamma\underset{a\in A}{\mathrm{max}}Q^</em>(x’,a)\Big)$$<br>$$V^<em>(x)=\underset{a\in A}{\mathrm{max}}\sum_{x’\in X}\mathrm{P}(x’\vert x,a)\Big(\mathrm{R}(x,a,x’)+\gamma V^</em>(x’)\Big)$$<br><strong>?</strong>即唯一不动点就是最优值。</p><h2 id="求解MDP最优策略"><a href="#求解MDP最优策略" class="headerlink" title="求解MDP最优策略"></a>求解MDP最优策略</h2><p>主要思想是，一是获取策略性能评估（policy evaluation），二是改进策略（policy imporovement）。<br>策略评估，即借助先前介绍的迭代计算，对$$V^\pi(x)$$做出计算；策略改进，则借助Bellman Optimality Equation对策略$$\pi(\cdot)$$进行更新。<br><em>注</em>：使用Bellman Optimality Equation更新策略是可以改进该策略的，即通过该策略获得的回报至少不会下降：<br>记$$\pi’(x)=\underset{a\in A}{\mathrm{argmax}}\ Q^{\pi}(x,a)$$<br>$$<br>\begin{align}<br>V^\pi(x)&amp;\le Q^\pi(x,\pi’(x))\<br>&amp;=\sum_{x’}\mathrm{P}(x’\vert x,\pi’(x))\Big(\mathrm{R}(x,\pi’(x),x’)+\gamma V^\pi(x’)\Big)\<br>&amp;=\le\sum_{x’}\mathrm{P}(x’\vert x,\pi’(x))\Big(\mathrm{R}(x,\pi’(x),x’)+\gamma Q^\pi(x’,\pi’(x))\Big)\<br>&amp;=\cdots\<br>&amp;=V^{\pi’}(x)\<br>\end{align}<br>$$<br>综上得到所谓的<strong>策略迭代算法</strong>：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/policy_iterator_algorithm.PNG" alt="策略迭代算法" title="策略迭代算法"><br>收敛是指$$V^{\pi_{t+1}}(x)=V^{\pi_t}(x)$$<br>而图中的$$Q^{\pi_t}(\cdot)$$按照$$Q^{\pi_{t+1}}(x,a)=\sum_{x’}\mathrm{P}(x’\vert x,a)\Big(\mathrm{R}(x,a,x’)+\gamma\underset{a}{\mathrm{max}}Q^{\pi_t}(x’,a)\Big)$$计算。<br>这导致该算法存在大量冗余（评估策略和更新策略时进行了相近的计算）。<br>针对这点提出改进，我们就可以得到<strong>值迭代算法</strong>：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/value_iteration_algorithm.PNG" alt="值迭代算法" title="值迭代算法"><br>但即便如此，在仅仅考虑确定性MDP问题时，为使得上述算法收敛也需要迭代$$\Theta(\vert X\vert\dot\vert A\vert)$$次。这几乎是不可用的算法，如在$$19\times19$$ 的围棋问题中状态空间数量就达到了$$\vert X\vert=2.0\times10^{170}$$.</p><h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1><h2 id="马尔可夫与强化学习"><a href="#马尔可夫与强化学习" class="headerlink" title="马尔可夫与强化学习"></a>马尔可夫与强化学习</h2><p>在MDP中我们假定已知四元组$$&lt;X,A,R,P&gt;$$的所有信息；而在强化学习中，奖赏函数$$\mathrm{R}$$和状态转移函数$$\mathrm{P}$$往往不可知。此处，学者们提出了两种策略：一种是还原出$$\mathrm{R}$$和$$\mathrm{P}$$后，再求解MDP最优策略；另一种是不还原$$\mathrm{R}$$和$$\mathrm{P}$$，直接逼近最优策略。前者被成为“基于模型的强化学习”，后者被称为“免模型的强化学习”。<em>此处的模型是指马尔可夫决策过程的模型</em>。</p><h2 id="基于模型的强化学习"><a href="#基于模型的强化学习" class="headerlink" title="基于模型的强化学习"></a>基于模型的强化学习</h2><p>基于模型的强化学习概览图如下，“agent”在学习的过程中对马尔可夫决策过程进行了建模（对应图上的模型）。<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171210/overview_model-based_learning.PNG" alt="基于模型的强化学习-概览图" title="基于模型的强化学习-概览图"><br>其基本思路就是：</p><ol><li>探索环境</li><li>从观测中学习环境，优化“agent”中的模型</li><li>通过值迭代算法或者策略迭代算法优化策略</li></ol><p>其关键问题在于</p><ol><li>如何有效探索和学习模型</li><li>如何利用模型</li><li>如何结合模型学习与策略学习</li></ol><p>该思路的典型算法代表就是<code>RMax algorithm</code>:<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171210/RMax-algorithm.PNG" alt="RMax Algorithm" title="RMax Algorithm"><br>该算法的思想就是随机游走，并记录转移与回报的信息；访问未充分探索的状态与动作。但是其要求的样本复杂度过高：$$\mathrm{O}(\vert X\vert^2\vert A\vert V_{\mathrm{max}}^3/(\epsilon(1-\gamma))^3)$$。</p><h2 id="免模型的强化学习"><a href="#免模型的强化学习" class="headerlink" title="免模型的强化学习"></a>免模型的强化学习</h2><p>免模型的强化学习的思路就是，在探索环境同时进行策略的学习。主要方法有两种：”Monte-Carlo方法”和”时序差分方法”。注意在免模型的强化学习中，常常使用$$\mathrm{Q}^{\pi}(\cdot)$$函数而非$$\mathrm{V}(\cdot)$$，因为将函数$$\mathrm{V}(\cdot)$$转化为函数$$\mathrm{Q}(\cdot)$$是要借助无法观测的转移概率函数$$\mathrm{P}$$。</p><h3 id="Monte-Carlo学习"><a href="#Monte-Carlo学习" class="headerlink" title="Monte-Carlo学习"></a>Monte-Carlo学习</h3><p>该学习的思想就是<strong>用采样逼近期望</strong>。即用均值$$\hat{\mathrm{Q}}^\pi(x,a)=\frac{1}{m}\sum_{i=1}^m\mathrm{R}(\tau_i), \tau_i \text{is sample by following } \pi \text{ after } x,a$$去逼近期望$$\mathrm{Q}^\pi(x,a)=\mathbb{E}[\sum_{t=1}^T r_t\vert x,a]$$。<br>基于此出发，就可以得到如下的算法：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/before%20~monte-carlo%20rl%20algorithm.PNG" alt="Before ~Monte-Carlo RL Algorithm" title="Before ~Monte-Carlo RL Algorithm"></p><p>但我们考虑极端情况，即仅仅只执行当前策略收集样本；这将导致我们无法知晓其他路径的好坏，进而无法提高策略。警示我们需要<strong>探索环境</strong>。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/example%20of%20bad%20before%20~monte-carlo%20rl%20algorithm.PNG" alt></p><p>强化学习的目标是最大化长期累积奖赏。如果只探索，平均的分配尝试次数，无疑会浪费大量资源于探索上；如果只利用，又可能因为之前的经验不足，导致选择存在很大误差，而没有选到最优的策略。这就是强化学习中的一对需要平衡的关系：探索和利用。<br>根据平衡关系策略的不同，又可以分为三种：</p><ol><li>$$\epsilon$$-greedy<br>以概率$$1-\epsilon$$选取当下最好的决策，以概率$$\epsilon$$随机选择随机选取决策。另外应当注意$$\epsilon$$应当随时间慢慢减小；倘若发现在学习的过程中，决策所带来的回报不够高，则“重启”：将$$\epsilon$$的值置为初始值。</li><li>softmax<br>以概率$$P(k)=e^{\mathrm{Q}(k)/\theta}/\sum_{i=1}^{K} e^{\mathrm{Q}(i)/\theta}$$选取决策（$$\mathrm{Q}(i)$$表示？）。注意，当$$\theta$$越大，该概率越接近均匀分布；当$$\theta$$越小，该概率越接近$$\mathrm{Q}(\cdot)$$的值分布。但这种平衡关系策略可能会因为探索的不够，而导致<strong>概率坍陷</strong>。</li><li>upper confidence bound, UCB<br>另一种是根据Q值与置信度选取决策：$$\mathrm{Q}(k)+\sqrt{2\mathrm{ln}(n/n_k)}$$。其中，$$n$$为尝试的总次数，而$$n_k$$为当前动作尝试的总次数。当尝试某动作的次数慢慢变多后，置信度上升，后项$$\sqrt{2\mathrm{ln}(n/n_k)}$$的值变小；尝试概率应当变小。</li></ol><p>注意上述平衡探索与利用的策略可以是作用在<em>路径</em>层面，也可以是作用在<em>动作</em>层面。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/monte-carlo%20rl%20algorithm.PNG" alt="epsilon-greedy RL Algorithm" title="epsilon-greedy RL Algorithm"></p><p>但这又引起另一个问题，我们在Monte-Carlo算法框架下学习的策略实质上是带有随机性的$$\pi_\epsilon$$，而在使用时却是策略$$\pi$$。如果我们学习和使用的都是带有随机性的策略$$\pi_\epsilon$$，则称为<strong>同策略</strong>（on-policy）；而如果在学习中的策略是$$\pi_\epsilon$$，而使用时希望使用$$\pi$$，则称为<strong>异策略</strong>（off-policy）。<br>为此使用的方式就是<strong>重要性采样</strong>：<br>$$\mathbb{E}[f]=\int_xp(x)f(x)\mathrm{d}x=\int_x q(x)\frac{p(x)}{q(x)}f(x)\mathrm{d}x$$<br>上式中在数学上是等价的，但却意味着不同的采样方式：前者的采样方式是从分布$$p$$中进行$$\frac{1}{m}\sum_{i=1}^mf(x)$$；后者的采样方式是从分布$$q$$中进行$$\frac{1}{m}\sum_{i=1}^{m}\frac{p(x)}{q(x)}f(x)$$。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/off-policy%20monte-carlo%20rl%20algorithm.PNG" alt="Off-Policy Epsilon-Greedy RL Algorithm" title="Off-Policy Epsilon-Greedy RL Algorithm"></p><h3 id="时序差分方法"><a href="#时序差分方法" class="headerlink" title="时序差分方法"></a>时序差分方法</h3><p>我们在此先介绍<em>增量式求均值</em>：<br>$$<br>\begin{align}<br>\mu_t &amp;= \frac{1}{t}\sum_{i=1}{t}x_i\<br>&amp;=\frac{1}{t}(x_t+\sum_{i=1}^{t-1}x_i)=\frac{1}{t}(x_t+(t-1)\mu_{t-1})\<br>&amp;=\mu_{t-1}+\frac{1}{t}(x_t-\mu_{t-1})<br>\end{align}<br>$$<br>该方法的求均值方式与一般的求均值方式（算出所有数字的和及数字个数后进行，上述第一行公式）在数学上都可以得到相同的均值，但不同地方在于其可以“在线”计算：要求的存储量很少，且可以在时间上不断变化。<br>不是一般性的，可以将“增量式求均值”进行推广，得到$$\mu_t=\mu_{t-1}+\alpha(x_t-\mu_{t-1})$$。<br>回过头再来看所谓的”Monte-Carlo更新”，即为$$\mathrm{Q’}(x_t,a_t)\Leftarrow\mathrm{Q}(x_t, a_t)+\alpha(R-\mathrm{Q}(x_t, a_t))$$。而我们也可以将$$R$$视为从环境总抽取到的真实观测值，而$$\mathrm{Q}(x_t, a_t)$$是旧策略对其估计，因此也将$$R-\mathrm{Q}(x_t, a_t)$$称为”MC误差”。注意，此处$$\alpha$$越大，则当前采样对新$$\mathrm{Q}’$$函数的影响越大。<br>而在时序差分方法中将上式设定为（？？）<br>$$\mathrm{Q}(x_t,a_t)\Leftarrow\mathrm{Q}(x_t, a_t)+\alpha(r_{t+1}+\gamma\mathrm{Q}(x_{t+1},a_{t+1})-\mathrm{Q}(x_t,a_t))$$<br>后项中的$$\alpha(r_{t+1}+\gamma\mathrm{Q}(x_{t+1},a_{t+1})-\mathrm{Q}(x_t,a_t))$$被称为”TD误差”。其中，$$x_{t+1}$$是在上一次状态$$x_t$$后采取动作$$a$$后跳转到的下一个状态；$$a_{t+1}$$则是状态$$x_{t+1}$$上选择的动作。<br>据此就有人提出了相应的算法。针对“同策略”情形，典型的算法为SARSA。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/SARSA%20-%20on-policy%20time-difference%20rl%20algorithm.PNG" alt="SARSA - OnPolicy Time-Difference RL Algorithm" title="SARSA - OnPolicy Time-Difference RL Algorithm"><br>针对“异策略”情形，典型的算法为Q-Learning。其相较SARSA的不同之处为在决定处于下一状态$$x_{t+1}$$时该采用的动作$$a_{t+1}$$使用的是策略$$\pi(\cdot)$$而非带有随机性的策略$$\pi_\epsilon$$。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/Q-learning%20-%20off-policy%20time-difference%20rl%20algorithm.PNG" alt="Q-learning - OffPolicy Time-Difference RL Algorithm" title="Q-learning - OffPolicy Time-Difference RL Algorithm"></p><h2 id="lambda-return"><a href="#lambda-return" class="headerlink" title="$$\lambda$$-return"></a>$$\lambda$$-return</h2><p>但是单步时序差分控制的一个明显局限就是：值函数更新过慢。于是就有人提出了介于时序差分和蒙特卡罗评估的$$n$$-步评估，被称为$$\lambda$$-return。<br>我们再回顾下时序差分方法，其想法即是$$\mathrm{Q}’(x_t,a_t)\Leftarrow\mathrm{Q}(x_t,a_t)+\alpha(R-\mathrm{Q}(x_t,a_t))$$，而$$R=r_{t+1}+\gamma\mathrm{Q}(x_{t+1},a_{t+1})$$。但我们也可进一步推广，将时序差分中的步数扩大，如扩大至两步$$R^{(2)}=r_{t+1}+\gamma r_{t+2}+\gamma^2\mathrm{Q}(x_{t+2},a_{t+2})$$、扩大至三步$$R^{(3)}=r_{t+1}+\gamma r_{t+2}+\gamma^2 r_{t+3}+\gamma^3\mathrm{Q}(x_{t+3},a_{t+3})$$，乃至第$$i$$步$$R^{(i)}=\Big(\sum_{i=1}^n\gamma^{i-1}r_{t+i}\Big)+\gamma^n\mathrm{Q}(x_{t+n},a_{t+n})$$。其实，考虑最极端情况时$$R^{(\mathrm{max})}=\sum_{i=1}^{T}\gamma^{i-1}r_{t+i}$$就等价于蒙特卡罗的评估方法了。至此，我们可以将“增式求和”的公式设置为$$\mathrm{Q}(x_t,a_t)\Leftarrow\mathrm{Q}(x_t,a_t)+\alpha(R^{(k)}-\mathrm{Q}(x_t,a_t))$$。<br>学者们在上述思想的基础上，又提出了$$\lambda$$-return，即$$k$$步加权平均。其将上面的$$R^{(k)}$$设置为$$R^\lambda=(1-\lambda)\sum_{k=1}^{\infty}\lambda^{k-1}R^{k}$$，并定义$$\mathrm{TD}(\lambda): \mathrm{Q}(x_t, a_t)=\mathrm{Q}(x_t, a_t)+\alpha(R^\lambda-\mathrm{Q}(x_t, a_t))$$<br>但上述求法并没有解决要到第$$k$$步才能更新策略的弊端。为此，学者们设计了<strong>资格迹</strong>（Eligibility Traces）。其想法就是通过维护状态——上次访问时间记忆$$E_t(x, a)$$：<br>$$<br>\begin{align}<br>E_0(x, a) &amp;=0\<br>E_t(x, a) &amp;=\gamma\lambda E_{t-1}(x, a)+\mathbb{I}(x_t=x,a_t=a)\<br>\end{align}<br>$$<br>这样设计的$$E_t(x, a)$$图像如下：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/E%28x%29.PNG" alt="E_t(x, a)" title="E_t(x, a)"><br>之后将”TD误差”还如往常：$$\delta_t=r_{t+1}+\lambda\mathrm{Q}(x_{t+1}, a_{t+1})-\mathrm{Q}(x_t,a_t)$$<br>而对所有状态-动作对，更新对应的$$\mathrm{Q}$$函数：$$\mathrm{Q}(x, a)\Leftarrow\mathrm{Q}(x, a)+\alpha\delta_t E_t(x, a)$$<br>将该想法融入到原先的”SARSA”算法中就可以得到算法”SARSA($$\lambda$$)”：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/SARAS%28lambda%29.PNG" alt="SARAS(\lambda)" title="SARAS(\lambda)"></p><h2 id="值函数近似"><a href="#值函数近似" class="headerlink" title="值函数近似"></a>值函数近似</h2><p>说完了怎么在强化学习问题中进行学习，我们再来关注下如何表示“值函数”。原先的表格表达方式十分灵活，能够表示所有可能的策略，但其天生缺陷就是无法表示连续空间的策略；而为此就出现了<strong>值函数近似</strong>，如$$\hat{\mathrm{V}}(x)=w^T\phi(x)$$，$$\hat{\mathrm{Q}}(x, a)=w^T\phi(x, a)$$（其中$$w$$为参数向量，$$\phi(\cdot)$$为特征映射函数），其可以表示连续空间上的一些问题，但付出的代价就是无法表达所有可能的策略。<br>而针对上述情形，我们该如何学习、更新策略或模型呢？<br>回顾之前的MC误差与TD误差：<br>$$<br>\begin{align}<br>\mathrm{Q}(x_t, a_t) &amp;\Leftarrow\mathrm{Q}(x_t, a_t)+\alpha(R-\mathrm{Q}(x_t, a_t))\<br>\mathrm{Q}(x, a) &amp;\Leftarrow\mathrm{Q}(x,a)+\alpha(r_{t+1}+\gamma\mathrm{Q}(x_{t+1}, a_{t+1})-\mathrm{Q}(x_t, a_t))\<br>\end{align}<br>$$<br>其中对于$$\mathrm{Q}(\cdot)$$的更新都形如$$\mathrm{Q}(\cdot)+=\Delta$$，且$$\Delta$$都是目标值与通过$$\mathrm{Q}(\cdot)$$预估值的差别。对应到连续空间上，我们就可以使用梯度下降的算法，计算出随机梯度以替代上述的$$\Delta$$：<br>$$<br>\mathrm{\Delta}w_t =\mathrm{\theta}(\mathrm{Q}^\pi(x_t,a_t)-\hat{\mathrm{Q}}(x_t,a_t))\nabla\hat{\mathrm{Q}}(x_t,a_t)<br>$$</p><p>具体到MC误差中，即用下式替代：<br>$$\mathrm{\Delta}w_t =\mathrm{\theta}(R-\hat{\mathrm{Q}}(x_t,a_t))\nabla\hat{\mathrm{Q}}(x_t,a_t)$$<br>而在TD误差中，则使用下式替代：<br>$$\mathrm{\Delta}w_t =\mathrm{\theta}(r_{t+1}+\lambda\hat{\mathrm{Q}}(x_{t+1},a_{t+1})-\hat{\mathrm{Q}}(x_t,a_t))\nabla\hat{\mathrm{Q}}(x_t,a_t)$$<br>在资格迹中，则使用下式替换原先的$$E_t$$<br>$$E_t=\gamma\lambda E_{t-1}+\nabla_w\hat{\mathrm{Q}}(x_t, a_t)$$</p><p>将值函数近似的想法融入到”Q-learning”中，可以得到如下算法：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/approximate-value-function%20q-learning.PNG" alt="值函数近似Q-Learning" title="值函数近似Q-Learning"></p><p>我们再回过头来，看看除了最简单的线性函数近似模型外，还可以使用什么模型？<br>线性模型近似：$$\hat{\mathrm{Q}}(x,a)=w^T\phi(x,a)$$；对应的梯度为$$\nabla_w\hat{\mathrm{Q}}(w,a)=\phi(x,a)$$。<br>有人也尝试将原始特征“离散化”形成离散表格，进而处理；但这种做法的问题就是可能粒度太粗。而有人将“核化”思想运用进来：$$\hat{\mathrm{Q}}(x,a)=\sum_{i=1}^{m}w_i\mathrm{K}((x,a),(x_i, a_i))$$，其中$$(x_i, a_i)$$为初始随机采样。还有使用非线性模型，如神经网络$$\hat{\mathrm{Q}}(x, a)=f(x, a)$$，此时就可以将梯度$$\nabla_w\hat{\mathrm{Q}}(x_t, a_t)$$传给神经网络以训练参数。</p><p>另外在实现过程中，针对单个样本求梯度会出现方差极大的问题；对此的解决方案就是“批量评估”，收集历史数据$$D={(x_1, Q_1^\pi), (x_2, Q_2^\pi), \cdots, (x_m, Q_m^\pi)}$$，求解回归模型$$J(w)=\mathbb{E}_D[{(Q^\pi-\hat{Q}(x))}^2]$$（在线性模型上有对应的闭式解，在神经网络上可以使用”batch update”技术）。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-reinforcement-learning/batch-update%20policy-iteration.PNG" alt="批量决策迭代算法" title="批量决策迭代算法"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/26708119/" target="_blank" rel="noopener">周志华. 机器学习</a></p>]]></content>
      
        <categories>
            
            <category> review </category>
            
            <category> reinforcement learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> machine learning </tag>
            
            <tag> reinforcement learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Reinforced mnemonic reader for machine comprehension]]></title>
      <url>http://www.wrran.com/blog/2017/12/08/note/paper-reading/question%20and%20answering/reading%20comprehension/2017-12-09/</url>
      <content type="html"><![CDATA[<blockquote><p>读书百遍，其义自见</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文是我认为处理机器阅读理解问题的又一代表性框架。机器阅读理解问题如若比作人类的阅读活动，则可以分解为三步：理解、推理和回答。对应到机器阅读理解问题上，就是：表示、推理和回答。<br>作者提出了<code>Reinforced Memonic Reader</code>将MemNN与Attention Mechanism结合起来。在“表示”层面，融入更多的句法、语言学等的特征；在“推理”上，不仅使用”Attention Mechanism”还借助”MemNN”来表示与推理；在“回答”上，较为创新的地方在于运用增强学习的思路，将SQuAD问题中<code>F1-score</code>作为奖赏来优化模型，并且还在多次“hop”中输出答案的起止位置以精修答案。</p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>对于机器阅读理解问题而言，就是在阅读了上下文$$C$$和问题$$Q$$之后，预测出答案$$A$$（在SQuAD问题中，$$A$$一定是$$C$$的某个片段）。形式化描述，就是求解问题$$p_\theta(A\vert C,Q)$$，其中$$\theta$$为模型参数。下图就是该模型的概览图，涉及到三个组件：“Feature-rich Encoder”、“Iterative Aligner”和“Memory-based Answer Pointer”。其实，也分别对应：表示、推理和回答三个步骤。<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171210/high-level%20overview%20of%20Reinforced%20Mnemonic%20Reader.PNG" alt="The high-level overview of Reinforced Mnemonic Reader, from [1]." title="The high-level overview of Reinforced Mnemonic Reader, from [1]."></p><h2 id="Feature-rich-Encoder"><a href="#Feature-rich-Encoder" class="headerlink" title="Feature-rich Encoder"></a>Feature-rich Encoder</h2><p>这层负责将上下文$$C$$与问题$$Q$$中的文字表示成稠密的低维表示后，交给后续网络进行处理。与之前做法相似，都使用了”word-level embedding”，也使用了通过biLSTM编码后的”char-level embedding”（只取最后一个隐状态表示）拼接后作为该词语的“word-embedding”。<br>除此之外，作者还涉及了如下几种特征来增强低维稠密表示的信息：</p><ol><li>“Exact Matching”: 上下文中的词是否在问题中出现过或问题中的词是否在上下文中出现过，为一个0-1的布尔量</li><li>“Part-of-Speech”: 对上下文与问题中的每个词语都打上POS标签，之后转换为稠密向量与”word-embedding”拼接起来。</li><li>“Named-Entitiy”: 与2类似，不过打上的是命名实体标签。</li><li>“Query-Category”: 问题询问的类别往往决定了推理过程中关注信息的重点，如问“when”时更多关注时间实体，问“where”时更多关注地点等。为此作者还抽取出数量最多的几个类别，并将该问题类别的表示添加到问题表示序列中去。</li></ol><p>获取了上述字词层面的表示之后，作者再使用biLSTM获得上下文和问题的中间表示：<br>$$q_i=\mathrm{biLSTM}(q_{i-1}, \tilde{x}_i^q), \forall i\in [1,\dots,n]$$<br>$$c_j=\mathrm{biLSTM}(c_{j-1}, \tilde{x}_j^c), \forall j\in [1,\dots,m]$$<br>其中，$$q_i\in\mathbb{R}^{2h}$$和$$c_j\in\mathbb{R}^{2h}$$，$$h$$为隐层状态的维度大小；$$Q’={q_i}_{i=1}^n\in\mathbb{R}^{2h\times n}$$为问题的最终表示，$$C’={c_j}_{j=1}^m\in\mathbb{R}^{2h\times m}$$为上下文的最终表示。</p><h2 id="Iterative-Aligner"><a href="#Iterative-Aligner" class="headerlink" title="Iterative Aligner"></a>Iterative Aligner</h2><p>该部分的构架就借鉴了MemNN的做法，通过了多个”hop”。并在每一个”hop”中，根据与问题表示的交互（”co-attention”）和与自己的交互（”self-attention”）更新表示。</p><h3 id="Interactive-Aligning"><a href="#Interactive-Aligning" class="headerlink" title="Interactive Aligning"></a>Interactive Aligning</h3><p>迭代对齐操作会在共$$T$$次”hops”中都执行。以第$$t$$次”hop”而言，我们首先会计算出”coattention matrix”:$$B^t\in\mathbb{R}^{n\times m}$$，其中$$B^t_{ij}={q_i}^T\cdot\breve{c}_j^{t-1}$$（注意，$$\breve{c}_j^{t-1}$$是指上一次”hop”过程中上下文第$$j$$个词语的表示，且$$\breve{c}_j^0=c_j$$。可以将$$B^t_{ij}$$理解为问题中第$$i$$个词语和上下文第$$j$$个词语的相似度。<br>对于问题部分，如下操作：<br>$$b_j^t=\mathrm{softmax}(B^t_{:j})$$<br>$${\tilde{q}}_j^t=Q’\cdot b_j^t,\forall j\in [1,\cdots,m]$$<br>此处的$${\tilde{q}}_j^t$$可以理解为阅读到第$$j$$个词语后该如何理解问题（个人理解，我将之称为”context-awared query”）。<br>为了计算”query-awared context”，作者使用下文将介绍的<code>SFU</code>进行计算：<br>$${\bar{c}}_j^t=\mathrm{SFU}(\breve{c}<em>j^{t-1},\tilde{q}</em>{j}^t,\breve{c}_j^{t-1}\circ\tilde{q}_j^t,\breve{c}_j^{t-1}-\tilde{q}_j^t)$$<br>其中，$$\hat{C}^t={\hat{c}^t_j}_{j=1}^m$$表示的即为第$$t$$次”hop”时的”query-aware context”的表示。$$\circ$$表示”element-wise multiplication”，$$-$$表示”element-wise subtraction”。</p><h3 id="Semantic-Fusion-Unit"><a href="#Semantic-Fusion-Unit" class="headerlink" title="Semantic Fusion Unit"></a>Semantic Fusion Unit</h3><p><code>SFU</code>表示的是一个语义融合计算单元，”Semantic Fusion Unit”。其输入为一个向量$$r$$及一系列融合向量$${f_i}^k_{i=1}$$；其输出为向量$$o$$。注意，$$r$$、$${f_i}^k_{i=1}$$及$$o$$的维度都是相同的。设计该计算单元目的不仅在于揭示融合向量的相关内容，还可以保存输入的一些内容不变。其计算公式如下：<br>$$\tilde{r}=\mathrm{tanh}(W_r([r;f_1;\cdots;f_k]) + b_r)$$<br>$$g=\sigma(W_g[r;f_1;\cdots;f_k] + b_g)$$<br>$$o=g\circ\tilde{r} + (1-g)\circ r$$<br>其中，$$W_r$$、$$W_g$$、$$b_r$$和$$b_g$$是需要学习的参数，$$\sigma$$表示Sigmoid激活函数。</p><h3 id="Self-Aligning"><a href="#Self-Aligning" class="headerlink" title="Self Aligning"></a>Self Aligning</h3><p>在通过上面计算之后，我们可以获取到”query-aware context”表示；但是这种表示也许只局限于局部信息，而没有太多获取全局信息的能力。为此，作者又设计了”self attention”机制。同样，先计算相似度矩阵$$\tilde{B}^t\in\mathbb{R}^{m\times m}$$：<br>$$\tilde{B}^t_{ij}=\mathbb{1}(i\neq j){\hat{c}_i^t}^T\cdot\hat{c}<em>j^t$$<br>其中，$$B</em>{ij}^t$$即表示第$$i$$个词语与第$$j$$个词语的相似度，同时对角线上的元素被置为$$0$$。<br>后面的处理过程与上述的”Iteractive Aligner”类似，通过$$\mathrm{softmax}$$和$$\mathrm{SFU}$$之后将得到矩阵$$\hat{C}^t={\hat{c}^t_j}^m_{j=1}$$。</p><h3 id="Aggregating"><a href="#Aggregating" class="headerlink" title="Aggregating"></a>Aggregating</h3><p>最后，再使用一个biLSTM对$$\hat{c}^t_j$$的表示序列进行编码，并将自己的隐层状态序列$$\check{C}^t={\check{c}^t_j}^m_{j=1}$$输入到下一次”hop”或作为答案预测模块的输入。</p><h2 id="Memory-based-Answer-Pointer"><a href="#Memory-based-Answer-Pointer" class="headerlink" title="Memory-based Answer Pointer"></a>Memory-based Answer Pointer</h2><p>总的来说，在SQuAD问题上答案一定是上下文的某个片段；因此答案预测可以简化为答案开始与结束位置的预测。与之前的做法不同，作者将该过程建模为:<br>$$p_\theta(A\vert C,Q)=p_s(i\vert C,Q)\cdot p_e(j\vert i,C,Q)$$<br>而非独立预测开始与结束位置，更加贴近实际问题。下文用$$p_s(i)$$表示$$p_s(i\vert C,Q)$$，用$$p_e(j)$$表示$$p_e(j\vert i,C,Q)$$。<br>在此处作者也沿用了MemNN的思想，用一个向量来表示之前的预测答案或者相关信息。该记忆向量$$z_s^l$$使用问题的总体表示$$\vec{q}\in\mathbb{R}^{2h}$$来初始化，后期不断迭代优化。<br>每一次的”hop”都会进行答案的预测。以第$$l$$次hop为例，预测<em>答案开始边界</em>时如下：<br>$$s_i^l=\mathrm{FN}(\check{c}_i^T,z_s^l,\check{c}_i^T\circ z_s^l)$$<br>$$p_s^l(i)=\mathrm{softmax}(w_s^ls_i^l)$$<br>其中，$$\mathrm{FN}$$表示一个前馈神经网络。经过上述操作之后，我们也可以得到一个”attention-pooling context”向量$$u^l_s\in\mathbb{R}^{2h}$$：$$u_s^l=\check{C}^T\cdot p_s^l$$；而预测<em>答案结束边界</em>的记忆向量则据此进行更新$$z_e^l=\mathrm{SFU}(z_s^l,u_s^l)$$。与上述操作类似，我们通过下述计算过程得出其在上下文各处的概率分布：<br>$$e_j^l=\mathrm{FN}(\check{c}_j^T,z_e^l,\check{c}_j^T\circ z_e^l)$$<br>$$p_e^l(j)=\mathrm{softmax}(w_e^le_j^l)$$<br>如果当前的”hop”不是最后一次，则再计算”attention-pooling context”表示并通过$$\mathrm{SFU}$$计算后更新下一次”hop”计算的记忆向量。</p><h2 id="Training-Procedure"><a href="#Training-Procedure" class="headerlink" title="Training Procedure"></a>Training Procedure</h2><p>作者除了采用常规的做法，即将答案开始位置与答案结束位置的负对数似然作为目标函数外：<br>$$J_{MLE}(\theta)=-\sum_{i=1}^N\mathrm{log}\ p_s^L(y_i^s)+\mathrm{log}\ p_e^L(y_i^e)$$<br>还认为上述目标仅仅优化了SQuAD中的“Exact Matching”评估指标，而忽略了“F1 score”。故此，添加如下目标函数：<br>$$J_{RL}(\theta)=-\mathbb{E}<em>{\hat{A}\sim p</em>{\theta}(A\vert C,Q)}[\mathrm{R}(\hat{A}, A^*)]$$<br>其中的$$p_\theta(\cdot)$$即为要学习的策略，$$\mathrm{R}$$则为根据”F1 score”评判给出的得分。<br>综上，最后的训练目标为$$J(\theta)=\lambda J_{MLE}(\theta)+(1-\lambda)J_{RL}(\theta)$$</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://arxiv.org/pdf/1705.02798" target="_blank" rel="noopener">[1] Minghao Hu, Yuxing Peng, &amp; Xipeng Qiu. (2017). Reinforced mnemonic reader for machine comprehension.</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> question and answering </category>
            
            <category> reading comprehension </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> question and answering </tag>
            
            <tag> reading comprehension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[团队建设建议]]></title>
      <url>http://www.wrran.com/blog/2017/12/01/note/miscellaneous/2017-12-01/</url>
      <content type="html"><![CDATA[<blockquote><p>以铜为镜，可以正衣冠，以史为镜，可以知兴替，以人为镜，可以明是非</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>上次组会过程中有稍微讨论下记录组会的事情，之后又花了点心思考虑当前策略下可能有所提升的方法，于是便整理成该文。本文分为三部分，“动机”部分阐述希望该文可以达到的最终目标；“分析”部分讲述产生措施时的各种考虑，方便读者更好的理解最终的“措施”；而“措施”部分则只是罗列提升团队建设的策略。最终，由衷地祝愿我们的团队越来越好。</p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>前些日子在阅读《女士品茶》中，作者在第某章（没找到具体章节）提到了统计学在管理学上的应用：原先某企业让女工负责检查产品是否合格，并要求将不合格的产品抬放到指定位置，结果发现统计的产品合格率低的惊人；而经过统计学家调查后，得知产品十分笨重，这样的流程设计导致系统差错，最终导致无法获得真是的产品合格率的信息。这一实例传递了一个有力的信号：企业这一系统是否正常运作可能取决于方方面面的细微之处。一个团队建设的成果与“系统的质量控制”密切相关。系统的“生产线”的设置很大程度上决定了团队长期的全局的增益。为此，收集采纳一些有针对性的改进措施是十分有必要的；但也要求我们对各个措施进行度量及分析，否则可能加重团队成员负担。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>该节主要从以下几点展开陈述，并提供几种考虑，为最后的采取的措施定下基础。</p><h2 id="组会记录"><a href="#组会记录" class="headerlink" title="组会记录"></a>组会记录</h2><p>在上次组会中已有讨论，每次组会的演讲者都是精心准备一段时间后才整理出的报告。这些无疑是十分宝贵的资料，积累下来后也将造福以后入组的同学，让同学们更快接触自然语言处理的全貌与任务。<br>看清该方面改进的重要性后，我们再来考虑记录什么及如何记录的问题。当前的组会记录不是没有，但却只是停留在PPT层面。而PPT往往只是报告者的线索记录，缺乏细节与连贯性；同时组会中的讨论也无法反映在PPT上，但这也相当重要。因此，我建议<strong>使用摄像机设备</strong>全程录像作为组会的<em>最直接、最详尽</em>的记录。<br>但上述措施又引发我的担忧，每次组会时长可能长达两三个小时，时间过长；这将导致后期人们不愿或者没时间查看如此长度的视频记录。故而，<strong>再建议一项举措</strong>从两方面缓解上述问题：一是每一个<em>报告人</em>都至少与PPT一起提供一份讲稿或摘要，概述报告内容；二是观众每人就报告内容尽可能写出各自反馈，总结自己认为有趣有用的点（建议老师的反馈也共享，一是提供新的视角，二是提供好的反馈范例）。这里不得不提另一种措施：轮流安排同学进行会议记录。但在我看来，这种方法有两种不足：<br>a)听报告时记笔记，往往都只是记录了自己认为有趣有用的点，这必然导致内容不连贯、信息碎片化；<br>b) 同学可能对于报告人的内容没有多少了解，一边努力理解报告内容，一边整理输出成规范易读的报告，这其中的难度由此可知。</p><p>综上，对于该方面的建议<strong>措施总结</strong>如下：</p><ol><li>视频记录：最详尽的记录</li><li>报告人提交PPT及讲稿或摘要</li><li>观众提交反馈心得</li></ol><h2 id="反馈制度"><a href="#反馈制度" class="headerlink" title="反馈制度"></a>反馈制度</h2><p>组会报告是一个难得锻炼自己的平台，但当下对报告人的反馈是很不充足的。组会报告是一个通过PPT、讲稿等辅助的输出过程，无疑很大程度上锻炼我们的口语表达能力及把握要点的能力（如，制作PPT）。但当前虽然偶尔在会上会提及，但却未给组员们提供<strong>一个明确的标准</strong>：什么是好的PPT，什么是好的讲演。为此建议先设定标准，参考翻译中的<em>信达雅</em>，暂时考虑的评测有以下几个方面：a) 内容丰富 b) 主题突出 c) 形象生动。这在大组会的流程上有所体现，但我不了解反馈是否及时有效地到达报告人，是否真实有力地提高了报告人的讲演水平。这也以为着我们要从讲演者那儿收取反馈，改进“标准”的制定。<br>另一方面，当前的奖惩制度还不完善，以PPT为例：做的差的会指出错误，做的一般的就正常操作，那做的优秀的呢？对此，提出如下几点考虑：a) 老师提供针对讲演及PPT等材料的评价及具体整改措施。教师拥有长期教学经历，这对于学生们还说无疑将是份宝贵的财富 b) 对于讲演优秀的，予以表彰，方式可以是：发放奖状、奖品乃至奖金。同时，也将讲演者的PPT及讲稿等材料做上标记，为“什么是好的讲演”提供样例，为同学提供更加直观的感受；同时也鼓励同学间良性竞争。至于，<em>如何评选</em>优秀讲演可能按下述方式进行：根据听众的评分进行评选，其中老师的评分占50%，而同学的评分均值占50%。<em>评选周期</em>可以设定为半学期一次或一学期一次。还有一点是，强烈反对因为讲演表现不好而扣钱：上台讲演本身就已经比其他同学花费更多精力了，不该吃力不太好；否则可能会导致士气低落。</p><p>综上，对于该方面的建议<strong>措施总结</strong>如下：</p><ol><li>设定明确标准</li><li>教师提供具体整改措施或建议</li><li>评选优秀讲演者，予以表彰</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>上述这些建议同样也适用于大组会。建议在本组试点之后，根据效果有针对的推广到大组会。<br>还值得推敲的有：</p><ol><li>讲演优秀的标准如何制定</li><li>讲演优秀的评选方式是否合适</li></ol><h1 id="措施汇总"><a href="#措施汇总" class="headerlink" title="措施汇总"></a>措施汇总</h1><p>根据“分析”总结，改进措施如下：</p><ol><li>视频记录会议</li><li>报告人提交PPT及讲稿或摘要</li><li>听众提交心得及反馈：记录自己认为有趣、有用的点；反馈讲演的好坏</li><li>设定具体可评估的优秀讲演标准</li><li>教师提交针对讲演的具体整改措施或建议</li><li>评选优秀讲演者，予以表彰</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/1626392/" target="_blank" rel="noopener">萨尔斯伯格. 《女士品茶》</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> miscellaneous </category>
            
        </categories>
        
        
        <tags>
            
            <tag> option </tag>
            
            <tag> miscellaneous </tag>
            
            <tag> team building </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Two-Stage Synthesis Networks for Transfer Learning in Machine Comprehension]]></title>
      <url>http://www.wrran.com/blog/2017/11/27/note/paper-reading/question%20and%20answering/reading%20comprehension/2017-11-26/</url>
      <content type="html"><![CDATA[<blockquote><p>巧妇难为无米之炊</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文着眼于阅读理解问题中“如何生成问题”的层面，提出用迁移学习的方式解决数据不足的问题。在阅读理解问题上，需要手动标注的数据有两部分：问题及答案。本文具体解决的阅读理解问题是类似SQuAD这样的数据集：答案是文章中的片段。除此之外，本文的模型还对该问题进行了简化，将数据生成分为两步：先选择关注的答案，后根据答案生成问题。具体来说，答案的选择被作者建模为序列标注问题；而问题的生成被建模成输入为文档-答案的Encode-Decode问题，并为了应对命名实体或罕见词引入了Copy-Mechanism。</p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>本文的动机明显，即阅读理解是当前研究热点，但文档-问题-答案这样的高质量、大规模的数据集的构造耗时耗力。倘若可以将在大量训练数据上训练的模型迁移到无标记数据上并性能不俗的话，无疑有着重要的意义。<br>不过我对于迁移学习的了解不够深入，这篇文章在我看来更像是一篇通过“数据增强”间接解决了领域迁移问题的文章。</p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="问题形式化"><a href="#问题形式化" class="headerlink" title="问题形式化"></a>问题形式化</h2><p>本文处理的数据是形如SQuAD数据集的：该系列数据的元素由三部分组成，文档$$p={p_0, p_1, \cdots, p_n}$$、问题$$q={q_0, q_1, \cdots, q_n}$$、答案的起止位置$$a={a_{start}, a_{end}}$$。给定了大量领域$$s$$的标记数据$${p, q, a}_{i=1}^{N}$$后，建模任务就是寻找一个合适模型$$f_s(p, q) \mapsto {a_{start}, a_{end}}$$。本文在此之外，还需要将源领域的模型$$f_s$$迁移到目标领域$$f_t$$上去。而目标领域只有大量的文档，而无问题-答案，即$${p}_{i=1}^k$$，本文的目的即通过模型学习到$$P(q, a\vert p)$$。</p><h2 id="模型详述"><a href="#模型详述" class="headerlink" title="模型详述"></a>模型详述</h2><p>模型的整体框架如下图所示，作者将问题-答案的生成分为两步：先生成答案，再生成问题，即将联合分布$$P(q, a\vert p)$$简化为$$P(q\vert p, a)P(a\vert p)$$。第一步中，将通过双向的LSTM产生文档$$p={p_1, p_2, \cdots, p_n}$$的<code>BOI</code>标记序列；第二步中，选取上述过程中标记的某一个答案作为文档的额外信息，通过一个单向LSTM后生成问题。下面将详述这两步。<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171126/Illustration%20of%20the%20two-stage%20SynNet.PNG" alt="&quot;Illustartion of the two-stage SynNet, from [1].&quot;" title="Illustartion of the two-stage SynNet, from [1]."></p><h3 id="Answer-Synthesis-Module"><a href="#Answer-Synthesis-Module" class="headerlink" title="Answer Synthesis Module"></a>Answer Synthesis Module</h3><p>对于训练数据，我们可以得到$${p, q, a}$$，据此将答案中的词分别标上$$IOB_{start}, IOB_{mid}, \cdots, IOB_{end}$$的标签，之外的词标上$$NONE$$标签。如是处理后，作为训练<code>Answer Synthesis Module</code>的数据。该模块较为简单，使用双向LSTM编码后得到各个词的隐层表示；之后再通过两层前馈网络；最后通过<code>Softmax</code>得到对应的标签序列$${t_1, t_2, \cdots, t_n}$$。最后将所有标记不为$$NONE$$的作为答案，输入到下一模块中。</p><h3 id="Question-Synthesis-Module"><a href="#Question-Synthesis-Module" class="headerlink" title="Question Synthesis Module"></a>Question Synthesis Module</h3><p>经过上一模块的处理后，此模块的输入就变为了文档$$q={q_1, \cdots, q_n}$$、答案$$a={a_{start}, a_{end}}$$。在这一模块中，作者也将难以处理的联合分布$$P(q_1, \cdots, q_n \vert p_1, \cdots, q_n, a_{start}, a_{end})$$简化为条件分布$$\prod_{i=1}^{n}\ P(q_i\vert p, a, q_{\le i})$$。<br>该模块建模的方式很类似<code>Encoder-Decoder</code>框架：先通过上述双向LSTM得到词语序列的隐层表示之后，再各个表示基础上增加表示是否为答案的$${0,1}$$标记；之后解码器在时刻$$i$$时根据上一时刻的解码器隐层状态$$q_{i-1}$$和编码器所有隐层状态$$h$$得出当前时刻的隐层表示$$q_{i}$$。但为了应对命令实体或者罕见词的问题，此处也借鉴了<code>Copy Mechanism</code>：具体而言，引入隐变量来标识当前解码是直接从原文拷贝还是自己生成。此处将从原文拷贝的概率记为$$p^$$，拷贝内容由一个PtrNet提供；则直接生成的概率为$$p^=1-p^$$，生成的内容为预先定义的词表中的词语。综上，第$$i$$时刻生成的词语概率为$$q_{i}^*=p^\ l^(w_i) + p^\ l^(w_i)$$，其中$$l(w_i)$$表示具体模型给出的生成词$$w_i$$的概率。<br>至于训练过程，因为并没有标记数据告诉模型，是应当拷贝还是自己生成。所以作者使用前向后向算法将这个隐变量的影响排除掉（并不明白具体细节，待后续了解），并以最小化交叉熵为训练目标。</p><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><p>上述过程实质上是训练了一个生成问题-答案的模型$$g_s$$。要真正达到迁移学习的目的，还需要在源领域训练出阅读理解模型$$f_s(p, q)$$。之后，再将模型$$f_s(p, q)$$在生成的数据$$x_t={p_t, q_t, a_t}_{i=1}^{k}\ \sim\ g_s$$上进行微调。但实际操作中，模型生成的数据可能质量并不高，为此作者按照$$1:k$$的比例混合“生成数据”和源领域数据，以期望可以克服生成的数据与真实数据之间的分布差异。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://pdfs.semanticscholar.org/598d/8d69ba0cba5831f54f1af7066f18dc3af760.pdf?_ga=2.81708819.58083736.1511716337-1994181370.1506067544" target="_blank" rel="noopener">[1] Deng, L., Golub, D., Huang, P., &amp; He, X. (2017). Two-Stage Synthesis Networks for Transfer Learning in Machine Comprehension. EMNLP.</a></p>]]></content>
      
        <categories>
            
            <category> paper reading </category>
            
            <category> question and answering </category>
            
            <category> reading comprehension </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[A Constituent-Centric Neural Architecture for Reading Comprehension]]></title>
      <url>http://www.wrran.com/blog/2017/11/12/note/paper-reading/question%20and%20answering/reading%20comprehension/2017-11-12/</url>
      <content type="html"><![CDATA[<blockquote><p>缘督以为经，可以保身，可以全生，可以养亲，可以尽年。<br>@ 庄子集解 in 庖丁解牛</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这篇论文动机强烈，模型新颖，实验充分，是一篇学习如何设计实验、陈述动机等的不二选择。<br>该文要解决的问题是数据集SQuAD。作者发现在训练集上问题的答案都集中在句法树的某些成分上，为此提出一种设计新颖的以句法树为核心的神经网络模型，并取得了state-of-the-art的结果。该模型通过参照句法树的信息设计了双向LSTM，以此捕捉到本句话的句法信息；又在之上通过一个双向LSTM，获取句子间的语义信息。另外还针对句法树的树状结构，提出了Tree-Guided Attention Mechanism；之外为了增强模型产生候选答案时的召回率，设计了高效的<strong>Constituent Expansion Mechanism</strong>。最后还通过烧蚀实验（<code>ablation study</code>）验证了模型各个组件的有效性，增加了文章的说服力。</p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>作者将SQuAD阅读任务分成两大部分：<br>1) 如何生成候选答案：SQuAD数据集相较于原先的cloze-style阅读理解数据集的难点之一，就在于没有提供候选词列表。这将导致答案的搜索空间为$$O(n^2)$$。而这势必引入大量噪音，给模型正确回答问题带来了很大困难。<br>2) 如何有效表示候选答案：提出SQuAD数据集的作者发现解决该问题必须注意两方面的特征。一是答案的获取往往需要联系多个句子的语义；二是答案的生成六成都需要处理句法层面的变化，并且实验表明句法特征是一个好性能必不可少的因素。</p><p>对于第一部分，本文作者基于SQuAD数据集中正确答案往往集中在句法树的成分上这一现象，进而提出基于句法树构造候选答案列表；并为了保证正确答案的召回率，提出了<strong>constituent expansion mechanism</strong>。对于如何表示候选答案，作者使用<code>chain-of-treesLSTM</code>与<code>Tree-Guided Attention Mechanism</code>来编码，并再通过<code>chain-LSTM</code>来学习全文的信息，以尽可能既捕获到各个句子的句法信息，又捕获到句子之间的语义信息；同时<code>Tree-Guided Attention Mechanism</code>也利用到句法信息的层次结构。</p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171112/Constituent-Centric%20Neural%20Network.PNG" alt="Constituent-centric Neural Network, from [1]." title="Constituent-centric Neural Network, from [1]."><br>模型全称为<strong>Constituent-centric Neural Network, CCNN</strong>，可以分为四层结构：a) a chain-of-trees LSTM encoding Layer 2) a tree-guided attention layer 3) a candidate-answer generation layer 4) a prediction layer. <code>encoding layer</code>通过chain-of-tree LSTM及tree LSTM将文章与问题编码；<code>attention layer</code>将两者交互，学习到question-aware representation；<code>generation layer</code>基于<strong>constituention expansion mechanism</strong>挑选出候选答案；<code>predication layer</code>从候选答案中选出最终答案。</p><h2 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h2><p>作者先通过Stanford Parser预处理语料得出句法树，再通过Tree LSTM和chain-of-trees LSTM学习问句与问题的表示。<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171112/Chain-of-trees%20LSTM.PNG" alt="Chain-of-trees LSTM, from [1]." title="Chain-of-trees LSTM, from [1]."></p><h3 id="Tree-LSTM"><a href="#Tree-LSTM" class="headerlink" title="Tree LSTM"></a>Tree LSTM</h3><p>每一个问题都是一句话，对应一个句法树。树的中间节点由多个词语的表示合并而成，叶子节点对应单词。每一个节点都有两个隐层状态：$$h_{\uparrow}$$为LSTM自底向上编码生成的状态，$$h_{\downarrow}$$则是LSTM自顶向下产生的。<br>用$$T$$记作中间节点可能有的最大孩子数目；则对于特定节点，其孩子数目为$$L\ (0 \le L \le T)$$；用$$h_{\uparrow}^{(l)}$$和$$c_{\uparrow}^{(l)}$$分别表示对应的第$$l$$个孩子的隐状态和<code>memory cell</code>（$$0 \le l \le L$$）；而父亲节点的隐状态和<code>memory cell</code>用$$h_{\downarrow}^{(p)}$$和$$c_{\downarrow}^{(p)}$$表示。<br>在自底向上LSTM中，每一个节点都有一个输入门$$i_{\uparrow}$$，每一个孩子一个遗忘门$${f_{\uparrow}^{(l)}}<em>{l=1}^{L}$$，及一个输出门$$o</em>{\uparrow}$$和<code>memory cell</code>$$c_{\uparrow}$$。至此，定义如下的状态转移公式：<br>$$i_{\uparrow}=\sigma(\sum_{l=1}^L W_{\uparrow}^{(i, l)} h_{\uparrow}^{(l)} + b_{\uparrow}^{(i)})$$<br>$$\forall l, f_{\uparrow}^{(l)} = \sigma(W_{\uparrow}^{(f, l)} h_{\uparrow}^{(l)}+b_{\uparrow}^{(f, l)})$$<br>$$o_{\uparrow}=\sigma(\sum_{l=1}^{L} W_{\uparrow}^{(o, l)} h_{\uparrow}^{(l)} + b_{\uparrow}^{(o)})$$<br>$$u_{\uparrow}=\mathrm{tanh}(\sum_{l=1}^{L} W_{\uparrow}^{(u, l)}h_{\uparrow}^{(l)}+b_{\uparrow}^{(u)})$$<br>$$c_{\uparrow}=i_{\uparrow}\odot u_{\uparrow} + \sum_{l=1}^{L} f_{\uparrow}^{(l)}\odot c_{\uparrow}^{(l)}$$<br>$$h_{\uparrow}=o_{\uparrow}\odot\mathrm{tanh}(c_{\uparrow})$$<br>上式中需要学习的参数为$$W$$和$$b$$，而含有上标$$l$$参数如$$W_{\uparrow}^{(i, l)}$$是针对第$$l$$个孩子的。而对于叶子节点而言，没有遗忘门，并且输入为词向量。<br>而在自顶向下的LSTM中，门、<code>memory cell</code>、隐状态的定义与上式一致。除了根节点外的中间节点，它们的输入为父亲节点的隐状态$$h_{\downarrow}^{(p)}$$和<code>memory cell</code>$$c_{\downarrow}^{(p)}$$。对于叶子节点而言，除了前面所说的两者外还包括词向量。而根节点的$$h_{\downarrow}$$设置的与$$h_{\uparrow}$$一致。$$h_{\uparrow}$$捕捉到所有句法树的语义信息，这样的拷贝机制可以让全局信息也向下传递给各个部分。<br>最终，将两者拼接起来$$h=[h_{\uparrow};h_{\downarrow}]$$传递到<code>attention layer</code>。自底向上的隐状态$$h_{\uparrow}$$捕捉到子组成部分的信息，而自顶向下的隐状态$$h_{\downarrow}$$又捕捉到了蕴含在整个句子里面的语义信息。</p><h3 id="Chain-of-Trees-LSTM"><a href="#Chain-of-Trees-LSTM" class="headerlink" title="Chain-of-Trees LSTM"></a>Chain-of-Trees LSTM</h3><p>与问题不同，文章还有多个句子；为此设计了Chain-of-Trees LSTM的结构。对于每一个句子都使用一个双向的Tree LSTM去捕捉句法信息，而各个句子之间的语义信息通过一个双向链式LSTM来捕捉。具体而言，自底向上的Tree LSTM产生的隐状态是链式LSTM的输入；而链式LSTM的隐状态又输入给自顶向下的Tree LSTM。这样的机制可以保证每一个句法树的编码都可以接收到其他语句的句法等信息。<br>在链式LSTM中，每一个句子$$t$$都被当作一个单元。这个单元的输入是就是句子$$t$$的Tree LSTM编码得到的根节点自底向上编码的隐状态$$h_{\uparrow t}$$.另外，句子$$t$$还有两个隐状态$$h_{\rightarrow t}$$和$$h_{\leftarrow t}$$.前向计算时，记输入门为$$i_{\rightarrow t}$$，遗忘门为$$f_{\rightarrow t}$$，输出门为$$o_{\rightarrow t}$$和<code>memory cell</code>为$$c_{\rightarrow t}$$，则状态转移方程为：<br>$$i_{\rightarrow t}=\sigma(W_{\rightarrow}^{(i)} h_{\uparrow t} + U_{\rightarrow}^{(i)}h_{\rightarrow,t-1}+b_{\rightarrow}^{(i)})$$<br>$$f_{\rightarrow t}=\sigma(W_{\rightarrow}^{(f)} h_{\uparrow t} + U_{\rightarrow}^{(f)}h_{\rightarrow,t-1}+b_{\rightarrow}^{(f)})$$<br>$$o_{\rightarrow t}=\sigma(W_{\rightarrow}^{(o)} h_{\uparrow t} + U_{\rightarrow}^{(o)}h_{\rightarrow,t-1}+b_{\rightarrow}^{(o)})$$<br>$$u_{\rightarrow t}=\mathrm{tanh}(W_{\rightarrow}^{(u)} h_{\uparrow t} + U_{\rightarrow}^{(u)} h_{\rightarrow, t-1} + b_{\rightarrow}^{(u)})$$<br>$$c_{\rightarrow t}=i_{\rightarrow t}\odot u_{\rightarrow t}+f_{\rightarrow t}\odot c_{\rightarrow,t-1}$$<br>$$h_{\rightarrow t}=o_{\rightarrow t}\odot\mathrm{tanh}(c_{\rightarrow t})$$<br>LSTM的后向传播与之类似。之后，这两个包含全局语义信息的隐状态$$h_{\rightarrow t}$$和$$h_{\leftarrow t}$$，将作为自顶向下LSTM根节点的输入，并更新句子$$t$$中的各个成分。</p><h2 id="Tree-Guided-Attention-Mechanism"><a href="#Tree-Guided-Attention-Mechanism" class="headerlink" title="Tree-Guided Attention Mechanism"></a>Tree-Guided Attention Mechanism</h2><p><strong>tree-guided attention mechanism, TGAM</strong>由三部分组成：<br>a) consitiuent-level attention score computation<br>b) tree-guided local normalization<br>c) tree-guided attentional summarization<br>对于文章中的成分$$h^{(p)}$$和问题中的成分$$h^{(q)}$$，我们通过$$a=h^{(p)}\cdot h^{(q)}$$得到未归一化的打分。对于句法树中的中间节点，它的$$L$$个孩子就有评分$${a_l}^L_{l=1}$$，则可以计算这些孩子上的分布：<br>$$\hat{a_l}=\frac{\mathrm{exp}(a_l)}{\sum_{m=1}^{L}\mathrm{exp}(a_m)}$$<br>这与常规的在全文单词上进行attention有所区别。<br>之后对于每一个中间节点，按照下式计算<code>attentional representation</code>：<br>$$b=a(h+\sum_{l=1}^{L}\ a_lb_l)$$<br>其中，$$a$$和$${a_l}_{l=1}^{L}$$如上文所定义；$$h$$为该节点的LSTM输出的编码；$${b_l}_{l=1}^{L}$$为子节点的<code>attentional representation</code>.<br>之后将句法树的根节点的<code>attentional representaion</code>$$b^{(r)}$$和LSTM的编码$$h^{(p)}$$拼接起来 $$z=[h^{(p)};b^{(r)}]$$输入到<strong>candidate answer generation layer</strong>.</p><p>传统的基于词语的扁平化<code>attention mechanism</code>是基于词语并使用全局单一$$\mathrm{softmax}$$，并且其对应的<code>attentional summary</code>也是按照这种全局扁平的方式进行的。而上述设计的TGAM则量体裁衣，专门为chain-of-trees LSTM设计。</p><h2 id="Candidate-Answer-Generation"><a href="#Candidate-Answer-Generation" class="headerlink" title="Candidate Answer Generation"></a>Candidate Answer Generation</h2><p><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171112/Constituent%20Expansion.PNG" alt="Constituent Expansion, from [1]." title="Constituent Expansion, from [1]."><br>该部分是为了提高模型覆盖尽可能多的正确答案而提出的。主要思路是在句法树的各个成分前后添加$$\le M$$个词语，并删除重复出现的，进而组成候选答案列表。<br>对于候选答案的表示，作者鉴于他们都是由句法树上的成分与一些单词合并而来（见上图中的右子图），故采用了双向的LSTM对该序列进行编码，并将从左至右编码得到的最后一个隐状态和从右至左编码的最后一个隐状态拼接起来作为该候选答案的表示。</p><h2 id="Answer-Prediction-and-Parameter-Learning"><a href="#Answer-Prediction-and-Parameter-Learning" class="headerlink" title="Answer Prediction and Parameter Learning"></a>Answer Prediction and Parameter Learning</h2><p>给出候选答案后，作者通过一个前馈网络来学习如何挑选正确答案。该网络给出置信度最高的即视为最终答案。<br>模型的整体优化目标如下：<br>$$\mathrm{min}\ \sum_{k=1}^{K}(-f(z_{t_k}) + \mathrm{log}\ \sum_{j=1}^{J_k}\ \mathrm{exp}(f(z_j^{(k)})))$$<br>其中，$$K$$为样例数量；$$J_k$$是第$$k$$个样例的候选答案数量；$${z_j^{(k)}}_{j=1}^{J_k}$$是对应的表示；$$t_k$$是正确答案的下标。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>实验结果不再细说，但该篇论文的亮点在于针对各个组件的<strong>烧蚀实验, Ablation Study</strong>，发现去除掉各个组件之后模型性能都有不同程度的下降。这无疑说明了各个组件的有效性。实际操作过程中，可能是先发现模型效果不佳，添加某个计算组件后性能上升；此时也可以借鉴这种方式，增加模型的可信度。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://pdfs.semanticscholar.org/6044/3b601f50e8934319dff7803ca81a275499c0.pdf?_ga=2.131398479.1314826814.1510325149-1994181370.1506067544" target="_blank" rel="noopener">[1] Xie, P., &amp; Xing, E.P. (2017). A Constituent-Centric Neural Architecture for Reading Comprehension. ACL.</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> question and answering </category>
            
            <category> reading comprehension </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> question and answering </tag>
            
            <tag> reading comprehension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置Jupyter]]></title>
      <url>http://www.wrran.com/blog/2017/11/04/howto/jupyter-config/</url>
      <content type="html"><![CDATA[<blockquote><p>Project Jupyter exists to develop open-source software, open-standards, and services for interactive computing across dozens of programming languages.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该博文将介绍如何配置Jupyter，设置其密码，并允许远程连接登录。</p><h1 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>之后打开<code>ipython</code>，生成密码：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd</span><br><span class="line">passwd()</span><br><span class="line"><span class="comment"># 之后要求输入密码</span></span><br><span class="line"><span class="comment"># 并会在确认之后输出SHA码，妥善保存该字符串</span></span><br></pre></td></tr></table></figure><p></p><p>之后编辑<code>~/.jupyter/jupyter_notebook_config.py</code>，添加上下述命令：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.password = <span class="string">'[your-encoded-password]'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>以下指令都是针对文件<code>~/.jupyter/jupyter_notebook_config.py</code>，进行修改的。</p><ol><li><p>设置默认不打开浏览器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.open_brower = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>修改默认端口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.port = <span class="number">8008</span></span><br></pre></td></tr></table></figure></li><li><p>修改允许连入的IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.ip = <span class="string">'IP-of-your-computer-running-jupyter'</span></span><br><span class="line">c.ConnectionFileMixin.ip = <span class="string">'your-allow-ip-to-link-jupyter'</span></span><br></pre></td></tr></table></figure></li><li><p>修改默认工作路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.notebook_dir=<span class="string">'your-default-workspace'</span></span><br></pre></td></tr></table></figure></li><li><p>将conda环境写入notebook的kernel中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m ipykernel install --user --name &lt;env-name&gt; --display-name <span class="string">"Python (&lt;env-name&gt;)"</span></span><br></pre></td></tr></table></figure></li><li><p>删除kernel环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter kernelspec remove &lt;env-name&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定GPU等环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%env CUDA_DEVICE_ORDER=PCI_BUS_ID</span><br><span class="line">%env CUDA_VISIBLE_DEVICES=0</span><br></pre></td></tr></table></figure></li></ol><h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h1><p>该部分是我常使用的关于Jupyter的环境及配置：</p><ol><li><p>环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install https://github.com/mli/notedown/tarball/master</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The notebook manager class to use.</span></span><br><span class="line">c.NotebookApp.contents_manager_class = <span class="string">'notedown.NotedownContentsManager'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The IP address the notebook server will listen on.</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">'IP-of-your-computer-running-jupyter'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The directory to use for notebooks and kernels.</span></span><br><span class="line">c.NotebookApp.notebook_dir = <span class="string">'/home/wrran/worksapce/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Whether to open in a browser after starting.</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hashed password to use for web authentication.</span></span><br><span class="line">c.NotebookApp.password = <span class="string">'type:salt:hashed-password'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The port the notebook server will listen on.</span></span><br><span class="line">c.NotebookApp.port = <span class="string">'your-port'</span></span><br></pre></td></tr></table></figure></li></ol><p>关于Jupyter安装插件可以参见<a href="https://www.cnblogs.com/McKean/p/6249112.html" target="_blank" rel="noopener">IPython与Jupyter Notebook安装与配置，插件扩展，主题，PDF输出</a>，简言之就是执行如下指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge jupyter_contrib_nbextensions</span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/clifnich/article/details/53912611" target="_blank" rel="noopener">教你设置jupyter服务器的密码</a><br><a href="http://blog.csdn.net/calmdog/article/details/51930768" target="_blank" rel="noopener">jupyter notebook配置文件修改注意事项–远程访问</a><br><a href="http://blog.csdn.net/lixintong1992/article/details/53012921" target="_blank" rel="noopener">jupyter(ipython) notebook 工作路径设置方法</a><br><a href="https://www.cnblogs.com/hgl0417/p/8204221.html" target="_blank" rel="noopener">jupyter中添加conda环境</a><br><a href="https://stackoverflow.com/questions/37893755/tensorflow-set-cuda-visible-devices-within-jupyter" target="_blank" rel="noopener">Tensorflow set CUDA_VISIBLE_DEVICES within jupyter</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> jupyter </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jupyter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[路漫漫，吾将上下求索]]></title>
      <url>http://www.wrran.com/blog/2017/11/03/people-say/171103-01/</url>
      <content type="html"><![CDATA[<blockquote><p>自古逢秋悲寂寥，我言秋日胜春朝<br>晴空一鹤排云上，便引诗情到碧霄</p></blockquote><a id="more"></a><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MTM5ODA0Nw==&amp;mid=2247484058&amp;idx=1&amp;sn=0dfe92a0991294afba2514b137217a66&amp;chksm=eac3276addb4ae7c6acbc6f9275bf8ad5dcefafab631b41905d9f78c01ae46ddde8b2d9e7b31&amp;mpshare=1&amp;scene=24&amp;srcid=1102vFyRkqtpbmpl153dIdsO#rd" target="_blank" rel="noopener">浅谈人工智能：现状、任务、构架与统一|正本清源</a></p><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p><code>2017-12-03</code><br>上次您分享的文章(浅谈人工智能：现状、任务、构架与统一|正本清源)从一个更加宽广、更加深远的方向看待分析“智能”，对我挺有触动与启发，开始觉得自己还没有能力压缩文章所蕴含的丰富信息。这周有点想法，想想还是记录一下。</p><p>文章前四节所述指出当前任务多是大数据、小任务范式的，而这与人类等智能体的行为差异巨大；真正要追求的是类似“乌鸦模式”的小数据、大任务。这与“实践出真知”的观点不谋而合：通过多个任务从不同角度感知认知了解事物，也许比从一个角度多次观察事物的方式更加有效。另外，文中还指出模型的两个基本维度是：数据与任务，也点名数据用于“统计模型”而实践用来学习“因果模型”（至于什么是因果关系，我一无所知）。</p><p>文中提到将智能体的认知建模为：知道的东西，知道别人知道的东西，共同知道的东西；之后也在教师与学生的例子中，提到了“不知道的东西”。我认为可以统一表述为智能体的认知包含：知道的东西、知道自己不知道的东西、知道别人知道的东西、共同知道的东西。也许智能体可以“学习”的本领就来自于：“自己知道的东西” 与 “自己知道自己不知道的东西” 的交互——可以通过已知推断未知。同时，“共同知道的东西”也为智能体间的沟通奠定基础；而人类之所以可以形成文明的一个重要原因就在于，我们有通用的文字，可以将世世代代“知道的东西”保存并传递下去，让后代有巨人的肩膀可以站。</p><p>联系到NLP任务上，作者也在文中提到“语言就是视觉，视觉就是语言”。这给我以启发：现在我们所处理的文本与现实中书写的文字是有区别的。我们通过视觉感知到的文字实质上是通过特定的排版系统显示出来的，只是受限于现今的计算机系统而采取的方式，但人类接收处理文字的过程依旧是借助“视觉”。从这个角度来看，语言就是视觉，视觉就是语言。这提醒我要时刻警惕：既要了解当前人的做法，又要跳脱出已有的理论。现在有研究表明，中文文字的顺序有时对于我们理解语义没有什么影响；甚至有的时候我们没有发觉阅读的文字顺序不对。而且我时常觉得“attention mechanism”是一个名不符实的概念：它并没有像人类的注意力机制一样——不自觉地、高效地、以任务为导向地过滤信息。</p><p>再联想到组会上讨论的“什么是常识”。我的结论趋向于：常识一定是相对于任务、智能体等而言的，单只说常识是无法讨论的。如常说的“初生牛犊不怕虎”是因为小牛并没有老虎可以猎杀自己的常识；再举例来说，我三岁半的外甥在被人提问“你多大”时回答“不知道”，而却能正确回答“你几岁”的问题。这些“常识”都是通过长时间的学习与沟通交流才流入到智能体中的。</p><p>又联系到863的地理高考题。这个项目是一个高度复杂、智能的任务。也许它可以给我们提供一个“大任务-小数据”的应用场景。</p><p>最后，就是我对于一个问题的思考：怎样根据问题选择不同的策略。具体任务如根据阅读的地理题目选择是使用排除法、还是简单匹配或者复杂推理或计算等。这不同于程序设计语言中的逻辑判断语句：逻辑判断语句与任务相关的，无法预料到所有情形，即便有也会面临极大的情形空间；也与涂兆鹏博士根据翻译的覆盖度去改进机器翻译的做法有所区别：该做法中，计算了所有可能的结果后再综合考虑；与我设想的差距蛮大。至于怎样合理建模求解，还在思考。</p><p>文中还提到“STC-AOG（时空因果与或图）与逻辑、DNN是可以打通关节的”。让我很想了解STC-AOG这个理论。同时，在文中朱教授也一直担心学生被现今的风气带坏，变得浮躁短视。借由此文也警醒自己戒骄戒躁、踏实做事。也为自己设定一个小目标，希望在三年以后，可以对“什么是语言”、“什么是智能”有些粗浅的概念；希望在三年里，可以将STC-AOG应用到NLP任务上。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Gated-Attention Readers for Text Comprehension]]></title>
      <url>http://www.wrran.com/blog/2017/10/24/note/paper-reading/question%20and%20answering/reading%20comprehension/2017-10-24/</url>
      <content type="html"><![CDATA[<blockquote><p>择其善者而从之</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>当前在处理阅读理解问题时，主要采用两种技术方案：</p><ol><li><code>multi-hop architectures</code>: 可以多次迭代文档与问题，从而达到推理的功能</li><li><code>attention mechanism</code>：让模型集中到某些相关片段上，而不被其他无关信息干扰</li></ol><p>但当前并没有模型将两者结合起来，作者基于该点提出了本文的模型。同时，与以往使用<code>attention mechanism</code>要么基于词语进行、要么基于句子进行不同，该文中让问题的表示与词语的表示的每一维进行交互，并谓之为<code>gated-attention</code>。<br>本文的模型并不十分优雅，在后续的部分实验中也表明与人类水平还有一定差距（10个点，部分任务5个点）；并且任务还不算困难。但总而言之，这一思路仍旧值得探索。</p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>本文的动机主要是从以往模型的架构提出的，意在将<code>multi-hop</code>与<code>attention</code>相结合；并在该模型上提出了<code>gated-attention</code>，让问题与文档表示的每一维都进行了交互。</p><h1 id="任务与模型"><a href="#任务与模型" class="headerlink" title="任务与模型"></a>任务与模型</h1><p>本文针对的QA任务是cloze-style类型：$$(d, q, a, \mathcal{C})$$。其中，$$q$$是关于文档$$d$$的问题，$$a$$是问题的答案，但其可以从候选集合$$\mathcal{C}$$中得出。下文中使用$$\mathbf{X} = [x^{(0)}_1, x^{(0)}<em>2, \cdots, x^{(0)}</em>{\vert D\vert}]$$表示文档词语的序列（未划分为句子），问题用$$\mathbf{Y} = [y_1, y_2, \cdots, y_{\vert Q\vert}]$$表示；$$\vert D\vert$$与$$\vert Q\vert$$也表示文档与问题的词语个数。</p><p>本文的模型整体框架如下所示：<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171024/Gated-Attention%20Reader.PNG" alt="Gated-Attention Reader" title="Gated-Attention Reader, from [1]."></p><h2 id="Multi-Hop-Architecture"><a href="#Multi-Hop-Architecture" class="headerlink" title="Multi-Hop Architecture"></a>Multi-Hop Architecture</h2><p>类似<code>Memeory Networks</code>中的架构，该模型通过堆叠多个双向<code>GRU</code>来达到类似推理的功能：<br>文档的第$$k$$次表示依赖第$$k-1$$次的表示 $$D^{(k)}=\mathrm{biGRU}^{(k)}_D(X^{(k-1)})$$（经过<strong>Gated-Attention</strong>操作）；问题每次都通过多个的双向GRU来得到相应的表示$$Q^{(k)}=\mathrm{biGRU}^{(k)}_Q(\mathbf{Y})$$。<br>之后，再经过下文所述的 <strong>Gated-Attention Module</strong> 操作，记为$$\mathrm{GA}(\cdot)$$。</p><h2 id="Gated-Attention-Module"><a href="#Gated-Attention-Module" class="headerlink" title="Gated-Attention Module"></a>Gated-Attention Module</h2><p>鉴于每层都进行了$$\mathrm{GA}(\cdot)$$操作，此处省略上标$$k$$。对于文档中的每一个词语$$x_i,\ i = 1, \cdots, \vert D\vert$$，进行如下变换：<br>$$\alpha_i=\mathrm{softmax}(Q^T\ d_i)$$<br>$$\hat{q}_i=Q\alpha_i$$<br>$$x_i=d_i\odot \hat{q}_i$$<br>第一个式子得到文档上的注意力分布，第二个式子得到加权后的问题表示，第三个式子中$$\odot$$表示<code>element-wise mulitplication</code>。作者也试过直接拼接、各维度相加，发现效果不如上式，可能是因为“乘积”操作可以过滤无关信息。</p><h2 id="Answer-Prediction"><a href="#Answer-Prediction" class="headerlink" title="Answer Prediction"></a>Answer Prediction</h2><p>作者取出最后一层GRU中留空的那个词的中间表示$$q^{(K)}_l = [q^f_l; q^b_{T-l+1}]$$，与第$$k-1$$层的文档输出$$D^{(k)}=\mathrm{biGRU}^{(k)}_D(X^{(k-1)})$$，并进行$$\mathrm{softmax}$$操作：$$s=\mathrm{softmax}((q^{(k)}_l)^TD^{(k)})$$。注意上式中得到的是在文档所有词语上的分布，之后再将候选词得到的分布加和得到最终得分，得分最高者即为答案。</p><h2 id="Further-Enhancements"><a href="#Further-Enhancements" class="headerlink" title="Further Enhancements"></a>Further Enhancements</h2><ol><li>Character-level Embeddings: 该方法将词语的字母信息也加入到嵌入表示中。</li><li>Question Evidence Common Word Feature：这个方法是指将文档中所有词语都加上一个表征是否出现在问题中的特征。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://pdfs.semanticscholar.org/260a/e5c8ee9ca1e1803c1130b0974902faa8700c.pdf?_ga=2.243512771.753315668.1508762668-1994181370.1506067544" target="_blank" rel="noopener">[1] Cohen, W.W., Dhingra, B., Liu, H., Salakhutdinov, R., &amp; Yang, Z. (2017). Gated-Attention Readers for Text Comprehension. ACL.</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> question and answering </category>
            
            <category> reading comprehension </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> reading comprehension </tag>
            
            <tag> quesion and answering </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[情话连篇 - 02]]></title>
      <url>http://www.wrran.com/blog/2017/10/23/people-say/171023-01/</url>
      <content type="html"><![CDATA[<blockquote><p>我们站着，不说话<br>就十分美好<br>@ 顾城</p></blockquote><a id="more"></a><blockquote><p>我多么希望，有一个门口<br>早晨，阳光照在草上<br>我们站着<br>扶着自己的门扇<br>门很低，但太阳是明亮的<br>草在结它的种子<br>风在摇它的叶子<br>我们站着，不说话<br>就十分美好<br>有门，不用开开<br>是我们的，就十分美好<br>早晨，黑夜还要流浪<br>我们把六弦琴交给他<br>我们不走了<br>我们需要土地<br>需要永不毁灭的土地<br>我们要乘着它<br>度过一生<br>土地是粗糙的，有时狭隘<br>然而，它有历史<br>有一份天空，一份月亮<br>一份露水和早晨<br>我们爱土地<br>我们站着<br>用木鞋挖着泥土<br>门也晒热了<br>我们轻轻靠着，十分美好<br>墙后的草<br>不会再长大了，它只用指<br>尖，触了触阳光<br>@ 顾城 in <code>门前</code></p></blockquote>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> love song </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Coarse-to-Fine Question Answering for Long Documents]]></title>
      <url>http://www.wrran.com/blog/2017/10/23/note/paper-reading/question%20and%20answering/2017-10-23/</url>
      <content type="html"><![CDATA[<blockquote><p>Skim and scan, more questions will be solved.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>长文本QA的扩展性因受限于RNN的建模能力及其难以并行的特征性能低下。本文受人类在进行阅读时活动的启发提出了模型：先大致浏览全文，再仔细阅读可能相关的部分，进而得出答案。该文的方法也同样分为两步：先用运行效率不错的模型进行<strong>句子选择</strong>(sentence selection)，再使用性能不错但运行缓慢的RNN进行<strong>答案生成</strong>(answer generation)。实验表明该模型在<code>WikiReading</code>数据集上性能不赖，速度还快了$$3.5\sim 6.7$$倍。<br>本文的亮点是想法直接，但是实现起来并不容易。作者在实验过程中使用<code>distant supervision</code>来将两步模型的训练独立开来；也尝试强化学习直接以任务的最终目标来训练前者。同时，为了凸显模型较以往模型的优势，选择数据集的过程也反映了作者的巧思。但同时该模型可能缺乏推理能力。</p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>传统解决文档上QA方法都是基于RNN的。但是RNN因为其只能顺序读取所有字符，而这些字符在长文档情形下可能多达上千个，运行效率低下；除此之外，基于RNN的模型同样也会对文档进行截断，这可能丢失信息。<br>受启发于人类的阅读过程：先浏览，找出相关内容；再详读，生成答案；本文提出了<code>coarse-to-fine model</code>。</p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171023/Hierarchical%20Question%20Answering.png" alt="Hierarchical Question Answering" title="Hierarchical Question Answering, from [1]."></p><p>模型整体流程如上，<code>sentences selection</code>部分负责挑选出相关句子，步骤<code>answer generation</code>部分负责根据相关内容生成答案。值得注意的是问题的答案不一定在原文中出现过。</p><h2 id="问题形式化"><a href="#问题形式化" class="headerlink" title="问题形式化"></a>问题形式化</h2><p>训练数据为问题-文档-答案三元组集合$${\langle x^{(i)}, d^{(i)}, y^{(i)}\rangle}_{i=1}^N$$，其中$$y$$是问题-文档$$(x, d)$$的答案。文档$$d$$是一些句子的序列 $$s_1, s_2, \cdots, s_{\vert d\vert}$$。假定，答案可以从这些句子集合的自己中推断出来。</p><h2 id="模型细节"><a href="#模型细节" class="headerlink" title="模型细节"></a>模型细节</h2><p>模型分为两部分：</p><ol><li>效率高的<code>sentence selection</code>：根据输入的问题$$x$$与文档$$d$$生成关于句子的分布$$p(s\vert x, d)$$</li><li>复杂精细的<code>answer generation</code>：根据问题$$y$$与文档表示(document summary)$$\hat{d}$$生成答案</li></ol><h3 id="Sentence-Selection-Model"><a href="#Sentence-Selection-Model" class="headerlink" title="Sentence Selection Model"></a>Sentence Selection Model</h3><p>该组件的要求是高效，作者尝试了三种简单高效的模型：</p><ol><li>BoW Model<br>$$h_l = [\mathrm{BoW}(x); \mathrm{BoW}(s_l)]$$<br>$$v_l = v^{T}\mathrm{ReLU}(\mathbf{W}\ h_l)$$<br>$$p(s=s_l \vert x, d) = \mathrm{softmax}(v_l)$$<br>其中，$$x$$为问题；$$s_l$$为文档中的句子；$$\mathrm{BoW}$$为得到词袋表示的函数，即将出现在句子序列中的词向量取均值；$$[;]$$是将向量拼接起来；$$W$$, $$v$$及词向量为模型参数。后两项式子就是通过简单的前馈网络得到句子上的概率分布。</li><li>Chunking Model<br>为了获得更加细粒度的信息，作者将每个句子$$s_l$$按照定长切分为块序列$${c_{l,i}}_{i=1}^J$$，之后使用于<code>BoW Model</code>相同的操作得到各个块上的概率分布。而句子层次上的分布通过下式得到，即积乘该句子分块的概率大小：<br>$$p(s=s_l\vert x, d)=\sum_{j=1}^{J} p(c = c_{l, j}\vert x, d)$$</li><li>Convolution Model<br>先将问题$$x$$与句子$$s_l$$拼接起来，后用$$F$$个宽度为$$w$$卷积核对该矩阵提取特征，最后进行最大值池化操作，得到句子的表示$$h_l\in \mathbb{R}^F$$。之后将该表示输入到与<code>BoW Model</code>相同结构的前馈网络中得到概率分布。</li></ol><h3 id="Document-Summary"><a href="#Document-Summary" class="headerlink" title="Document Summary"></a>Document Summary</h3><p>之后将根据上述的概率分布得出文档的整体表示，采取了如下两种方式：</p><ol><li>Hard Attention<br>在训练过程中，根据上述得出的概率分布随机抽取一个句子表示并作为该文档的表示：<br>$$\hat{s} \sim p(s \vert x, d)$$<br>$$\hat{d} = \hat{s}$$<br>在测试过程中，使用概率最大的那个句子作为该文档的表示。<br>为了包含更多的信息，我们也可以随机抽取$$K$$个句子表示并拼接在一起作为文档的最终表示。</li><li>Soft Attention<br>该方法的过程如下：<br>$$\hat{d}<em>m = \sum</em>{l=1}^{\vert d\vert} p(s=s_l\vert x, d) \cdot s_{l, m}$$<br>其中，$$p(\cdot)$$为<code>sentence selection model</code>输出的概率分布；$$s_{l, m}$$是在第$$l$$个句子中的第$$m$$个词语（$$m\in{1, \cdots, M}$$，$$M$$为最大长度，人为指定，超过截断不足补齐）。</li></ol><p><code>hard attention</code>更加灵活，没有把不同句子中的词语信息混合，但训练不易；而<code>soft attention</code>采用的方式直接，训练按照端到端进行即可。</p><h3 id="Answer-Generation-Model"><a href="#Answer-Generation-Model" class="headerlink" title="Answer Generation Model"></a>Answer Generation Model</h3><p>答案生成模块使用的是文[2]中的模型。该模型读入问题、文档并通过GRU编码，之后再通过另一个GRU生成答案。具体细节可以参见文[2]。</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>本文的模型类型多样，故而采用了多种训练方式，如下：</p><ol><li>Distant Supervision<br>为了获取训练<code>sentence selection</code>组件，作者采用了一些粗糙的启发式的标记规则：将包含答案的完整句子作为正确标记；若不存在则选择文档的第一句。之后就按照监督学习的方法最大化对数似然：<br>$$J(\theta) = \mathrm{log}\ p_{\theta}(y^<em>, s^</em>\vert x, d)$$<br>$$= \mathrm{log}\ p_{\theta}(s^<em>\vert x, d) + \mathrm{log}\ p_{\theta}(y^</em> \vert s^<em>, x)$$<br>其中，$$y^</em>$$表示正确答案，$$s^*$$表示正确的句子（也表示最终的句子表示）。</li><li>Reinforcement Learning<br>强化学习也是应对<code>sentence selection</code>过程中没有标记数据的方法。作者在此处将<code>reward function</code>定义为给定句子 $$s_l$$ 后选出正确答案 $$y$$ 的可能性：$$R_\theta(s_l) = \mathrm{log}\ p_\theta(y=y^<em>\vert s_l, x)$$。并将目标函数定义为：<br>$$J(\theta) = \sum_{s_l\in d} p_\theta(s=s_l \vert x, d) \cdot R_\theta(s_l)$$<br>$$= \sum_{s_l\in d} p_\theta(s=s_l \vert x, d) \cdot \mathrm{log}\ p_\theta(y=y^</em>\vert s_l, x)$$<br>该目标函数的梯度通过多次随机采样（$$\hat{s} \sim p_\theta(s\vert x, d)$$）的方式得出可能的句子。另外，为了应对强化学习不稳定的局面，作者还将上述的<code>distant supervision</code>及<code>curriculum learning</code>应用上了。</li><li>Soft Attention<br>这种情形下模型整体都是可微的，使用SGD算法即可优化，不再赘述。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://pdfs.semanticscholar.org/1591/ca86936da72a775b2b72063d19f24267be24.pdf?_ga=2.8565235.753315668.1508762668-1994181370.1506067544" target="_blank" rel="noopener">[1] Berant, J., Choi, E., Hewlett, D., Lacoste, A., Polosukhin, I., &amp; Uszkoreit, J. (2017). Coarse-to-Fine Question Answering for Long Documents. ACL.</a><br><a href="https://pdfs.semanticscholar.org/ad9f/82c48dccd972f5226dbef097acc3a8ef6458.pdf?_ga=2.17151231.753315668.1508762668-1994181370.1506067544" target="_blank" rel="noopener">[2] Berthelot, D., Fandrianto, A., Hewlett, D., Han, J., Jones, L., Kelcey, M., Lacoste, A., &amp; Polosukhin, I. (2016). WikiReading: A Novel Large-scale Language Understanding Task over Wikipedia. CoRR, abs/1608.03542.</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> question and answering </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> question and answering </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0020] - Valid Parentheses]]></title>
      <url>http://www.wrran.com/blog/2017/10/19/acm/leetcode/0020-valid-parentheses/</url>
      <content type="html"><![CDATA[<blockquote><p>判断括号序列是否合法<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="noopener">Valid Parentheses</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>合法的定义为：</p><ol><li>所有括号都是成对的，如：<code>(]</code></li><li>括号之间没有交错情况，如：<code>([)]</code></li></ol><p>解题借助<strong>栈</strong>这个数据结构，顺序读入字符，并与栈顶的字符比较：</p><ol><li>字符为开始括号，放入栈中</li><li>字符为结束括号，栈为空或者栈顶与之不匹配，判定非法，返回</li><li>字符为结束括号，栈顶字符与之匹配，将该字符出栈<br>当读完字符串之后，栈为空，判定合法，返回；否则判定非法，返回。</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$$O(n)$$<br>空间复杂度：$$O(n)$$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">switch</span> (s[i]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'('</span>: st.push(<span class="string">'('</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">')'</span>: <span class="keyword">if</span> (st.empty() || st.top() != <span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> st.pop(); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'['</span>: st.push(<span class="string">'['</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">']'</span>: <span class="keyword">if</span> (st.empty() || st.top() != <span class="string">'['</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> st.pop(); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#123;'</span>: st.push(<span class="string">'&#123;'</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">if</span> (st.empty() || st.top() != <span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> st.pop(); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> st.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在RHEL7上安装Hadoop]]></title>
      <url>http://www.wrran.com/blog/2017/10/18/howto/install/hadoop/</url>
      <content type="html"><![CDATA[<blockquote><p>The Apache Hadoop develops open-source software for reliable, scalable, distributed computing.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在VMware Worksation的虚拟机环境中安装Hadoop伪分布式集群，并运行WordCount程序。</p><h1 id="虚拟机安装与网络、权限设置"><a href="#虚拟机安装与网络、权限设置" class="headerlink" title="虚拟机安装与网络、权限设置"></a>虚拟机安装与网络、权限设置</h1><p>我们的虚拟机为Red Hat Enterpise Linux 7 64位系统，在VMware Worksation安装完成之后，以<code>root</code>登录，执行如下指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eno[your-id] <span class="comment"># [your-id]部分与网卡名称对应</span></span><br></pre></td></tr></table></figure><p></p><p>将该配置文件中的<code>ONBOOT=no</code>修改为<code>ONBOOT=yes</code>，并重启。这样我们就可以通过SSH登录到该虚拟机上了。</p><p>之后执行如下指令，创建相应的用户组及用户：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd hadoop-user <span class="comment"># 创建用户组</span></span><br><span class="line">useradd -g hadoop-user -d /home/hadoop hadoop <span class="comment"># 创建用户hadoop，并指定所属组别</span></span><br><span class="line">passwd hadoop <span class="comment"># 为用户hadoop设置初始密码</span></span><br></pre></td></tr></table></figure><p></p><h1 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h1><p>之后安装Java，去Oracle官网获取下载链接,之后执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从Orcale官网上获取your-code部分</span></span><br><span class="line">wget http://202.119.32.195/cache/12/01/download.oracle.com/[your-code]/jdk-9_linux-x64_bin.rpm</span><br><span class="line">rpm -ivh jdk-9_linux-x64_bin.rpm</span><br><span class="line">java --version <span class="comment"># 检查是否安装成功</span></span><br><span class="line"><span class="comment"># Java 9</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p></p><h1 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h1><p>之后访问<a href="http://hadoop.apache.org/releases.html" target="_blank" rel="noopener">Apache Hadoop Releases</a>得到对应版本的下载地址，之后执行指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.7.4/hadoop-2.7.4.tar.gz</span><br><span class="line">mv hadoop-2.7.4.tar.gz /opt</span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar -zxf /opt/hadoop-2.7.4.tar.gz <span class="comment"># 解压缩</span></span><br><span class="line">ln -s hadoop-2.7.4/ hadoop <span class="comment"># 创建软链接</span></span><br></pre></td></tr></table></figure><p></p><h1 id="配置Hadoop"><a href="#配置Hadoop" class="headerlink" title="配置Hadoop"></a>配置Hadoop</h1><p>为了方便输入指令，我们设置一些环境变量：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">vim .bash_profile</span><br><span class="line">. .bash_profile <span class="comment"># 激活更新的环境变量</span></span><br></pre></td></tr></table></figure><p></p><p>文件<code>.bash_profile</code>的内容如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the aliases and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">    . ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/default</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib:.</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.<span class="built_in">local</span>/bin:<span class="variable">$HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p></p><p>Hadoop还需要特别的配置下SSH，以免每次都要输入密码：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">ssh-keygen -t rsa -P <span class="string">""</span> -f ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br><span class="line">ssh localhost <span class="comment"># 输入yes后回车</span></span><br></pre></td></tr></table></figure><p></p><p>之后就需要仔细修改Hadoop的配置文件了：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/hadoop/etc/hadoop/</span><br><span class="line">vim hadoop-env.sh</span><br><span class="line">vim core-site.xml</span><br><span class="line">vim hdfs-site.xml</span><br><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure><p></p><p>将<code>hadoop-env.sh</code>的第25行修改为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/default</span><br></pre></td></tr></table></figure><p></p><p>将<code>core-site.xml</code>修改为：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>将<code>hdfs-site.xml</code>修改为：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:8021<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>将<code>yarn-site.xml</code>修改为：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapreduce.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resouce-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>格式化NameNode：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode mkdir-format</span><br></pre></td></tr></table></figure><p></p><p>创建日志目录，并启动Hadoop服务：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/hadoop/logs</span><br><span class="line">sbin/start-dfs.sh</span><br><span class="line">sbin/start-yarn.sh</span><br><span class="line">jps <span class="comment"># 查看状态</span></span><br></pre></td></tr></table></figure><p></p><h1 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h1><p>创建测试数据，并上传至HDFS中，最后执行WordCount程序：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">mkdir data</span><br><span class="line"><span class="built_in">cd</span> data</span><br><span class="line">curl www.baidu.com -o item0</span><br><span class="line"><span class="comment"># 在HDFS中创建文件夹</span></span><br><span class="line">hdfs dfs -mkdir -p /user/wrran/data</span><br><span class="line"><span class="comment"># 上传本地文件至HDFS</span></span><br><span class="line">hdfs dfs -put ~/data/* /user/wrran/data/</span><br><span class="line"><span class="comment"># 运行程序</span></span><br><span class="line"><span class="built_in">cd</span> /opt/hadoop</span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar wordcount /user/wrran/data /user/wrran/output</span><br></pre></td></tr></table></figure><p></p><p>期间可以通过浏览器查看作业情况；任务完成后，将结果下载到本地查看：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">hdfs dfs -get /user/wrran/output ~/output</span><br><span class="line"><span class="built_in">cd</span> output</span><br><span class="line">vim part-r-00000</span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/xw13106209/article/details/6866072" target="_blank" rel="noopener">错误Name node is in safe mode的解决方法</a><br><a href="http://blog.csdn.net/shubingzhuoxue/article/details/50239041" target="_blank" rel="noopener">Hadoop YARN中内存的设置</a><br><a href="http://blog.csdn.net/ma0903/article/details/48289731" target="_blank" rel="noopener">[YARN] 2.2 GB of 2.1 GB virtual memory used. Killing container.</a><br><a href="http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/SingleCluster.html#Pseudo-Distributed_Operation" target="_blank" rel="noopener">Hadoop: Setting up a Single Node Cluster.</a><br><a href="http://blog.csdn.net/qq_21144531/article/details/50570355" target="_blank" rel="noopener">最新版hadoop2.7.1单机版与伪分布式安装配置</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> install </category>
            
            <category> hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> install </tag>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Efficient Attention]]></title>
      <url>http://www.wrran.com/blog/2017/10/16/note/paper-reading/2017-10-16/</url>
      <content type="html"><![CDATA[<blockquote><p>好记性不如烂笔头。</p></blockquote><a id="more"></a><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>该文针对attention mechanism的计算性能提出一些优化措施。</p><h1 id="Basic-Attention-Mechanism"><a href="#Basic-Attention-Mechanism" class="headerlink" title="Basic Attention Mechanism"></a>Basic Attention Mechanism</h1><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171016/Basic%20Attention%20Mechanism.PNG" alt="Basic Attention Mechanism, from [1]" title="Basic Attention Mechanism, from [1]"></p><p>图中$$\mathbf{x}$$为源端句子，$$\mathbf{y}$$为目标端句子；源端使用<code>RNN</code>模型进行编码，目标端使用<code>RNN</code>进行解码；$$\mathbf{h}<em>{t}$$及$$\mathbf{s}</em>{t}$$为中间隐层表示；$$\bigoplus$$为上下文向量，记为$$\mathbf{c}_{i}$$。该向量通过源端状态加权得到：<br>$$\mathbf{c}<em>i=\sum</em>{j}\alpha_{ij}s_{j}$$<br>$$\alpha_{i}=\mathrm{softmax}(f_{att}(h_i, \mathbf{s}))$$<br>其中，$$f_{att}(h_i, \mathbf{s})$$是根据源端及目标端的隐层状态表示计算相关度的函数。具体选取如下：<br>$$f_{att}(h_i, s_j) =<br>\begin{cases}<br>v_a^T\ \mathrm{tanh}(W_a [h_i, s_j]) &amp;, \text{in [1]} \<br>h_i^TW_a s_j &amp;, \text{in [2]}<br>\end{cases}<br>$$<br>其中，$$W_a$$与$$v_a$$是模型需要学习的关于对齐的参数。</p><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><p>设$$\vert S\vert$$为源端句子长度，$$\vert T\vert$$为目标端句子长度，用$$D$$表示源端及目标端<code>RNN</code>的隐层状态维度大小。attention mechanism在目标端解码过程中，每生成一个字词，都需要计算一次$$\mathbf{c}$$，而每进行一次计算都需要花费$$O(D^2)$$的时间（维度为$$D\times D$$的矩阵与$$D\times1$$）；也容易知道共进行了$$\vert S\vert\vert T\vert$$次计算；所以总时间复杂度为$$O(D^2\vert S\vert\vert T\vert)$$。（文[2]中将$$f_{att}$$设定为两个向量相乘，被称为<code>dot-based attention mechanism</code>，此时的时间复杂度为$$O(D\vert S\vert\vert T\vert)$$。）</p><h1 id="Memory-Based-Attention-Model"><a href="#Memory-Based-Attention-Model" class="headerlink" title="Memory-Based Attention Model"></a>Memory-Based Attention Model</h1><h2 id="Basic-Model"><a href="#Basic-Model" class="headerlink" title="Basic Model"></a>Basic Model</h2><p><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171016/Memory%20Attention%20Model%20Architecture.PNG" alt="Memory Attention Model Architecture, from [3]" title="Memory Attention Model Architecture, from [3]"><br>在文[3]中，作者在编码过程的同时产生<code>attention context</code>$$C\in\mathbb{R}^{K\times D}$$；在解码过程中，解码器attention的不再是编码器的隐层状态，而是这些向量$$\mathbf{C}<em>{k}$$：<br>$$\mathbf{C}</em>{k} = \sum_{t}^{\vert S\vert}\alpha_{tk}s_t$$<br>$$\alpha_t = \mathrm{softmax}(W_{\alpha}s_t)$$<br>$$c=\sum_{i=0}^{K}\beta_i\mathbf{C}<em>i$$<br>$$\mathbf{\beta}=\mathrm{softmax}(W</em>\beta h)$$<br>其中，$$W_\alpha\in\mathbb{R}^{K\times D}$$及$$W_\beta\in\mathbb{R}^{K\times D}$$是模型需要学习的参数。前两个式子描述的是编码过程，复杂度为$$O(KD\vert S\vert)$$；后两个式子描述的是解码过程，复杂度为$$O(KD\vert T\vert)$$；总复杂度为$$O(KD(\vert S\vert + \vert T\vert))$$。在实际操作中，$$D$$多为512或者1024；这让我们有机会将时间复杂度降低。</p><h2 id="More-Details"><a href="#More-Details" class="headerlink" title="More Details"></a>More Details</h2><ol><li>激活函数的选用：将$$\mathrm{softmax}$$替换为$$\mathrm{sigmoid}$$，并将后者称为<code>scoring function</code>，作用可以视为<code>gates</code>。</li><li>模型的解释：$$\mathbf{C}_{k}$$可以视为<code>attention context</code>，编码过程中计算该矩阵，类似于动态规划中的笔记法；解码过程中的<code>attention</code>操作，则是根据解码的隐层状态选择合适的上下文。</li><li>位置编码：作者通过类似下图的函数将位置信息也编码进$$\mathbf{C}_{k}$$中，目的是让$$\mathbf{C}_1, \mathbf{C}<em>2, \cdots$$更多的学到源端序列前面的信息，$$\cdots, \mathbf{C}</em>{K-1}, \mathbf{C}<em>K$$更多的关注后面的信息，而中间的矩阵更多关注中间的信息。<br>$$\mathbf{C}^{PE}=\sum</em>{s=0}^{\vert S\vert}\alpha_{s}^{PE}h_s$$<br>$$\alpha_s^{PE}=\mathrm{softmax}(W_\alpha h_s\circ l_s)$$<br>其中，$$l_s$$来自于如下的函数，图像如下：<br>$$L_{ks}=(1-k/K)(1-s/\mathcal{S})+\frac{k}{K}\frac{s}{\mathcal{S}}$$<br>上式中$$k\in{1,2,\cdots,K}$$是上下文向量的索引，$$\mathcal{S}$$是所有源端序列中最长长度。<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171016/Surface%20for%20the%20position%20encodings.PNG" alt="Surface for the position encodings, from [3]" title="Surface for the position encodings, from [3]"></li></ol><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><p>作者还进行了两组实验，一组是在人工构造的简单数据上进行的，另一组是在WMT17翻译任务上进行的。此处贴出后者的实验结果。<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171016/BLEU%20scores%20on%20WMT16%20translation%20datasets.PNG" alt="BLEU scores on WMT17 translation datasets, from [3]." title="BLEU scores on WMT17 translation datasets, from [3]."><br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/171016/Decoding%20time.PNG" alt="Decoding Time, from [3]" title="Decoding Time, from [3]."><br>从表格中可以看出模型的性能下降不多，但是解码速度提升明显。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://arxiv.org/pdf/1409.0473.pdf" target="_blank" rel="noopener">[1] Bahdanau, D., Bengio, Y., &amp; Cho, K. (2014). Neural Machine Translation by Jointly Learning to Align and Translate. CoRR, abs/1409.0473.</a><br><a href="https://pdfs.semanticscholar.org/9349/9a7c7f699b6630a86fad964536f9423bb6d0.pdf?_ga=2.157872954.143381959.1508079996-1994181370.1506067544" target="_blank" rel="noopener">[2] Luong, T., Manning, C.D., &amp; Pham, H. (2015). Effective Approaches to Attention-based Neural Machine Translation. EMNLP.</a><br><a href="https://arxiv.org/pdf/1707.00110.pdf" target="_blank" rel="noopener">[3] Efficient Attention using a Fixed-Size Memory Representation</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> attention mechanism </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Memory Networks及其变体]]></title>
      <url>http://www.wrran.com/blog/2017/09/29/note/paper-reading/2017-09-30/</url>
      <content type="html"><![CDATA[<blockquote><p>Do you remember?</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>QA问题中求解模型往往是与<code>Memory Networks</code>相关。本次论文笔记主要顺着该模型的演变进行，在介绍完模型的框架之后，分析其不足及（可能的）解决方案。限于篇幅，每个模型应用的任务及实验结果都未予介绍。</p><h1 id="Memory-Networks"><a href="#Memory-Networks" class="headerlink" title="Memory Networks"></a>Memory Networks</h1><p>本文是Memory Networks系列的奠基之作。该文着眼于解决长距离情况下的知识利用问题：当前主流解决长距离依赖的RNN模型中虽然有“内存”（即模型的隐状态与权重），但因为实在太小而不能很好的应用在QA情形下。</p><h2 id="一般框架"><a href="#一般框架" class="headerlink" title="一般框架"></a>一般框架</h2><p>作者们为了解决该问题，提出了Memory Networks这一通用框架，记为MemNN：<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/170930/Memory%20Network%20Architecture.png" alt="Memory Network Architecture" title="Memory Network Architecture, from [2]"></p><p>如上图所示，MemNN除了组件<strong>memory</strong>外，还含有四个主要组件：</p><ul><li>Input : 将输入转换到内部特征空间</li><li>Generalization : 根据输入更新内存。</li><li>Output : 根据输入与当前内存状态得到输出（位于特征空间），或者说是有助于输出正确答案的“支持内容”</li><li>Response : 将Output输出的值转换为需要的格式，如自然语言。</li></ul><p>形式化的说，假定输入为$$x$$，则模型处理的流程如下：</p><ol><li>将$$x$$转化为特征表示$$\mathrm{I}(x)$$</li><li>根据新的输入更新memory $$\mathbf{m}_i$$：$$\mathbf{m}_i = \mathrm{G}(\mathbf{m}_i, \mathrm{I}(x), \mathbf{m}), \forall i$$</li><li>根据新的输入与内存状态计算输出的特征$$o$$：$$o = \mathrm{O}(\mathrm{I}(x), \mathbf{m})$$</li><li>将输出状态$$o$$解码为最终的响应：$$r = \mathrm{R}(o)$$</li></ol><p>这一框架的提出贡献<em>可能</em>是有效的将QA问题分解为两步：先根据给定的问题找到最相关的内存，再根据这些信息产生答案。（注：之所以说是可能，是因为并没有太关注该文发出之前QA的解决方案。该结论来自于文[2]。）</p><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><p>作者为了验证这一框架的可行性，使用神经网络实现了上述的框架并应用于多个任务上。限于篇幅，这里从简介绍。</p><ol><li>Input : 将文档与问题转换为稠密表示</li><li>Generation : 此处只是简单的将组件input的输出存放到内存的空余位置上</li><li>Output : 假定需要找出的支持内容有$$k=2$$个时，<br>$$o_1 = \mathrm{O}_1(x, \mathbf{m}) = \underset{i=1, \cdots, N}{\mathrm{argmax}}\ \mathrm{s}_O(x, \mathbf{m}_1)$$<br>$$o_2 = \mathrm{O}_2(x, \mathbf{m}) = \underset{i=1, \cdots, N}{\mathrm{argmax}}\ \mathrm{s}<em>O([x, \mathbf{m}</em>{o_1}], \mathbf{m}_i)$$<br>其中，$$\mathrm{s}_O$$是关于句子$$x$$与内存$$\mathbf{m}_i$$的匹配打分函数。</li><li>Response : 经过上述处理，输入到组件response的就会是$$[x, \mathbf{m}_{o_1}, \mathbf{m}_{o_2}]$$。该组件将根据这些信息选择最合适的单词作为答案（限制题型的正确答案为单词）：<br>$$r = \underset{w\in\mathbf{W}}{\mathrm{argmax}}\ \mathrm{s}<em>R([x, \mathbf{m}</em>{o_1}, \mathbf{m}_{o_2}], w)$$<br>其中$$W$$是单词表中的所有单词，$$\mathrm{s}_R$$为匹配打分函数。</li></ol><p>还有一个关键就是目标函数的制定，对于上述任务的优化函数如下：<br>$$\sum_{\bar{f}\neq\ \mathbf{m}_{o_1}}\ \mathrm{max}(0, \gamma - \mathrm{s}<em>O(x, \mathbf{m}</em>{o_1}) + \mathrm{s}<em>O(x, \bar{f}))\ +$$<br>$$\sum</em>{\bar{f}^{‘}\neq\ \mathbf{m}_{o_2}}\ \mathrm{max}(0, \gamma - \mathrm{s}<em>O([x, \mathbf{m}</em>{o_1}], \mathbf{m}_{o_2}) + \mathrm{s}<em>O([x, \mathbf{m}</em>{o_1}], \bar{f}^{‘}))\ +$$<br>$$\sum_{\bar{r}\neq\ r}\ \mathrm{max}(0, \gamma - \mathrm{s}<em>R([x, \mathbf{m}</em>{o_1}, \mathbf{m}_{o_2}], r) + \mathrm{s}<em>R([x, \mathbf{m}</em>{o_1}, \mathbf{m}_{o_2}], \bar{r}))$$<br>其中，$$x$$为问题输入，$$r$$、$$\mathbf{m}_{o_1}$$、$$\mathbf{m}_{o_2}$$为正确的响应信息与支持语句，而$$\bar{f}$$、$$\bar{f}^{‘}$$和$$\bar{r}$$都是随机抽取的负样例，$$\gamma$$则是正负样例的间隔。</p><h2 id="基本实现的扩展"><a href="#基本实现的扩展" class="headerlink" title="基本实现的扩展"></a>基本实现的扩展</h2><p>作者还在基本实现下对更多情形下的情况进行了扩展：</p><ol><li>输入不是完整的句子而是字符时，可以通过在组件input中加入“分块”功能实现</li><li>当组件memory将存放海量数据时，如上的操作（涉及到$$\mathrm{argmax}$$）性能将大幅下降，此时可以考虑哈希或聚类的方法来减少计算量</li><li>组件memory内存储的内容时效性并不相同，对于某些任务可能最近的信息最有用，为此可以将时间信息融入到函数$$\mathrm{s}_{O_t}$$中</li><li>处理自然语言问题时，未登录词也是需要关注的：可以通过上下文信息来估计未登录词的含义</li><li>低维稠密的向量表示有个缺陷就是无法有效利用词语的匹配信息，而这可以通过设计适当的匹配打分函数来改善</li></ol><h2 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h2><p>模型可改进的地方有：</p><ol><li>观察模型的目标函数可以看到我们需要两部分的标记数据：答案与支持语句，而在很多问答任务上很难获取到支持语句。</li><li>在Output查找支持内容时需要指定$$k$$的取值，而支持语句的多少往往与问题有关，是否可以让模型自动选取一个合适的$$k$$呢？</li></ol><p>可能的解决方案：<br>关于问题一，<br><strong>改动一</strong>：去除目标函数中的关于 <em>支持语句</em> 的评分项。但这样去除之后很可能导致模型性能受制于组件output挑选的“支持内容”，最终导致模型训练困难或者训练缓慢。为此采用改动二。<br><strong>改动二</strong>：将组件output的计算函数由$$\mathrm{argmax}$$换成类似attention机制的$$\mathrm{softmax}$$，输出关于各个内存槽的权重；而组件response在计算输出时除了接收到该权值外，还可以利用读取组件memory的内容。这样做的代价可能是组件response的计算性能下降。</p><p>关于问题二，<br><strong>改动一</strong>：借鉴<code>RNN</code>的思路，是否可以让组件output循环的选择支持内容，但停止的标准呢？直观的选择是人工指定一个上限，达到该上限时停止循环。但更有效的方法可能是改动二的内容。<br><strong>改动二</strong>：将组件response挑选出的答案的 <em>置信度</em> （如匹配打分函数输出的分数）发送给组件output，达到一定阈值之后停止循环。但这个过程中又引入了一个超参，是否有方法让这个阈值也通过模型自动学习呢？值得思考。</p><h1 id="End-to-End-Memory-Networks"><a href="#End-to-End-Memory-Networks" class="headerlink" title="End-to-End Memory Networks"></a>End-to-End Memory Networks</h1><p>本文的题目明确的表达了工作致力解决的问题：让MemNN可以端到端的训练。下文中将这样的模型记为MemN2N。</p><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>该文的主要贡献就是提出了方案去除了MemNN需要大量标记数据的弊端；除此之外，还借鉴了RNNsearch的方法，对于需要多步推导的问题使用多个计算步骤进行解决。作者将其中的每个计算步骤称为<strong>hop</strong>。<br>模型整体框架如下图，<code>(a)</code>是单次计算过程的示意图，即只有一个hop；<code>(b)</code>是有多次计算步骤的示意图。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com//image/170930/MemN2N%20Architecture.PNG" alt="MemN2N Architecture" title="MemN2N Architecture, from [3]"></p><p>简单的说，模型要处理的问题就是：读入多个输入 $$\mathbf{x}_1, \mathbf{x}_2, \cdots, \mathbf{x}_n$$，转化为稠密向量之后存入到组件memory中；之后读入问题 $$\mathbf{q}$$，经过计算后输出答案 $$\mathbf{a}$$。其中，$$\mathbf{x}_i, \mathbf{q}, \mathbf{a}$$ 的词都来自于一个大小为 $$\vert V\vert$$ 的词表。</p><h3 id="单层结构"><a href="#单层结构" class="headerlink" title="单层结构"></a>单层结构</h3><p>与MemNN中类似，MemN2N也有组件memory，但去除了组件Generalization：</p><ul><li>Input Memory Representation : 如图<code>(a)</code>所示，句子 $$\mathbf{x}_i$$ 在向量化之后与矩阵 $$\mathbf{A}, \mathbf{C}$$ 相乘得到表示 $$\mathbf{m}_i, \mathbf{c}_i$$，同样向量化之后的问题 $$\mathbf{q}$$ 与矩阵 $$\mathbf{B}$$ 相乘得到表示 $$\mathbf{u}$$。其中，表示 $$\mathbf{c}_i$$ 输入到组件output中，表示 $$\mathbf{m}_i$$ 再与 $$\mathbf{u}$$ 经过下述计算得到权重再输入到组件output中：<br>$$\mathbf{p} = \mathrm{softmax}(\mathbf{u}^T\ \mathbf{m})$$</li><li>Output Memory Representation : 该处类似于attention机制，通过计算 $$\mathbf{p}, \mathbf{c}$$ 得到 $$\mathbf{o}$$：<br>$$\mathbf{o} = \sum_{i}\ p_i\ \mathbf{c}_i$$</li><li>Generating the Final Prediction : 如图所示，将通过如下公式选出单词：<br>$$\hat{a} = \mathrm{softmax}(\mathbf{W}\ (\mathbf{o}\ +\ \mathbf{u}))$$</li></ul><p>之后就可以根据真实答案与输出答案计算交叉熵，利用误差反向传播算法优化模型。</p><p><em>注</em>：MemN2N与MemNN并不完全对应。</p><h3 id="多层结构"><a href="#多层结构" class="headerlink" title="多层结构"></a>多层结构</h3><p>如图<code>(b)</code>所示，多层memory通过以下方式堆叠在一起：</p><ul><li>除第一层外，其他层的输入 $$\mathbf{u}^{k+1} = \mathbf{u}^{k}\ +\ \mathbf{o}^{k}$$</li><li>每一层都有自己独立的矩阵 $$\mathbf{A}, \mathbf{C}$$，下文会接着介绍如何共享参数</li><li>最后一层产生答案的方式为 $$\hat{a} = \mathrm{softmax}(\mathbf{W}(\mathbf{o}^k\ +\ \mathbf{u}^k))$$</li></ul><p>作者提出了两种共享参数的方式：</p><ol><li>Adjacent :<br>(a) $$\mathbf{A}^{k+1} = \mathbf{C}^k$$<br>(b) $$\mathbf{W}^T = \mathbf{C}^k$$<br>(c) $$\mathbf{B} = \mathbf{A}^1$$</li><li>Layer-wise :<br>(a) $$\mathbf{A}^1 = \mathbf{A}^2 = \cdots = \mathbf{A}^k$$<br>(b) $$\mathbf{C}^1 = \mathbf{C}^2 = \cdots = \mathbf{C}^k$$<br>(c) 添加一个矩阵 $$\mathbf{H}$$ 用于更新hops之间的 $$\mathbf{u}$$，即 $$\mathbf{u}^{k+1} = \mathbf{H}\mathbf{u}^k\ +\ \mathbf{o}^k$$</li></ol><h2 id="我的理解-1"><a href="#我的理解-1" class="headerlink" title="我的理解"></a>我的理解</h2><p>MemN2N的整体结构与MemNN对应关系并不十分明确。若是按照MemNN的划分，组件memory的功能更多的由在多个hop间传递的矩阵 $$\mathbf{A}, \mathbf{C}$$ 来担当；组件input隐含到将文档与问题转换为稠密表示的过程中，而这个过程使用的是词袋模型，会丢失顺序信息；没有功能对应组件generation；组件output与组件response基本与 <em>Output Memory Representaion</em> 和 <em>Generating the Final Predication</em> 相对应。另外，作者在文中提到使用<code>Layer-wise</code>进行参数共享时，该模型就类似于<code>RNN</code>模型。但是区别在于该模型更新隐层状态 $$\mathbf{u}_k$$ 时，会根据文档进行更有针对的更新（描述不全面，待补充）。</p><p>模型可改进的地方有：</p><ol><li>如上分析，该模型实质上使用的是 <em>词袋模型</em>，会丧失语序信息</li><li>需要手动指定hops的数量</li></ol><p>可能的解决方案：<br>关于问题一，<br><strong>方案一</strong>：使用<code>RNN</code>类的模型对句子进行建模，但是可能会过度压缩语义信息。为此可以采用方法是保存词语层面的稠密向量表示来取代矩阵 $$\mathbf{A}, \mathbf{C}$$，但这种方案只限于文档的句子数量不多的情形。<br><strong>方案二</strong>：针对方案一的局限，可以考虑先筛选出无关的句子，再花费资源到词语层面进行计算。例如，使用<code>RNN</code>类模型得出句子向量与问题对应句子向量计算，若不相关则不进行词语层面的分析，直接进入下一个hop。</p><p>关于问题二，<br><strong>方案</strong>：与MemNN类似的方案类似，并且由于MemN2N的端到端特性更容易进行，即根据最终输出词语的 <em>置信度</em> 选择是否要停止，并制定相关阈值与hops的上限值。</p><p>作者其实针对问题一，也提出了解决方案，就是在将文档与问题编码为稠密向量时也考虑 <em>词语在句中位置</em> 的影响。另外，他们还针对输入文档时缺少 <em>时序</em> 信息提出了类似的解决方案，在编码稠密向量的时候考虑 <em>时序</em> 的影响。（此处略去公式，但依旧存疑的是为什么选用这样的公式？）</p><h1 id="正在阅读"><a href="#正在阅读" class="headerlink" title="正在阅读"></a>正在阅读</h1><p><a href="https://arxiv.org/pdf/1605.07427.pdf" target="_blank" rel="noopener">Chandar, A. P. Sarath et al. “Hierarchical Memory Networks.” CoRR abs/1605.07427 (2016): n. pag.</a> 介绍了当面对海量数据，存入到内存后的应对方法；<br><a href="https://pdfs.semanticscholar.org/6451/3b5a06e1d1bbd1eaeb11c40fea06e1c0938c.pdf?_ga=2.28667452.1088239169.1506774601-1994181370.1506067544" target="_blank" rel="noopener">Xu, Jiaming et al. “Hierarchical Memory Networks for Answer Selection on Unknown Words.” COLING (2016).</a> 介绍了如何缓解将文档中的句子信息过度压缩的方法；<br><a href="https://arxiv.org/pdf/1506.07285.pdf" target="_blank" rel="noopener">Bradbury, J., Gulrajani, I., Irsoy, O., Iyyer, M., Kumar, A., Ondruska, P., Paulus, R., Socher, R., &amp; Zhong, V. (2016). Ask Me Anything: Dynamic Memory Networks for Natural Language Processing. ICML.</a> 介绍了解决通用QA问题的模型，思路上与MemN2N不尽相同。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://arxiv.org/pdf/1410.3916.pdf" target="_blank" rel="noopener">[1] Weston, J., Chopra, S., &amp; Bordes, A. (2015). Memory Networks. In ICLR-2015.</a><br><a href="http://cs224d.stanford.edu/reports/KapashiDarshan.pdf" target="_blank" rel="noopener">[2] Darshan K., Parath S. (2015). Answering Reading Comprehension Using Memory Networks. In CS224d Reports</a><br><a href="https://arxiv.org/pdf/1503.08895.pdf" target="_blank" rel="noopener">[3] Sukhbaatar, S., Szlam, A., Weston, J., &amp; Fergus, R. (2015). End-to-end memory networks. Computer Science.</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> memory networks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用工具索引表]]></title>
      <url>http://www.wrran.com/blog/2017/09/22/cheatsheet/tools/common-tools/</url>
      <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器</p></blockquote><a id="more"></a><h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><p><a href="https://ccsearch.creativecommons.org/" target="_blank" rel="noopener">CCSearch - 无版权素材图片搜索引擎</a><br><a href="https://stalkscan.com/" target="_blank" rel="noopener">Stalkscan Facebook隐藏信息搜索引擎</a><br><a href="https://www.soogif.com/" target="_blank" rel="noopener">Soogif 中文动图搜索网站</a><br><a href="https://ebookee.org/" target="_blank" rel="noopener">Ebookee 免费电子书搜索引擎</a><br><a href="http://www.wolframalpha.com/" target="_blank" rel="noopener">WolframAlpha - Computational Knowledge Engine</a></p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><a href="https://www.gitignore.io/" target="_blank" rel="noopener">GitIgnore.io</a></p><h1 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h1><p><a href="https://www.semanticscholar.org/" target="_blank" rel="noopener">SemanticScholar - 高大上的免费学术搜索引擎</a><br><a href="https://aideadlin.es/" target="_blank" rel="noopener">AI Conference Deadlines</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GIT常用指令]]></title>
      <url>http://www.wrran.com/blog/2017/09/21/cheatsheet/reference/git/</url>
      <content type="html"><![CDATA[<blockquote><p>时间是一只藏在黑暗中的温柔的手，在你一出神一恍惚之间，物走星移。<br>@龙应台 in 目送</p></blockquote><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>git配置常用命令<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor emacs <span class="comment"># 修改默认使用的文本编辑器(初始为VI、VIM)</span></span><br><span class="line">git config --global merge.tool vimdiff <span class="comment"># 指定差异分析工具</span></span><br><span class="line">git config --list <span class="comment"># 查看配置信息</span></span><br><span class="line">git config user.name <span class="comment"># 查看配置的用户名</span></span><br><span class="line">git config --global core.editor vim <span class="comment"># 修改默认使用的编辑器</span></span><br></pre></td></tr></table></figure><p></p><h1 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h1><p>git帮助系统，以下三种方式都可以得到一些更详细的官方帮助文档<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line">man git-&lt;verb&gt; <span class="comment"># Windows下该命令无法执行</span></span><br></pre></td></tr></table></figure><p></p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>git暂存、提交、拉取、推送的相关指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt; <span class="comment"># to update what will be committed</span></span><br><span class="line">git checkout -- &lt;file&gt; <span class="comment"># to discard changes in working directory</span></span><br><span class="line">git commit -a <span class="comment"># 把所有 git add 的文件都加入到commit中，然后进入编辑器编辑commit的信息</span></span><br><span class="line">git commit -m <span class="comment"># 在后面直接添加 commit 的信息，但无法对信息的格式做更多的编辑</span></span><br><span class="line">git commit --amend <span class="comment"># 修改最后一次commit的信息</span></span><br></pre></td></tr></table></figure><p></p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet-git/git-cheatsheet-1.png" alt="Git Cheatsheet 1" title="Git Cheatsheet 1"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/cheatsheet-git/git-cheatsheet-2.png" alt="Git Cheatsheet 2" title="Git Cheatsheet 2"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="http://blog.csdn.net/chfe007/article/details/43388041" target="_blank" rel="noopener">设置Git不需要每次push都输入用户名和密码</a><br><a href="http://www.cnblogs.com/wangshuo1/p/5531200.html" target="_blank" rel="noopener">Git Pull 避免用户名和密码方法</a><br><a href="https://gitlab.com/gitlab-com/marketing/raw/master/design/print/git-cheatsheet/print-pdf/git-cheatsheet.pdf" target="_blank" rel="noopener">git-cheatsheet.pdf - GitLab</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> reference </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CAS & AoA - 解决机器阅读理解问题的两个模型]]></title>
      <url>http://www.wrran.com/blog/2017/09/11/note/paper-reading/question%20and%20answering/reading%20comprehension/2017-09-11/</url>
      <content type="html"><![CDATA[<blockquote><p>I want to understand you …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本周阅读的两篇文章都是致力于解决cloze风格（数据集为CNN/Daily Mail &amp; Children’s Book Test）的机器阅读问题的，模型分别被称为CAS和AoA。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>Cloze风格的阅读理解题目是指通过给出一段上下文或者文档，之后基于该文档回答问题，并且问题的答案是文档中的<strong>某一个单词</strong>。据此可以将该问题形式化的描述为三元组：$$&lt;\mathcal{D}, \mathcal{Q}, \mathcal{A}&gt;$$，其中$$\mathcal{D}$$就是上下文或者文档，$$\mathcal{Q}$$为问题，$$\mathcal{A}$$为答案。</p><p>CNN/Daily Mail数据集与CBT数据集的问题类似，但略有区别。</p><h2 id="CNN-Daily-Mail"><a href="#CNN-Daily-Mail" class="headerlink" title="CNN/Daily Mail"></a>CNN/Daily Mail</h2><p>CNN/Daily Mail数据集是从CNN与Daily Mail爬取下来的数据，其中每条数据由一个新闻正文与摘要组成。通过将新闻正文作为上下文$$\mathcal{D}$$，将摘要中的<strong>某个实体</strong>去除作为问题$$\mathcal{Q}$$，并将该实体作为答案$$\mathcal{A}$$。为了防止作弊（利用外部知识），可以进一步将<strong>实体匿名化</strong>，即为每一个实体随机分配一个ID。但是有人发现这种方式并不能达到预期的目的。</p><h2 id="Children’s-Book-Test"><a href="#Children’s-Book-Test" class="headerlink" title="Children’s Book Test"></a>Children’s Book Test</h2><p>Children’s Book Test数据集，简称CBT数据集，该数据集是从儿童故事书中产生出机器阅读的数据集。与上述的数据集不同，该数据集是从故事中抽取出20句话作为正文$$\mathcal{D}$$，将第21句话中的<strong>某个单词</strong>去除作为问题$$\mathcal{Q}$$，对应的这个单词作为答案$$\mathcal{A}$$。值得注意的是，这里去除的单词<strong>词性</strong>可能是实体、一般名词、动词与介词。由于<em>动词</em>与<em>介词</em>并不十分依赖于上下文，所以目前的机器阅读任务主要聚焦在实体类型或者一般名词类型的问题上。</p><h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><p>崔一鸣等人在<a href="http://www.aclweb.org/anthology/C/C16/C16-1167.pdf" target="_blank" rel="noopener">文[1]</a>中提出一种新的网络架构来解决上述问题，其网络结构图如下：<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/170911/cas-reader.PNG" alt="CAS Reader" title="CAS Reader"><br>其处理问题方式比较简单：</p><ol><li><code>Embedding Layer</code>: 先将文档$$\mathcal{D}$$与问题$$\mathcal{Q}$$的one-hot表示转化为continuous表示（<strong>注意</strong>：$$\mathcal{D}$$与$$\mathcal{Q}$$共享同一个词矩阵）</li><li><code>bi-GRU Layer</code>: 通过两个<strong>不同</strong>的双向GRU得到文档$$\mathcal{D}$$的表示$$h_{doc}$$和问题$$\mathcal{Q}$$的表示$$h_{query}$$</li><li><code>Individual Attention Layer</code>: 针对问题中的每一个词，对文档进行<code>attention</code>操作，即对$$h_{doc}$$与$$h_{query}$$进行点乘后再进行$$\mathsf{softmax}$$</li><li><code>Merging Function</code>: 设问题的单词数量为$$m$$，则经过步骤3之后，可以得到$$m$$个分布。该步骤就是针对这多个分布提出的：我们可以通过<em>加和</em>、<em>平均</em>、<em>取最大</em>等操作来合并这些分布，得到一个一致的（Consensus）注意力分布。</li><li><code>Sum Attention Layer</code>: 注意到这个分布时针对<em>文档的词语</em>而言的，再将同一个词语的不同<code>attention</code>加和得到最终的权重。</li></ol><h1 id="AoA"><a href="#AoA" class="headerlink" title="AoA"></a>AoA</h1><p>崔一鸣等人在<a href="http://www.aclweb.org/anthology/P/P17/P17-1055.pdf" target="_blank" rel="noopener">文[2]</a>又进一步针对模型CAS提出了改进的方式。AoA的网络结构如下：<br><img src="http://ow3xn0dt6.bkt.clouddn.com//image/170911/aoa-reader.PNG" alt="AoA Reader" title="AoA Reader"><br>观察CAS与AoA的网络结构，可以发现两者差别仅在于AoA的<code>ATT-over-ATT Layer</code>。该层的目的在于<strong>让网络自行确定合并分布的操作</strong>，如上文所述的<em>加和</em>等。<br>具体来说，先来看<code>Individual ATT Layer</code>这层的矩阵，该矩阵的元素为$$M(i, j) = h_{doc}(i)^T \bullet h_{query}(j)$$。因此，通过所谓的<em>Column-wise softmax</em>就可以得到与<strong>CAS</strong>中的<code>Individual Attention Layer</code>相对应的注意力分布（即所谓的<code>query-to-document attention</code>）。<strong>创新点</strong>在于作者进行了<code>Row-wise softmax</code>，这样就得到了另一个注意力分布，不过这个是就问题而言，即所谓的<code>document-to-query attention</code>。并通过<code>Column-wise Average</code>来确定问题中不同词语的注意力分布的权重。最后据此合并多个注意力分布。之后的操作就与之无差了。</p><p><img src="http://ow3xn0dt6.bkt.clouddn.com//image/170911/difference-aoa-and-cas.PNG" alt="The Difference of AoA &amp; CAS" title="The Difference of AoA &amp; CAS"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.aclweb.org/anthology/C/C16/C16-1167.pdf" target="_blank" rel="noopener">Consensus Attention-based Neural Networks for Chinese Reading Comprehension</a><br><a href="http://www.aclweb.org/anthology/P/P17/P17-1055.pdf" target="_blank" rel="noopener">Attention-over-Attention Neural Networks for Reading Comprehension</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAwMjM4NDU4MA==&amp;mid=2649191077&amp;idx=1&amp;sn=47ed5e2bdfca8aeb8092d47122036794&amp;chksm=82d8e50eb5af6c184d9d0f30cfe65bc820f4887d7b1420cc2dde5b492fef41a3fc75f817d01c&amp;mpshare=1&amp;scene=1&amp;srcid=1013bpGjKaWT9f6r4BPPu26x#rd" target="_blank" rel="noopener">CIPS青工委学术专栏第6期 | 机器阅读理解任务综述</a><br><a href="https://mp.weixin.qq.com/s/49s6oZY2H2qZ5gep5BwdtA" target="_blank" rel="noopener">干货 | 科大讯飞AI北京研究院副院长付瑞吉：智能人机交互技术的研究与应用</a></p>]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> paper-reading </category>
            
            <category> question and answering </category>
            
            <category> reading comprehension </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paper reading </tag>
            
            <tag> reading comprehension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git工作流]]></title>
      <url>http://www.wrran.com/blog/2017/08/18/howto/git-control-flow/</url>
      <content type="html"><![CDATA[<blockquote><p>Get in IT</p></blockquote><a id="more"></a><h1 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h1><p>本博文内容来自于<a href="https://zhuanlan.zhihu.com/p/22835128" target="_blank" rel="noopener">GIT工作流管理代码 - 知乎专栏</a>，其作者其所有合法权益。</p><h1 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h1><blockquote><ol><li>依靠两个主分支master、develop保证代码的持续更新与部署的有序性。</li><li>开发的时候主要是依托于develop分支开发，基于develop分支新建分支，经过严格测试之后，才能合并到develop中，保证develop代码的稳定性，也就是日常开发中不再轻易修改develop分支代码。</li><li>master的代码等于或者落后于develop的代码，是作为develop分支一个更加稳定版的保存与跟踪，用来部署正式的代码。</li><li>master分支和develop分支配置不一样，前者是正式环境（生产环境），后者是开发环境。通过这两个分支保证团队代码的持续迭代更新。</li></ol></blockquote><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="使用分支的理由"><a href="#使用分支的理由" class="headerlink" title="使用分支的理由"></a>使用分支的理由</h2><blockquote><ol><li>在<strong>项目层面</strong>，一个大项目切分成多个小项目，利用分支来管理每个小项目，保证项目的同步进行，提高开发效率。</li><li>在<strong>代码层面</strong>，利用分支管理代码的提交、回滚、合并等操作，减少人工合并的成本，提高代码管理的效率。</li><li>在<strong>个人层面</strong>，利用分支管理自己开发代码与团队代码，方便自己合并代码、开发单独的特色分支，提高个人开发效率。</li></ol></blockquote><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/git-control-flow/branchs.png" alt="分支示意图"><br>如上图所示，我们将分支分为四类：</p><blockquote><ol><li>master: 专门用于部署以及负责线上代码回滚的分支</li><li>develop: 专门存放经过测试之后，保证代码无bug代码的分支</li><li>feature: 项目开发分支。此分支特点是周期长（最短项目周期可能为一周，最长可能会长达一个月甚至更久）、团队协作（一般至少包括一个前端和一个后台）、代码量大，工作方式是需要创建本地以及远程分支，代码基于develop分支代码，经过开发及测试之后，最终合并到develop分支上。当项目上线之后，分支会保留一段时间（一般一周左右，最长不超过一个月），直至最终删除。</li><li>hotfix: 紧急bug、其他问题修复分支。该分支特点是修改时间端（一般时间可能为几个小时，也有可能会是一天甚至更久）、优先级高、代码量稍小，改完之后急需测试上线。此分支也是基于develop（此时需要确认develop的纯度，不能有不稳定的污染代码，如有回滚到稳定版代码，否则影响bug修复）。此分支会是团队协作或者单人，团队协作工作方式会类似feature分支，单人只需构建本地分支即可满足开发要求（本地分支千万不要放在线上，以免给同伴带来干扰），当修复上线一段时间之后（一般为3~7天），便可以删除。</li></ol></blockquote><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><blockquote><p>正常情况下，代码起源于develop分支。开发者自己本地的开发分支不要太多，避免分支过多遗忘分支作用。</p></blockquote><blockquote><p>特殊情况下，如遇到节日banner活动上线，此时develop正好代码有问题，那么a同学可以基于master开发，此时代码量修改很小，不会影响代码稳定性，但a同学需要非常细心，避免发生低级错误。</p></blockquote><blockquote><p>新项目进入开发阶段之前，负责管理代码的人首先新建分支，并通知到团队中所有的人并附上说明。</p></blockquote><blockquote><p>项目进行时，a同学需要去处理优先级更高的bug或者是项目时，a有可能会新建一个自己的本地分支S，但是功能还未修改完，此时a同学有可能会遇到优先级更高的问题，a同学需要暂时中断S，然后将代码提交到本地分支；新建新分支X，当完成X开发后，将代码合并到本地根分支，删去X分支；然后切换到分支S，继续开发，直到最终完成各个项目的开发。</p></blockquote><blockquote><p>优先级特别高的分支需要合并到develop上的时候，提前通知其他人需要合并代码，其他人暂停对develop代码的操作，来保证合并代码的有条不紊</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="分支命名"><a href="#分支命名" class="headerlink" title="分支命名"></a>分支命名</h2><p>分支命名规范：<br>feature分支：feature-xxx 例如 feature-paltforms<br>hotfix分支：hotfix-xxx 例如 hotfix-wholenet</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在各步骤分支操作时，需要不断进行测试：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/git-control-flow/tests.png" alt="代码测试"></p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>合并代码的时候根据优先级顺序来合并代码：</p><blockquote><p><strong>P0级</strong>：如急需上线的项目代码，包括活动项目、紧急bug修改，为最高级；<br><strong>P1级</strong>：大项目代码、合并时间较长、影响较大的代码；<br><strong>P2级</strong>：优化样式、修复小问题、影响不大的代码。</p></blockquote><h2 id="标签命名"><a href="#标签命名" class="headerlink" title="标签命名"></a>标签命名</h2><p>每次正式上线需要打一次标签，标签分级：</p><blockquote><p><code>VX.[ ].[ ]</code>:新功能上线，大量的功能优化等；<br><code>V[ ].X.[ ]</code>:较大的功能优化，性能优化等；<br><code>V[ ].[ ].X</code>：较小的功能优化、性能优化等。</p></blockquote><h1 id="Git常用指令"><a href="#Git常用指令" class="headerlink" title="Git常用指令"></a>Git常用指令</h1><h2 id="关于分支的常用指令"><a href="#关于分支的常用指令" class="headerlink" title="关于分支的常用指令"></a>关于分支的常用指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建基于`commit-head`提交的分支</span></span><br><span class="line">git branch [branch-name] [commit-head]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个本地分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个基于远程分支的本地分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch-name] origin/[branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git branch -dr [remote/branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载远程仓库代码的变动</span></span><br><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><h2 id="本地开发重用指令"><a href="#本地开发重用指令" class="headerlink" title="本地开发重用指令"></a>本地开发重用指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最近5条历史记录</span></span><br><span class="line">git <span class="built_in">log</span> -5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史及每次commit发生变更的文件</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件添加到缓存去区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将特定文件添加到缓存区</span></span><br><span class="line">git add [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作空间的文件</span></span><br><span class="line">git rm [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到本地仓库</span></span><br><span class="line">git commit -m [comment]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程分支</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到对应的远程分支</span></span><br><span class="line">git push origin [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接提交到本地仓库</span></span><br><span class="line">git commit -a -m [branch-name]</span><br></pre></td></tr></table></figure><blockquote><p><strong>本地仓库代码提交条件</strong>：完成功能点，自测无问题，在保持头脑清晰情况下提交到本地分支。</p></blockquote><blockquote><p><strong>远程仓库代码推送条件</strong>：通过一轮测试，bug问题不大，对同伴的影响较小；联调时是代码提交最为频繁的时候，注意解决好每个问题后，做好自测流程，千万不要匆忙提交影响同伴工作效率。测试的时候尽量做到bug批量解决，自测无误之后，再进行提交，减少代码污染。</p></blockquote><blockquote><p><strong>提交代码之前的代码审查</strong>：在代码提交过程中可以做很多控制操作，例如pre-commit钩子是最先触发运行的脚本。在提交一个commit之前，该hook有能力做许多工作，比如检查待提交东西的快照，以确保这份提交中没有缺少什么东西、文件名是否符合规范、是否对这份提交进行了测试、代码风格是否符合团队要求等等。</p></blockquote><h2 id="代码合并"><a href="#代码合并" class="headerlink" title="代码合并"></a>代码合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要合并的分支名</span></span><br><span class="line">git merge [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码存储到储藏室</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看储藏室列表</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 弹出储藏室堆栈</span></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下拉代码</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="代码标签"><a href="#代码标签" class="headerlink" title="代码标签"></a>代码标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地分支</span></span><br><span class="line">git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建本地标签</span></span><br><span class="line">git tag [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签信息</span></span><br><span class="line">git show [tag]</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/22835128" target="_blank" rel="noopener">GIT工作流管理代码 - 知乎专栏</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[他说]]></title>
      <url>http://www.wrran.com/blog/2017/08/18/people-say-170818-01/</url>
      <content type="html"><![CDATA[<blockquote><p>如果天空总是黑暗的，那就摸黑生存；<br>如果发出声音是危险的，那就保持沉默；<br>如果自觉无力发光，那就蜷伏于墙角。<br>但不要习惯了黑暗，就为黑暗辩护；<br>也不要为了自己的苟且而得意；<br>不要嘲讽比自己更勇敢的人们。<br>我们可以卑微如尘土，<br>但不可扭曲如蛆虫。<br>@佚名</p></blockquote>]]></content>
      
        <categories>
            
            <category> people say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中argparse的使用]]></title>
      <url>http://www.wrran.com/blog/2017/08/13/howto/python/argparse/</url>
      <content type="html"><![CDATA[<blockquote><p>see <a href="http://wrran.com/blog/2019/08/18/learn/argparse/index/" target="_blank" rel="noopener">argparse@python</a></p></blockquote>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解Java虚拟机]]></title>
      <url>http://www.wrran.com/blog/2017/08/12/learn/java/jvm/</url>
      <content type="html"><![CDATA[<blockquote><p>他山之石，可以攻玉</p></blockquote><a id="more"></a><h1 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h1><p>该博文出自<a href="https://zhuanlan.zhihu.com/p/28468115" target="_blank" rel="noopener">《深入理解Java虚拟机》读书总结</a>，版权归其作者所有。</p><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>内存管理，就是Java虚拟机在运行时管理如何为程序划分内存区域，如何分配内存，内存用完如何回收。</p><h2 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h2><p>Java虚拟机把内存分为很多数据区域，不同的区域用途和生存周期不同。我们常常直接接触到的是运行时数据区，可以细分为：方法区、堆、虚拟机栈、本地方法栈、程序计数器。这几个区域中，<strong>方法区</strong>和<strong>堆</strong>是所有线程共享的，所有线程都可以访问，而<strong>虚拟机栈</strong>、<strong>本地方法栈</strong>、<strong>程序计数器</strong>是线程隔离的，每个线程有自己独立的区域，线程之间是不共享的。</p><ul><li>程序计数器：相当于一个程序执行过程中的行号指示器，类似于操作系统中的ip，指向当前执行的虚拟机字节码地址。如果执行的是Java方法，计数器就记录者正在执行的虚拟机字节码指令的地址。如果是native 方法，计数器为空。</li><li>虚拟机栈：虚拟机栈就是java方法的内存模型，每一个线程在执行时会有自己的一个虚拟机栈，在运行过程中把所调用方法封装为一个栈帧，然后将栈帧存放在栈里面。栈帧包含了一个方法执行时的相关信息，包括方法用到的局部变量，操作数，动态链接等。</li><li>本地方法栈：类似于虚拟机栈，只不过他存放的是Native方法。</li><li>堆：堆是相对来说占内存最大的一块，用来存放所有线程创建的类的对象实例。方法调用中如果创建了对象，会把这个对象实例存放在堆，然后将对于这个对象的引用存放在栈中，这样就可以访问对象了。对于内存的回收，也就是对堆内存的回收了。</li><li>方法区：存放虚拟机加载的类的信息和一些常量、静态变量等，这些内容一般是不可变的。</li></ul><h2 id="OOM和StackOverflow"><a href="#OOM和StackOverflow" class="headerlink" title="OOM和StackOverflow"></a>OOM和StackOverflow</h2><p>OOM和StackOverFlow就是在运行时数据区出现的。前面说了，虚拟机栈会把每次调用的方法作封装为一个栈帧存起来。这些栈帧肯定是要占内存的，而栈的内存也是有限的。如果栈帧很多一直没有释放，这时候又来了一个栈帧，这个栈帧已经没有空间可以容纳了，有两种情况。如果这种虚拟机栈不支持动态扩展，那么将会抛出StackOverFlow异常。如果支持动态扩展，那么这个栈会请求再扩展部分空间。当然内存不是无穷的，如果频繁的扩展内存，以至于无法再继续扩展了，这时候会抛出OutOfMemory异常。</p><p>除此之外，堆得空间也是有限的。由于创建的对象都是要在堆中分配内存，那么如果堆中空间不足，没有足够的内存空间用来给新的对象分配内存，这时候也会抛出OutOfMemory异常。</p><h2 id="内存分配与回收"><a href="#内存分配与回收" class="headerlink" title="内存分配与回收"></a>内存分配与回收</h2><p>创建一个对象，就在堆中给这个内存分配一块内存。当对象不再被使用，所占的内存就被回收，用来给其他对象。要回收内存，就要知道哪些对象会被回收，什么时候会被回收，回收的具体算法是怎么一个操作。</p><h2 id="对象的创建——分代"><a href="#对象的创建——分代" class="headerlink" title="对象的创建——分代"></a>对象的创建——分代</h2><p>一个对象的创建过程很简单，比如我new一个对象，虚拟机发现这条指令后，会先看看new 后面跟着的那个参数能否在常量池中定位到一个类的符号引用，并且检查那个类是否已经被加载过。如果没有，则进行一次类的加载工作（具体细节后面会讲）。加载完成后，虚拟机会为新的对象在堆中分配一块内存，具体分配多少，在类加载完之后其实就已经定了。分配完内存，之后会将这个对象的实例字段初始化为零值。最后，会对对象进行一些设置，比如设置哈希码，分代年龄信息，这个对象属于哪个类之类的。</p><p>这一系列工作做完，这个对象才算是被创建成功了，之后才会去调用相关代码，按照我们的意愿真正做一次初始化。</p><p>创建好一个对象，还需要一个引用来持有他，这样我们才能使用。引用是放在虚拟机栈 栈帧的本地变量表中的。引用有两种形式，一种是直接持有对象地址，一种是持有一个句柄，句柄保存在堆中，包含着对象的地址，是间接访问。直接访问速度快，间接访问在对象频繁移动时比较有优势。</p><h2 id="哪些对象会被回收？——可达性分析算法"><a href="#哪些对象会被回收？——可达性分析算法" class="headerlink" title="哪些对象会被回收？——可达性分析算法"></a>哪些对象会被回收？——可达性分析算法</h2><p>选择回收哪些对象，虚拟机有很多算法，常见的有引用计数法和可达性分析算法。引用计数法的思路就是为每一个对象设一个值，用来计算被引用的次数。只要有一个对于对象的引用存在，就让这个数字加一。这样如果一个对象没有任何引用，那么引用计数为零，这个对象就会被标记为“可回收”。但是这样有一个很严重的bug，那就是如果我有两个对象，已经不再使用，但是他们互相引用，那么他们的引用计数就永远不会为零，那么就不会被回收。<br>现在大部分虚拟机都采用了“可达性分析算法”，这一算法显然要比引用计数法不知道高到哪里去了。他的思想是，将一些特定的对象作为GC Roots，然后从这个节点向下寻找对其他对象的引用。如果一个对象到GC Roots没有引用链，那么就可以被回收了。在Java虚拟机中，被规定作为GC Roots的对象有：</p><ul><li>虚拟机栈中引用的对象</li><li>方法区中 静态属性引用的对象</li><li>方法区中 常量引用的对象</li><li>JNI引用的对象<br>所以我们日常开发过程中遇到的内存泄漏，很大一部分原因就是本该被回收的对象无意之中被GC Roots引用到了，比如写的static这样的静态字段引用的对象，这样他就不会被回收了。</li></ul><h2 id="回收的算法？——多种混合"><a href="#回收的算法？——多种混合" class="headerlink" title="回收的算法？——多种混合"></a>回收的算法？——多种混合</h2><p>知道哪些对象要被回收，接下来就是具体如何回收的问题了。垃圾回收算法有很多，常见的有标记-清除法，标记-整理法，复制算法，分代收集等。现在的虚拟机基本上都是采用以分代收集为基础，搭配其他算法一起合作完成的。这些算法就不一一介绍了，有兴趣大家可以查一查。<br>具体：根据对象的生存周期对内存划分为新生代 老生代，在新生代中因为每次都会有大量对象被回收，比较频繁，因此采用了复制算法。而老生代相对来说回收的对象少，没那么频繁，而且对象普遍比较大，因此采用了标记-清楚或标记-整理算法。</p><h2 id="回收的过程？——双重标记"><a href="#回收的过程？——双重标记" class="headerlink" title="回收的过程？——双重标记"></a>回收的过程？——双重标记</h2><p>具体的回收过程是，当在GC时发现一个对象可被回收，就会先对他做一次标记，这是第一次标记。之后会筛选一下，如果一个对象的finalized()方法是否有必要被执行。如果有，那么就会被放置到一个队列中，之后虚拟机会单独的处理这一队列中的对象，依次调用他们的finalized()方法，这里是对象复活的唯一机会。之后又会统一进行一次标记，如果这次标记标记成功，那么对象就会被认定为死亡，会立刻被回收。</p><h2 id="GC的时机？——动态年龄判定"><a href="#GC的时机？——动态年龄判定" class="headerlink" title="GC的时机？——动态年龄判定"></a>GC的时机？——动态年龄判定</h2><p>虚拟机针对对内存回收，又把堆分为了两个区，新生代和老年代。新生代又分为一个Eden区和两个Survivor区。每次分配内存，如果对象比较大的话直接进入老年代。否则，先进入Eden区和一个Survivor区，同时会为每一个对象设一个年龄值。之后会周期性的在某个安全点检查一下，对于新生代的对象，将可回收的对象回收掉，将剩余的对象复制到另一个Survivor区，这一过程中会对年龄值加一。这一过程叫做Minor GC，是属于新生代的GC。当某些对象年龄值比较大时，会将他们移动到老年代去。当然在这之前会先查看一下老年代剩余空间是否满足移动。如果不能满足，就会对老年代进行一次GC，这一过程叫做Full GC。而这个检查对象是否可GC得时机，也就是GC的时机，一般是确定的被称作“安全点”。在这一时机进行检查，是不会影响程序正常运行的。</p><h2 id="灵活的控制——四大引用"><a href="#灵活的控制——四大引用" class="headerlink" title="灵活的控制——四大引用"></a>灵活的控制——四大引用</h2><p>GC的流程大致就是这样。我们知道Java中引用有四种，分别是强、软、弱、虚。这四种引用的区别就在于GC的过程中：</p><ul><li>强引用：直接通过类名new一个对象，这样直接创建的对对象的引用叫做强引用。被强引用的对象，一般是不会被回收掉的。</li><li>软引用：被软引用持有的对象，只有在“不回收就要内存溢出”的时候，才会回收</li><li>弱引用：被弱引用持有的对象，在每次GC都会被回收</li><li>虚引用：无任何时机作用，只是一个标记，为了能使对象被回收时做一些系统通知什么的</li></ul><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><p>Java实现平台无关性的基石，就是字节码。在Java虚拟机中，有一个class文件这个概念。一般情况下，每一个类都会产生一个class文件，其内容就是字节码。虚拟机执行字节码，其实就是加载了类的class文件。Android中有两种虚拟机，Dalvik虚拟机和ART虚拟机。他们属于Java虚拟机的衍生，区别在于两个：</p><ul><li>Java虚拟机是基于栈架构的，DVM和ART是基于寄存器架构的</li><li>Java虚拟机执行的是字节码，而DVM ART都不一样。DVM会将class文件重新封装为dex文件，执行dex字节码。ART会在DVM的基础上进一步转化为本地机器码再执行。</li></ul><p>类加载，就是说加载每一个class，而和class相对应的也就是class文件了，所以有必要大致了解一下class文件结构。</p><h2 id="Class文件结构"><a href="#Class文件结构" class="headerlink" title="Class文件结构"></a>Class文件结构</h2><p>任何一个class文件都对应着唯一一个类或者接口的定义信息。但是类或者接口又不必一定非要在class文件中（比如动态的通过类加载器加载）。class文件是一组二进制流，其中包含类的所有相关信息，非常紧凑的排列在一起，很严格的规定了第几位到第几位是什么，主要包含了魔数，常量池等数据信息。<br>这部分内容看起来还是很无聊的，主要关注其中一部门就好啦。比如一开头的4个字节是魔数，魔数的唯一作用是确定这个文件是否可以被虚拟机接受。<br>还比如，其中有一段被称为常量池入口，这个很重要了。常量池是class文件结构与其他项目关联最多的数据类型，相当于一个资源池。通过这个常量池入口，可以获得常量池信息。常量池具体而言，存放着两种类型：字面量和符号引用。</p><ul><li>字面量：就是字面量，比如文本字符串这样的。</li><li>符号引用：包括三种常亮：类和接口的全限定名、字段的名称和描述符、方法的名称和描述符。</li></ul><p>他们的作用就是在虚拟机运行时，通过常量池入口，在常量池中找到对应的符号引用，从而找到引用的类或者方法等。</p><h2 id="类加载机制-1"><a href="#类加载机制-1" class="headerlink" title="类加载机制"></a>类加载机制</h2><p>类的生命周期氛围7个阶段：<br>加载，验证，准备，解析，初始化，使用，卸载<br>其中，验证、准备、解析三个步骤又可以合并为 链接<br>所以类加载的过程就是 加载 链接 初始化了</p><h2 id="加载的时机——按需加载"><a href="#加载的时机——按需加载" class="headerlink" title="加载的时机——按需加载"></a>加载的时机——按需加载</h2><p>虚拟机并没有规定类的加载过程什么时候开始，只是明确了类加载的生命周期是固定的。但是比较特别的是“初始化”。我们需要用到一个类的时候，就一定要“初始化”，而其他在他之前的步骤，自然也就必须要调用了。因此可以这样概括为：加载、验证、准备、解析，这个过程是不确定的，由不同虚拟机自己控制，可能不知道哪个时候就进行了。但是当我们需要用到一个类时，就必须要立刻从加载开始执行到初始化结束，之后才能使用。</p><p>那么什么时候需要这个类呢，以下几种常见情况：</p><ul><li>new一个对象，或者调用一个类的静态字段或者静态方法</li><li>反射调用一个类</li><li>子类加载前要先加载父类</li><li>虚拟机刚启动时执行主类</li></ul><p>这些情况，都是属于对类的主动引用。</p><h2 id="加载的过程——五步走"><a href="#加载的过程——五步走" class="headerlink" title="加载的过程——五步走"></a>加载的过程——五步走</h2><p>前面说过了，类的加载过程是类的生命周期前五个步骤：<br><strong>加载</strong>：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的class对象，作为方法区这个类的各种数据访问入口</li></ul><p>因为加载这个过程没有限制具体的来源，所以衍生出了很多新东西，比如Jar包的读取，从网络中加载类等。</p><p>这是对于简单类而言的。对于数组，不会通过类加载器加载，而是由虚拟机直接创建，之后才会递归的加载数组中的引用类。</p><p><strong>验证</strong>：验证是链接过程的第一步，目的是确保Class文件的字节流中包含的信息符合当前虚拟机的要求，且不会危害虚拟机本身的安全。验证主要有四类：</p><ul><li>文件格式验证：字节流是否符合Class文件格式规范</li><li>元数据验证：语义分析，符合语言规范</li><li>字节码验证：分析数据流，确定语义是合法的，符合逻辑的。</li><li>符号引用验证：验证符号引用合法性</li></ul><p><strong>准备</strong>：正式为类量分配内存并设置初值。类变量要分配在方法区中，设置初值的是类变量而不是实例变量。</p><p><strong>解析</strong>：将常量池内的符号引用替换为直接引用。前面说过，符号引用只是以简单的通过名称等信息指出引用的方法或类，那么在这里才会真正的将符号引用转换为直接引用，即对于方法区类的引用。直接引用类似于指针，所以这一过程可以理解为从名称到地址的转化。</p><p><strong>初始化</strong>：前面是加载和链接的过程，这里就是类加载过程的最后一步了。所谓的初始化阶段，就是真正执行在类中写的代码了。比如实例变量的初始化和构造器等。初始化阶段也可以理解为调用类的构造器的过程。</p><h2 id="加载的工具——类加载器"><a href="#加载的工具——类加载器" class="headerlink" title="加载的工具——类加载器"></a>加载的工具——类加载器</h2><p>前面说过，第一步“加载”过程，要通过一个类的全限定名来获取这个类的二进制字节流。这个过程，是要借助于一股虚拟机外部的工具来进行的，这一工具就是类加载器。每一个类，都有一个针对他的类加载器。两个类是否相同，不但要比较他本身，还要比较他们的类加载器。<br>类加载器可以分为三类：</p><ul><li>启动类加载器：由C++编写，属于虚拟机的一部分，是属于很基础的加载器，会加载Java目录下lib中的类。</li><li>扩展类加载器：可以由开发者使用</li><li>应用类加载器：也叫做系统类加载器，加载用户类路径上自己指定的类，我们平时使用也基本是使用这个。</li></ul><p>而具体的加载逻辑，被称为“双亲委派模型”，即首先有一个根部的加载器“启动类加载器”，其下有一个儿子叫“扩展类加载器”，其下是“应用程序类加载器”，最后是“自定义类加载器”。具体流程：<br>一个类收到了加载的请求，首先会把请求委托给父类加载，每一个加载器都是如此。这样最终会把请求交给根节点的“启动类加载器”。之后如果父加载器可以加载，就会直接加载。否则，会将请求再传下来。</p><h1 id="虚拟机优化"><a href="#虚拟机优化" class="headerlink" title="虚拟机优化"></a>虚拟机优化</h1><p>Java的编译期，是一个极不确定的过程。因为Java的编译期很多，有前端编译期，有后端编译器，还有静态提前编译器。前端编译期负责将.java转化为简单的.class，后端编译器负责将字节码转换为机器码，如JIT。静态提前编译器会将.java直接翻译为本地机器码，如AOT。因此，编译期并不能很精准的分类，因此只能大概分为“早期”和“晚期”。</p><h2 id="早期优化"><a href="#早期优化" class="headerlink" title="早期优化"></a>早期优化</h2><p>早期阶段，可以概括的看做前端编译器将.java转化为.class的过程。这一阶段的优化又可以称作编译期优化。</p><p>这一阶段其实和其他语言的编译期优化类似，无非就是词法、语法分析，语义分析，然后做一些语言层面的优化。比如，语法糖、注解的处理，还有字符串拼接。Java语法糖不多，但是挺实用的，诸如类型擦除啊，自动拆箱、装箱啊。注解是在编译时进行优化，具体在运行时才会体现出作用。还有一个例子，我们都知道String StringBuilder StringBuffer区别。都说每次用”+”链接两个字符串的时候都会new一个String，这样会很耗内存。其实这个说法并不全对。如果仅仅是一个个拼接，哪怕是换行，编译器如果识别到，都会为我们优化，即将他们作为一个String对象。只有个别情况，比如在循环结构中频繁的链接字符串，才会出现刚才说的那个问题。</p><h2 id="运行期优化"><a href="#运行期优化" class="headerlink" title="运行期优化"></a>运行期优化</h2><p>运行期优化，比较熟知的比如JIT和AOT。虚拟机之所以这样分开，是为了增加虚拟机扩展性，也就是说普通的前端编译期只接受Java。而后端编译器则可以接受像Groovy等语言。同时JIT和AOT对编译的性能优化很大，因此也就被选作Android中Java虚拟机所使用的编译器了。</p><p>先说JIT，他是将字节码转换为了机器码，这是DVM采用的编译器。他的特点可以打个比方，比如让你背一首诗，而且还要当着我的面背出来，还要重复背好几次，那么你肯定需要背好久，才能一次念出来。通过JIT，我可以让你照着书，看一个字背一句。这样背起来就很轻松了。但是JIT也不一定真的就远比普通的解释器执行慢。在JVM中，JIT是针对热点代码的，对于这些代码才会进行JIT编译。因此JIT就编译本身转化过程而言也是比较慢的，快是快在执行上。还是那个例子，如果只让你大概总结一下意思，就背几句诗，那么你翻书还不如直接背的快。而对于热点诗句，你能看一眼念一句，那么这个速度是相当快的。</p><p>再说AOT。AOT是直接将.java转换为本地机器码。拿上面那个例子来说，我给你的这篇古诗，其实你以前就背过一部分，所以现在再背一小部分就可以了，所以速度快，但是代价是，需要提前准备，因此占据脑容量大。</p><p>在Android中，以前的DVM采用了JIT，而现在的ART采用了AOT。具体区别在于DVM编译时，安装过程比较快，占空间小，但是执行比较慢。而AOT则是安装过程慢，占空间大，但是执行快。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/28468115" target="_blank" rel="noopener">《深入理解Java虚拟机》读书总结</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LaTeX的相关资源]]></title>
      <url>http://www.wrran.com/blog/2017/08/12/learn/latex-0-preface/</url>
      <content type="html"><![CDATA[<blockquote><p><strong>LaTeX</strong>, A Document Preparation System.</p></blockquote><a id="more"></a><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>主要学习的教程为<a href="http://7xuthx.com1.z0.glb.clouddn.com/zip/learn-latex/lshort-new-zh-cn-master.zip" target="_blank" rel="noopener">一份不太简短的LaTeX2e介绍</a>。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-latex/latex_tutorial.PNG" alt="教程封面"></p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p><a href="http://7xuthx.com1.z0.glb.clouddn.com/zip/learn-latex/njumath_beamer-master.zip" target="_blank" rel="noopener">南京大学Beamer模板</a><br><a href="http://7xuthx.com1.z0.glb.clouddn.com/zip/learn-latex/tudelft-report-latex-master.zip" target="_blank" rel="noopener">TUDELFT报告模板</a><br><a href="http://7xuthx.com1.z0.glb.clouddn.com/zip/learn-latex/XMU_master_and_doctor_degree_thesis-master.zip" target="_blank" rel="noopener">厦门大学毕业论文模板</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.latexstudio.net/" target="_blank" rel="noopener">LaTeX工作室</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> latex </category>
            
        </categories>
        
        
        <tags>
            
            <tag> latex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[anaconda在linux下的安装]]></title>
      <url>http://www.wrran.com/blog/2017/08/11/howto/install/anaconda-linux/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Anaconda</code>, The Most Popular Python Data Science Platform</p></blockquote><a id="more"></a><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-85-generic x86_64)</span><br></pre></td></tr></table></figure><h1 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h1><p>以管理员<strong>root</strong>登入系统后，执行如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 根据安装环境选择相应的文件</span></span><br><span class="line"><span class="comment"># 可下载文件参见 https://www.continuum.io/downloads</span></span><br><span class="line">wget https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh</span><br><span class="line">bash Anaconda3-*.sh</span><br><span class="line"><span class="comment"># press ENTER</span></span><br><span class="line"><span class="comment"># press q</span></span><br><span class="line">yes</span><br><span class="line">/opt/anaconda3</span><br><span class="line">yes  <span class="comment"># add to PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># activate .bashrc</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">conda list</span><br><span class="line"><span class="comment"># some packages' info go here ...</span></span><br></pre></td></tr></table></figure><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">Anaconda 镜像使用帮助 - 清华大学开源软件镜像站</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> install </category>
            
            <category> anaconda </category>
            
        </categories>
        
        
        <tags>
            
            <tag> install </tag>
            
            <tag> anaconda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中的ABC]]></title>
      <url>http://www.wrran.com/blog/2017/08/11/learn/python/abcmeta/</url>
      <content type="html"><![CDATA[<blockquote><p>ABCMeta</p></blockquote><a id="more"></a><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"></span><br><span class="line"><span class="meta">@six.add_metaclass(abc.ABCMeta)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PluginBase</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_a</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">"""an abstract method need to be implemented."""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_b</span><span class="params">(self, output, data)</span>:</span></span><br><span class="line">        <span class="string">"""another abstract method need to be implemented."""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisteredImplementation</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_c</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Method in third-party class, '</span> + str(data)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubclassImplementation</span><span class="params">(PluginBase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_a</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Overriding func_a, '</span> + str(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_b</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Overriding func_b, '</span> + str(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_d</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line"></span><br><span class="line">PluginBase.register(RegisteredImplementation)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> sc <span class="keyword">in</span> PluginBase.__subclasses__():</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'subclass of PluginBase: '</span> + sc.__name__</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">print</span> issubclass(RegisteredImplementation, PluginBase)</span><br><span class="line">    <span class="keyword">print</span> isinstance(RegisteredImplementation(), PluginBase)</span><br><span class="line">    <span class="keyword">print</span> issubclass(SubclassImplementation, PluginBase)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line">    obj1 = RegisteredImplementation()</span><br><span class="line">    obj1.func_c(<span class="string">"It's right!"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line">    obj2 = SubclassImplementation()</span><br><span class="line">    obj2.func_a(<span class="string">"It's right!"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.cnblogs.com/Security-Darren/p/4094959.html" target="_blank" rel="noopener">Python装饰器、metaclass、abc模块学习笔记</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> abcmeta </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python的模块 - logging]]></title>
      <url>http://www.wrran.com/blog/2017/08/10/learn/python/logging/</url>
      <content type="html"><![CDATA[<blockquote><p><code>logging</code>, Logging facility for Python</p></blockquote><a id="more"></a><h1 id="Basic-Logging-Tutorial"><a href="#Basic-Logging-Tutorial" class="headerlink" title="Basic Logging Tutorial"></a>Basic Logging Tutorial</h1><p><a href="https://docs.python.org/2/howto/logging.html#logging-basic-tutorial" target="_blank" rel="noopener">Basic Logging Tutorial - Logging HOWTO</a><br>该教程前言中的<a href="https://docs.python.org/2/howto/logging.html#when-to-use-logging" target="_blank" rel="noopener">When to use logging</a>值得一看。</p><h2 id="A-Simple-Example"><a href="#A-Simple-Example" class="headerlink" title="A Simple Example"></a>A Simple Example</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.warning(<span class="string">'Watch out!'</span>)  <span class="comment"># will print a message to the console</span></span><br><span class="line"><span class="comment"># WARNING:root:Watch out!</span></span><br><span class="line">logging.info(<span class="string">'I told you so'</span>)  <span class="comment"># will not print anything</span></span><br></pre></td></tr></table></figure><h2 id="Logging-to-a-file"><a href="#Logging-to-a-file" class="headerlink" title="Logging to a file"></a>Logging to a file</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(filename=<span class="string">'example.log'</span>, level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">'This message should go to the log file'</span>)</span><br><span class="line">logging.info(<span class="string">'So should this'</span>)</span><br><span class="line">logging.warning(<span class="string">'And this, too'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim example.log</span></span><br><span class="line"><span class="comment"># DE<span class="doctag">BUG:</span>root:This message should go to the log file</span></span><br><span class="line"><span class="comment"># INFO:root:So should this</span></span><br><span class="line"><span class="comment"># WARNING:root:And this, too</span></span><br></pre></td></tr></table></figure><h2 id="Logging-from-multiple-modules"><a href="#Logging-from-multiple-modules" class="headerlink" title="Logging from multiple modules"></a>Logging from multiple modules</h2><p><a href="https://docs.python.org/2/howto/logging.html#logging-from-multiple-modules" target="_blank" rel="noopener">Click Me</a></p><h2 id="Logging-variable-data"><a href="#Logging-variable-data" class="headerlink" title="Logging variable data"></a>Logging variable data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.warning(<span class="string">'%s before you %s'</span>, <span class="string">'Look'</span>, <span class="string">'leap!'</span>)</span><br><span class="line"><span class="comment"># WARNING:root:Look before you leap!</span></span><br></pre></td></tr></table></figure><p>There are some newer formatting options:</p><ul><li><a href="https://docs.python.org/2/library/stdtypes.html#str.format" target="_blank" rel="noopener">str.format()</a></li><li><a href="https://docs.python.org/2/library/string.html#string.Template" target="_blank" rel="noopener">string.Template</a></li></ul><h2 id="Changing-the-format-of-displayed-messages"><a href="#Changing-the-format-of-displayed-messages" class="headerlink" title="Changing the format of displayed messages"></a>Changing the format of displayed messages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(format=<span class="string">'%(levelname)s:%(message)s'</span>, level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">'This message should appear on the console'</span>)</span><br><span class="line">logging.info(<span class="string">'So should this'</span>)</span><br><span class="line">logging.warning(<span class="string">'And this, too'</span>)</span><br><span class="line"><span class="comment"># DE<span class="doctag">BUG:</span>This message should appear on the console</span></span><br><span class="line"><span class="comment"># INFO:So should this</span></span><br><span class="line"><span class="comment"># WARNING:And this, too</span></span><br></pre></td></tr></table></figure><p>For a full set of things that can appear in format strings, you can refer to the documentation for <a href="https://docs.python.org/2/library/logging.html#logrecord-attributes" target="_blank" rel="noopener">LogRecord attributes</a>.</p><h2 id="Displaying-the-data-time-in-messages"><a href="#Displaying-the-data-time-in-messages" class="headerlink" title="Displaying the data/time in messages"></a>Displaying the data/time in messages</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s %(message)s'</span>)</span><br><span class="line">logging.warning(<span class="string">'is when this event was logged.'</span>)</span><br><span class="line"><span class="comment"># 2012-12-12 11:41:42,612 is when this event was logged.</span></span><br></pre></td></tr></table></figure><p>If you need more control over the formatting of the data/time, provide a <em>datefmt</em> argument to <code>basicConfig</code>. The format of the <code>datefmt</code> argument is the same as supported by <a href="https://docs.python.org/2/library/time.html#time.strftime" target="_blank" rel="noopener">time.strftime()</a>.</p><h1 id="Advanced-Logging-Tutorial"><a href="#Advanced-Logging-Tutorial" class="headerlink" title="Advanced Logging Tutorial"></a>Advanced Logging Tutorial</h1><p><a href="https://docs.python.org/2/howto/logging.html#advanced-logging-tutorial" target="_blank" rel="noopener">Advanced Logging Tutorial</a></p><p><code>logging</code>中含有四类角色：</p><ul><li><strong>logger</strong>暴露出应用代码需要的接口</li><li><strong>hander</strong>将<em>logger</em>创建出的日志记录发送给合适的目的地</li><li><strong>filter</strong>提供了更细节的管理手段，决定那些日志记录应当输出</li><li><strong>formatter</strong>则决定日志记录的最终排版格式</li></ul><p>上述四者的沟通通过一个类型为<a href="https://docs.python.org/2/library/logging.html#logging.LogRecord" target="_blank" rel="noopener"><code>LogRecord</code></a>的实例得以沟通。</p><p>其外，该部分前言还介绍了日志的命名惯例及一些默认设置。</p><h2 id="Logging-Flow"><a href="#Logging-Flow" class="headerlink" title="Logging Flow"></a>Logging Flow</h2><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-python-logging/logging_flow.png" alt="日志事件 流程图"></p><h2 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h2><p><a href="https://docs.python.org/2/library/logging.html#logging.Logger" target="_blank" rel="noopener"><code>Logger</code></a>有三重作用：</p><ol><li>暴露一些接口给使用者使用</li><li>根据默认的或者绑定的<code>filter</code>决定要如何处理每条日志记录</li><li>将日志记录发给所有相关的日志处理器</li></ol><p><a href="https://docs.python.org/2/library/logging.html#logging.Logger" target="_blank" rel="noopener"><code>Logger</code></a>的方法可以分为两大类：</p><ol><li>配置类<ul><li>Logger.setLevel()</li><li>Logger.addHandler(), Logger.removeHandler()</li><li>Logger.addFilter(), Logger.removeFilter()</li></ul></li><li>消息发送类<ul><li>Logger.debug(), Logger.info(), Logger.warning(), Logger.error() and Logger.critical()</li><li>Logger.exception()</li><li>Logger.log()</li></ul></li></ol><p><code>getLogger()</code>的效果为：</p><blockquote><p><code>getLogger()</code> returns a reference to a logger instance with the specified name if it is provided, or root if not. The names are period-separated hierarchical structures. Multiple calls to <code>getLogger()</code> with the same name will return a reference to the same logger object. Loggers that are further down in the hierarchical list are children of loggers higher up in the list. For example, given a logger with a name of <code>foo</code>, loggers with names of <code>foo.bar</code>, <code>foo.bar.baz</code>, and <code>foo.bam</code> are all descendants of foo.</p></blockquote><p>Loggers have a concept of effective level. If a level is not explicitly set on a logger, the level of its parent is used instead as its effective level. If the parent has no explicit level set, its parent is examined, and so on - all ancestors are searched until an explicitly set level is found. The root logger always has an explicit level set (<code>WARNING</code> by default). When deciding whether to process an event, the effective level of the logger is used to determine whether the event is passed to the logger’s handlers.</p><p>Child loggers propagate messages up to the handlers associated with their ancestor loggers. Because of this, it is unnecessary to define and configure handlers for all the loggers an application uses. It is sufficient to configure handlers for a top-level logger and create child loggers as needed. (You can, however, turn off propagation by setting the propagate attribute of a logger to <code>False</code>.)</p><h2 id="handlers"><a href="#handlers" class="headerlink" title="handlers"></a>handlers</h2><p><code>handler</code>负责分发合适的日志消息（基于日志的严重级别）给特定的处理器处理。</p><p>常用的<code>handler</code>可以参见<a href="https://docs.python.org/2/howto/logging.html#useful-handlers" target="_blank" rel="noopener">Useful Handlers</a>。</p><p>对于不需要自定义<code>Handler</code>的使用者来说，常用的几个方法如下：</p><ul><li><code>setLevel()</code>与<em>logger</em>相似，<em>logger</em>使用严重级别来决定信息传送给哪个处理器，而<em>handler</em>的该方法决定哪些级别的日志应当被处理</li><li><code>setFormatter()</code>设定该处理器要使用的<em>Formatter</em></li><li><code>addFilter()</code>与<code>removeFilter()</code>分别决定处理器上绑定的过滤器</li></ul><p>需要注意的是使用者不应当直接实例化或者使用<code>Handler</code>的实例，它只是一个默认的接口并提供了一些默认的行为而已。</p><h2 id="Formatters"><a href="#Formatters" class="headerlink" title="Formatters"></a>Formatters</h2><p><code>formatter</code>是最终负责控制日志的顺序，结构和内容的组件。与上述的<code>handler</code>不同，使用者往往需要使用该组件。<br>控制格式的具体内容可以参见<a href="https://docs.python.org/2/howto/logging.html#formatters" target="_blank" rel="noopener">Formatters</a>。</p><h2 id="Configuring-Logging"><a href="#Configuring-Logging" class="headerlink" title="Configuring Logging"></a>Configuring Logging</h2><p>程序配置日志可以通过三种方式：</p><ol><li>使用Python代码硬编码进行配置。</li><li>创建一个配置文件，并通过<a href="https://docs.python.org/2/library/logging.config.html#logging.config.fileConfig" target="_blank" rel="noopener"><code>fileConfig()</code></a>读取配置。</li><li>创建一个存储配置信息的对象（如JSON，YAML等）并传递给方法<a href="https://docs.python.org/2/library/logging.config.html#logging.config.dictConfig" target="_blank" rel="noopener"><code>dictConfig()</code></a>。</li></ol><p>后面两种方式可以参考<a href="https://docs.python.org/2/library/logging.config.html#logging-config-api" target="_blank" rel="noopener">Configuration functions</a>。</p><p>下例是使用Python进行直接配置的代码：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simple_example'</span>)</span><br><span class="line">logger.setLevel(logger.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create console handler and set level to debug</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create formatter</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add formatter to ch</span></span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add ch to logger</span></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p></p><p>下例是使用配置文件进行配置的方式：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(<span class="string">'logging.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simpleExample'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p></p><p>配置文件<code>logging.conf</code>的内容如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys=root,simpleExample</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=consoleHandler</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=simpleFormatter</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line"></span><br><span class="line">[logger_simpleExample]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line">qualname=simpleExample</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=simpleFormatter</span><br><span class="line">args=(sys.stdout,)</span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter]</span><br><span class="line">format=%(asctime)s - %(name)s - %(levelname)s - %(message)s</span><br><span class="line">datefmt=</span><br></pre></td></tr></table></figure><p></p><p>同时要注意配置文件的位置：</p><blockquote><p>Note that the class names referenced in config files need to be either relative to the logging module, or absolute values which can be resolved using normal import mechanisms.</p></blockquote><p>下例为达到与上述相同方式的YAML配置文件：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">formatters:</span></span><br><span class="line"><span class="attr">  simple:</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line"><span class="attr">  console:</span></span><br><span class="line"><span class="attr">    class:</span> <span class="string">logging.StreamHandler</span></span><br><span class="line"><span class="attr">    level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">    formatter:</span> <span class="string">simple</span></span><br><span class="line"><span class="attr">    stream:</span> <span class="attr">ext://sys.stdout</span></span><br><span class="line"><span class="attr">loggers:</span></span><br><span class="line"><span class="attr">  simpleExample:</span></span><br><span class="line"><span class="attr">    level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">    handlers:</span> <span class="string">[console]</span></span><br><span class="line"><span class="attr">    propagate:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">root:</span></span><br><span class="line"><span class="attr">  level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">  handlers:</span> <span class="string">[console]</span></span><br></pre></td></tr></table></figure><p></p><p>关于第三种的配置方式，详情可以参见<a href="https://docs.python.org/2/library/logging.config.html#logging-config-api" target="_blank" rel="noopener">Configuration functions</a>。</p><h2 id="What-happens-if-no-configuration-is-provided"><a href="#What-happens-if-no-configuration-is-provided" class="headerlink" title="What happens if no configuration is provided"></a>What happens if no configuration is provided</h2><p>当没有找到必需的配置信息时，<code>logging</code>的行为取决于Python的版本号：</p><blockquote><p>For Python 2.x, the behaviour is as follows:</p><ul><li>If logging.raiseExceptions is False (production mode), the event is silently dropped.</li><li>If logging.raiseExceptions is True (development mode), a message ‘No handlers could be found for logger X.Y.Z’ is printed once.</li></ul></blockquote><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p><a href="https://docs.python.org/2/howto/logging.html#configuring-logging-for-a-library" target="_blank" rel="noopener">Configuring Logging for a Library</a><br><a href="https://docs.python.org/2/howto/logging.html#logging-levels" target="_blank" rel="noopener">Logging Levels</a><br><a href="https://docs.python.org/2/howto/logging.html#custom-levels" target="_blank" rel="noopener">Custom Levels</a><br><a href="https://docs.python.org/2/howto/logging.html#useful-handlers" target="_blank" rel="noopener">Useful Handlers</a><br><a href="https://docs.python.org/2/howto/logging.html#exceptions-raised-during-logging" target="_blank" rel="noopener">Exception raised during logging</a><br><a href="https://docs.python.org/2/howto/logging.html#using-arbitrary-objects-as-messages" target="_blank" rel="noopener">Using arbitrary objects as messages</a><br><a href="https://docs.python.org/2/howto/logging.html#optimization" target="_blank" rel="noopener">Optimization</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="noopener">logging</a><br><a href="http://www.cnblogs.com/dkblog/archive/2011/08/26/2155018.html" target="_blank" rel="noopener">Python的日志logging模块学习</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> logging </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python的property]]></title>
      <url>http://www.wrran.com/blog/2017/08/09/learn/python/property/</url>
      <content type="html"><![CDATA[<blockquote><p>We are adults.</p></blockquote><a id="more"></a><h1 id="一例胜千言"><a href="#一例胜千言" class="headerlink" title="一例胜千言"></a>一例胜千言</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""I'm the 'x' property."""</span></span><br><span class="line">        print(<span class="string">"in x.getter"</span>)</span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @x.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        print(<span class="string">"in x.setter"</span>)</span><br><span class="line">        self._x = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @x.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"in x.deleter"</span>)</span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = C()</span></span><br><span class="line"><span class="comment"># c.x</span></span><br><span class="line"><span class="comment"># in x.getter</span></span><br><span class="line"><span class="comment"># c.x = 'x'</span></span><br><span class="line"><span class="comment"># in x.setter</span></span><br><span class="line"><span class="comment"># c.x</span></span><br><span class="line"><span class="comment"># in x.getter</span></span><br><span class="line"><span class="comment"># 'x'</span></span><br><span class="line"><span class="comment"># del c.x</span></span><br><span class="line"><span class="comment"># in x.deleter</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://python.jobbole.com/80955/" target="_blank" rel="noopener">Python进阶之“属性（property）”详解</a><br><a href="https://docs.python.org/release/2.6/library/functions.html#property" target="_blank" rel="noopener">property - Built-in Functions</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用指令]]></title>
      <url>http://www.wrran.com/blog/2017/08/05/cheatsheet/reference/linux-common-cmd/</url>
      <content type="html"><![CDATA[<blockquote><p><code>student@linux:~ $</code></p></blockquote><a id="more"></a><h1 id="CHEATSHEET"><a href="#CHEATSHEET" class="headerlink" title="CHEATSHEET"></a>CHEATSHEET</h1><table><thead><tr><th style="text-align:center">NAME</th><th style="text-align:left">DESCRIPTION</th></tr></thead><tbody><tr><td style="text-align:center"><code>passwd</code></td><td style="text-align:left">The passwd command changes passwords for user accounts. A normal user may only change the password for his/her own account, while the superuser may change the password for any account. passwd also changes the account or associated password validity period.</td></tr></tbody></table><h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> -tpa name</span><br><span class="line"><span class="comment"># 不加任何选项与参数时，type会显示出name是外部指令还是内建指令</span></span><br><span class="line"><span class="comment"># -t: type会将name以下列关键字标识出该指令的含义</span></span><br><span class="line"><span class="comment">#      file    : 表示为外部指令</span></span><br><span class="line"><span class="comment">#      alias   : 表示该指令为命令别名所设定的名称</span></span><br><span class="line"><span class="comment">#      builtin : 表示该指令为bash内建的指令功能</span></span><br><span class="line"><span class="comment"># -p: 如果后面接的name为外部指令时，才会显示完整文件名</span></span><br><span class="line"><span class="comment"># -a: 会由PATH变量定义的路径中所有含name的指令都列出来，包含alias</span></span><br></pre></td></tr></table></figure><h1 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">man ln</span><br><span class="line"><span class="comment"># 常用选项：</span></span><br><span class="line"><span class="comment"># -s, --symbolic</span></span><br><span class="line"><span class="comment">#        make symbolic links instead of hard links</span></span><br></pre></td></tr></table></figure><h1 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h1><p>改变档案所属群组<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp -R dirname/filename</span><br><span class="line"><span class="comment"># -R: 进行递归的群组更改，即连同次目录下的所有档案、目录都变更为该群组。</span></span><br></pre></td></tr></table></figure><p></p><h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><p>改变档案拥有者<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R 账号名称 档案或目录</span><br><span class="line">chown -R 账号名称:群组名称 档案或目录</span><br><span class="line"><span class="comment"># -R: 进行递归的更改，即连同次目录下的所有档案、目录都进行变更。</span></span><br></pre></td></tr></table></figure><p></p><h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><p>改变档案权限<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [u|g|o|a] [+|-|=] [r|w|x] dirname|filename</span><br></pre></td></tr></table></figure><p></p><h1 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Screen is a full-screen window manager that multiplexes a physical terminal between several processes (typically interactive shells).  Each virtual terminal provides the <span class="built_in">functions</span> of a DEC VT100 terminal and, <span class="keyword">in</span> addition, several control <span class="built_in">functions</span> from the ISO 6429 (ECMA 48, ANSI X3.64) and ISO 2022 standards (e.g. insert/delete line and support <span class="keyword">for</span> multiple character sets).  There is a scrollback <span class="built_in">history</span> buffer <span class="keyword">for</span> each virtual terminal and a copy-and-paste mechanism that allows moving text regions  between windows.</span><br></pre></td></tr></table></figure><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-screen/" target="_blank" rel="noopener">linux 技巧：使用 screen 管理你的远程会话</a></p><h1 id="vim的配置"><a href="#vim的配置" class="headerlink" title="vim的配置"></a>vim的配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line">vim .vimrc</span><br><span class="line">. .vimrc</span><br></pre></td></tr></table></figure><p>而文件<code>.vimrc</code>的具体内容如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&quot; 显示标尺</span><br><span class="line">set ruler</span><br><span class="line">&quot; 显示输入的命令</span><br><span class="line">set showcmd</span><br><span class="line">&quot; 设置状态栏的内容</span><br><span class="line">set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=A%Y]\ [POS=%l,%v][%p%%]</span><br><span class="line">&quot; 启动时显示状态栏(1)</span><br><span class="line">&quot; 总是显示状态栏(2)</span><br><span class="line">set laststatus=2</span><br><span class="line">&quot; 自动缩进</span><br><span class="line">set autoindent</span><br><span class="line">set cindent</span><br><span class="line">&quot; tab键的宽度</span><br><span class="line">set tabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">&quot; 不要用空格替代制表符</span><br><span class="line">set expandtab</span><br><span class="line">&quot; 在行和段开始处使用制表符</span><br><span class="line">set smarttab</span><br><span class="line">&quot; 显示行号</span><br><span class="line">set number</span><br><span class="line">&quot; 历史记录数</span><br><span class="line">set history=1000</span><br><span class="line">&quot; 搜索逐字符高亮</span><br><span class="line">set hlsearch</span><br><span class="line">set incsearch</span><br><span class="line">&quot; 侦测文件类型</span><br><span class="line">filetype on</span><br><span class="line">&quot; 载入文件类型插件</span><br><span class="line">filetype plugin on</span><br><span class="line">&quot; 为特定文件类型载入相关缩进文件</span><br><span class="line">filetype indent on</span><br><span class="line">&quot; 自动保存</span><br><span class="line">set autowrite</span><br><span class="line">&quot; 高亮显示匹配的括号</span><br><span class="line">set showmatch</span><br><span class="line">&quot; 匹配括号高亮的时间（单位为十分之一秒）</span><br><span class="line">set matchtime=1</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; 新建文件时的默认标题 &quot;</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; 新建 .c, .h, .sh, .java文件，自动插入文件头</span><br><span class="line">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java,*.py exec &quot;:call SetTitle()&quot;</span><br><span class="line">&quot; 函数SetTitle,自动插入文件头</span><br><span class="line">func SetTitle()</span><br><span class="line">    &quot; 如果文件为 .sh 文件</span><br><span class="line">    if &amp;filetype == &apos;sh&apos;</span><br><span class="line">        call setline(1, &quot;\#!bin/bash&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;), &quot;&quot;)</span><br><span class="line">    elseif &amp;filetype == &apos;python&apos;</span><br><span class="line">        call setline(1, &quot;#!/home/wangr/anaconda3/bin/python&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;), &quot;#-*- coding: utf-8 -*-&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+1, &quot;# &gt; Author: WrRan&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+2, &quot;# &gt; Mail: wrran@outlook.com&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+3, &quot;# &gt; Create Time: &quot;.strftime(&quot;%m/%d/%Y&quot;))</span><br><span class="line">        call append(line(&quot;.&quot;)+4, &quot;&quot;)</span><br><span class="line">    else</span><br><span class="line">        call append(1,           &quot;/**********************************&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;),   &quot;&gt; Author: WrRan&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+1, &quot;&gt; Mail: wrran@outlook.com&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+2, &quot;&gt; Create Time: &quot;.strftime(&quot;%m/%d/%Y&quot;))</span><br><span class="line">        call append(line(&quot;.&quot;)+3  &quot;**********************************/&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+4, &quot;&quot;)</span><br><span class="line">    endif</span><br><span class="line">    if &amp;filetype == &apos;cpp&apos;</span><br><span class="line">        call append(line(&quot;.&quot;)+6, &quot;#include &lt;iostream&gt;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+7, &quot;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+8, &quot;using namespace std;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+9, &quot;&quot;)</span><br><span class="line">    endif</span><br><span class="line">    if &amp;filetype == &quot;c&quot;</span><br><span class="line">        call append(line(&quot;.&quot;)+6, &quot;#include &lt;stdio.h&gt;&quot;)</span><br><span class="line">        call append(line(&quot;.&quot;)+7, &quot;&quot;)</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line">&quot; 新建文件后，自动定位到文件末尾cm</span><br><span class="line">autocmd BufNewFile * normal G</span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a><br><a href="http://www.jianshu.com/p/5ca890e5bdbf" target="_blank" rel="noopener">Linux 命令行下的好东西</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> reference </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VIM常用快捷键]]></title>
      <url>http://www.wrran.com/blog/2017/08/02/cheatsheet/shortcut/vim-shortcut/</url>
      <content type="html"><![CDATA[<blockquote><p>Vim - the ubiquitous text editor</p></blockquote><a id="more"></a><h1 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h1><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>h</code></td><td style="text-align:left">光标向左移动</td></tr><tr><td style="text-align:center"><code>j</code></td><td style="text-align:left">光标向下移动</td></tr><tr><td style="text-align:center"><code>k</code></td><td style="text-align:left">光标向上移动</td></tr><tr><td style="text-align:center"><code>l</code></td><td style="text-align:left">光标向右移动</td></tr><tr><td style="text-align:center"><code>Ctrl + f</code></td><td style="text-align:left">向下移动一页</td></tr><tr><td style="text-align:center"><code>Ctrl + b</code></td><td style="text-align:left">向上移动一页</td></tr><tr><td style="text-align:center"><code>Ctrl + d</code></td><td style="text-align:left">向下移动半页</td></tr><tr><td style="text-align:center"><code>Ctrl + u</code></td><td style="text-align:left">向上移动半页</td></tr><tr><td style="text-align:center"><code>+</code></td><td style="text-align:left">光标移动到非空格符的下一列</td></tr><tr><td style="text-align:center"><code>-</code></td><td style="text-align:left">光标移动到非空格符的上一列</td></tr><tr><td style="text-align:center"><code>&lt;n&gt;&lt;space&gt;</code></td><td style="text-align:left"><code>&lt;n&gt;</code>表示数字；光标向前移动<code>&lt;n&gt;</code>个字符</td></tr><tr><td style="text-align:center"><code>0</code></td><td style="text-align:left">移动到该行的最前面字符处</td></tr><tr><td style="text-align:center"><code>$</code></td><td style="text-align:left">移动到该行的最后面字符处</td></tr><tr><td style="text-align:center"><code>H</code></td><td style="text-align:left">光标移动到这个屏幕的最上方一行的第一个字符</td></tr><tr><td style="text-align:center"><code>M</code></td><td style="text-align:left">光标移动到这个屏幕的中央一行的第一个字符</td></tr><tr><td style="text-align:center"><code>L</code></td><td style="text-align:left">光标移动到这个屏幕的最下方一行的第一个字符</td></tr><tr><td style="text-align:center"><code>G</code></td><td style="text-align:left">光标移动到该文档的最后一行</td></tr><tr><td style="text-align:center"><code>&lt;n&gt;G</code></td><td style="text-align:left"><code>&lt;n&gt;</code>为数字。移动到该文档的第<code>&lt;n&gt;</code>行</td></tr><tr><td style="text-align:center"><code>gg</code></td><td style="text-align:left">移动到该文档的第一行</td></tr><tr><td style="text-align:center"><code>&lt;n&gt;&lt;enter&gt;</code></td><td style="text-align:left"><code>&lt;n&gt;</code>为数字。光标向下移动<code>n</code>行</td></tr></tbody></table><h1 id="搜索与取代"><a href="#搜索与取代" class="headerlink" title="搜索与取代"></a>搜索与取代</h1><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>/&lt;word&gt;</code></td><td style="text-align:left">向光标之下寻找字符串<code>&lt;word&gt;</code></td></tr><tr><td style="text-align:center"><code>?&lt;word&gt;</code></td><td style="text-align:left">向光标之上寻找字符串<code>&lt;word&gt;</code></td></tr><tr><td style="text-align:center"><code>n</code></td><td style="text-align:left">重复<em>前一个</em>搜索的动作</td></tr><tr><td style="text-align:center"><code>N</code></td><td style="text-align:left"><em>反向</em>进行搜索动作</td></tr><tr><td style="text-align:center"><code>:&lt;start&gt;,&lt;end&gt;s/&lt;old&gt;/&lt;new&gt;/g</code></td><td style="text-align:left"><code>&lt;start&gt;</code>与<code>&lt;end&gt;</code>为数字。在第<code>&lt;start&gt;</code>行至<code>&lt;end&gt;</code>行搜索字符串<code>&lt;old&gt;</code>并替换为字符串<code>&lt;new&gt;</code></td></tr><tr><td style="text-align:center"><code>:&lt;start&gt;,$s/&lt;old&gt;/&lt;new&gt;/g</code></td><td style="text-align:left">与上一个指令相同，不同之处在于<code>$</code>表示最后一行</td></tr><tr><td style="text-align:center"><code>:&lt;start&gt;,$s/&lt;old/&lt;new&gt;/gc</code></td><td style="text-align:left">与前两个指令相同，不同之处在于需要用户确认</td></tr></tbody></table><h1 id="删除复制粘贴"><a href="#删除复制粘贴" class="headerlink" title="删除复制粘贴"></a>删除复制粘贴</h1><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:left">向后删除一个字符</td></tr><tr><td style="text-align:center"><code>&lt;n&gt;x</code></td><td style="text-align:left"><code>&lt;n&gt;</code>为数字。向后删除<code>&lt;n&gt;</code>个字符</td></tr><tr><td style="text-align:center"><code>X</code></td><td style="text-align:left">向前删除一个字符</td></tr><tr><td style="text-align:center"><code>&lt;n&gt;X</code></td><td style="text-align:left"><code>&lt;n&gt;</code>为数字。向前删除<code>&lt;n&gt;</code>个字符</td></tr><tr><td style="text-align:center"><code>dd</code></td><td style="text-align:left">删除游标所在的那一整行</td></tr><tr><td style="text-align:center"><code>&lt;n&gt;dd</code></td><td style="text-align:left"><code>&lt;n&gt;</code>为数字。删除游标所在的向下<code>&lt;n&gt;</code>行</td></tr><tr><td style="text-align:center"><code>d1G</code></td><td style="text-align:left">删除光标所在到第一行的数据</td></tr><tr><td style="text-align:center"><code>dG</code></td><td style="text-align:left">删除光标所在到最后一行的数据</td></tr><tr><td style="text-align:center"><code>d$</code></td><td style="text-align:left">删除光标所在到该行最后一个字符的数据</td></tr><tr><td style="text-align:center"><code>d0</code></td><td style="text-align:left">删除光标所在到该行第一个字符的数据</td></tr><tr><td style="text-align:center"><code>yy</code></td><td style="text-align:left">复制游标所在的那一行</td></tr><tr><td style="text-align:center"><code>&lt;n&gt;yy</code></td><td style="text-align:left"><code>&lt;n&gt;</code>为数字。赋值游标所在的向下<code>&lt;n&gt;</code>行</td></tr><tr><td style="text-align:center"><code>y1G</code></td><td style="text-align:left">复制光标所在行到第一行的数据</td></tr><tr><td style="text-align:center"><code>yG</code></td><td style="text-align:left">复制光标所在行到最后一行的数据</td></tr><tr><td style="text-align:center"><code>y0</code></td><td style="text-align:left">复制光标所在到该行行首的数据</td></tr><tr><td style="text-align:center"><code>y$</code></td><td style="text-align:left">赋值光标所在到该行行末的数据</td></tr><tr><td style="text-align:center"><code>p</code></td><td style="text-align:left">将已复制的数据在光标的下面粘贴</td></tr><tr><td style="text-align:center"><code>P</code></td><td style="text-align:left">将已复制的数据在光标的上面粘贴</td></tr><tr><td style="text-align:center"><code>J</code></td><td style="text-align:left">将光标所在行与下一行数据合并为一行</td></tr><tr><td style="text-align:center"><code>c</code></td><td style="text-align:left">重复删除多个数据，如向下删除10行，则指令为<code>10cj</code></td></tr><tr><td style="text-align:center"><code>u</code></td><td style="text-align:left">撤销前一个动作</td></tr><tr><td style="text-align:center"><code>Ctrl + r</code></td><td style="text-align:left">重做上一个动作</td></tr><tr><td style="text-align:center"><code>.</code></td><td style="text-align:left"><em>重复</em>前一个动作</td></tr></tbody></table><h1 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h1><table><thead><tr><th style="text-align:center">按键</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>i</code></td><td style="text-align:left">进入<em>插入模式</em>。从光标所在处插入</td></tr><tr><td style="text-align:center"><code>I</code></td><td style="text-align:left">进入<em>插入模式</em>。在当前行的第一个非空格符开始插入</td></tr><tr><td style="text-align:center"><code>a</code></td><td style="text-align:left">进入<em>插入模式</em>。从光标所在的下一个字符处开始插入</td></tr><tr><td style="text-align:center"><code>A</code></td><td style="text-align:left">进入<em>插入模式</em>。从光标所在行的最后一个字符处开始插入</td></tr><tr><td style="text-align:center"><code>o</code></td><td style="text-align:left">进入<em>插入模式</em>。在光标所在的下一行插入新的一行</td></tr><tr><td style="text-align:center"><code>O</code></td><td style="text-align:left">进入<em>插入模式</em>。在光标所在的上一行插入新的一行</td></tr><tr><td style="text-align:center"><code>r</code></td><td style="text-align:left">进入<em>替换模式</em>。取代光标所在的那一个字符一次</td></tr><tr><td style="text-align:center"><code>R</code></td><td style="text-align:left">进入<em>替换模式</em>。一直取代光标所在的文件，直到按下<code>ESC</code>为止</td></tr></tbody></table><h1 id="指令模式"><a href="#指令模式" class="headerlink" title="指令模式"></a>指令模式</h1><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>:w</code></td><td style="text-align:left">将数据写入硬盘</td></tr><tr><td style="text-align:center"><code>:w!</code></td><td style="text-align:left">强制写入数据（需要权限）</td></tr><tr><td style="text-align:center"><code>:q</code></td><td style="text-align:left">离开<strong>VI</strong></td></tr><tr><td style="text-align:center"><code>:q!</code></td><td style="text-align:left">强制离开<strong>VI</strong>，不保存所做变更</td></tr><tr><td style="text-align:center"><code>:wq</code></td><td style="text-align:left">存储并离开<strong>VI</strong></td></tr><tr><td style="text-align:center"><code>ZZ</code></td><td style="text-align:left">若档案没有变更，则不存储离开；若变更，则存储离开</td></tr><tr><td style="text-align:center"><code>:w &lt;filename&gt;</code></td><td style="text-align:left">将数据另存为另一个档案</td></tr><tr><td style="text-align:center"><code>:r &lt;filename&gt;</code></td><td style="text-align:left">在编辑的数据中，读入另一个档案的数据，即将<code>&lt;filename&gt;</code>的内容追加到光标所在行的后面面</td></tr><tr><td style="text-align:center"><code>:&lt;start&gt;,&lt;end&gt; w &lt;filename&gt;</code></td><td style="text-align:left">将第<code>&lt;start&gt;</code>行至第<code>&lt;end&gt;</code>行的内容存储为文件<code>&lt;filename&gt;</code></td></tr><tr><td style="text-align:center"><code>:! &lt;command&gt;</code></td><td style="text-align:left">暂时离开<strong>VI</strong>到指令列模式下执行<code>&lt;command&gt;</code>，如<code>:! ls</code></td></tr></tbody></table><h1 id="区块选择"><a href="#区块选择" class="headerlink" title="区块选择"></a>区块选择</h1><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>v</code></td><td style="text-align:left">字符选择，会将光标经过的地方反白选择。</td></tr><tr><td style="text-align:center"><code>V</code></td><td style="text-align:left">行选择，会将光标经过的行反白选择</td></tr><tr><td style="text-align:center"><code>Ctrl + v</code></td><td style="text-align:left">区块选择，可以用长方形的方式选择资料</td></tr></tbody></table><h1 id="多文档编辑"><a href="#多文档编辑" class="headerlink" title="多文档编辑"></a>多文档编辑</h1><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>:n</code></td><td style="text-align:left">编辑下一个档案</td></tr><tr><td style="text-align:center"><code>:N</code></td><td style="text-align:left">编辑上一个档案</td></tr><tr><td style="text-align:center"><code>:files</code></td><td style="text-align:left">列出目前这个<strong>VIM</strong>的开启的所有档案</td></tr></tbody></table><h1 id="多窗口功能"><a href="#多窗口功能" class="headerlink" title="多窗口功能"></a>多窗口功能</h1><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>:sp</code></td><td style="text-align:left">增加一个窗口，并在该窗口下打开原先的文档</td></tr><tr><td style="text-align:center"><code>:sp &lt;filename&gt;</code></td><td style="text-align:left">增加一个窗口，并在该窗口下打开文档<code>&lt;filename&gt;</code></td></tr><tr><td style="text-align:center"><code>Ctrl + w + j</code></td><td style="text-align:left">光标移动到下方的窗口</td></tr><tr><td style="text-align:center"><code>Ctrl + w + k</code></td><td style="text-align:left">光标移动到上方的窗口</td></tr></tbody></table><h1 id="VIM环境设定与记录"><a href="#VIM环境设定与记录" class="headerlink" title="VIM环境设定与记录"></a>VIM环境设定与记录</h1><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>:set nu</code></td><td style="text-align:left">显示行号</td></tr><tr><td style="text-align:center"><code>:set hlsearch</code></td><td style="text-align:left">高亮显示搜素结果</td></tr><tr><td style="text-align:center"><code>:set autoindent</code></td><td style="text-align:left">自动缩进</td></tr><tr><td style="text-align:center"><code>:set backup</code></td><td style="text-align:left">自动备份</td></tr><tr><td style="text-align:center"><code>:set ruler</code></td><td style="text-align:left">显示状态栏</td></tr><tr><td style="text-align:center"><code>:set showmode</code></td><td style="text-align:left">显示模式</td></tr></tbody></table><p>上述指令，可以通过在指令前加<code>no</code>，就可以起到关闭的功能了。如不显示行号，则指令为<code>:set nonu</code>。</p><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>:set backspace={0,1,2}</code></td><td style="text-align:left">决定在<em>编辑模式</em>下，退格键可以删除的字符。为2时，可以删除任意值；为0或1时，仅可以删除刚刚输入的字符，而无法删除原本就已经存在的文字</td></tr><tr><td style="text-align:center"><code>:set all</code></td><td style="text-align:left">显示目前所有的环境参数设定值</td></tr><tr><td style="text-align:center"><code>:set</code></td><td style="text-align:left">显示与系统默认值不同的设定参数</td></tr><tr><td style="text-align:center"><code>:syntax on</code></td><td style="text-align:left">依据语法显示不同颜色</td></tr><tr><td style="text-align:center"><code>:syntax off</code></td><td style="text-align:left">不显示不同的颜色</td></tr><tr><td style="text-align:center"><code>:set bg=dark</code></td><td style="text-align:left">改变显示的颜色色调为深色</td></tr><tr><td style="text-align:center"><code>:set bg=light</code></td><td style="text-align:left">改变显示的颜色色调为浅色</td></tr></tbody></table>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> shortcut </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0083] - Remove Duplicates from Sorted List]]></title>
      <url>http://www.wrran.com/blog/2017/07/24/acm/leetcode/0083-remove-duplicates-from-sorted-list/</url>
      <content type="html"><![CDATA[<blockquote><p>删除排过序的链表中多次出现的结点，保证链表中的结点仅仅出现过一次。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/#/description" target="_blank" rel="noopener">Remove Duplicates from Sorted List</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>鉴于链表已经排过序了，我们在遍历链表的过程中，若该节点没有出现过则将之插入到新链表中，否则删除它。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* pre = head;</span><br><span class="line">        ListNode* cur = pre-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre-&gt;val == cur-&gt;val) &#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> pre-&gt;next; <span class="comment">// remember to delete `new` pointer</span></span><br><span class="line">                pre-&gt;next = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">                pre = pre-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0141] - Linked List Cycle]]></title>
      <url>http://www.wrran.com/blog/2017/07/22/acm/leetcode/0141-linked-list-cycle/</url>
      <content type="html"><![CDATA[<blockquote><p>判断一个链表是否有环？<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/linked-list-cycle/#/description" target="_blank" rel="noopener">Linked List Cycle</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>该题解法比较巧妙，通过两个快慢指针判断链表是否有环：<br>快指针每次往前走两步，慢指针每次往前走一步；当快指针与慢指针相等时，则说明有环；当快慢指针遇到<code>NULL</code>时，说明没有环。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* quick = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="literal">NULL</span> &amp;&amp; quick != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (slow == quick)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (quick == <span class="literal">NULL</span> || quick-&gt;next == <span class="literal">NULL</span> || quick-&gt;next-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            quick = quick-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (slow == <span class="literal">NULL</span> || slow-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0082] - Remove Duplicates from Sorted List II]]></title>
      <url>http://www.wrran.com/blog/2017/07/22/acm/leetcode/0082-remove-duplicates-from-sorted-list-ii/</url>
      <content type="html"><![CDATA[<blockquote><p>将排过序的链表中重复出现过的节点全都删除掉。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/#/description" target="_blank" rel="noopener">Remove Duplicates from Sorted List II</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>鉴于链表排过序，所以所有重复的节点必然集中在一起出现。基于该特性设计相关算法。<br>另外一种解法就是使用递归的方式解决。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">## 递归解法</span><br><span class="line">```cpp</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> val = head-&gt;val;</span><br><span class="line">        ListNode *ptr = head-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (ptr-&gt;val != val) &#123;</span><br><span class="line">            head-&gt;next = deleteDuplicates(ptr);</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (ptr != <span class="literal">NULL</span> &amp;&amp; ptr-&gt;val == val)</span><br><span class="line">            ptr = ptr-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> deleteDuplicates(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0092] - Reverse Linked List II]]></title>
      <url>http://www.wrran.com/blog/2017/07/22/acm/leetcode/0092-reverse-linked-list-ii/</url>
      <content type="html"><![CDATA[<blockquote><p>将指定范围内的链表翻转。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/reverse-linked-list-ii/#/description" target="_blank" rel="noopener">Reverse Linked List II</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>注意，题目中标注了条件：$1\le m \le n \le length_of_list$<br>我们现在来关注翻转某局部链表时，所需要进行的操作：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[+]-&gt;[+]-&gt;[o]-&gt;[o]-&gt;[o]-&gt;[o]-&gt;[o]-&gt;[x]-&gt;[+]-&gt;[+]-&gt;^</span><br><span class="line">      ^                        ^    ^</span><br><span class="line">      |                        |    |</span><br><span class="line">     tail                 revTail revHead</span><br></pre></td></tr></table></figure><p></p><p>上图中<code>[+]</code>表示的结点为正常结点，而<code>[o]</code>为已经被翻转过的链表结点，<code>[x]</code>为正在被翻转的结点。<br>易知此时需要进行的操作如下：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">revHead = revTail-&gt;next;</span><br><span class="line">revTail-&gt;next = revHead-&gt;next;</span><br><span class="line">revHead-&gt;next = tail-&gt;next;</span><br><span class="line">tail-&gt;next = revHead;</span><br></pre></td></tr></table></figure><p></p><p>之后，上述链表将变为如下图所示形式：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[+]-&gt;[+]-&gt;[x]-&gt;[o]-&gt;[o]-&gt;[o]-&gt;[o]-&gt;[o]-&gt;[+]-&gt;[+]-&gt;^</span><br><span class="line">      ^    ^                        ^</span><br><span class="line">      |    |                        |</span><br><span class="line">     tail revHead                revTail</span><br></pre></td></tr></table></figure><p></p><p>如此反复多次，准确的说是$n-m$次后，就可以完成翻转了。<br>同时还需要注意的是$m==1$的情形。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        newHead-&gt;next = head;</span><br><span class="line">        ListNode* tail = newHead;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m<span class="number">-1</span>; ++i)</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        ListNode* revTail = tail-&gt;next;</span><br><span class="line">        ListNode* revHead = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n-m; ++i) &#123;</span><br><span class="line">            revHead = revTail-&gt;next;</span><br><span class="line">            revTail-&gt;next = revHead-&gt;next;</span><br><span class="line">            revHead-&gt;next = tail-&gt;next;</span><br><span class="line">            tail-&gt;next = revHead;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// delete the pointer</span></span><br><span class="line">        ListNode* toDelete = newHead;</span><br><span class="line">        <span class="keyword">delete</span> toDelete;</span><br><span class="line">        newHead = newHead-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><p><a href="http://www.wrran.com/blog/2017/07/21/acm/leetcode/0206-reverse-linked-list/">LC[0206] - Reverse Linked List</a></p>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode - 0142 - Linked List Cycle II]]></title>
      <url>http://www.wrran.com/blog/2017/07/22/acm/leetcode/0142-linked-list-cycle-ii/</url>
      <content type="html"><![CDATA[<blockquote><p>判断一个链表是否有环，若有则返回该环开始时的指针<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/linked-list-cycle-ii/#/description" target="_blank" rel="noopener">LeetCode - 0141 - Linked List Cycle II</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>这题比<a href="http://wrran.com/blog/2017/07/22/acm-leetcode-0141-linked-list-cycle/" target="_blank" rel="noopener">LeetCode - 0141 - Linked List Cycle</a>更加巧妙，上题需要的只是定性分析，而该题需要定量分析。<br>用<code>slow</code>和<code>quick</code>分别指代慢指针与快指针，两者都从<code>head</code>开始往前走，<code>slow</code>每次走一步，而<code>quick</code>每次走两步。<br>假设经过$t$次操作后，两者相遇，我们来仔细看下两者的路程差：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o---------A--------|</span><br><span class="line">          |        |</span><br><span class="line">          p        |</span><br><span class="line">          |--------|</span><br></pre></td></tr></table></figure><p></p><p>如上图所示，将链表分为三段，<code>head</code>的对应结点$o$到环的开始结点$A$长度为$x$，环的长度为$y$，相遇时<code>slow</code>在环中的移动距离为<code>z</code>。<br>则有以下方程：<br>$$t = x+z$$<br>$$2t = x+y+z $$<br>将第一个式子代入到第二个中，得到：$$x=y-z$$。<br>由此，可以得出下述算法：</p><ol><li>设置两个指针<code>slow</code>与<code>quick</code></li><li><code>slow</code>与<code>quick</code>分别以一次一步和一次两步的节奏往前迈</li><li>在迈步过程中，<code>quick</code>若为<code>NULL</code>，则说明无环</li><li>当<code>slow</code>与<code>quick</code>相等时，说明存在环，此时将<code>quick</code>设置为<code>head</code>并以每次一步的步伐往前迈，同时<code>slow</code>仍旧按照一次一步的步伐往前迈，当两者相遇时，就得出了环的开始结点</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否存在环</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* slow = head-&gt;next;</span><br><span class="line">        ListNode* quick = head-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (slow != quick) &#123;</span><br><span class="line">            <span class="keyword">if</span> (slow == <span class="literal">NULL</span> || slow-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (quick == <span class="literal">NULL</span> || quick-&gt;next == <span class="literal">NULL</span> || quick-&gt;next-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            quick = quick-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 存在环时，则找到环开始的结点</span></span><br><span class="line">        quick = head;</span><br><span class="line">        <span class="keyword">while</span> (slow != quick) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            quick = quick-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><p><a href="http://wrran.com/blog/2017/07/22/acm-leetcode-0141-linked-list-cycle/" target="_blank" rel="noopener">LeetCode - 0141 - Linked List Cycle</a></p>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0206] - Reverse Linked List]]></title>
      <url>http://www.wrran.com/blog/2017/07/21/acm/leetcode/0206-reverse-linked-list/</url>
      <content type="html"><![CDATA[<blockquote><p>将链表翻转<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/reverse-linked-list/#/description" target="_blank" rel="noopener">Reverse Linked List</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>简单的数据结构题。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">nextNode</span><span class="params">(ListNode*&amp; head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* current = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* pre = nextNode(head);</span><br><span class="line">        ListNode* current = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            current = nextNode(head);</span><br><span class="line">            current-&gt;next = pre;</span><br><span class="line">            pre = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0445] - Add Two Numbers II]]></title>
      <url>http://www.wrran.com/blog/2017/07/21/acm/leetcode/0445-add-two-numbers-ii/</url>
      <content type="html"><![CDATA[<blockquote><p>每条链表表示一个数字，将这两个数字相加，并以链表形式输出<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/add-two-numbers-ii/#/description" target="_blank" rel="noopener">Add Two Numbers II</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>简单的数据结构题，解题思路如下：</p><ol><li>迭代链表，将之分为两部分，一条小于$x$，一条不小于$x$</li><li>合并两条链表</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">nextNode</span><span class="params">(ListNode*&amp; head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* current = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* pre = nextNode(head);</span><br><span class="line">        ListNode* current = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            current = nextNode(head);</span><br><span class="line">            current-&gt;next = pre;</span><br><span class="line">            pre = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoList</span><span class="params">(ListNode* lst1, ListNode* lst2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lst1 == <span class="literal">NULL</span>) <span class="keyword">return</span> lst2;</span><br><span class="line">        <span class="keyword">if</span> (lst2 == <span class="literal">NULL</span>) <span class="keyword">return</span> lst1;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* pre = head;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* ptr1 = lst1, *ptr2 = lst2;</span><br><span class="line">        </span><br><span class="line">        head-&gt;val = ptr1-&gt;val + ptr2-&gt;val;</span><br><span class="line">        carry = head-&gt;val / <span class="number">10</span>;</span><br><span class="line">        head-&gt;val %= <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        pre-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        cur = pre-&gt;next;</span><br><span class="line">        </span><br><span class="line">        ptr1 = ptr1-&gt;next; ptr2 = ptr2-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (ptr1 != <span class="literal">NULL</span> &amp;&amp; ptr2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            cur-&gt;val = carry + ptr1-&gt;val + ptr2-&gt;val;</span><br><span class="line">            carry = cur-&gt;val / <span class="number">10</span>;</span><br><span class="line">            cur-&gt;val %= <span class="number">10</span>;</span><br><span class="line">            cur-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            pre = cur;</span><br><span class="line">            </span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">            ptr1 = ptr1-&gt;next; ptr2 = ptr2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (ptr1 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            cur-&gt;val = carry + ptr1-&gt;val;</span><br><span class="line">            carry = cur-&gt;val / <span class="number">10</span>;</span><br><span class="line">            cur-&gt;val %= <span class="number">10</span>;</span><br><span class="line">            </span><br><span class="line">            cur-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">            ptr1 = ptr1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (ptr2 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            cur-&gt;val = carry + ptr2-&gt;val;</span><br><span class="line">            carry = cur-&gt;val / <span class="number">10</span>;</span><br><span class="line">            cur-&gt;val %= <span class="number">10</span>;</span><br><span class="line">            </span><br><span class="line">            cur-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">            ptr2 = ptr2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        cur-&gt;val = carry;</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> pre-&gt;next;</span><br><span class="line">            pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        l1 = reverseList(l1);</span><br><span class="line">        l2 = reverseList(l2);</span><br><span class="line">        </span><br><span class="line">        ListNode* ret = addTwoList(l1, l2);</span><br><span class="line">        ret = reverseList(ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><p><a href="http://wrran.com/blog/2017/07/17/acm-leetcode-0002-add-two-numbers/" target="_blank" rel="noopener">LeetCode - 0002 - Add Two Numbers</a><br><a href="http://wrran.com/blog/2017/07/21/acm-leetcode-0206-reverse-linked-list/" target="_blank" rel="noopener">LeetCode - 0206 - Reverse Linked List</a></p>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0086] - Partition List]]></title>
      <url>http://www.wrran.com/blog/2017/07/21/acm/leetcode/0086-partition-list/</url>
      <content type="html"><![CDATA[<blockquote><p>将链表中小于某个值的结点移到链表最前方。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/partition-list/#/description" target="_blank" rel="noopener">Partition List</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>简单的数据结构题，解题思路如下：</p><ol><li>迭代链表，将之分为两部分，一条小于$x$，一条不小于$x$</li><li>合并两条链表</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">nextNode</span><span class="params">(ListNode*&amp; head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* current = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushBack</span><span class="params">(ListNode*&amp; head, ListNode*&amp; tail, ListNode* node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || tail == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            head = tail = node;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = node;</span><br><span class="line">        tail = node;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">partition</span><span class="params">(ListNode* head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode* less = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* lessTail = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* notLess = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* notLessTail = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* current = <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            current = nextNode(head);</span><br><span class="line">            <span class="keyword">if</span> (current-&gt;val &lt; x) &#123;</span><br><span class="line">                pushBack(less, lessTail, current);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                pushBack(notLess, notLessTail, current);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (less == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> notLess;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (lessTail != <span class="literal">NULL</span>)</span><br><span class="line">            lessTail-&gt;next = notLess;</span><br><span class="line">        <span class="keyword">return</span> less;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0147] - Insertion Sort List]]></title>
      <url>http://www.wrran.com/blog/2017/07/21/acm/leetcode/0147-insertion-sort-list/</url>
      <content type="html"><![CDATA[<blockquote><p>用插入排序的方式对一个单链表进行排序<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/insertion-sort-list/#/description" target="_blank" rel="noopener">Insertion Sort List</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这是一道数据结构题，按照题目要求进行操作即可。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n^2)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>/**</p><ul><li>Definition for singly-linked list.</li><li>struct ListNode {</li><li>int val;</li><li>ListNode *next;</li><li>ListNode(int x) : val(x), next(NULL) {}</li><li><p>};<br><em>/<br>class Solution {<br>private:<br>ListNode</em> moveNextNode(ListNode*&amp; head) {</p><pre><code>if (head == NULL)
    return NULL;
ListNode* current = head;
head = head-&gt;next;
current-&gt;next = NULL;
return current;
</code></pre><p>}</p><p>ListNode<em> insertSortedList(ListNode</em> node, ListNode* sorted) {</p><pre><code>if (sorted == NULL)
    return node;

if (node == NULL)
    return sorted;

if (sorted-&gt;val &gt;= node-&gt;val) {
    node-&gt;next = sorted;
    return node;
}

ListNode* pre = sorted;
while (pre-&gt;next != NULL &amp;&amp; pre-&gt;next-&gt;val &lt; node-&gt;val)
    pre = pre-&gt;next;

node-&gt;next = pre-&gt;next;
pre-&gt;next = node;
return sorted;
</code></pre><p>}</p></li></ul><p>public:<br>ListNode<em> insertionSortList(ListNode</em> head) {<br>if (head == NULL || head-&gt;next == NULL)<br>return head;</p><pre><code>    ListNode* node = NULL;
    ListNode* sorted = NULL;
    while (head != NULL) {
        node = moveNextNode(head);
        sorted = insertSortedList(node, sorted);
    }
    return sorted;
}
</code></pre><p>};</p>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0441] - Arranging Coins]]></title>
      <url>http://www.wrran.com/blog/2017/07/21/acm/leetcode/0441-arranging-coins/</url>
      <content type="html"><![CDATA[<blockquote><p>将$n$枚硬币摆成阶梯状，求可以摆几阶？<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/arranging-coins/#/description" target="_blank" rel="noopener">Arranging Coins</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>$1+2+3+\cdots+x=n$<br>$x=-1/2 + \sqrt{2\times n+1/4}$</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(1)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">floor</span>(<span class="number">-0.5</span> + <span class="built_in">sqrt</span>(<span class="number">2.0</span> * n + <span class="number">0.75</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0475] - Heaters]]></title>
      <url>http://www.wrran.com/blog/2017/07/21/acm/leetcode/0475-heaters/</url>
      <content type="html"><![CDATA[<blockquote><p>在一条直线（仅整数可以放置）如何放置<em>heaters</em>让所有的<em>houses</em>都被加热到<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/heaters/#/description" target="_blank" rel="noopener">Heaters</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>本题的就是让我们找两个整数数列中两两绝对值差距最大值。<br>处理做法如下：</p><ol><li>将两个数列排序</li><li>迭代houses元素，并进行下述操作<br>a. 在heaters中查找该元素的上下限<br>b. 计算该元素与上下限之间的距离，取小者<br>c. 将步骤b中计算的距离与当前已知的最小半径比较，取更大者</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n\mathxf{log}n + m\mathxf{log}m + n\mathxf{log}m)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findRadius</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; houses, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heaters)</span> </span>&#123;</span><br><span class="line">        sort(houses.begin(), houses.end());</span><br><span class="line">        sort(heaters.begin(), heaters.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ret = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> current = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator low, up;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator beg = heaters.begin();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator end = heaters.end();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> item : houses) &#123;</span><br><span class="line">            low = lower_bound(beg, end, item);</span><br><span class="line">            up = lower_bound(beg, end, item);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (low != beg)</span><br><span class="line">                low = low - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (up != end)</span><br><span class="line">                current = min(<span class="built_in">abs</span>(*low - item), <span class="built_in">abs</span>(*up - item));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                current = <span class="built_in">abs</span>(*low - item);</span><br><span class="line">            ret = max(current, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.cplusplus.com/reference/algorithm/lower_bound/" target="_blank" rel="noopener">lower_bound - C++ Reference</a><br><a href="http://www.cplusplus.com/reference/algorithm/upper_bound/" target="_blank" rel="noopener">upper_bound - C++ Reference</a></p>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0350] - Intersection of Two Arrays - II]]></title>
      <url>http://www.wrran.com/blog/2017/07/18/acm/leetcode/0350-intersection-of-two-arrays-ii/</url>
      <content type="html"><![CDATA[<blockquote><p>求两个数列中相同的数字数列（无序且出现次数为在两个数列中共同出现的数字）<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/#/discuss" target="_blank" rel="noopener">Intersection of Two Arrays - II</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>思路比较明晰，通过二分搜索确定一个列表中的元素是否在另一个列表，若有则存储下来。具体实现如下：</p><ol><li>将nums1转换为<code>unordered_map</code>，<code>key</code>为nums1的元素，<code>value</code>为nums1该元素的出现次数，方便后面查询</li><li>迭代nums2元素，查找该元素是否在nums1中出现过，且出现次数不小于0，若满足条件则存储下来，并减少该元素对应的<code>value</code></li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n+m)$<br>空间复杂度：$O(n+m)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) &#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dict;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> key : nums1) ++dict[key];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> key : nums2)</span><br><span class="line">            <span class="keyword">if</span> (--dict[key] &gt;= <span class="number">0</span>) ret.push_back(key);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0349] - Intersection of Two Arrays]]></title>
      <url>http://www.wrran.com/blog/2017/07/18/acm/leetcode/0349-intersection-of-two-arrays/</url>
      <content type="html"><![CDATA[<blockquote><p>求两个数列中相同的数字数列（无序不重复）。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/intersection-of-two-arrays/#/description" target="_blank" rel="noopener">Intersection of Two Arrays</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>思路比较明晰，通过二分搜索确定一个列表中的元素是否在另一个列表，若有则存储下来。具体实现如下：</p><ol><li>将nums1转换为红黑树结构，方便后面的快速查找</li><li>迭代nums2元素，查找每个元素是否在nums1中且仍未出现在之前的结果中，若满足条件则存储下来，不在则跳过</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n log n) + O(m log n) = O((n+m) log n)$（未确认）<br>空间复杂度：$O(n+m)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) &#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1 = <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> item : nums1) s1.insert(item);</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; sRes = <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> item : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1.find(item) != s1.end() &amp;&amp; sRes.find(item) == sRes.end()) &#123;</span><br><span class="line">                sRes.insert(item);</span><br><span class="line">                res.push_back(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0167] - Two Sum II Input Array Is Sorted]]></title>
      <url>http://www.wrran.com/blog/2017/07/18/acm/leetcode/0167-two-sum-ii-input-array-is-sorted/</url>
      <content type="html"><![CDATA[<blockquote><p>求升序排列的数列中哪两个数字相加和为目标值<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/#/description" target="_blank" rel="noopener">Two Sum II - Input array is sorted</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>鉴于输入的数列已经按照升序的次序排列了。我们从数列的两端开始加和并与目标进行比较。<br>若相等，则返回此时的索引值；<br>若小于，则将左侧数字往右挪动一下；<br>若大于，则将右侧数字向左挪动一下。<br><em>注意</em>：返回的索引并非zero-based.</p><h1 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h1><p>问：为什么当两个指针所指数字之和小于时，选择将左侧数字往右挪动，而不是选择将右侧数字向右挪动呢？仅仅将左侧数字向右挪动，是否能保证该策略一定有解呢？<br>答：回到问题最初的状态，我们将两个指针所指数字记为$$a_i$$和$$a_j$$，目标值记为$$y$$。当$$a_i + a_j \le y$$时，存在两种做法：将$$i$$加一或者将$$j$$加一，但是由于$$j$$已经是最大的下标了，只有可能将$$i$$加一。同时这样的操作之后，可以保证移动之后的情形下依旧有解，即问题划归为相同的子问题，可以通过相同的方式求解。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = numbers.size();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = sz - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = numbers[l] + numbers[r] - target;</span><br><span class="line">        <span class="keyword">while</span> (res != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                --r;</span><br><span class="line">            &#125;</span><br><span class="line">            res = numbers[l] + numbers[r] - target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;l+<span class="number">1</span>, r+<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0374] - Guess Number Higher or Lower]]></title>
      <url>http://www.wrran.com/blog/2017/07/18/acm/leetcode/0374-guess-number-higher-or-lower/</url>
      <content type="html"><![CDATA[<blockquote><p>在[1, n]中二分搜索某个数字<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/guess-number-higher-or-lower/#/description" target="_blank" rel="noopener">Guess Number Higher or Lower</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>二分法最简单的形式，根据<code>guess(num)</code>的返回值决定是_左缩_还是_右缩_。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(log n)$<br>空间复杂度：-</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>注意：<br>二分搜索中的中间数字，应当通过<code>res = low + (high - low) / 2;</code>而非<code>res = (low + high) / 2</code>；因为后者可能导致中间结果溢出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Forward declaration of guess API.</span></span><br><span class="line"><span class="comment">// @param num, your guess</span></span><br><span class="line"><span class="comment">// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">guess</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">guessNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> high = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> num = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> ret = guess(num);</span><br><span class="line">        <span class="keyword">while</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                high = num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                low = num;</span><br><span class="line">            &#125;</span><br><span class="line">            num = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            ret = guess(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0007] - Reverse Integer]]></title>
      <url>http://www.wrran.com/blog/2017/07/18/acm/leetcode/0007-reverse-integer/</url>
      <content type="html"><![CDATA[<blockquote><p>将一个32-bit的整数按照反转，并返回一个新的数字；如果反转过程中发生溢出，则返回0<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/reverse-integer/#/description" target="_blank" rel="noopener">Reverse Integer</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><ol><li>取出符号位</li><li>反转数字到字符串中</li><li>将字符串转换为64-bit位整数</li><li>判断是否溢出，溢出则返回0，否则返回原数字</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(n)$<br>$n$为输入的数字位数</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>; <span class="comment">// 去除符号位</span></span><br><span class="line">        <span class="comment">// 反转并存储到字符串中</span></span><br><span class="line">        <span class="keyword">int</span> y = <span class="built_in">abs</span>(x);</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (y) &#123;</span><br><span class="line">            s.push_back(<span class="string">'0'</span> + y%<span class="number">10</span>);</span><br><span class="line">            y /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tmp = flag*atoll(s.c_str());</span><br><span class="line">        <span class="comment">// 判断是否溢出</span></span><br><span class="line">        <span class="keyword">if</span>(tmp &gt; INT_MAX || tmp &lt; INT_MIN) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (<span class="keyword">int</span>)tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0006] - ZigZag Conversion]]></title>
      <url>http://www.wrran.com/blog/2017/07/17/acm/leetcode/0006-zigzag-conversion/</url>
      <content type="html"><![CDATA[<blockquote><p>将字符串按照ZigZag的顺序重新排列，求排列之后的新字符串<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/zigzag-conversion/#/description" target="_blank" rel="noopener">ZigZag Conversion</a></p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><h2 id="数学规律"><a href="#数学规律" class="headerlink" title="数学规律"></a>数学规律</h2><p>寻找原先的字符在经过ZigZag变换后的位置，直接计算出最后的字符串：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0   4   8     12</span><br><span class="line">1 3 5 7 9  11 13</span><br><span class="line">2   6   10    14</span><br></pre></td></tr></table></figure><p></p><p>上例中的数字代表的是对应的字符索引，设$n$为输入的参数<code>numRows</code>的值，则该例中为3，容易知道<br>第一行的字符索引序列为$0, 4, 8, 12, \cdots, 4\times i$<br>先考虑最后一行，容易发现该行的索引序列与第一行的对应差值为$n-1$<br>中间几行与前述两者差距较大，我们再看一个简单的实例：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0     6       12       18       24</span><br><span class="line">1   5 7    11 13    17 19    23 25</span><br><span class="line">2 4   8 10    14 16    20 22    26</span><br><span class="line">3     9       15       21       27</span><br></pre></td></tr></table></figure><p></p><p>看似毫无规律，但当我们将其分为两列分别观察时：$1, 7, 13, \cdots, 1+6\times i$，$5, 11, 17, \cdots, -1+6\times i$<br>或者<br>$2, 8, 10, \cdots, 2+6\times i$, $4, 10, 16, \cdots, -2+6\times i$<br>上述两条，也容易通过判断是否为第奇数个字符的规则合并为一条规则。<br>具体细节参见代码部分。</p><h2 id="手动模拟"><a href="#手动模拟" class="headerlink" title="手动模拟"></a>手动模拟</h2><p>按照题目的要求，分配多个字符数组，完成操作后，拼接在一起。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(n)$<br>注：上述的$n$为字符串的长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="数学规律-1"><a href="#数学规律-1" class="headerlink" title="数学规律"></a>数学规律</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> delta = numRows - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sz = s.size();</span><br><span class="line">        <span class="built_in">string</span> rs;</span><br><span class="line">        <span class="comment">// row 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; i+=<span class="number">2</span>*delta)</span><br><span class="line">            rs.push_back(s[i]);</span><br><span class="line">        <span class="comment">// row [1, numRows-1)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row=<span class="number">1</span>; row&lt;numRows<span class="number">-1</span>; ++row) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>; <span class="comment">// 该行第几个字符</span></span><br><span class="line">            <span class="keyword">int</span> idx = row; <span class="comment">// 对应原先字符串的第几个</span></span><br><span class="line">            <span class="keyword">while</span> (idx&lt;sz) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// row + 2*delta * (cur/2)</span></span><br><span class="line">                    idx = row + delta * cur;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// -row + 2*delta * ((cur+1)/2)</span></span><br><span class="line">                    idx = -row + delta * (cur+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (idx&lt;sz)</span><br><span class="line">                    rs.push_back(s[idx]);</span><br><span class="line">                ++cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// row numRows-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=numRows<span class="number">-1</span>; i&lt;sz; i+=<span class="number">2</span>*delta)</span><br><span class="line">            rs.push_back(s[i]);</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手动模拟-1"><a href="#手动模拟-1" class="headerlink" title="手动模拟"></a>手动模拟</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v_str = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numRows;++i)</span><br><span class="line">            v_str.push_back(<span class="built_in">string</span>());</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>; <span class="comment">// 当前字符的索引</span></span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>; <span class="comment">// 将被填充的字符串索引</span></span><br><span class="line">        <span class="keyword">int</span> dir = <span class="number">1</span>; <span class="comment">// 方向：1 =&gt; 往下 -1 =&gt; 往上</span></span><br><span class="line">        <span class="keyword">int</span> sz = s.size();</span><br><span class="line">        <span class="keyword">while</span> (idx&lt;sz) &#123;</span><br><span class="line">            v_str[row].push_back(s[idx]);</span><br><span class="line">            row += dir;</span><br><span class="line">            <span class="keyword">if</span> (row == <span class="number">0</span>)</span><br><span class="line">                dir = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (row == numRows<span class="number">-1</span>)</span><br><span class="line">                dir = <span class="number">-1</span>;</span><br><span class="line">            ++idx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> rs;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numRows; ++i)</span><br><span class="line">            rs += v_str[i];</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0002] - Add Two Numbers]]></title>
      <url>http://www.wrran.com/blog/2017/07/17/acm/leetcode/0002-add-two-numbers/</url>
      <content type="html"><![CDATA[<blockquote><p>完成两个链表的“加法”并返回存储“和”的链表<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://leetcode.com/problems/add-two-numbers/#/description" target="_blank" rel="noopener">Add Two Numbers</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol><li>迭代两个链表，逐位相加</li><li>相加过程中考虑进位</li><li>注意两个链表不想等长度下，对长链表的处理</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(n)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l1 &amp;&amp; !l2) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(!l1) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(!l2) <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        ListNode *head = <span class="keyword">new</span> ListNode(<span class="number">0</span>), *pre = head, *cur = head, *p1 = l1, *p2 = l2;</span><br><span class="line">        head-&gt;val = p1-&gt;val + p2-&gt;val;</span><br><span class="line">        carry = head-&gt;val / <span class="number">10</span>;</span><br><span class="line">        head-&gt;val %= <span class="number">10</span>;</span><br><span class="line">        pre-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        cur = pre-&gt;next;</span><br><span class="line">        p1 = p1-&gt;next;</span><br><span class="line">        p2 = p2-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(p1 &amp;&amp; p2) &#123;</span><br><span class="line">            cur-&gt;val = carry + p1-&gt;val + p2-&gt;val;</span><br><span class="line">            carry = cur-&gt;val / <span class="number">10</span>;</span><br><span class="line">            cur-&gt;val %= <span class="number">10</span>;</span><br><span class="line">            cur-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p1) &#123;</span><br><span class="line">            cur-&gt;val = carry + p1-&gt;val;</span><br><span class="line">            carry = cur-&gt;val / <span class="number">10</span>;</span><br><span class="line">            cur-&gt;val %= <span class="number">10</span>;</span><br><span class="line">            cur-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">            p1 = p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p2) &#123;</span><br><span class="line">            cur-&gt;val = carry + p2-&gt;val;</span><br><span class="line">            carry = cur-&gt;val / <span class="number">10</span>;</span><br><span class="line">            cur-&gt;val %= <span class="number">10</span>;</span><br><span class="line">            cur-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = pre-&gt;next;</span><br><span class="line">            p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;val = carry;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> pre-&gt;next;</span><br><span class="line">            pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[转载 - 9个超好用的Word使用技巧]]></title>
      <url>http://www.wrran.com/blog/2017/07/17/learn/word-1/</url>
      <content type="html"><![CDATA[<blockquote><p>word :)</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-word-1/%E5%AE%9A%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%BF%AB%E9%80%9F%E7%BF%BB%E9%A1%B5.gif" alt="定位系统快速翻页"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-word-1/%E5%BF%AB%E9%80%9F%E8%B0%83%E6%95%B4%E5%AD%97%E5%8F%B7.gif" alt="快速调整字号"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-word-1/%E6%8B%BC%E9%9F%B3%E6%8C%87%E5%8D%97.gif" alt="拼音指南"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-word-1/%E4%B8%8A%E4%B8%8B%E6%8B%86%E5%88%86.gif" alt="上下拆分"><br><img src alt="调整段落对齐"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-word-1/%E8%B0%83%E6%95%B4%E8%A1%8C%E9%97%B4%E8%B7%9D.gif" alt="调整行间距"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-word-1/%E6%96%87%E5%AD%97%E8%BD%AC%E8%A1%A8%E6%A0%BC.gif" alt="文字转表格"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-word-1/%E8%8B%B1%E6%96%87%E6%94%B9%E5%A4%A7%E5%B0%8F%E5%86%99.gif" alt="英文改大小写"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-word-1/%E5%8F%AA%E6%89%93%E5%8D%B0%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97.gif" alt="只打印选中的文字"></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> office </category>
            
        </categories>
        
        
        <tags>
            
            <tag> word </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python常用工具库（五）]]></title>
      <url>http://www.wrran.com/blog/2017/04/03/howto/python/common-libraries-5/</url>
      <content type="html"><![CDATA[<blockquote><p>What can I do for ya?</p><ul><li>pickle</li><li>inspect</li><li>collections</li><li>numbers</li><li>warnings</li><li>operator</li><li>types</li></ul></blockquote><a id="more"></a><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.python.org/3.5/library/pickle.html" target="_blank" rel="noopener">pickle - Python object serialization</a><br><a href="https://docs.python.org/2/library/inspect.html" target="_blank" rel="noopener">inspect - Inspect live objects</a><br><a href="https://docs.python.org/2/library/collections.html" target="_blank" rel="noopener">collections - High-performance container datatypes</a><br><a href="https://docs.python.org/2/library/numbers.html" target="_blank" rel="noopener">numbers - Numeric abstract base classes</a><br><a href="https://docs.python.org/2/library/warnings.html" target="_blank" rel="noopener">warnings - Warning control</a><br><a href="https://docs.python.org/2/library/operator.html" target="_blank" rel="noopener">operator - Standard operators as functions</a><br><a href="https://docs.python.org/2/library/types.html" target="_blank" rel="noopener">types - Names for builts-in types</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[鲁迅先生 说]]></title>
      <url>http://www.wrran.com/blog/2017/04/01/people-say/luxun/luxun/</url>
      <content type="html"><![CDATA[<blockquote><p>从来如此，便对么？<br>@ 鲁迅 IN 狂人日记</p></blockquote><a id="more"></a><p><strong>先生</strong>说，</p><blockquote><p>倘只看书，便变成书橱。</p></blockquote><hr><blockquote><p>猛兽总是独行，牛羊才能成群结队。</p></blockquote><hr><blockquote><p>惟沉默是最高的轻蔑。</p></blockquote><hr><blockquote><p>愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光。就令萤火一般，也可以在黑暗中发一点光，不必等候炬火。此后如竟没有炬火，我便是唯一的光。<br>@鲁迅 IN 热风</p></blockquote><hr><blockquote><p>当我沉默的时候，我觉得很充实，当我开口说话，就感到了空虚。<br>@ 鲁迅 IN 题草 - 题辞</p></blockquote><hr><blockquote><p>但愿不如所料，以为未必竟如所料的事却每每恰如所料起来。<br>@ 鲁迅 IN 祝福</p></blockquote><hr><blockquote><p>楼下一个男人病得要死，<br>那间隔壁的一家唱着留声机，<br>对面是弄孩子，<br>楼上有两人狂笑，<br>还有打牌声，<br>河中的船上有女人哭着她死去的母亲，<br>人类的悲欢并不相通，<br>我只觉得他们吵闹。<br>@ 鲁迅 IN 而已集·小杂感</p></blockquote><hr><blockquote><p>凡有一人的主张，得了赞和，是促其前进的；得了反对，是促其奋斗的，独有叫喊于生人中，而生人并无反应，既非赞同，也非反对，如置身毫无边际的荒原，无可搓手的了，这是怎样的悲哀呵，我于是以我所感到者为寂寞。<br>@ 鲁迅 IN 呐喊 - 自序</p></blockquote><hr><blockquote><p>只有那暗夜为想变成明天，却仍在这寂静里奔波。<br>@ 鲁迅 IN 明天</p></blockquote><p><em>注</em>：上述语录都来自于<a href="https://www.zhihu.com/question/54231137" target="_blank" rel="noopener">知乎问题 - 鲁迅的文字有多一针见血</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LuXun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python常用工具库 （四）]]></title>
      <url>http://www.wrran.com/blog/2017/04/01/howto/python/common-libraries-4/</url>
      <content type="html"><![CDATA[<blockquote><p>What can I do for ya?</p><ul><li>PyZMQ</li></ul></blockquote><a id="more"></a><h1 id="ZMQ-The-Guide"><a href="#ZMQ-The-Guide" class="headerlink" title="ZMQ - The Guide"></a>ZMQ - The Guide</h1><p><a href="http://zguide.zeromq.org/" target="_blank" rel="noopener">ZMQ - The Guide</a></p><h1 id="PyZMQ-Documentation"><a href="#PyZMQ-Documentation" class="headerlink" title="PyZMQ Documentation"></a>PyZMQ Documentation</h1><p><a href="https://pyzmq.readthedocs.io/en/latest/" target="_blank" rel="noopener">PyZMQ Documentation</a></p><h1 id="PyZMQ-Examples"><a href="#PyZMQ-Examples" class="headerlink" title="PyZMQ Examples"></a>PyZMQ Examples</h1><p><a href="https://github.com/booksbyus/zguide/tree/master/examples/Python" target="_blank" rel="noopener">Github - zguide/examples/Python</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/zeromq/pyzmq" target="_blank" rel="noopener">GitHub - zeromq/pyzmq</a><br><a href="https://github.com/zeromq/libzmq" target="_blank" rel="noopener">Github - zeromq/libzmq</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中的Iterator与Iterable]]></title>
      <url>http://www.wrran.com/blog/2017/04/01/learn/python/iterators_iterable/</url>
      <content type="html"><![CDATA[<blockquote><p>We are all adult.</p></blockquote><a id="more"></a><h1 id="Iterator-Types"><a href="#Iterator-Types" class="headerlink" title="Iterator Types"></a>Iterator Types</h1><p>Python supports a concept of iteration over containers. This is implemented using two distinct methods; these are used to allow user-defined classes to support iteration. Sequences, described below in more detail, always support the iteration methods.</p><p>One method needs to be defined for container objects to provide iteration support:<br><code>container.__iter__()</code>:<br>Return an iterator object. The object is required to support the <strong>iterator protocol</strong> described below. If a container supports different types of iteration, additional methods can be provided to specifically request iterators for those iteration types. (An example of an object supporting multiple forms of iteration would be a tree structure which supports both breadth-first and depth-first traversal.) This method corresponds to the <code>tp_iter</code> slot of the type structure for Python objects in the Python/C API.</p><p>The iterator objects themselves are required to support the following two methods, which together form the <strong>iterator protocol</strong>:<br><code>iterator.__iter__()</code>:<br>Return the iterator object itself. This is required to allow both containers and iterators to be used with the <code>for</code> and <code>in</code> statements. This method corresponds to the <code>tp_iter</code> slot of the type structure for Python objects in the Python/C API.</p><p><code>iterator.__next__()</code>:<br>Return the next item from the container. If there are no further items, raise the <code>StopIteration</code> exception. This method corresponds to the <code>tp_iternext</code> slot of the type structure for Python objects in the Python/C API.</p><p>Python defines several iterator objects to support iteration over general and specific sequence types, dictionaries, and other more specialized forms. The specific types are not important beyond their implementation of the iterator protocol.<br>Once an iterator’s <code>__next__()</code> method raises <code>StopIteration</code>, it must continue to do so on subsequent calls. Implementations that do not obey this property are deemed broken.</p><h2 id="Generator-Types"><a href="#Generator-Types" class="headerlink" title="Generator Types"></a>Generator Types</h2><p>Python’s generators provide a convenient way to implement the iterator protocol. If a container object’s <code>__iter__()</code> method is implemented as a generator, it will automatically return an iterator object (technically, a generator object) supplying the <code>__iter__()</code> and <code>__next__()</code> methods. More information about generators can be found in the documentation for <a href="https://docs.python.org/3/reference/expressions.html#yieldexpr" target="_blank" rel="noopener">the yield expression</a>.</p><h1 id="Iterator和Iterable的区别"><a href="#Iterator和Iterable的区别" class="headerlink" title="Iterator和Iterable的区别"></a>Iterator和Iterable的区别</h1><p>Python中<code>list</code>/<code>tuple</code>/<code>str</code>/<code>dict</code>都可以迭代，但他们都不是迭代器。与迭代器相比，上述这些类型的大小都是确定的；而迭代器不是，它并不知道有多少元素，每一次调用<code>next()</code>，才会往下走一步，是惰性的，</p><h2 id="判断方式不同"><a href="#判断方式不同" class="headerlink" title="判断方式不同"></a>判断方式不同</h2><p>判断是否可以迭代使用<code>Iterable</code>：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collectios <span class="keyword">import</span> Iterbale</span><br><span class="line"></span><br><span class="line">isinstance(&#123;&#125;, Iterable)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">isinstance((), Iterable)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">isinstance(<span class="number">100</span>, Iterable)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><p></p><p>判断是否为迭代器用<code>Iterator</code>：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">isinstance(&#123;&#125;, Iterator)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">isinstance((), Iterator)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><p></p><h2 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h2><p>凡是可以用<code>for</code>循环的，都是Iterable；凡是可以<code>next()</code>，都是Iterator。<br>集合数据类型如<code>list</code>，<code>tuple</code>，<code>dict</code>，<code>str</code>，都是Itrable不是Iterator，但可以通过<code>iter()</code>函数获得一个Iterator对象。</p><p>Python中的<code>for</code>循环其实可以通过<code>next()</code>实现的：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><p>可以看成是：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先获取Iterator对象</span></span><br><span class="line">it = iter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取下一个值</span></span><br><span class="line">        x = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># 遇到StopIteration就退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/passionkk/article/details/49929887" target="_blank" rel="noopener">Python中的Iterator和Iterable的区别</a><br><a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" target="_blank" rel="noopener">Iterator Types - Built-in Types</a><br><a href="https://www.python.org/dev/peps/pep-0234/" target="_blank" rel="noopener">PEP 234 - Iterators</a><br><a href="https://www.python.org/dev/peps/pep-3114/" target="_blank" rel="noopener">PEP 3114 – Renaming iterator.next() to iterator.__next__()</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python常用工具库 （三）]]></title>
      <url>http://www.wrran.com/blog/2017/04/01/howto/python/common-libraries-3/</url>
      <content type="html"><![CDATA[<blockquote><p>What can I do for ya?</p><ul><li>Toolz</li></ul></blockquote><a id="more"></a><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>This page contains a comprehensive list of all functions within <em>toolz</em>. Docstrings should provide sufficient understanding for any individual function.</p><h2 id="Itertoolz"><a href="#Itertoolz" class="headerlink" title="Itertoolz"></a>Itertoolz</h2><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">accumulate(binop, seq[, initial])</td><td style="text-align:left">Repeatedly apply binary function to a sequence, accumulating results</td></tr><tr><td style="text-align:left">concat(seqs)</td><td style="text-align:left">Concatenate zero or more iterables, any of which may be infinite.</td></tr><tr><td style="text-align:left">concatv(*seqs)</td><td style="text-align:left">Variadic version of concat</td></tr><tr><td style="text-align:left">cons(el, seq)</td><td style="text-align:left">Add el to beginning of (possibly infinite) sequence seq.</td></tr><tr><td style="text-align:left">count(seq)</td><td style="text-align:left">Count the number of items in seq</td></tr><tr><td style="text-align:left">diff(*seqs, **kwargs)</td><td style="text-align:left">Return those items that differ between sequences</td></tr><tr><td style="text-align:left">drop(n, seq)</td><td style="text-align:left">The sequence following the first n elements</td></tr><tr><td style="text-align:left">first(seq)</td><td style="text-align:left">The first element in a sequence</td></tr><tr><td style="text-align:left">frequencies(seq)</td><td style="text-align:left">Find number of occurrences of each value in seq</td></tr><tr><td style="text-align:left">get(ind, seq[, default])</td><td style="text-align:left">Get element in a sequence or dict</td></tr><tr><td style="text-align:left">groupby(key, seq)</td><td style="text-align:left">Group a collection by a key function</td></tr><tr><td style="text-align:left">interleave(seqs)</td><td style="text-align:left">Interleave a sequence of sequences</td></tr><tr><td style="text-align:left">interpose(el, seq)</td><td style="text-align:left">Introduce element between each pair of elements in seq</td></tr><tr><td style="text-align:left">isdistinct(seq)</td><td style="text-align:left">All values in sequence are distinct</td></tr><tr><td style="text-align:left">isiterable(x)</td><td style="text-align:left">Is x iterable?</td></tr><tr><td style="text-align:left">iterate(func, x)</td><td style="text-align:left">Repeatedly apply a function func onto an original input</td></tr><tr><td style="text-align:left">join(leftkey, leftseq, rightkey, rightseq[, …])</td><td style="text-align:left">Join two sequences on common attributes</td></tr><tr><td style="text-align:left">last(seq)</td><td style="text-align:left">The last element in a sequence</td></tr><tr><td style="text-align:left">mapcat(func, seqs)</td><td style="text-align:left">Apply func to each sequence in seqs, concatenating results.</td></tr><tr><td style="text-align:left">merge_sorted(*seqs, **kwargs)</td><td style="text-align:left">Merge and sort a collection of sorted collections</td></tr><tr><td style="text-align:left">nth(n, seq)</td><td style="text-align:left">The nth element in a sequence</td></tr><tr><td style="text-align:left">partition(n, seq[, pad])</td><td style="text-align:left">Partition sequence into tuples of length n</td></tr><tr><td style="text-align:left">partition_all(n, seq)</td><td style="text-align:left">Partition all elements of sequence into tuples of length at most n</td></tr><tr><td style="text-align:left">peek(seq)</td><td style="text-align:left">Retrieve the next element of a sequence</td></tr><tr><td style="text-align:left">pluck(ind, seqs[, default])</td><td style="text-align:left">plucks an element or several elements from each item in a sequence.</td></tr><tr><td style="text-align:left">random_sample(prob, seq[, random_state])</td><td style="text-align:left">Return elements from a sequence with probability of prob</td></tr><tr><td style="text-align:left">reduceby(key, binop, seq[, init])</td><td style="text-align:left">Perform a simultaneous groupby and reduction</td></tr><tr><td style="text-align:left">remove(predicate, seq)</td><td style="text-align:left">Return those items of sequence for which predicate(item) is False</td></tr><tr><td style="text-align:left">second(seq)</td><td style="text-align:left">The second element in a sequence</td></tr><tr><td style="text-align:left">sliding_window(n, seq)</td><td style="text-align:left">A sequence of overlapping subsequences</td></tr><tr><td style="text-align:left">tail(n, seq)</td><td style="text-align:left">The last n elements of a sequence</td></tr><tr><td style="text-align:left">take(n, seq)</td><td style="text-align:left">The first n elements of a sequence</td></tr><tr><td style="text-align:left">take_nth(n, seq)</td><td style="text-align:left">Every nth item in seq</td></tr><tr><td style="text-align:left">topk(k, seq[, key])</td><td style="text-align:left">Find the k largest elements of a sequence</td></tr><tr><td style="text-align:left">unique(seq[, key])</td><td style="text-align:left">Return only unique elements of a sequence</td></tr><tr><td style="text-align:left">countby(key, seq)</td><td style="text-align:left">Count elements of a collection by a key function</td></tr><tr><td style="text-align:left">partitionby(func, seq)</td><td style="text-align:left">Partition a sequence according to a function</td></tr></tbody></table><h2 id="Functoolz"><a href="#Functoolz" class="headerlink" title="Functoolz"></a>Functoolz</h2><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">complement(func)</td><td style="text-align:left">Convert a predicate function to its logical complement.</td></tr><tr><td style="text-align:left">compose(*funcs)</td><td style="text-align:left">Compose functions to operate in series.</td></tr><tr><td style="text-align:left">curry(*args, **kwargs)</td><td style="text-align:left">Curry a callable function</td></tr><tr><td style="text-align:left">do(func, x)</td><td style="text-align:left">Runs func on x, returns x</td></tr><tr><td style="text-align:left">excepts(exc, func[, handler])</td><td style="text-align:left">A wrapper around a function to catch exceptions and dispatch to a handler.</td></tr><tr><td style="text-align:left">flip</td><td style="text-align:left">Call the function call with the arguments flipped</td></tr><tr><td style="text-align:left">identity(x)</td><td style="text-align:left">Identity function.</td></tr><tr><td style="text-align:left">juxt(*funcs)</td><td style="text-align:left">Creates a function that calls several functions with the same arguments</td></tr><tr><td style="text-align:left">memoize</td><td style="text-align:left">Cache a function’s result for speedy future evaluation</td></tr><tr><td style="text-align:left">pipe(data, *funcs)</td><td style="text-align:left">Pipe a value through a sequence of functions</td></tr><tr><td style="text-align:left">thread_first(val, *forms)</td><td style="text-align:left">Thread value through a sequence of functions/forms</td></tr><tr><td style="text-align:left">thread_last(val, *forms)</td><td style="text-align:left">Thread value through a sequence of functions/forms</td></tr></tbody></table><h2 id="Dicttoolz"><a href="#Dicttoolz" class="headerlink" title="Dicttoolz"></a>Dicttoolz</h2><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">assoc(d, key, value[, factory])</td><td style="text-align:left">Return a new dict with new key value pair</td></tr><tr><td style="text-align:left">dissoc(d, *keys)</td><td style="text-align:left">Return a new dict with the given key(s) removed.</td></tr><tr><td style="text-align:left">assoc_in(d, keys, value[, factory])</td><td style="text-align:left">Return a new dict with new, potentially nested, key value pair</td></tr><tr><td style="text-align:left">get_in(keys, coll[, default, no_default])</td><td style="text-align:left">Returns coll[i0][i1]…[iX] where [i0, i1, …, iX]==keys.</td></tr><tr><td style="text-align:left">keyfilter(predicate, d[, factory])</td><td style="text-align:left">Filter items in dictionary by key</td></tr><tr><td style="text-align:left">keymap(func, d[, factory])</td><td style="text-align:left">Apply function to keys of dictionary</td></tr><tr><td style="text-align:left">itemfilter(predicate, d[, factory])</td><td style="text-align:left">Filter items in dictionary by item</td></tr><tr><td style="text-align:left">itemmap(func, d[, factory])</td><td style="text-align:left">Apply function to items of dictionary</td></tr><tr><td style="text-align:left">merge(*dicts, **kwargs)</td><td style="text-align:left">Merge a collection of dictionaries</td></tr><tr><td style="text-align:left">merge_with(func, *dicts, **kwargs)</td><td style="text-align:left">Merge dictionaries and apply function to combined values</td></tr><tr><td style="text-align:left">update_in(d, keys, func[, default, factory])</td><td style="text-align:left">Update value in a (potentially) nested dictionary</td></tr><tr><td style="text-align:left">valfilter(predicate, d[, factory])</td><td style="text-align:left">Filter items in dictionary by value</td></tr><tr><td style="text-align:left">valmap(func, d[, factory])</td><td style="text-align:left">Apply function to values of dictionary</td></tr></tbody></table><h2 id="Sandbox"><a href="#Sandbox" class="headerlink" title="Sandbox"></a>Sandbox</h2><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Results</th></tr></thead><tbody><tr><td style="text-align:left">parallel.fold(binop, seq [,default, map, …])</td><td style="text-align:left">Reduce without guarantee of ordered reduction.</td></tr><tr><td style="text-align:left">core.EqualityHashKey(key, item)</td><td style="text-align:left">Create a hash key that uses equality comparisons between items.</td></tr><tr><td style="text-align:left">core.zip(seq)</td><td style="text-align:left">Inverse of <code>zip</code></td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://toolz.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">PyToolz API Documentation</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python常用工具库 （二）]]></title>
      <url>http://www.wrran.com/blog/2017/04/01/howto/python/common-libraries-2/</url>
      <content type="html"><![CDATA[<blockquote><p>What can I do for ya?</p><ul><li>itertools</li><li>functools</li></ul></blockquote><a id="more"></a><h1 id="gt-itertools-lt"><a href="#gt-itertools-lt" class="headerlink" title="-&gt; itertools &lt;-"></a>-&gt; itertools &lt;-</h1><p>This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML. Each has been recast in a form suitable for Python.</p><p>More info refers to <a href="/blog/2019/08/16/cheatsheet/reference/python-itertools/">itertools @ python</a>.</p><h1 id="gt-functools-lt"><a href="#gt-functools-lt" class="headerlink" title="-&gt; functools &lt;-"></a>-&gt; functools &lt;-</h1><p>The <code>functools</code> module is for higher-order functions: functions that act on or return other functions. In general, any callable object can be treated as a function for the purposes of this module.</p><p>The functools module defines the following functions:</p><p>More info refers to <a href="/blog/2019/08/16/cheatsheet/reference/python-functools/">functools @ python</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python常用工具库 （一）]]></title>
      <url>http://www.wrran.com/blog/2017/03/31/howto/python/common-libraries-1/</url>
      <content type="html"><![CDATA[<blockquote><p>What can I do for ya?</p><ul><li>argparse</li><li>contextlib</li><li>progressbar</li><li>abc</li></ul></blockquote><a id="more"></a><h1 id="gt-argparse-lt"><a href="#gt-argparse-lt" class="headerlink" title="-&gt; argparse &lt;-"></a>-&gt; argparse &lt;-</h1><p>也可参见教程<a href="http://wrran.com/blog/2017/08/13/howto-python-argparse/" target="_blank" rel="noopener">Python中argparse的使用</a>.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Example goes here:<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># creating a parser</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">'Process some integers.'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># adding arguments</span></span><br><span class="line">    parser.add_argument(<span class="string">'integers'</span>, metavar=<span class="string">'N'</span>, type=int, nargs=<span class="string">'+'</span>,</span><br><span class="line">                        help=<span class="string">'an integer for the accumulator'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--sum'</span>, dest=<span class="string">'accumulate'</span>, action=<span class="string">'store_const'</span>,</span><br><span class="line">                        const=sum, default=max,</span><br><span class="line">                        help=<span class="string">'sum the integers (default: find the max)'</span>)</span><br><span class="line">    <span class="comment"># parsing arguments</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    print(args.accumulate(args.integers))</span><br></pre></td></tr></table></figure><p></p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><p>Details go here:</p><h3 id="ArgumentParser-object"><a href="#ArgumentParser-object" class="headerlink" title="ArgumentParser object"></a><a href="https://docs.python.org/3/library/argparse.html#argumentparser-objects" target="_blank" rel="noopener">ArgumentParser object</a></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">argparse</span>.<span class="title">ArgumentParser</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    prog=None,</span></span></span><br><span class="line"><span class="class"><span class="params">    usage=None,</span></span></span><br><span class="line"><span class="class"><span class="params">    description=None,</span></span></span><br><span class="line"><span class="class"><span class="params">    epilog=None,</span></span></span><br><span class="line"><span class="class"><span class="params">    parents=[],</span></span></span><br><span class="line"><span class="class"><span class="params">    formatter_class=argparse.HelpFormatter,</span></span></span><br><span class="line"><span class="class"><span class="params">    prefix_chars=<span class="string">'-'</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    fromfile_prefix_chars=None</span></span></span><br><span class="line"><span class="class"><span class="params">    argument_default=None,</span></span></span><br><span class="line"><span class="class"><span class="params">    conflict_handler=<span class="string">'error'</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    add_help=True,</span></span></span><br><span class="line"><span class="class"><span class="params">    allow_abbrev=True)</span>:</span></span><br><span class="line">   <span class="string">"""Create a new ArgumentParser object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   All parameters should be passed as keyword arguments. </span></span><br><span class="line"><span class="string">   Each parameter has its own more detailed description,</span></span><br><span class="line"><span class="string">   but in short they are:"""</span></span><br></pre></td></tr></table></figure><p>details go here:</p><ul><li><a href="https://docs.python.org/3/library/argparse.html#prog" target="_blank" rel="noopener">prog</a> - The name of the program (default: <code>sys.argv[0]</code>)</li><li><a href="https://docs.python.org/3/library/argparse.html#usage" target="_blank" rel="noopener">usage</a> - The string describing the program usage (default: generated from arguments added to parser)</li><li><a href="https://docs.python.org/3/library/argparse.html#description" target="_blank" rel="noopener">description</a> - Text to display before the argument help (default: <code>None</code>)</li><li><a href="https://docs.python.org/3/library/argparse.html#epilog" target="_blank" rel="noopener">epilog</a> - Text to display after the argument help (default: <code>None</code>)</li><li><a href="https://docs.python.org/3/library/argparse.html#parents" target="_blank" rel="noopener">parents</a> - A list of ArgumentParser objects whose arguments should also be included</li><li><a href="https://docs.python.org/3/library/argparse.html#formatter-class" target="_blank" rel="noopener">formatter_class</a> - A class for customizing the help output</li><li><a href="https://docs.python.org/3/library/argparse.html#prefix-chars" target="_blank" rel="noopener">prefix_chars</a> - The set of characters that prefix optional arguments (default: ‘-‘)</li><li><a href="https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars" target="_blank" rel="noopener">fromfile_prefix_chars</a> - The set of characters that prefix files from which additional arguments should be read (default: <code>None</code>)</li><li><a href="https://docs.python.org/3/library/argparse.html#argument-default" target="_blank" rel="noopener">argument_default</a> - The global default value for arguments (default: <code>None</code>)</li><li><a href="https://docs.python.org/3/library/argparse.html#conflict-handler" target="_blank" rel="noopener">conflict_handler</a> - The strategy for resolving conflicting optionals (usually unnecessary)</li><li><a href="The strategy for resolving conflicting optionals (usually unnecessary">add_help</a>) - Add a <code>-h/--help</code> option to the parser (default: <code>True</code>)</li><li><a href="https://docs.python.org/3/library/argparse.html#allow-abbrev" target="_blank" rel="noopener">allow_abbrev</a> - Allows long options to be abbreviated if the abbreviation is unambiguous. (default: <code>True</code>)</li></ul><h3 id="The-add-argument-method"><a href="#The-add-argument-method" class="headerlink" title="The add_argument() method"></a><a href="https://docs.python.org/3/library/argparse.html#the-add-argument-method" target="_blank" rel="noopener">The add_argument() method</a></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ArgumentParser.add_argument(</span><br><span class="line">    name_or_flags</span><br><span class="line">    [, action]</span><br><span class="line">    [, nargs]</span><br><span class="line">    [, const]</span><br><span class="line">    [, default]</span><br><span class="line">    [, type_]</span><br><span class="line">    [, choices]</span><br><span class="line">    [, required]</span><br><span class="line">    [, help]</span><br><span class="line">    [, metavar]</span><br><span class="line">    [, dest]</span><br><span class="line">):</span><br><span class="line">   <span class="string">"""Define how a single command-line argument should be parsed."""</span></span><br></pre></td></tr></table></figure><p>Each parameter has its own more detailed description, but in short they are:</p><ul><li><a href="https://docs.python.org/3/library/argparse.html#name-or-flags" target="_blank" rel="noopener">name_or_flags</a> - Either a name or a list of option strings, e.g. <code>foo</code> or <code>-f, --foo</code></li><li><a href="https://docs.python.org/3/library/argparse.html#action" target="_blank" rel="noopener">action</a> - The basic type of action to be taken when this argument is encourtered at the command line.</li><li><a href="https://docs.python.org/3/library/argparse.html#nargs" target="_blank" rel="noopener">nargs</a> - The number of command-line arguments that should consumed.</li><li><a href="https://docs.python.org/3/library/argparse.html#const" target="_blank" rel="noopener">const</a> - A constant value required by some action and nargs selections.</li><li><a href="https://docs.python.org/3/library/argparse.html#default" target="_blank" rel="noopener">default</a> - THe value produced if the argument is absent from the command line.</li><li><a href="https://docs.python.org/3/library/argparse.html#type" target="_blank" rel="noopener">type</a> - The type to which the command-line argument should be converted.</li><li><a href="https://docs.python.org/3/library/argparse.html#choices" target="_blank" rel="noopener">choices</a> - A container of the allowable values for the argument.</li><li><a href="https://docs.python.org/3/library/argparse.html#required" target="_blank" rel="noopener">required</a> - Whether or not the command-line option may be omitted (optionals only).</li><li><a href="https://docs.python.org/3/library/argparse.html#help" target="_blank" rel="noopener">help</a> - A brief description of what the argument does.</li><li><a href="https://docs.python.org/3/library/argparse.html#metavar" target="_blank" rel="noopener">metavar</a> - A name for the argument in usage messages.</li><li><a href="https://docs.python.org/3/library/argparse.html#dest" target="_blank" rel="noopener">dest</a> - The name of the attribute to be added to the object return by <code>parse_args()</code>.</li></ul><h3 id="The-parse-args-method"><a href="#The-parse-args-method" class="headerlink" title="The parse_args() method"></a><a href="https://docs.python.org/3/library/argparse.html#the-parse-args-method" target="_blank" rel="noopener">The parse_args() method</a></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArgumentParser.parse_args(</span><br><span class="line">    args=<span class="literal">None</span>,</span><br><span class="line">    namespace=<span class="literal">None</span></span><br><span class="line">):</span><br><span class="line">    <span class="string">"""Convert argument strings to objects and assign them as</span></span><br><span class="line"><span class="string">    attribute of the namespace.</span></span><br><span class="line"><span class="string">    Return the populated namespace."""</span></span><br></pre></td></tr></table></figure><p>details go here:</p><ul><li><a href="https://docs.python.org/3/library/argparse.html#option-value-syntax" target="_blank" rel="noopener">Option value syntax</a></li><li><a href="https://docs.python.org/3/library/argparse.html#invalid-arguments" target="_blank" rel="noopener">Invalid arguments</a></li><li><a href="https://docs.python.org/3/library/argparse.html#arguments-containing" target="_blank" rel="noopener">Arguments containing -</a></li><li><a href="https://docs.python.org/3/library/argparse.html#argument-abbreviations-prefix-matching" target="_blank" rel="noopener">Argument abbreviations (prefix matching)</a></li><li><a href="https://docs.python.org/3/library/argparse.html#beyond-sys-argv" target="_blank" rel="noopener">Beyond sys.argv</a></li><li><a href="https://docs.python.org/3/library/argparse.html#the-namespace-object" target="_blank" rel="noopener">The Namespace object</a></li></ul><h3 id="Other-utilities"><a href="#Other-utilities" class="headerlink" title="Other utilities"></a><a href="https://docs.python.org/3/library/argparse.html#other-utilities" target="_blank" rel="noopener">Other utilities</a></h3><p>details go here:</p><ul><li><a href="https://docs.python.org/3/library/argparse.html#sub-commands" target="_blank" rel="noopener">Sub-commands</a></li><li><a href="https://docs.python.org/3/library/argparse.html#filetype-objects" target="_blank" rel="noopener">FileType objects</a></li><li><a href="https://docs.python.org/3/library/argparse.html#argument-groups" target="_blank" rel="noopener">Argument groups</a></li><li><a href="https://docs.python.org/3/library/argparse.html#mutual-exclusion" target="_blank" rel="noopener">Mutual exclusion</a></li><li><a href="https://docs.python.org/3/library/argparse.html#parser-defaults" target="_blank" rel="noopener">Parser defaults</a></li><li><a href="https://docs.python.org/3/library/argparse.html#printing-help" target="_blank" rel="noopener">Printing help</a></li><li><a href="https://docs.python.org/3/library/argparse.html#partial-parsing" target="_blank" rel="noopener">Partial parsing</a></li><li><a href="https://docs.python.org/3/library/argparse.html#customizing-file-parsing" target="_blank" rel="noopener">Customizing file parsing</a></li><li><a href="https://docs.python.org/3/library/argparse.html#exiting-methods" target="_blank" rel="noopener">Exiting methods</a></li></ul><h3 id="Upgrading-optparse-code"><a href="#Upgrading-optparse-code" class="headerlink" title="Upgrading optparse code"></a><a href="https://docs.python.org/3/library/argparse.html#upgrading-optparse-code" target="_blank" rel="noopener">Upgrading optparse code</a></h3><p>Originally, the argparse module had attempted to maintain compatibility with optparse. However, optparse was difficult to extend transparently, particularly with the changes required to support the new nargs= specifiers and better usage messages. When most everything in optparse had either been copy-pasted over or monkey-patched, it no longer seemed practical to try to maintain the backwards compatibility.</p><hr><h1 id="gt-contextlib-lt"><a href="#gt-contextlib-lt" class="headerlink" title="-&gt; contextlib &lt;-"></a>-&gt; contextlib &lt;-</h1><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><p>Example goes here:<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_context</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'enter'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> err:</span><br><span class="line">        print(<span class="string">'error'</span>, err)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'exit'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> make_context() <span class="keyword">as</span> value:</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><p></p><h2 id="Details-1"><a href="#Details-1" class="headerlink" title="Details"></a>Details</h2><h3 id="contextmanager"><a href="#contextmanager" class="headerlink" title="contextmanager"></a>contextmanager</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">contextlib.contextmanager(fun):</span><br><span class="line">    <span class="string">"""This function is a decorator that can be used to</span></span><br><span class="line"><span class="string">    define a factory function for `with` statement context</span></span><br><span class="line"><span class="string">    managers."""</span></span><br></pre></td></tr></table></figure><p>The function being decorated must return a generator-iterator when called. This iterator must yield exactly one value, which will be bound to the targets in the <code>with</code> statement’s <code>as</code> clause, if any.</p><p>At the point where the generator yields, the block nested in the <code>with</code> statement is executed. The generator is then resumed after the block is exited. If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred. Thus, you can use a <code>try...except...finally</code> statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the <code>with</code> statement that the exception has been handled, and execution will resume with the statement immediately following the <code>with</code> statement</p><h3 id="closing"><a href="#closing" class="headerlink" title="closing"></a>closing</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">contextlib.closing(thing):</span><br><span class="line">    <span class="string">"""Return a context manager that closes thing upon completionof the block"""</span></span><br></pre></td></tr></table></figure><p>This is basically equivalent to:<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closing</span><span class="params">(thing)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> thing</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        thing.close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># and lets you write code like this</span></span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> closing</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> closing(urllib.urlopen(<span class="string">'http://www.python.org'</span>)) <span class="keyword">as</span> page:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> page:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><p></p><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p><em>See More</em>:</p><ul><li><a href="https://docs.python.org/2/library/stdtypes.html#typecontextmanager" target="_blank" rel="noopener">Context Manager Types</a></li><li><a href="https://docs.python.org/2/reference/datamodel.html#context-managers" target="_blank" rel="noopener">With Statement Context Managers</a></li><li><a href="https://www.python.org/dev/peps/pep-0343/" target="_blank" rel="noopener">PEP 343 - The <code>with</code> statement</a></li></ul><hr><h1 id="gt-progressbar-lt"><a href="#gt-progressbar-lt" class="headerlink" title="-&gt; progressbar &lt;-"></a>-&gt; progressbar &lt;-</h1><h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="comment"># Wrapping an iterable #</span></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> progressbar</span><br><span class="line"></span><br><span class="line">bar = progressbar.ProgressBar()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bar(range(<span class="number">100</span>)):</span><br><span class="line">    time.sleep(<span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="comment"># Context wrapper #</span></span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> progressbar</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> progressbar.ProgressBar(max_value=<span class="number">10</span>) <span class="keyword">as</span> bar:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        bar.update(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Combining progressbars with print output #</span></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> progressbar</span><br><span class="line"></span><br><span class="line">bar = progressbar.ProgressBar(redirect_stdout=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Some text'</span>, i</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    bar.update(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment"># Progressbar with unknown length #</span></span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> progressbar</span><br><span class="line"></span><br><span class="line">bar = progressbar.ProgressBar(max_value=progressbar.UnknownLength)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    bar.update(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># Bar with custom widgets #</span></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> progressbar</span><br><span class="line"></span><br><span class="line">bar = progressbar.ProgressBar(widgets=[</span><br><span class="line">    <span class="string">' ['</span>, progressbar.Timer(), <span class="string">'] '</span>,</span><br><span class="line">    progressbar.Bar(),</span><br><span class="line">    <span class="string">' ('</span>, progressbar.ETA(), <span class="string">') '</span>,</span><br><span class="line">])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bar(range(<span class="number">20</span>)):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><h1 id="gt-ABC-lt"><a href="#gt-ABC-lt" class="headerlink" title="-&gt; ABC &lt;-"></a>-&gt; ABC &lt;-</h1><p>This module provides the infrastructure for defining <a href="https://docs.python.org/2/glossary.html#term-abstract-base-class" target="_blank" rel="noopener">abstract base classes</a> (ABCs) in Python, as outlined in <a href="https://www.python.org/dev/peps/pep-3119/" target="_blank" rel="noopener">PEP 3119</a>; see the PEP for why this was added to Python.</p><h2 id="abstract-base-class"><a href="#abstract-base-class" class="headerlink" title="abstract base class"></a>abstract base class</h2><p>Abstract base classes complement duck-typing by providing a way to define interfaces when other techniques like hasattr() would be clumsy or subtly wrong (for example with magic methods). ABCs introduce virtual subclasses, which are classes that don’t inherit from a class but are still recognized by isinstance() and issubclass(); see the abc module documentation. Python comes with many built-in ABCs for data structures (in the collections module), numbers (in the numbers module), and streams (in the io module). You can create your own ABCs with the abc module.</p><h2 id="PEP-3119-–-Introducing-Abstract-Base-Classes"><a href="#PEP-3119-–-Introducing-Abstract-Base-Classes" class="headerlink" title="PEP 3119 – Introducing Abstract Base Classes"></a>PEP 3119 – Introducing Abstract Base Classes</h2><p>This is a proposal to add Abstract Base Class (ABC) support to Python 3000. It proposes:</p><ul><li>A way to overload isinstance() and issubclass() .</li><li>A new module abc which serves as an “ABC support framework”. It defines a metaclass for use with ABCs and a decorator that can be used to define abstract methods.</li><li>Specific ABCs for containers and iterators, to be added to the collections module.</li></ul><p>Much of the thinking that went into the proposal is not about the specific mechanism of ABCs, as contrasted with Interfaces or Generic Functions (GFs), but about clarifying philosophical issues like “what makes a set”, “what makes a mapping” and “what makes a sequence”.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h2><p><a href="https://docs.python.org/3/library/argparse.html" target="_blank" rel="noopener">argparse - Parser for command-line options, arguments and sub-commands</a><br><a href="http://www.cnblogs.com/jianboqi/archive/2013/01/10/2854726.html" target="_blank" rel="noopener">Python 命令行解析工具 Argparse介绍（一）</a></p><h2 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h2><p><a href="https://docs.python.org/2/library/contextlib.html" target="_blank" rel="noopener">contextlib - Utilities for with-statement contexts</a><br><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001478651770626de401ff1c0d94f379774cabd842222ff000" target="_blank" rel="noopener">contextlib - 廖雪峰的官方网站</a></p><h2 id="progressbar"><a href="#progressbar" class="headerlink" title="progressbar"></a>progressbar</h2><p><a href="https://github.com/WoLpH/python-progressbar" target="_blank" rel="noopener">Github - WoLpH/python-prograssbar</a></p><h2 id="ABC"><a href="#ABC" class="headerlink" title="ABC"></a>ABC</h2><p><a href="https://docs.python.org/2/library/abc.html" target="_blank" rel="noopener">abc - Abstract Base Classes</a><br><a href="http://yansu.org/2013/06/09/learn-python-abc-module.html" target="_blank" rel="noopener">学习Python的ABC模块</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sphinx (1) - First Step]]></title>
      <url>http://www.wrran.com/blog/2017/03/28/howto/sphinx-1-first-step/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Sphinx</code>, Python Documentation Generator.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>SPHINX是一款Python文档生成开源软件，它有以下特性：</p><ul><li><strong>Output Formats</strong>: HTML (including Windows HTML Help), LaTeX (for printable PDF versions), ePub, Texinfo, manual pages, plain text</li><li><strong>Extensive Cross-references</strong>: semantic markup and automatic links for functions, classes, citations, glossary terms and similar pieces of information</li><li><strong>Hierarchical Structure</strong>: easy definition of a document tree, with automatic links to siblings, parents and children</li><li><strong>Automatic Indices</strong>: general index as well as a language-specific module indices</li><li><strong>Code Handling</strong>: automatic highlighting using the <a href="http://pygments.org/" target="_blank" rel="noopener">Pygments</a> highlighter</li><li><strong>Extensions</strong>: automatic testing of code snippets, inclusion of docstrings from Python modules (API docs), and more</li><li><strong>Contributed Extensions</strong>: more than 50 extensions contributed by users in a second repository; most of them installable from PyPI</li></ul><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h1><p><a href="http://www.sphinx-doc.org/en/stable/tutorial.html" target="_blank" rel="noopener">First Steps with Sphinx</a><br><a href="http://matplotlib.sourceforge.net/sampledoc/" target="_blank" rel="noopener">Nice Tutorial from matplotlib</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.sphinx-doc.org/en/stable/" target="_blank" rel="noopener">SPHINX</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
            <category> sphinx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> sphinx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（九） - Serialization]]></title>
      <url>http://www.wrran.com/blog/2017/03/27/howto/blocks/8-serialization/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framework that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>保存模型与存储他们的训练过程十分重要：</p><ol><li>神经网络模型训练代价昂贵，需要很长的时间才可以使用。如果训练过程被中途打断的话，我们可以从被停下的地方继续训练就显得十分重要。</li><li>我们保存模型之后也方便我们继续后续的工作，以及分享模型。</li></ol><p>上述其实是两个不同方面的需求，这正是<em>Blocks</em>在<code>dump()</code>和<code>load()</code>中需要解决的问题。</p><h1 id="Picking-the-Training-Loop"><a href="#Picking-the-Training-Loop" class="headerlink" title="Picking the Training Loop"></a>Picking the Training Loop</h1><p><em>注意</em>：因为在训练过程中序列化/反序列化对象的过程十分复杂，也许会因为某些原因导致调用栈层次太深而出错。所以提高这个上限十分重要。</p><p>到运行到检查点时，<em>Blocks</em>将pickle整个<code>main loop</code>的状态，不仅将模型序列化，同时也会将训练的状态（迭代的状态，扩展等）保存下来。但技术上来讲，存在以下困难：</p><ul><li>一些Python对象无法被序列化，如文件句柄，生成器，动态生成的类，内部类等</li><li>theano对象的序列化也困难重重</li><li>我们不想将训练数据序列化到内存中，因为这可能占用太多内存</li></ul><p><em>Blocks</em>通过避免序列化某些数据结构如生成器和内部类（参见<a href="http://blocks.readthedocs.io/en/latest/development/index.html#serialization-guidelines" target="_blank" rel="noopener">Developer Guidelines</a>），并复写一些对象的序列化行为，来实现序列化<code>main loop</code>的目的。</p><p>但是，长期保存模型还是不太可能，因为：</p><ul><li>反序列化要求我们使用的库不能改变。这就意味着我们如果更新了<em>Blocks</em>或者<em>Theano</em>时，就有可能导致反序列化失败</li><li>theano对象反序列化可能困难重重，特别是将对象从GPU转移到CPU或者相反</li><li>Python 2/3的反序列化可能并不兼容</li></ul><h1 id="Parameter-Saving"><a href="#Parameter-Saving" class="headerlink" title="Parameter Saving"></a>Parameter Saving</h1><p>基于上述原因，<em>Blocks</em>决定拦截所有theano shared variables（其中包括参数）的序列化过程，并将他们保存为单独的<a href="http://docs.scipy.org/doc/numpy-dev/neps/npy-format.html" target="_blank" rel="noopener">NPY</a>文件。保存结果是一个ZIP压缩文件，包括序列化的<code>main loop</code>与一些NumPy数组。这些NumPy数组（包含参数）可以通过方法<code>numpy.load()</code>跨平台读取。这就使我们在<code>main loop</code>序列化失败时读取参数成为可能了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blocks.readthedocs.io/en/latest/serialization.html" target="_blank" rel="noopener">Blocks’ doc - Serialization</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
            <category> blocks </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blocks </tag>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（八） - 定制Bricks]]></title>
      <url>http://www.wrran.com/blog/2017/03/27/howto/blocks/7-create-your-own-brick/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framework that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分就是来解释下我们该如何自定义bricks的，这可以用来封装一些常用的操作（这些操作也可以是bricks），以便之后复用。</p><p>下述第一部分用来解释自定义bricks的必需和非必需的一些操作；第二部分则自定义一个简单的bricks。</p><p><em>注意</em>：该教程假设读者已经熟悉<em>bricks</em>这个概念并且能够熟练使用。</p><h1 id="自定义bricks需要的条件"><a href="#自定义bricks需要的条件" class="headerlink" title="自定义bricks需要的条件"></a>自定义bricks需要的条件</h1><p>在<em>Blocks</em>中的bricks要么直接要么间接地继承于<code>Brick</code>。<em>Blocks</em>已经定义了不少类，所以在自己定制前选择合适的brick可以省下不少精力。</p><p>下列是一些常用的brick类：</p><ul><li><code>Sequence</code>: a sequence of bricks</li><li><code>Initializable</code>: a brick that defines a same initialization scheme (weights and biases) for all its children</li><li><code>Feedforward</code>: declares an interface for bricks with one input and one output</li><li><code>Linear</code>: a linear transformation with optional bias. Inherits from <code>Initializable</code> and <code>Feedforward</code></li><li><code>BaseRecurrent</code>: the base class for recurrent bricks.</li></ul><p>倘若你想从头开始自定义一个brick，你需要集成类<code>Brick</code>并考虑复写以下方法（严格来说，这些方法都是可选的，实际定义过程中记得参考<code>Brick</code>的内部文档）：</p><ul><li><code>Brick.__init__()</code>: you should pass by argument the attributes of your brick. It is also in this method you should create the protential <em>children bricks</em> that belongs to your brick (in that case, you have to pass the children bricks to <code>super().__init__</code>). The initialization of the attributes can be lazy as described later in the tutorial.</li><li><code>apply()</code>: you need to implement a method that actually implements the operation of the brick, taking as arguments the inputs of the brick and returing its outputs. It can have any name and for simple bricks is often named <code>apply</code>. You should decorate it with the <code>application()</code> decorator, as explained in the next section. If you design a recurrent brick, you should decorate it with the <code>recurrent()</code> decorator as explained in the <a href="http://localhost:8080/blog/2017/03/27/howto-blocks-5-recurrent-neural-networks/" target="_blank" rel="noopener">blogs about rnns</a>.</li><li><code>Brick._allocate()</code>: you should implement this method to allocate the shared variables (often representing parameters) of the bricks. In Blocks, by convention, the built-in bricks allocate their shared variables with nan values and we recommend you to do the same.</li><li><code>Brick._initialize()</code>: you should implement this method to initialize the shared variables of your brick. This method is called after the allocation.</li><li><code>Brick._push_allocation_config()</code>: you should consider overwriting this method if you want to change configuration of the children bricks before they allocate their parameters.</li><li><code>Brick._push_initialization_config()</code>: you should consider overwriting this method if you want to change the initialization schemes of the children before they get initialied. If the children bricks need to be initialized with the same scheme, then you should inherit your brick from <code>Initializable</code>, which automatically pushes the initialization schemes of your brick (provided as arguments <code>weights_init</code> and <code>biases_init</code> of the constructor) to the children bricks.</li><li><code>get_dim()</code>: implementing this function is useful if you want to provide a simple way to get the dimensions of the inputs and outputs of the bricks.</li></ul><p>如果从其他类型的brick继承的话，也要记得查看对应类的文档，确定要复写哪些方法/属性。</p><h2 id="方法application"><a href="#方法application" class="headerlink" title="方法application"></a>方法application</h2><p>上述方法中，<code>apply()</code>可以说是最为重要的一者。因为它完成了读入theano variable，并处理输出的工作。我们应当记住用<code>application()</code>来装饰该方法，它会帮我们命名变量并创建一些辅助变量。好比如说这样：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Brick)</span>:</span></span><br><span class="line"><span class="meta">    @application(</span></span><br><span class="line">        inputs=[<span class="string">'input1'</span>, <span class="string">'input2'</span>],</span><br><span class="line">        outputs=[<span class="string">'output'</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, input1, input2)</span>:</span></span><br><span class="line">        y = input1 + input2</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p>如上例所示，如此做后它将自动将theano tensor variable<code>input1</code>重命名为<code>Foo_apply_input1</code>，<code>input2</code>重命名为<code>Foo_apply_input2</code>，并将该方法的输出命名为<code>foo_apply_output</code>。并且它也会将对应的角色与名字赋值给该变量的<code>tag</code>属性。如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">foo = Foo()</span><br><span class="line">i1 = tensor.matrix(<span class="string">'i1'</span>)</span><br><span class="line">i2 = tensor.matrix(<span class="string">'i2'</span>)</span><br><span class="line">y = foo.apply(x)</span><br><span class="line">theano.printing.debugprint(y)</span><br><span class="line"><span class="comment"># Elemwise&#123;identity&#125; [id A] 'foo_apply_output'</span></span><br><span class="line"><span class="comment">#  |Elemwise&#123;add,no_inplace&#125; [id B] ''</span></span><br><span class="line"><span class="comment">#    |Elemwise&#123;identity&#125; [id C] 'foo_apply_input1'</span></span><br><span class="line"><span class="comment">#    | |i1 [id D]</span></span><br><span class="line"><span class="comment">#    |Elemwise&#123;identity&#125; [id E] 'foo_apply_input2'</span></span><br><span class="line"><span class="comment">#      |i2 [id F]</span></span><br><span class="line">print(y.name)</span><br><span class="line"><span class="comment"># foo_apply_output</span></span><br><span class="line">print(y.tag.name)</span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">print(y.tag.roles)</span><br><span class="line"><span class="comment"># [OUTPUT]</span></span><br></pre></td></tr></table></figure><p>其实，装饰器<code>@application</code>实际创建了一个类型为<code>Application</code>的类，并命名为<code>apply</code>，并赋值给了brick的一个属性：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(Foo.apply))</span><br></pre></td></tr></table></figure><p></p><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application properties"></a>application properties</h2><p>在前面的示例中，我们通过<code>@application</code>这个装饰器直接指定了参数的名称。我们也可以通过其他方式指定参数名称，例如下例中通过使用装饰器<code>apply.property</code>指定参数名称为<code>self.fancy_name</code>:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Brick)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fancy_name)</span>:</span></span><br><span class="line">        self.fancy_name = fancy_name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @application</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @apply.property('inputs')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_inputs</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Note that you can use any python code to define the name</span></span><br><span class="line">        <span class="keyword">return</span> self.fancy_name</span><br></pre></td></tr></table></figure><h2 id="using-application-calls"><a href="#using-application-calls" class="headerlink" title="using application calls"></a>using application calls</h2><p>在某些场景下你可能希望在<code>apply</code>中定义某些辅助变量，以方便后面使用，如定义一些辅助量来监测训练过程。为此，你只需要将<code>application_call</code>作为<code>apply</code>的参数，并使用<code>add_auxiliary_variable</code>注册你需要的变量：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Brick)</span>:</span></span><br><span class="line"><span class="meta">    @application</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, x, application_call)</span>:</span></span><br><span class="line">        application_call.add_auxiliary_variable(</span><br><span class="line">            x.mean()</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p><code>add_auxiliary_variable</code>将注解变量<code>x.mean()</code>为辅助bain两，因此你可以通过<code>ComputationGraph</code>取出该辅助变量，并使用<code>VariableFilter</code>进行过滤。如上例中，我们可以通过如下方式取出<code>x.mean()</code>:<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bricks.graph <span class="keyword">import</span> ComputationGraph</span><br><span class="line">x = tensor.fmatrix(<span class="string">'x'</span>)</span><br><span class="line">y = Foo().apply(x)</span><br><span class="line">cg = ComputationGraph(y)</span><br><span class="line">print(cg.auxiliary_variable)</span><br><span class="line"><span class="comment"># [mean]</span></span><br></pre></td></tr></table></figure><p></p><h2 id="lazy-initialization"><a href="#lazy-initialization" class="headerlink" title="lazy initialization"></a>lazy initialization</h2><p>为了防止强迫用户在创建brick时就要指定所有属性，我们可以通过用<code>@lazy</code>注解<code>__init__</code>方法。来让用户可以在创建brick之后，再设定属性：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lazy(</span></span><br><span class="line">    allocation=[<span class="string">'attr1'</span>, <span class="string">'attr2'</span>]</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, attr1, attr2)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p></p><p>上例中，就允许用户在创建了brick之后，在指定属性<code>attr1</code>与<code>attr2</code>。</p><p>再举个例子，我们创建一个由两个<code>Feedforward</code>组成的<code>ChainOfTwoFeedforward</code>。我们不必在创建该类时就指定<code>bricks</code>的属性<code>input_dim</code>：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainOfTwoFeedforward</span><span class="params">(Feedforward)</span>:</span></span><br><span class="line">    <span class="string">"""Two sequential Feedforward bricks."""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, brick1, brick2, **kwargs)</span>:</span></span><br><span class="line">        self.brick1 = brick1</span><br><span class="line">        self.brick2 = brick2</span><br><span class="line">        children = [self.brick1, self.brick2]</span><br><span class="line">        kwargs.setdefaults(<span class="string">'children'</span>, []).extend(children)</span><br><span class="line">        super(Feedforward, self).__init__(**kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">input_dim</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.brick1.input_dim</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @input_dim.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">input_dim</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.brick1.input_dim = value</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output_dim</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.brick2.output_dim</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @output_dim.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output_dim</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.brick2.output_dim = value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_push_allocation_config</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.brick2.input_dim = self.brick1.get_dim(<span class="string">'output'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @application</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.brick2.apply(</span><br><span class="line">            self.brick1.apply(x)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p></p><p>之后我们就可以如下例使用<code>ChainOfTwoFeedforward</code>：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">brick1 = Linear(</span><br><span class="line">    input_dim=<span class="number">3</span>, output_dim=<span class="number">2</span>, use_bias=<span class="literal">False</span>,</span><br><span class="line">    weights_init=Constant(<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line">brick2 = Linear(</span><br><span class="line">    output_dim=<span class="number">4</span>, use_bias=<span class="literal">False</span>,</span><br><span class="line">    weights_init=Constant(<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line">seq = ChainOfTwoFeedforward(brick1, brick2)</span><br><span class="line">seq.initialize()</span><br><span class="line">brick2.input_dim</span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p></p><h1 id="自定义bricks的示例"><a href="#自定义bricks的示例" class="headerlink" title="自定义bricks的示例"></a>自定义bricks的示例</h1><p>为了巩固上面提到的知识点，我们假设一个场景：需要我们分别读取两个batch的输入，分别乘上不同的矩阵后，输出两个输出。</p><p>设计brick的第一步是考虑该选用哪一个brick。很明显我们这儿实现的是<code>Linear</code>的变种。与<code>Linear</code>不同的是，此处我们有两个输入和两个输出。这意味着我们不能不能从要求只有一个输入、一个输出<code>Feedforward</code>继承而来。我们的brick需要用两个不同的矩阵。我们想用同样的方式初始化这两个矩阵时，可以继承<code>Initializable</code>。它将自动将parent brick的初始化模式复制给children bricks。初始化模式可以由构造函数的参数<code>weights_init</code>与<code>biases_init</code>指出（包含在参数<code>kwargs</code>中）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParallelLinear</span><span class="params">(Initializable)</span>:</span></span><br><span class="line">    <span class="string">r""" Two linear transformations without biases.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Brick which applies two linear (affine) transformations by</span></span><br><span class="line"><span class="string">    multiplying its two inputs with two weight matries, resulting in</span></span><br><span class="line"><span class="string">    two outputs.</span></span><br><span class="line"><span class="string">    The two inputs, weights and outputs can have different dimensions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    input_dim&#123;1, 2&#125; : int</span></span><br><span class="line"><span class="string">        The dimensions of the two inputs.</span></span><br><span class="line"><span class="string">    output_dim&#123;1, 2&#125;: int</span></span><br><span class="line"><span class="string">        The dimensions of the two outputs.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @lazy(</span></span><br><span class="line">        allocation=[</span><br><span class="line">            <span class="string">'input_dim1'</span>, <span class="string">'input_dim2'</span>,</span><br><span class="line">            <span class="string">'output_dim1'</span>, <span class="string">'output_dim2'</span></span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ParallelLinear, self).__init__(**kwargs)</span><br><span class="line">         self.input_dim1 = input_dim1</span><br><span class="line">         self.input_dim2 = input_dim2</span><br><span class="line">         self.output_dim1 = output_dim1</span><br><span class="line">         self.output_dim2 = output_dim2</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__allocate</span><span class="params">(self, input_dim, output_dim, number)</span>:</span></span><br><span class="line">        W = shared_floatx_nans(</span><br><span class="line">            (input_dim, output_dim),</span><br><span class="line">            name=<span class="string">'W'</span>+number</span><br><span class="line">        )</span><br><span class="line">        add_role(W, WEIGHT)</span><br><span class="line">        self.parameter.append(W)</span><br><span class="line">        self.add_auxiliary_variable(W.norm(<span class="number">2</span>), name=<span class="string">'W'</span>+number+<span class="string">'_norm'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_allocate</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__allocate(self.input_dim1, self.output_dim1, <span class="string">'1'</span>)</span><br><span class="line">        self.__allocate(self.input_dim2, self.output_dim2, <span class="string">'2'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initialize</span><span class="params">(self)</span>:</span></span><br><span class="line">        W1, W2 = self.parameters</span><br><span class="line">        self.weights_init.initialize(W1, self.rng)</span><br><span class="line">        self.weights_init.initialize(W2, self.rng)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, input1_, input2_)</span>:</span></span><br><span class="line">        <span class="string">""" Apply the two linear transformations.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Parameters</span></span><br><span class="line"><span class="string">        ----------</span></span><br><span class="line"><span class="string">        input1&#123;1, 2&#125;_: :class:`~tensor.TensorVariable`</span></span><br><span class="line"><span class="string">            The two inputs on which to apply the transformations.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Returns</span></span><br><span class="line"><span class="string">        -------</span></span><br><span class="line"><span class="string">        output&#123;1, 2&#125;: :class:`~tensor.TensorVariable`</span></span><br><span class="line"><span class="string">            The two inputs multiplied by their respective matrices.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        W1, W2 = self.parameters</span><br><span class="line">        output1 = tensor.dot(input1_, W1)</span><br><span class="line">        output2 = tensor.dot(input2_, W2)</span><br><span class="line">        <span class="keyword">return</span> output1, output2</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dim</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'input1_'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.input_dim1</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'input2_'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.input_dim2</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'output1'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.output_dim1</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'output2'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.output_dim2</span><br><span class="line">        super(ParallelLinear, self).get_dim(name)</span><br></pre></td></tr></table></figure><p>你可以如下使用上述定义的brick：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">input_dim1, input_dim2, output_dim1, output_dim2 = <span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">batch_size1, batch_size2 = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">x1_mat = <span class="number">3</span> * numpy.ones(</span><br><span class="line">    (batch_size1, input_dim1),</span><br><span class="line">    dtype=theano.config.floatX</span><br><span class="line">)</span><br><span class="line">x2_dim = <span class="number">4</span> * numpy.ones(</span><br><span class="line">    (batch_size2, input_dim2),</span><br><span class="line">    dtype=theano.config.floatX</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">x1 = theano.tensor.matrix(<span class="string">'x1'</span>)</span><br><span class="line">x2 = theano.tensor.matrix(<span class="string">'x2'</span>)</span><br><span class="line"></span><br><span class="line">parallel1 = ParallelLinear(</span><br><span class="line">    input_dim1, input_dim2, output_dim1, output_dim2,</span><br><span class="line">    weights_init=Constant(<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line">parallel1.initialize()</span><br><span class="line">output1, output2 = parallel1.apply(x1, x2)</span><br><span class="line"></span><br><span class="line">f1 = theano.function([x1, x2], [output1, output2])</span><br><span class="line"></span><br><span class="line">f1(x1_mat, x2_mat)</span><br></pre></td></tr></table></figure><p></p><p>你也可以使用<code>Linear</code>来实现该brick：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParallelLinear2</span><span class="params">(Initializable)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_dim1, input_dim2,</span></span></span><br><span class="line"><span class="function"><span class="params">                 output_dim1, output_dim2,</span></span></span><br><span class="line"><span class="function"><span class="params">                 **kwargs)</span>:</span></span><br><span class="line">        self.linear1 = Linear(input_dim1, output_dim1,</span><br><span class="line">                              use_bias=<span class="literal">False</span>, **kwargs)</span><br><span class="line">        self.linear2 = Linear(input_dim2, output_dim2,</span><br><span class="line">                              use_bias=<span class="literal">False</span>, **kwargs)</span><br><span class="line">        children = [self.linear1, self.linear2]</span><br><span class="line">        kwargs.setdefault(<span class="string">'children'</span>, []).extend(children)</span><br><span class="line">        super(ParallelLinear2, self).__init__(**kwargs)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @application(</span></span><br><span class="line">        inputs=[<span class="string">'input1_'</span>, <span class="string">'input2_'</span>],</span><br><span class="line">        outputs=[<span class="string">'output1'</span>, <span class="string">'output2'</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, input1_, input2_)</span>:</span></span><br><span class="line">        output1 = self.linear1.apply(input1_)</span><br><span class="line">        output2 = self.linear2.apply(input2_)</span><br><span class="line">        <span class="keyword">return</span> output1, output2</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dim</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> [<span class="string">'input1_'</span>, <span class="string">'output1'</span>]:</span><br><span class="line">            <span class="keyword">return</span> self.linear1.get_dim(name)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> [<span class="string">'input2_'</span>, <span class="string">'output2'</span>]:</span><br><span class="line">            <span class="keyword">return</span> self.linear2.get_dim(name)</span><br><span class="line">        super(ParallelLinear2, self).get_dim(name)</span><br></pre></td></tr></table></figure><p></p><p>这个版本则可以如下使用：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">parallel2 = ParallelLinear2(</span><br><span class="line">    input_dim1, input_dim2, </span><br><span class="line">    output_dim1, output_dim2,</span><br><span class="line">    weights_init=Constant(<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line">parallel2.initialize()</span><br><span class="line"><span class="comment"># The weights_init initialization scheme is pushed to the children</span></span><br><span class="line"><span class="comment"># bricks. We can verify it as follow:</span></span><br><span class="line">w = parallel2.weights_init</span><br><span class="line">w0 = parallel2.children[<span class="number">0</span>].weights_init</span><br><span class="line">w1 = parallel2.children[<span class="number">1</span>].weights_init</span><br><span class="line">print(w == w0 == w1)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">output1, output2 = parallel2.apply(x1, x2)</span><br><span class="line"></span><br><span class="line">f2 = theano.function([x1, x2], [output1, output2])</span><br><span class="line">f2(x1_mat, x2_mat)</span><br></pre></td></tr></table></figure><p></p><p>实际我们完全没有必要因为上述的需求自己写一个brick，因为<em>Blocks</em>提供了类<code>Parallel</code>(which applies the same prototype brick to several inputs.)：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parallel3 = Parallel(</span><br><span class="line">    prototype=Linear(use_bias=<span class="literal">False</span>),</span><br><span class="line">    input_names=[<span class="string">'input1_'</span>, <span class="string">'input2_'</span>],</span><br><span class="line">    input_dims=[input_dim1, input_dim2],</span><br><span class="line">    output_dims=[output_dim1, output_dim2],</span><br><span class="line">    weights_init=Constant(<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line">parallel3.initialize()</span><br><span class="line"></span><br><span class="line">output1, output2 = parallel3.apply(x1, x2)</span><br><span class="line">f3(x1_mat, x2_mat)</span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blocks.readthedocs.io/en/latest/create_your_own_brick.html" target="_blank" rel="noopener">Blocks’ doc - Create Your Own Brick</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
            <category> blocks </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blocks </tag>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（七） - 配置Blocks]]></title>
      <url>http://www.wrran.com/blog/2017/03/27/howto/blocks/6-configuration/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framework that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p><em>Blocks</em>允许使用YAML文件或者环境变量来配置。环境变量的优先级高于配置文件，配置文件的优先级又比默认配置高。</p><p>配置项默认从<code>~/.blocksrc</code>下读取。如果要指定子集的配置项，可以设置环境变量<code>BLOCKS_CONFIG</code>来改变。一个配置文件形式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_path: /home/user/datasets</span><br></pre></td></tr></table></figure><p>如果一个配置项没有被自定义配置，同时也没有提供默认值，则会在读取时抛出异常<code>ConfigurationError</code>。</p><p>配置项的值可以通过如下代码读取：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.config <span class="keyword">import</span> config</span><br><span class="line">print(config.default_seed)</span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p></p><h1 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h1><p>下面是<em>Blocks</em>支持的配置项。</p><h2 id="default-seed"><a href="#default-seed" class="headerlink" title="default_seed"></a>default_seed</h2><p>这个是用来设置随机生成器种子的，包括如Numpy中的<code>RandomState</code>和theano中的<code>MRG_RandomStreams</code>。这应当为整数，默认被设置为<code>1</code>。</p><h2 id="recursion-limit"><a href="#recursion-limit" class="headerlink" title="recursion_limit"></a>recursion_limit</h2><p>被用来设置递归层数，比如说<code>MainLoop</code>。另外一个常常被用到的就是用序列化或者反序列化一个复杂对象。</p><h2 id="profile-BLOCKS-PROFILE"><a href="#profile-BLOCKS-PROFILE" class="headerlink" title="profile, BLOCKS_PROFILE"></a>profile, BLOCKS_PROFILE</h2><p>一个布尔值，告诉<em>Blocks</em>是否在<code>MainLoop.run()</code>之后打印出程序的性能信息。</p><h2 id="log-dackend"><a href="#log-dackend" class="headerlink" title="log_dackend"></a>log_dackend</h2><p>用来存储实验日志的实体。默认被设置为<code>python</code>，它将日志存储为内存中的一个对象；另一个选项是<code>sqliter</code>。</p><h2 id="sqlite-database-BLOCKS-SQLITEDB"><a href="#sqlite-database-BLOCKS-SQLITEDB" class="headerlink" title="sqlite_database, BLOCKS_SQLITEDB"></a>sqlite_database, BLOCKS_SQLITEDB</h2><p>指定将被用到的SQLite数据库文件。</p><h2 id="max-blob-size"><a href="#max-blob-size" class="headerlink" title="max_blob_size"></a>max_blob_size</h2><p>存储到SQLite数据库中的对象的最大位数。对象大小要是超过了该上限，将触发警告。默认是4 kilobyte。</p><h2 id="temp-dir-BLOCKS-TEMPDIR"><a href="#temp-dir-BLOCKS-TEMPDIR" class="headerlink" title="temp_dir, BLOCKS_TEMPDIR"></a>temp_dir, BLOCKS_TEMPDIR</h2><p>指定<em>Blocks</em>创建临时文件的文件夹。如果没有指定，则将根据平台信息选用Python库中的<code>tempfile</code>。</p><h2 id="class-blocks-config-ConfigurationError"><a href="#class-blocks-config-ConfigurationError" class="headerlink" title="class blocks.config.ConfigurationError"></a>class blocks.config.ConfigurationError</h2><p>当必需的配置项没有被设置时抛出的错误。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blocks.readthedocs.io/en/latest/configuration.html" target="_blank" rel="noopener">Blocks’ doc - Configuration</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> blocks </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（六） - Recurrent Neural Networks]]></title>
      <url>http://www.wrran.com/blog/2017/03/27/howto/blocks/5-recurrent-neural-networks/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framework that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分解释<em>Blocks</em>中的recurrent bricks。如果读者不熟悉<em>Blocks</em>中的<code>bricks</code>概念的话，请阅读<a href="http://wrran.com/blog/2017/03/27/howto-blocks-2-building-with-bricks/" target="_blank" rel="noopener">Blocks学习手册（三） - bricks</a>之后再食用此文。</p><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/hotwo-blocks/rnn-quickstart-example-1.svg" alt="Quickstart Example - 1"><br>我们先实现上图所述的简单recurrent bricks，即累加它所有的输入。上图数学表示就是：<br>$$<br>\mathbf{h}<em>t = \mathbf{h}</em>{t-1} + \mathbf{x}_t<br>$$</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> tensor</span><br><span class="line"><span class="keyword">from</span> blocks <span class="keyword">import</span> initialization</span><br><span class="line"><span class="keyword">from</span> blocks.bricks <span class="keyword">import</span> Identity</span><br><span class="line"><span class="keyword">from</span> blocks.bricks.recurrent <span class="keyword">import</span> SimpleRecurrent</span><br><span class="line">x = tensor.tensor3(<span class="string">'x'</span>)</span><br><span class="line">rnn = SimpleRecurrent(</span><br><span class="line">    dim=<span class="number">3</span>,</span><br><span class="line">    activation=Identity(),</span><br><span class="line">    weights_init=initialization.Identity()</span><br><span class="line">)</span><br><span class="line">rnn.initialize()</span><br><span class="line">h = rnn.apply(x)</span><br><span class="line">f = theano.function([x], h)</span><br><span class="line"></span><br><span class="line">print(f(</span><br><span class="line">    numpy.ones((<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>), dtype=theano.config.floatX)</span><br><span class="line">))</span><br><span class="line"><span class="comment"># [[[ 1., 1., 1.]]</span></span><br><span class="line"><span class="comment">#  [[ 2., 2., 2.]]</span></span><br><span class="line"><span class="comment">#  [[ 3., 3., 3. ]]] ...</span></span><br></pre></td></tr></table></figure><p>我们再来看看下面这个复杂一点的recurrent bricks，它将输入乘上2倍之后再累加：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/hotwo-blocks/rnn-quickstart-example-2.svg" alt="Quickstart example - 2"></p><p>数学表达式为：<br>$$<br>\mathbf{h}<em>t = \mathbf{h}</em>{t-1} + 2 \cdot \mathbf{x}_t<br>$$</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.bricks <span class="keyword">import</span> Linear</span><br><span class="line">doubler = Linear(</span><br><span class="line">    input_dim=<span class="number">3</span>, output_dim=<span class="number">3</span>,</span><br><span class="line">    weight_init=initialization.Identity(<span class="number">2</span>),</span><br><span class="line">    biases_init=initialization.Constant(<span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line">doubler.initialize()</span><br><span class="line">h_doubler = rnn.apply(</span><br><span class="line">    doubler.apply(x)</span><br><span class="line">)</span><br><span class="line">f = theano.function([x], h_doubler)</span><br><span class="line"></span><br><span class="line">print(f(</span><br><span class="line">    numpy.ones((<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>), dtype=theano.config.floatX)</span><br><span class="line">))</span><br><span class="line"><span class="comment"># [[[ 2., 2., 2.]]</span></span><br><span class="line"><span class="comment">#  [[ 4., 4., 4.]]</span></span><br><span class="line"><span class="comment">#  [[ 6., 6., 6. ]]] ...</span></span><br></pre></td></tr></table></figure><p>在上例中，我们可以看到为了让输入乘上2。我们对<code>x</code>应用了线性变换<code>bricks.Linear</code>。实际中的RNN用的表达式为<br>$$<br>\mathbf{h}<em>t = \mathsf{f}(\mathbf{V}\mathbf{h}</em>{t-1} + \mathbf{W}\mathbf{x}_t + b)<br>$$<br>通过这样涉及recurrent bricks，我们可以更加模块化地，更加灵活地使用该计算单元。例如，$\mathbf{W}\mathbf{x}_t$甚至可以用一个神经网络代替。</p><h1 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h1><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/hotwo-blocks/rnn-quickstart-example-3.svg" alt="Quickstart example - 3"><br>recurrent model一般都需要指定初始状态的。但是，我们上例中都忽略了recurrent brick的初始状态$\mathbf{h}_0$。其实，这是因为<em>Blocks</em>默认将初始状态设置为0。但是我们其实可以将他们显式设置出来的。如上图所示，我们就是将初始值设置为1：<br>$$<br>\mathbf{h}<em>t = \mathbf{h}</em>{t-1} + \mathbf{x}_t, \mathbf{h}_0 = 1<br>$$</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">h0 = tensor.matrix(<span class="string">'h0'</span>)</span><br><span class="line">h = rnn.apply(inputs=x, states=h0)</span><br><span class="line">f = theano.function([x, h0], h)</span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    f(</span><br><span class="line">        numpy.ones((<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>), dtype=theano.config.floatX),</span><br><span class="line">        numpy.ones((<span class="number">1</span>, <span class="number">3</span>), dtype=theano.config.floatX)</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="comment"># [[[ 2., 2., 2.]]</span></span><br><span class="line"><span class="comment">#  [[ 3., 3., 3.]]</span></span><br><span class="line"><span class="comment">#  [[ 4., 4., 4. ]]] ...</span></span><br></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><p>官方文档中没有相关文档，但是提示我们可以去关注参数<code>reverse</code>。</p><h1 id="Getting-initial-states-back"><a href="#Getting-initial-states-back" class="headerlink" title="Getting initial states back"></a>Getting initial states back</h1><p>官方文档中没有相关文档，但是提示我们可以去关注参数<code>return_initial_states</code>。</p><h1 id="Iterate-or-not"><a href="#Iterate-or-not" class="headerlink" title="Iterate (or not)"></a>Iterate (or not)</h1><p>recurrent bricks的<code>apply</code>方法有一个参数为<code>iterate</code>，默认设置为<code>True</code>。这是因为我们提供给这个tensor的输入的维度会比<code>recurrent.SimpleRecurrent.apply()</code>需要的大。多出来的第一个就是对应了我们要迭代的序列长度。<br>将<code>iterate</code>设置为<code>False</code>可以让方法<code>apply</code>指计算序列中的一步。<br>上述这些机制让我们将多个recurrent layer结合起来变得相当简单。</p><p>假设你要搭建一个有两层recurrent layer的神经网络。第二层累加第一层的输出；第一层累加输入与第二层前一个状态的输出。图示如下所示：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/hotwo-blocks/rnn-quickstart-example-4.svg" alt="Quickstart example - 4"></p><p>实现上述功能的bricks代码如下：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.bricks.recurrent <span class="keyword">import</span> BaseRecurrent, recurrent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedbackRnn</span><span class="params">(BaseRecurrent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dim, **kwargs)</span>:</span></span><br><span class="line">        super(FeedbackRNN, self).__init__(**kwargs)</span><br><span class="line">        self.dim = dim</span><br><span class="line">        self.first_recurrent_layer = SimpleRecurrent(</span><br><span class="line">            dim=self.dim,</span><br><span class="line">            activation=Identity(),</span><br><span class="line">            name=<span class="string">'first_recurrent_layer'</span>,</span><br><span class="line">            weights_init=initialization.Identity()</span><br><span class="line">        )</span><br><span class="line">        self.second_recurrent_layer = SimpleRecurrent(</span><br><span class="line">            dim=self.dim,</span><br><span class="line">            activation=Identity(),</span><br><span class="line">            name=<span class="string">'second_recurrent_layer'</span>,</span><br><span class="line">            weights_init=initialization.Identity()</span><br><span class="line">        )</span><br><span class="line">        self.children = [</span><br><span class="line">            self.first_recurrent_layer,</span><br><span class="line">            self.second_recurrent_layer</span><br><span class="line">        ]</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @recurrent(</span></span><br><span class="line">        sequences=[<span class="string">'inputs'</span>],</span><br><span class="line">        contexts=[],</span><br><span class="line">        states=[<span class="string">'first_states'</span>, <span class="string">'second_states'</span>],</span><br><span class="line">        outputs=[<span class="string">'first_states'</span>, <span class="string">'second_states'</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, inputs, first_states=None, second_states=None)</span>:</span></span><br><span class="line">        first_h = self.first_recurrent_layer.apply(</span><br><span class="line">            inputs=inputs,</span><br><span class="line">            states=first_states + second_states,</span><br><span class="line">            iterate=<span class="literal">False</span></span><br><span class="line">        )</span><br><span class="line">        second_h = self.second_recurrent_layer.apply(</span><br><span class="line">            inputs=first_h,</span><br><span class="line">            states=second_states,</span><br><span class="line">            iterato=<span class="literal">False</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> first_h, second_h</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dim</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.dim <span class="keyword">if</span> name <span class="keyword">in</span> (<span class="string">'inputs'</span>, <span class="string">'first_states'</span>, <span class="string">'second_states'</span>)</span><br><span class="line">                <span class="keyword">else</span> super(FeedbackRNN, self).get_dim(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = tensor.tensor3(<span class="string">'x'</span>)</span><br><span class="line">feedback = FeedbackRNN(dim=<span class="number">3</span>)</span><br><span class="line">feedback.initialize()</span><br><span class="line">first_h, second_h = feedback.apply(inputs=x)</span><br><span class="line">f = theano.function([x], [first_h, second_h])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> f(</span><br><span class="line">    numpy.ones(</span><br><span class="line">        (<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>), dtype=theano.config.floatX</span><br><span class="line">    )</span><br><span class="line">):</span><br><span class="line">    print(states)</span><br><span class="line"><span class="comment"># [[[ 1.  1.  1.]]</span></span><br><span class="line"><span class="comment">#  [[ 3.  3.  3.]]</span></span><br><span class="line"><span class="comment">#  [[ 8.  8.  8.]]]</span></span><br><span class="line"><span class="comment"># [[[  1.   1.   1.]]</span></span><br><span class="line"><span class="comment">#  [[  4.   4.   4.]]</span></span><br><span class="line"><span class="comment">#  [[ 12.  12.  12.]]]...</span></span><br></pre></td></tr></table></figure><p></p><p>这个示例中涉及的东西就很多了。</p><p>我们定义了一个名字为<code>FeedbackRNN</code>的recurrent brick，它有两个类型为<code>bricks.recurrent.SimpleRecurrent</code>的child bricks。<br>这个类中的<code>get_dim</code>是用来输出调用<code>apply</code>方法时所需要的输入维数。<br>这个类的核心功能在于方法<code>apply</code>。装饰器<code>@recurrent</code>用来指定该方法在那个序列上迭代，该返回什么值，返回值中的哪些对应隐层状态。它的参数<code>inputs</code>与<code>outputs</code>和装饰器<code>@application</code>的作用如下：</p><ul><li><code>outputs</code>，与<code>@application</code>的类似，它定义了方法<code>apply</code>返回的所有结果，包括recurrent outpus.</li><li><code>states</code>是<code>outputs</code>中与recurrent outputs对应的子集，这意味着<code>sequences</code>与<code>states</code>的并集和<code>@application</code>的<code>inputs</code>相对应。</li></ul><p>注意，我们并没有再调用<code>theano.scan()</code>。这是因为<code>apply</code>的实现负责实现该功能，即读取上一个时刻的状态，并输出当前时刻的状态。剩下的东西其实都被装饰器<code>@recurrent</code>实现了。</p><p>通过上例我们就可以看出<code>iterate</code>的重要性，它让我们可以在另一个bricks中组装多个recurrent bricks。</p><p><em>提示</em>：当查看recurrent brick相关的文档时，要时刻牢记它的<code>apply</code>方法的参数是与一次迭代相对应的，即假设<code>iterate = False</code>.</p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><ul><li>实现LSTM: <code>bricks.recurrent.LSTM</code></li><li>实现GRU: <code>bricks.recurrent.GatedRecurrent</code></li><li>实现Bidirectional RNNs: <code>bricks.recurrent.Bidirectional</code></li><li>实现stacked RNNs: <code>bricks.recurrent.RecurrentStack</code></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blocks.readthedocs.io/en/latest/rnn.html" target="_blank" rel="noopener">Blocks’ doc - Recurrent Neural Networks</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
            <category> blocks </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blocks </tag>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（五） - Live Plotting]]></title>
      <url>http://www.wrran.com/blog/2017/03/27/howto/blocks/4-live-plotting/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framework that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>数据可视化往往比日志更能帮助我们了解模型的训练过程。该博文就是介绍<em>Blocks</em>中的图形化扩展。</p><p><em>注意</em>：使用该博文中的内容，需要实现安装<code>blocks-extras</code>。</p><p><em>Blocks</em>使用了库<a href="http://bokeh.pydata.org/" target="_blank" rel="noopener">Bokeh</a>来绘制图片，更具体地说，其实是使用了<em>Bokeh Plot Server</em>。它是一个轻量级的服务器，当我们向其发送相关数据时，就可以实时的在浏览器上观察到绘图结果。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>首先，我们要正确安装了依赖项，并开启了服务器：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bokeh-server</span><br></pre></td></tr></table></figure><p></p><p>上述指令会默认开启一个服务器，我们可以通过<code>http://localhost:5006</code>来访问。</p><p>假设我们上述的绘图服务器一直运行，现在需要我们做的就是开启主循环并使用扩展<code>Plot</code>。假设我们现在用$\mathsf{f}(\mathbf{x}) = \mathbf{x}^a$来拟合$\mathsf{f}(\mathbf{x}) = \mathbf{x}^2$：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> theano</span><br><span class="line">a = theano.shared(<span class="number">3.</span>)</span><br><span class="line">a.name = <span class="string">'a'</span></span><br><span class="line">x = theano.tensor.scalar(<span class="string">'data'</span>)</span><br><span class="line">cost = abs(x ** <span class="number">2</span> - x ** a)</span><br><span class="line">cost.name = <span class="string">'cost'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"><span class="comment"># TRAIN #</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> fuel.streams <span class="keyword">import</span> DataStream</span><br><span class="line"><span class="keyword">from</span> fuel.datasets <span class="keyword">import</span> IterableDataset</span><br><span class="line">data_stream = DataStream(</span><br><span class="line">    IterableDataset(</span><br><span class="line">        numpy.random.rand(<span class="number">150</span>).astype(theano.config.floatX)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>现在我们就可以用梯度下降的算法来训练模型并绘制结果了：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.main_loop <span class="keyword">import</span> MainLoop</span><br><span class="line"><span class="keyword">from</span> blocks.algorithms <span class="keyword">import</span> GradientDescent, Scale</span><br><span class="line"><span class="keyword">from</span> blocks.extensions <span class="keyword">import</span> FinishAfter</span><br><span class="line"><span class="keyword">from</span> blocks.extensions.monitoring <span class="keyword">import</span> TrainingDataMonitoring</span><br><span class="line"><span class="keyword">from</span> blocks_extras.extensions.plot <span class="keyword">import</span> Plot</span><br><span class="line"></span><br><span class="line">main_loop = MainLoop(</span><br><span class="line">    model=<span class="literal">None</span>,</span><br><span class="line">    data_stream=data_stream,</span><br><span class="line">    algorithm=GradientDescent(</span><br><span class="line">        cost=cost,</span><br><span class="line">        parameters=[a],</span><br><span class="line">        step_rule=Scale(learning_rate=<span class="number">0.1</span>)</span><br><span class="line">    ),</span><br><span class="line">    extensions=[</span><br><span class="line">        FinishAfter(after_n_epochs=<span class="number">1</span>),</span><br><span class="line">        TrainingDataMonitoring(</span><br><span class="line">            [cost, a],</span><br><span class="line">            after_batch=<span class="literal">True</span></span><br><span class="line">        ),</span><br><span class="line">        Plot(</span><br><span class="line">            <span class="string">'Plotting example'</span>,</span><br><span class="line">            channels=[[<span class="string">'cost'</span>], [<span class="string">'a'</span>]],</span><br><span class="line">            after_batch=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">main_loop.run()</span><br></pre></td></tr></table></figure><p></p><p>打开浏览器，访问<code>http://localhost:5006</code>就可以实时查看模型的训练情况了：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-blocks/live%20plotting%20examples.png" alt="Live Plotting Examples"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blocks.readthedocs.io/en/latest/plotting.html" target="_blank" rel="noopener">Blocks’ doc - Live Plotting</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
            <category> blocks </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blocks </tag>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（四） - Managing the computation graph]]></title>
      <url>http://www.wrran.com/blog/2017/03/27/howto/blocks/3-managing-the-computation-graph/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framkwork that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>前面提到的<a href="http://wrran.com/blog/2017/03/27/howto-blocks-2-building-with-bricks/" target="_blank" rel="noopener">bricks</a>帮助我们构建出了theano computation graphs。但bricks还可以提供其他极大帮助我们的功能。当我们将bricks应用到一个theano variable上时，他以两种方式自动注解（<em>annotates</em>）了这些变量：</p><ul><li>它定义了computation graph中自己所对应的theano variable的角色（<em>role</em>），如它将权重矩阵与偏置项，即$W$和$b$标记为<code>parameters</code>。并且它还会追踪bricks的输入与输出等。</li><li>它也会自己定义一些辅助变量，这些变量不是bricks的输出，但往往也会发挥一些作用。例如，当我们训练一个神经网络时，我们可能对权重矩阵的正规项感兴趣。而此时<em>Blocks</em>就会将这些辅助变量添加到computation graph中。</li></ul><h1 id="using-annotations"><a href="#using-annotations" class="headerlink" title="using annotations"></a>using annotations</h1><p>类<code>ComputationGraph</code>就提供了上述注解图（annotated graph）的接口。具体来说，假设我们训练一个autoencoder：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> tensor</span><br><span class="line">x = tensor.matrix(<span class="string">'features'</span>)</span><br><span class="line"><span class="keyword">from</span> blocks.bricks <span class="keyword">import</span> MLP, Logistic, Rectifier</span><br><span class="line"><span class="keyword">from</span> blocks.initialization <span class="keyword">import</span> IsotropicGaussian, Constant</span><br><span class="line">mlp = MLP(</span><br><span class="line">    activations=[Rectifier()] * <span class="number">2</span> + [Logistic()],</span><br><span class="line">    dims=[<span class="number">784</span>, <span class="number">256</span>, <span class="number">128</span>, <span class="number">784</span>],</span><br><span class="line">    weights_init=IsotropicGaussian(),</span><br><span class="line">    biases_init=Constant(<span class="number">0.01</span>)</span><br><span class="line">)</span><br><span class="line">y_hat = mlp.apply(x)</span><br><span class="line"><span class="keyword">from</span> blocks.bricks.cost <span class="keyword">import</span> BinaryCrossEntropy</span><br><span class="line">cost = BinaryCrossEntropy().apply(x, y_hat)</span><br></pre></td></tr></table></figure><p></p><p>通过定义变量<code>cost</code>，我们就得到了完整的theano computation graph。现在我们就可以初始化<code>managed graph</code>，即<em>annotated graph</em>：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.graph <span class="keyword">import</span> ComputationGraph</span><br><span class="line">cg = ComputationGraph(cost)</span><br><span class="line"></span><br><span class="line">print(cg.variables)</span><br><span class="line"><span class="comment"># [TensorConstant&#123;0&#125;, b, W_norm, b_norm, features, TensorConstant&#123;1.0&#125;, ...]</span></span><br></pre></td></tr></table></figure><p></p><p>我们可以看出这个<em>annotated graph</em>中有许多变量。</p><p>为了在原来的目标函数上加上正则化项，我们需要获取这个computation graph中的权重矩阵，而这些矩阵都被打上了<code>WEIGHT</code>的标签。所以我们可以通过以下方式获取它们：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.filter <span class="keyword">import</span> VariableFilter</span><br><span class="line"><span class="keyword">from</span> blocks.roles <span class="keyword">import</span> WEIGHT</span><br><span class="line"></span><br><span class="line">print(VariableFilter(roles=[WEIGHT]))(cg.variables)</span><br><span class="line"><span class="comment"># [W, W, W]</span></span><br></pre></td></tr></table></figure><p></p><p>注意上述代码中<code>cg.variables</code>中的变量是有序的，而该计算节点的顺序则与computation graph中的<em>topological order</em>相同（Note that the variables in <code>cg.variables</code> are ordered according to the <em>topological order</em> of their apply nodes.）。这就是说一个feedforwork network的参数将按照他们计算层（layer）的顺序一致。</p><p>现在来看看一个更富有挑战性的工作，假设我们只想对神经网络中某一层的参数进行正则化。我们该如何做呢？答案如下：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">second_layer = mlp.linear_transformations[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">from</span> blocks.roles <span class="keyword">import</span> PARAMETER</span><br><span class="line">var_filter = VariableFilter(</span><br><span class="line">    roles=[PARAMETER],</span><br><span class="line">    bricks=[second_layer]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(var_filter(cg.variables))</span><br><span class="line"><span class="comment"># [b, W]</span></span><br></pre></td></tr></table></figure><p></p><p><em>注意</em>：我们可以过滤出多个不同角色。你可能已经发现这些被过滤的参数其实也有层次关系的：被<code>PARAMETER</code>过滤的参数也会返回child bricks中的<code>WEIGHT</code>与<code>BIAS</code>。</p><p>至于bricks创建的辅助变量。我们可以通过如下方式查看：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(cg.auxiliary_variables)</span><br><span class="line"><span class="comment"># [W_norm, b_norm, W_norm, b_norm, W_norm, b_norm]</span></span><br></pre></td></tr></table></figure><p></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>借助类<code>ComputationGraph</code>，我们可以从theano computation graph中取到自己想要的（ROLE）的变量。这就实现了<a href="http://wrran.com/blog/2017/03/26/howto-blocks-0-overview/#analysis-of-building-model" target="_blank" rel="noopener">Blocks学习手册（一） - 概览</a>中模型建构分析中的<em>目标函数与正则化</em>，并且它走的更远：bricks还自动创建了一些辅助变量。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-blocks/blocks%20-%20manage%20the%20computation%20graph.png" alt title="manage the computation graph总结"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blocks.readthedocs.io/en/latest/cg.html" target="_blank" rel="noopener">Blocks’ doc - Managing the computation graph</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
            <category> blocks </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blocks </tag>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（三） - bricks]]></title>
      <url>http://www.wrran.com/blog/2017/03/27/howto/blocks/2-building-with-bricks/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framework that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在<a href="http://wrran.com/blog/2017/03/26/howto-blocks-0-overview/#more" target="_blank" rel="noopener">Blocks学习手册（一） - 概览</a> 中我们说到了构建神经网络的基本单元<strong>bricks</strong>。我们现在就来详细了解下这种对象的作用与生命周期，以便我们更好的使用该类。</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><strong>bricks</strong>实质上是<strong>parametrized Theano operations</strong>。brick通常又一些<em>attributes</em>和<em>parameters</em>定义组成。其中，<em>attributes</em>是用来定义<strong>Block</strong>的（如，输入向量的维数等）；后者<em>parameters</em>则是指模型训练过程中不断计算的参数（如，W和b）</p><p>brick的生命周期涉及到如下四个方面：</p><ol><li><strong>Configuration</strong>：设置（全部或者部分）brick的<em>attributes</em>。当我们通过构造函数常见brick并传入一些值时，或者我们改变brick对象的属性时，都算在进行configuration。这个步骤中不会有theano变量被创建。</li><li><strong>Allocation</strong>：（可选）创建brick对象代表的theano shared variables。当调用<code>allocate()</code>时，theano变量将被创建并被默认初始化为<code>NaN</code>。</li><li><strong>Application</strong>：这一步是为了构建出Theano中的计算图（Computational graph），根据<em>attributes</em>将输入与输出（<em>parameters</em>）连接起来。这一步只有当对象被完全配置好后才可以进行。</li><li><strong>Initialization</strong>：设置brick中<em>parameters</em>，即theano变量的实际数值。用户蹄冻的量将替换掉默认的初始化值。</li></ol><p><em>注意</em>：当brick对象没有调用<code>allocate()</code>而直接调用<code>apply()</code>方法时，将静默调用<code>allocate()</code>方法。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>bricks读入theano变量，输出theano变量。<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> tensor</span><br><span class="line"><span class="keyword">from</span> blocks.bricks <span class="keyword">import</span> Tanh</span><br><span class="line">x = tensor.vector(<span class="string">'x'</span>)</span><br><span class="line">y = Tanh().apply(x)</span><br><span class="line">print(y)  <span class="comment"># tanh_apply_output</span></span><br><span class="line">isinstance(y, theano.Variable)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p></p><p>再来看看更贴近实际的示例，来观察这些过程都发生了什么：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.bricks <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> blocks.initialization <span class="keyword">import</span> IsotropicGaussian, Constant</span><br><span class="line">linear = Linear(</span><br><span class="line">    input_dim=<span class="number">10</span>, output_dim=<span class="number">5</span>,</span><br><span class="line">    weights_init=IsotropicGaussian(),</span><br><span class="line">    biases_init=Constant(<span class="number">0.01</span>)</span><br><span class="line">)</span><br><span class="line">y = linear.apply(x)</span><br><span class="line"></span><br><span class="line">linear.parameters  <span class="comment"># [W, b]</span></span><br><span class="line">linear.parameters[<span class="number">1</span>].get_value()</span><br><span class="line"><span class="comment"># array([ nan, nan, nan, nan, nan ])</span></span><br></pre></td></tr></table></figure><p></p><p>当我们构造对象<code>linear = Linear(...)</code>时，进入了brick的<strong>configuration</strong>阶段：输入维度（10），输出维度（5）。<br>当我们调用<code>linear.apply(x)</code>时，将自动完成brick的<strong>allocation</strong>，并在之后进入到<strong>application</strong>。<br>也可以观察到此时<code>linear</code>的参数都是默认为<code>NaN</code>。</p><p>我们通过调用<code>initialize()</code>方法，将进入到bricks的<strong>initialization</strong>阶段：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">linear.initialize()</span><br><span class="line">linear.parameters[<span class="number">1</span>].get_values()</span><br><span class="line"><span class="comment"># array([ 0.01, 0.01, 0.01, 0.01, 0.01 ])</span></span><br></pre></td></tr></table></figure><p></p><p><em>注意</em>：bricks是用来帮助我们构建thenao computational graph的，所以我们可以在常规的theano语句中混用bricks（当然，你就浪费了bricks的辅助功能啦）：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z = tensor.max(y + <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p></p><h1 id="lazy-initialization"><a href="#lazy-initialization" class="headerlink" title="lazy initialization"></a>lazy initialization</h1><p>在上述构建<code>Linear</code>的过程中，我们指定了输入与输出的维数，以及权重矩阵初始化的方式。但是，我们常常会遇到如下情景：我们项将某个模型的输出作为另一个模型的输入，但是输入与输出的维数并不一样，所以我们需要在之中加一个线性变换的处理。</p><p>为了实现上述场景，<em>Blocks</em>允许<em>lazy initialization</em>（默认也是开启状态）。这就意味着，你创建模型时不必一次性全部设定完brick的<em>attributes</em>：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">linear2 = Linear(output_dim=<span class="number">10</span>)</span><br><span class="line">print(linear2.input_dim)</span><br><span class="line"><span class="comment"># NoneAllocation</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># apply必须在所有attribute都被设定之后</span></span><br><span class="line"><span class="comment"># 才能调用</span></span><br><span class="line">linear2.apply(x)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   ...</span></span><br><span class="line"><span class="comment"># ValueError: allocation config not set: input_dim</span></span><br></pre></td></tr></table></figure><p></p><p>现在我们可以轻松地根据其他brick的属性来配置需要的brick：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">linear2.input_dim = linear.output_dim</span><br><span class="line">linear2.apply(x)</span><br><span class="line"><span class="comment"># linear_apply_output</span></span><br></pre></td></tr></table></figure><p></p><p>上述例子都是隐式地进行了参数的分配，我们其实也可以显式调用<code>apply</code>方法：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">linear3 = Linear(input_dim=<span class="number">10</span>, output_dim=<span class="number">5</span>)</span><br><span class="line">linear3.parameters</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   ...</span></span><br><span class="line"><span class="comment"># AttributeError: 'Linear' object has no attribute 'parameters'</span></span><br><span class="line">linear3.allocate()</span><br><span class="line">linear3.parameters</span><br><span class="line"><span class="comment"># [W, b]</span></span><br></pre></td></tr></table></figure><p></p><h1 id="nested-bricks"><a href="#nested-bricks" class="headerlink" title="nested bricks"></a>nested bricks</h1><p>许多神经网络模型，特别是那些复杂模型都可以当成层次模型。即便是简单如MLP，也可以分为线性变换层与非线性变换层。</p><p>具体到Blocks上，就是说bricks也可以有children。parent bricks负责配置children bricks，即保证children bricks的配置是合法的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.bricks <span class="keyword">import</span> MLP, Logistic</span><br><span class="line">mlp = MLP(</span><br><span class="line">    activations=[</span><br><span class="line">        Logistic(name=<span class="string">'sigmoid_0'</span>),</span><br><span class="line">        Logistic(name=<span class="string">'sigmoid_1'</span>)</span><br><span class="line">        ],</span><br><span class="line">    dims=[<span class="number">16</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line">    weights_init=IsotropicGaussian(),</span><br><span class="line">    biases_init=Constant(<span class="number">0.01</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">[child.name <span class="keyword">for</span> child <span class="keyword">in</span> mlp.children]</span><br><span class="line"><span class="comment"># ['linear_0', 'sigmoid_0', 'linear_1', 'sigmoid_1']</span></span><br><span class="line"></span><br><span class="line">y = mlp.apply(x)</span><br><span class="line">mlp.children[<span class="number">0</span>].input_dim</span><br><span class="line"><span class="comment"># 16</span></span><br></pre></td></tr></table></figure><p>通过上例可以看出<code>MLP</code>自动构造了child bricks进行线性变换。当我们将MLP应用到<code>x</code>上时，它自动的配置好了child bricks的输入维数与输出维数。相同的，当我们调用<code>initialize()</code>时，它自动的初始化了child bricks的参数。</p><p>当时又会出现这样的场景，我们可能需要复写parent bricks对children bricks的配置。举例来说，我们假设上例中MLP的第一层参数的初始化方式与其他层不太一致。为了实现这个目的，我们先回顾下brick的生命周期：</p><ol><li>构造brick</li><li>分配brick的参数</li><li>初始化brick的参数</li></ol><p>当涉及到children bricks时，生命周期会变得更加复杂（完整文档可以参考类<code>Brick</code>的内部文档）。在分配或者初始化参数之前，parent brick将调用<code>push_allocation_config()</code>及<code>push_initalization_config()</code>方法。前面方法就是用来配置children brick的。所以当我们想复写children bricks的配置时，只需要手动调用该方法，并在之后复写配置：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mlp = MLP(</span><br><span class="line">    activation=[</span><br><span class="line">        Logistic(name=<span class="string">'sigmoid_0'</span>),</span><br><span class="line">        Logistic(name=<span class="string">'sigmoid_1'</span>)</span><br><span class="line">    ],</span><br><span class="line">    dims=[<span class="number">16</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line">    weights_init=IsotropicGaussian(),</span><br><span class="line">    biases_init=Constant(<span class="number">0.01</span>)</span><br><span class="line">)</span><br><span class="line">y = mlp.apply(x)</span><br><span class="line">mlp.push_initializion_config()</span><br><span class="line">mlp.children[<span class="number">0</span>].weights_init = Constant(<span class="number">0.01</span>)</span><br><span class="line">mlp.initialize()</span><br></pre></td></tr></table></figure><h1 id="brick周期总览"><a href="#brick周期总览" class="headerlink" title="brick周期总览"></a>brick周期总览</h1><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-blocks/blocks%20-%20bricks%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt title="Bricks生命周期"></p><p>通过bricks就可以满足<a href="http://wrran.com/blog/2017/03/26/howto-blocks-0-overview/#analysis-of-building-model" target="_blank" rel="noopener">Blocks学习手册（一） - 概览</a>中模型建构分析中的：</p><ul><li>模型计算（架构）</li><li>初始化模型参数</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blocks.readthedocs.io/en/latest/bricks_overview.html" target="_blank" rel="noopener">Blocks’ doc - Building with bricks</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
            <category> blocks </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blocks </tag>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（二） - 安装]]></title>
      <url>http://www.wrran.com/blog/2017/03/26/howto/blocks/1-installation/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framework that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本博文介绍<code>Blocks</code>的安装过程。</p><p>安装环境如下：</p><h1 id="安装指令"><a href="#安装指令" class="headerlink" title="安装指令"></a>安装指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install git+git://github.com/mila-udem/blocks.git@stable \</span><br><span class="line">-r https://raw.githubusercontent.com/mila-udem/blocks/stable/requirements.txt</span><br></pre></td></tr></table></figure><p>执行上述指令，等待一个世纪之后…<br>然后出现了错误：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MemoryError</span><br></pre></td></tr></table></figure><p></p><blockquote><p>> &lt;<br>卒</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blocks.readthedocs.io/en/latest/setup.html" target="_blank" rel="noopener">Blocks Doc - Installation</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
            <category> blocks </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blocks </tag>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Blocks学习手册（一） - 概览]]></title>
      <url>http://www.wrran.com/blog/2017/03/26/howto/blocks/0-overview/</url>
      <content type="html"><![CDATA[<blockquote><p><code>Blocks</code> is a framkwork that helps you build and manage neural network models on using Theano.</p></blockquote><a id="more"></a><h1 id="博文主题"><a href="#博文主题" class="headerlink" title="博文主题"></a>博文主题</h1><p>该博文目的在于寻找库<em>Blocks</em>构建神经网络并训练学习的过程。在这个过程中，分析该库的开发者如何实现如下目的：</p><ol><li>标准化神经网络的构建过程</li><li>神经网络的构建过程如何实现，如何解耦</li></ol><p>并在阅读<em>Blocks</em>源码的过程中，学习分析其代码组织方式中的可取之处，分析指出代码组织方式中的不足之处。</p><h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><p>下列是官方给出的学习路线。<br><a href="http://blocks.readthedocs.io/en/latest/setup.html" target="_blank" rel="noopener">Installation</a><br><a href="http://blocks.readthedocs.io/en/latest/tutorial.html" target="_blank" rel="noopener">Introduction tutorial</a><br><a href="http://blocks.readthedocs.io/en/latest/bricks_overview.html" target="_blank" rel="noopener">Building with bricks</a><br><a href="http://blocks.readthedocs.io/en/latest/cg.html" target="_blank" rel="noopener">Managing the computation graph</a><br><a href="http://blocks.readthedocs.io/en/latest/plotting.html" target="_blank" rel="noopener">Live plotting</a></p><h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p>该示例用神经网络来实现一个MLP，进而来分辨数据集合MNIST handwritten digit database中数字。<br>官方教程见此处<a href="http://blocks.readthedocs.io/en/latest/tutorial.html" target="_blank" rel="noopener">Introduction tutorial</a>。</p><h2 id="模型描述"><a href="#模型描述" class="headerlink" title="模型描述"></a>模型描述</h2><p><strong>模型计算</strong>为<br>$$<br>f(\mathbf{x}; \theta) = \mathsf{softmax}(W^{(2)}\mathsf{ReLu}(W^{(1)}\mathbf{x}+b^{(1)})+b^{(2)})<br>$$<br>最外层的输出为$\mathsf{softmax}$，加总之后总和为1，所以可以将其解释为概率分布：<br>$$<br>f(\mathbf{x})_c = \hat{p}(y=c|\mathbf{x})<br>$$<br>其中，输入$\mathbf{x}$是一个784维的输入，种类$c\in \lbrace0, \cdots, 9\rbrace$</p><p><strong>目标函数</strong>为<br>$$<br>l(f(\mathbf{x}), y) = - \sum_{c=0}^9\mathsf{1}_{(y=c)} \mathsf{log} f(\mathbf{x})_c = -\mathsf{log} f(\mathbf{x})_y<br>$$<br>其中，$\mathsf{1}$为指示函数。<br>为了防止过拟合，我们常常会加上正则化项。</p><p><strong>优化算法</strong>选用SGD。</p><h2 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h2><p><em>Blocks</em>使用<strong>bricks</strong>来构建模型。<strong>bricks</strong>指的是参数化的theano操作（parametrized Theano operations)。后续会有更多的介绍，可以参见<a href="http://blocks.readthedocs.io/en/latest/bricks_overview.html" target="_blank" rel="noopener">Building with bricks</a>。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> tensor</span><br><span class="line"><span class="comment"># 注意x的命名为features</span></span><br><span class="line">x = tensor.matrix(<span class="string">'features'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化`bricks`中的某些参数，如输入维数</span></span><br><span class="line"><span class="keyword">from</span> blocks.bricks <span class="keyword">import</span> Linear, Rectifier, Softmax</span><br><span class="line">input_to_hidden = Linear(name=<span class="string">'input_to_hidden'</span>, input_dim=<span class="number">784</span>, output_dim=<span class="number">100</span>)</span><br><span class="line">h = Rectifier().apply(input_to_hidden.apply(x))</span><br><span class="line">hidden_to_output = Linear(name=<span class="string">'hidden_to_output'</span>, input_dim=<span class="number">100</span>, output_dim=<span class="number">10</span>)</span><br><span class="line">y_hat = Softmax().apply(hidden_to_output.apply(h))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算目标函数</span></span><br><span class="line">y = tensor.lmatrix(<span class="string">'targets'</span>)</span><br><span class="line"><span class="keyword">from</span> blocks.bricks.cost <span class="keyword">import</span> CategoricalCrossEntropy</span><br><span class="line">cost = CategoricalCrossEntropy().apply(y.flatten(), y_hat)</span><br></pre></td></tr></table></figure><p><em>注</em>：上述代码中，所有的theano变量都定义了名字，这有两个用处：</p><ul><li><code>x</code>/<code>y</code>对应的名称为<code>features</code>/<code>targets</code>，我们需要将这两者定义的与数据源相同</li><li><code>input_to_hidden</code>/<code>hidden_to_output</code>等变量会在我们监测模型训练的过程中被使用，这会让日志更具可读性</li></ul><h2 id="损失函数与正则化项"><a href="#损失函数与正则化项" class="headerlink" title="损失函数与正则化项"></a>损失函数与正则化项</h2><p>为了防止过拟合，我们加上正则化项：<br>$$<br>l(f(\mathbf{x}), y) = -\mathsf{log} f(\mathbf{x})_y + \lambda_1 \Vert \mathbf{W}^{(1)}\Vert^2 + \lambda_2 \Vert \mathbf{W}^{(2)}\Vert^2<br>$$</p><p>实现代码如下：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.roles <span class="keyword">import</span> WEIGHT</span><br><span class="line"><span class="keyword">from</span> blocks.graph <span class="keyword">import</span> ComputationGraph</span><br><span class="line"><span class="keyword">from</span> blocks.filter <span class="keyword">import</span> VariableFilter</span><br><span class="line">cg = ComputationGraph(cost)</span><br><span class="line">W1, W2 = VariableFilter(roles=[WEIGHT])(cg.variables)</span><br><span class="line">cost = cost + <span class="number">0.005</span> * (W1 ** <span class="number">2</span>).sum() + <span class="number">0.005</span> * (W2 ** <span class="number">2</span>).sum()</span><br><span class="line">cost.name = <span class="string">'cost_with_regularization'</span></span><br></pre></td></tr></table></figure><p></p><p>注意上述我们通过<em>Blocks</em>中的<strong>Annotation Features</strong>取出了模型中的参数$\Vert \mathbf{W}^{(1)}\Vert$与$\Vert \mathbf{W}^{(2)}\Vert$。更多细节可以参见<a href="http://blocks.readthedocs.io/en/latest/cg.html" target="_blank" rel="noopener">Managing the computation graph</a>。</p><p>其实，<em>Blocks</em>封装了上述构建MLP的过程。实际运用中，我们通过如下代码就可以得到一个MLP：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.bricks <span class="keyword">import</span> MLP</span><br><span class="line">mlp = MLP(activation=[Rectifier(), Softmax()], dims=[<span class="number">784</span>, <span class="number">100</span>, <span class="number">10</span>]).apply(x)</span><br></pre></td></tr></table></figure><p></p><h2 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h2><p>我们使用<code>Linear</code>构建模型时，他们会自动分配一个theano shared variables来存储参数，初始时被设置为<code>NaN</code>。当我们开始训练模型时，我们常常希望可以从一些分布中抽取随机值初始化他们。在<em>Blocks</em>中，可以用如下代码实现：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.initialization <span class="keyword">import</span> IsotropicGassussian, Constant</span><br><span class="line">input_to_hidden.weight_init = hidden_to_output.weights_init = IsotroicGaussian(<span class="number">0.01</span>)</span><br><span class="line">input_to_hidden.biases_init = hidden_to_output.biases_init = Constant(<span class="number">0</span>)</span><br><span class="line">input_to_hidden.initialize()</span><br><span class="line">hidden_to_output.initialize()</span><br></pre></td></tr></table></figure><p></p><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>除了帮助你构建模型，<code>Blocks</code>还提供了许多需要用到的小工具。如：</p><ul><li>预先定义的一些训练算法（如SGD）</li><li>一些数据集的接口</li><li>可以让你监测和控制训练过程的定制化训练循环（training loop）</li></ul><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><p>当我们使用MNIST数据集时，我们使用了库<a href="http://fuel.readthedocs.org/en/latest/" target="_blank" rel="noopener">Fuel</a>。</p><p>在成功配置Fuel之后，我们可以通过如下代码加载数据集：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fuel.datasets <span class="keyword">import</span> MNIST</span><br><span class="line">mnist = MNIST((<span class="string">'train'</span>,))</span><br></pre></td></tr></table></figure><p></p><p>数据集只是提供了访问数据的接口。在真正开始训练时，我们需要不断的迭代，读入一个一个minibatch。这个过程需要我们指定具体的iteration scheme来实现。我们在下面代码中实现了不断迭代数据集MNIST，并指定batch大小为256。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fuel.streams <span class="keyword">import</span> DataStream</span><br><span class="line"><span class="keyword">from</span> fuel.schemes <span class="keyword">import</span> SequentialScheme</span><br><span class="line"><span class="keyword">from</span> fuel.transformers <span class="keyword">import</span> Flatten</span><br><span class="line">data_stream = Flatten(</span><br><span class="line">    DataStream.default_stream(</span><br><span class="line">        mnist,</span><br><span class="line">        iteration_scheme=SequentialScheme(mnist.num_examples, batch_size=<span class="number">256</span>)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="设定训练参数"><a href="#设定训练参数" class="headerlink" title="设定训练参数"></a>设定训练参数</h3><p>我们在此处使用SGD训练算法，并且使用固定的学习率：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.algorithms <span class="keyword">import</span> GradientDescent, Scale</span><br><span class="line">algorithm = GradientDescent(</span><br><span class="line">    cost=cost,</span><br><span class="line">    parameters=cg.parameters,</span><br><span class="line">    step_rule=Scale(learning_rate=<span class="number">0.1</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><h3 id="监测训练过程"><a href="#监测训练过程" class="headerlink" title="监测训练过程"></a>监测训练过程</h3><p>在训练过程中我们想一直监测模型性能，为此我们单独再创建一个数据源：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mnist_test = MNIST((<span class="string">'test'</span>,))</span><br><span class="line">data_stream_test = Flatten(</span><br><span class="line">    DataStream.default_stream(</span><br><span class="line">        mnist_test,</span><br><span class="line">        iteration_scheme=SequentialScheme(</span><br><span class="line">            mnist_test.num_examples,</span><br><span class="line">            batch_size=<span class="number">1024</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><p>为了监测模型在该数据流上的表现，我们需要使用<em>Blocks</em>的扩展项，名为<code>DataStreamMonitoring</code>：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.extensions.monitoring <span class="keyword">import</span> DataStreamMonitoring</span><br><span class="line">monitor = DataStreamMonitoring(</span><br><span class="line">    variable=[cost],</span><br><span class="line">    data_stream=data_stream_test,</span><br><span class="line">    prefix=<span class="string">'test'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><p>之后我们使用<code>MainLoop</code>来将所有这些杂七杂八的东西组装起来。并且还使用了两个扩展项，分别用来在每次训练后停止，并打印出训练进展。<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blocks.main_loop <span class="keyword">import</span> MainLoop</span><br><span class="line"><span class="keyword">from</span> blocks.extensions <span class="keyword">import</span> FinishAfter, Printing</span><br><span class="line">main_loop = MainLoop(</span><br><span class="line">    data_stream=data_stream,</span><br><span class="line">    algorithm=algorithm,</span><br><span class="line">    extensions=[monitor, FinishAfter(after_n_epochs=<span class="number">1</span>), Printing()]</span><br><span class="line">)</span><br><span class="line">main_loop.run()</span><br></pre></td></tr></table></figure><p></p><p><a id="analysis-of-building-model"></a></p><h1 id="模型建构分析"><a href="#模型建构分析" class="headerlink" title="模型建构分析"></a>模型建构分析</h1><p>2017年3月27日<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-blocks/blocks%E6%A8%A1%E5%9E%8B%E5%BB%BA%E6%9E%84%E5%88%86%E6%9E%90.png" alt title="Blocks模型建构分析"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/mila-udem/blocks" target="_blank" rel="noopener">GitHub - mila-udem/blocks</a><br><a href="http://blocks.readthedocs.io/en/latest/" target="_blank" rel="noopener">Blocks’ documentation</a><br><a href="https://github.com/mila-udem/blocks-examples" target="_blank" rel="noopener">Github - mila-udem/blocks-examples</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
            <category> blocks </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blocks </tag>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - Recurrent Neural Networks with Word Embeddings]]></title>
      <url>http://www.wrran.com/blog/2017/03/25/howto/theano/9-recurrent-neural-networks-with-word-embeddings/</url>
      <content type="html"><![CDATA[<blockquote><p>你对Theano一无所知<br>(ง •_•)ง</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分是学习用theano构建神经网络的教程。建议读者阅读原文，注意先阅读<a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a>及<a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a>部分。同时，该博文仅仅罗列出原文的完整代码（可能加上自己<strong>主观的理解</strong>），请谨慎食用。</p><p>比如说，这个部分的模型代码就属于<em>毒代码</em> :&lt;</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> six.moves.cPickle <span class="keyword">as</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> stat</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">from</span> theano <span class="keyword">import</span> tensor <span class="keyword">as</span> T</span><br><span class="line"></span><br><span class="line"><span class="comment"># Otherwise the deepcopy fails</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">PREFIX = os.getenv(</span><br><span class="line">    <span class="string">'ATISDATA'</span>,</span><br><span class="line">    os.path.join(os.path.split(os.path.abspath(os.path.dirname(__file__)))[<span class="number">0</span>],</span><br><span class="line">                 <span class="string">'data'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># utils functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shuffle</span><span class="params">(lol, seed)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    lol :: list of list as input</span></span><br><span class="line"><span class="string">    seed :: seed the shuffling</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    shuffle inplace each list in the same order</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> lol:</span><br><span class="line">        random.seed(seed)</span><br><span class="line">        random.shuffle(l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># start-snippet-1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contextwin</span><span class="params">(l, win)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    win :: int corresponding to the size of the window</span></span><br><span class="line"><span class="string">    given a list of indexes composing a sentence</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    l :: array containing the word indexes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    it will return a list of list of indexes corresponding</span></span><br><span class="line"><span class="string">    to context windows surrounding each word in the sentence</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">assert</span> (win % <span class="number">2</span>) == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> win &gt;= <span class="number">1</span></span><br><span class="line">    l = list(l)</span><br><span class="line"></span><br><span class="line">    lpadded = win // <span class="number">2</span> * [<span class="number">-1</span>] + l + win // <span class="number">2</span> * [<span class="number">-1</span>]</span><br><span class="line">    out = [lpadded[i:(i + win)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> len(out) == len(l)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"><span class="comment"># end-snippet-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># data loading functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">atisfold</span><span class="params">(fold)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> fold <span class="keyword">in</span> range(<span class="number">5</span>)</span><br><span class="line">    filename = os.path.join(PREFIX, <span class="string">'atis.fold'</span>+str(fold)+<span class="string">'.pkl.gz'</span>)</span><br><span class="line">    f = gzip.open(filename, <span class="string">'rb'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        train_set, valid_set, test_set, dicts = pickle.load(f, encoding=<span class="string">'latin1'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        train_set, valid_set, test_set, dicts = pickle.load(f)</span><br><span class="line">    <span class="keyword">return</span> train_set, valid_set, test_set, dicts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># metrics function using conlleval.pl</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conlleval</span><span class="params">(p, g, w, filename, script_path)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    INPUT:</span></span><br><span class="line"><span class="string">    p :: predictions</span></span><br><span class="line"><span class="string">    g :: groundtruth</span></span><br><span class="line"><span class="string">    w :: corresponding words</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    OUTPUT:</span></span><br><span class="line"><span class="string">    filename :: name of the file where the predictions</span></span><br><span class="line"><span class="string">    are written. it will be the input of conlleval.pl script</span></span><br><span class="line"><span class="string">    for computing the performance in terms of precision</span></span><br><span class="line"><span class="string">    recall and f1 score</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    OTHER:</span></span><br><span class="line"><span class="string">    script_path :: path to the directory containing the</span></span><br><span class="line"><span class="string">    conlleval.pl script</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    out = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> sl, sp, sw <span class="keyword">in</span> zip(g, p, w):</span><br><span class="line">        out += <span class="string">'BOS O O\n'</span></span><br><span class="line">        <span class="keyword">for</span> wl, wp, w <span class="keyword">in</span> zip(sl, sp, sw):</span><br><span class="line">            out += w + <span class="string">' '</span> + wl + <span class="string">' '</span> + wp + <span class="string">'\n'</span></span><br><span class="line">        out += <span class="string">'EOS O O\n\n'</span></span><br><span class="line"></span><br><span class="line">    f = open(filename, <span class="string">'w'</span>)</span><br><span class="line">    f.writelines(out)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get_perf(filename, script_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(origin, destination)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    download the corresponding atis file</span></span><br><span class="line"><span class="string">    from http://www-etud.iro.umontreal.ca/~mesnilgr/atis/</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'Downloading data from %s'</span> % origin)</span><br><span class="line">    urllib.urlretrieve(origin, destination)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_perf</span><span class="params">(filename, folder)</span>:</span></span><br><span class="line">    <span class="string">''' run conlleval.pl perl script to obtain</span></span><br><span class="line"><span class="string">    precision/recall and F1 score '''</span></span><br><span class="line">    _conlleval = os.path.join(folder, <span class="string">'conlleval.pl'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(_conlleval):</span><br><span class="line">        url = <span class="string">'http://www-etud.iro.umontreal.ca/~mesnilgr/atis/conlleval.pl'</span></span><br><span class="line">        download(url, _conlleval)</span><br><span class="line">        os.chmod(_conlleval, stat.S_IRWXU)  <span class="comment"># give the execute permissions</span></span><br><span class="line"></span><br><span class="line">    proc = subprocess.Popen([<span class="string">"perl"</span>,</span><br><span class="line">                            _conlleval],</span><br><span class="line">                            stdin=subprocess.PIPE,</span><br><span class="line">                            stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">    stdout, _ = proc.communicate(<span class="string">''</span>.join(open(filename).readlines()).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    stdout = stdout.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    out = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> stdout.split(<span class="string">'\n'</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'accuracy'</span> <span class="keyword">in</span> line:</span><br><span class="line">            out = line.split()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># To help debug</span></span><br><span class="line">    <span class="keyword">if</span> out <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(stdout.split(<span class="string">'\n'</span>))</span><br><span class="line">    precision = float(out[<span class="number">6</span>][:<span class="number">-2</span>])</span><br><span class="line">    recall = float(out[<span class="number">8</span>][:<span class="number">-2</span>])</span><br><span class="line">    f1score = float(out[<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'p'</span>: precision, <span class="string">'r'</span>: recall, <span class="string">'f1'</span>: f1score&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># start-snippet-2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RNNSLU</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">''' elman neural net model '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nh, nc, ne, de, cs)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        nh :: dimension of the hidden layer</span></span><br><span class="line"><span class="string">        nc :: number of classes</span></span><br><span class="line"><span class="string">        ne :: number of word embeddings in the vocabulary</span></span><br><span class="line"><span class="string">        de :: dimension of the word embeddings</span></span><br><span class="line"><span class="string">        cs :: word window context size</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># parameters of the model</span></span><br><span class="line">        self.emb = theano.shared(name=<span class="string">'embeddings'</span>,</span><br><span class="line">                                 value=<span class="number">0.2</span> * numpy.random.uniform(<span class="number">-1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                                 (ne+<span class="number">1</span>, de))</span><br><span class="line">                                 <span class="comment"># add one for padding at the end</span></span><br><span class="line">                                 .astype(theano.config.floatX))</span><br><span class="line">        self.wx = theano.shared(name=<span class="string">'wx'</span>,</span><br><span class="line">                                value=<span class="number">0.2</span> * numpy.random.uniform(<span class="number">-1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                                (de * cs, nh))</span><br><span class="line">                                .astype(theano.config.floatX))</span><br><span class="line">        self.wh = theano.shared(name=<span class="string">'wh'</span>,</span><br><span class="line">                                value=<span class="number">0.2</span> * numpy.random.uniform(<span class="number">-1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                                (nh, nh))</span><br><span class="line">                                .astype(theano.config.floatX))</span><br><span class="line">        self.w = theano.shared(name=<span class="string">'w'</span>,</span><br><span class="line">                               value=<span class="number">0.2</span> * numpy.random.uniform(<span class="number">-1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                               (nh, nc))</span><br><span class="line">                               .astype(theano.config.floatX))</span><br><span class="line">        self.bh = theano.shared(name=<span class="string">'bh'</span>,</span><br><span class="line">                                value=numpy.zeros(nh,</span><br><span class="line">                                dtype=theano.config.floatX))</span><br><span class="line">        self.b = theano.shared(name=<span class="string">'b'</span>,</span><br><span class="line">                               value=numpy.zeros(nc,</span><br><span class="line">                               dtype=theano.config.floatX))</span><br><span class="line">        self.h0 = theano.shared(name=<span class="string">'h0'</span>,</span><br><span class="line">                                value=numpy.zeros(nh,</span><br><span class="line">                                dtype=theano.config.floatX))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bundle</span></span><br><span class="line">        self.params = [self.emb, self.wx, self.wh, self.w,</span><br><span class="line">                       self.bh, self.b, self.h0]</span><br><span class="line">        <span class="comment"># end-snippet-2</span></span><br><span class="line">        <span class="comment"># as many columns as context window size</span></span><br><span class="line">        <span class="comment"># as many lines as words in the sentence</span></span><br><span class="line">        <span class="comment"># start-snippet-3</span></span><br><span class="line">        idxs = T.imatrix()</span><br><span class="line">        x = self.emb[idxs].reshape((idxs.shape[<span class="number">0</span>], de*cs))</span><br><span class="line">        y_sentence = T.ivector(<span class="string">'y_sentence'</span>)  <span class="comment"># labels</span></span><br><span class="line">        <span class="comment"># end-snippet-3 start-snippet-4</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recurrence</span><span class="params">(x_t, h_tm1)</span>:</span></span><br><span class="line">            h_t = T.nnet.sigmoid(T.dot(x_t, self.wx)</span><br><span class="line">                                 + T.dot(h_tm1, self.wh) + self.bh)</span><br><span class="line">            s_t = T.nnet.softmax(T.dot(h_t, self.w) + self.b)</span><br><span class="line">            <span class="keyword">return</span> [h_t, s_t]</span><br><span class="line"></span><br><span class="line">        [h, s], _ = theano.scan(fn=recurrence,</span><br><span class="line">                                sequences=x,</span><br><span class="line">                                outputs_info=[self.h0, <span class="literal">None</span>],</span><br><span class="line">                                n_steps=x.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        p_y_given_x_sentence = s[:, <span class="number">0</span>, :]</span><br><span class="line">        y_pred = T.argmax(p_y_given_x_sentence, axis=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># end-snippet-4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># cost and gradients and learning rate</span></span><br><span class="line">        <span class="comment"># start-snippet-5</span></span><br><span class="line">        lr = T.scalar(<span class="string">'lr'</span>)</span><br><span class="line"></span><br><span class="line">        sentence_nll = -T.mean(T.log(p_y_given_x_sentence)</span><br><span class="line">                               [T.arange(x.shape[<span class="number">0</span>]), y_sentence])</span><br><span class="line">        sentence_gradients = T.grad(sentence_nll, self.params)</span><br><span class="line">        sentence_updates = OrderedDict((p, p - lr*g)</span><br><span class="line">                                       <span class="keyword">for</span> p, g <span class="keyword">in</span></span><br><span class="line">                                       zip(self.params, sentence_gradients))</span><br><span class="line">        <span class="comment"># end-snippet-5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># theano functions to compile</span></span><br><span class="line">        <span class="comment"># start-snippet-6</span></span><br><span class="line">        self.classify = theano.function(inputs=[idxs], outputs=y_pred)</span><br><span class="line">        self.sentence_train = theano.function(inputs=[idxs, y_sentence, lr],</span><br><span class="line">                                              outputs=sentence_nll,</span><br><span class="line">                                              updates=sentence_updates)</span><br><span class="line">        <span class="comment"># end-snippet-6 start-snippet-7</span></span><br><span class="line">        self.normalize = theano.function(inputs=[],</span><br><span class="line">                                         updates=&#123;self.emb:</span><br><span class="line">                                                  self.emb /</span><br><span class="line">                                                  T.sqrt((self.emb**<span class="number">2</span>)</span><br><span class="line">                                                  .sum(axis=<span class="number">1</span>))</span><br><span class="line">                                                  .dimshuffle(<span class="number">0</span>, <span class="string">'x'</span>)&#125;)</span><br><span class="line">        <span class="comment"># end-snippet-7</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, x, y, window_size, learning_rate)</span>:</span></span><br><span class="line"></span><br><span class="line">        cwords = contextwin(x, window_size)</span><br><span class="line">        words = list(map(<span class="keyword">lambda</span> x: numpy.asarray(x).astype(<span class="string">'int32'</span>), cwords))</span><br><span class="line">        labels = y</span><br><span class="line"></span><br><span class="line">        self.sentence_train(words, labels, learning_rate)</span><br><span class="line">        self.normalize()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, folder)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> self.params:</span><br><span class="line">            numpy.save(os.path.join(folder,</span><br><span class="line">                       param.name + <span class="string">'.npy'</span>), param.get_value())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self, folder)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> self.params:</span><br><span class="line">            param.set_value(numpy.load(os.path.join(folder,</span><br><span class="line">                            param.name + <span class="string">'.npy'</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(param=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> param:</span><br><span class="line">        param = &#123;</span><br><span class="line">            <span class="string">'fold'</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="comment"># 5 folds 0,1,2,3,4</span></span><br><span class="line">            <span class="string">'data'</span>: <span class="string">'atis'</span>,</span><br><span class="line">            <span class="string">'lr'</span>: <span class="number">0.0970806646812754</span>,</span><br><span class="line">            <span class="string">'verbose'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'decay'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="comment"># decay on the learning rate if improvement stops</span></span><br><span class="line">            <span class="string">'win'</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="comment"># number of words in the context window</span></span><br><span class="line">            <span class="string">'nhidden'</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="comment"># number of hidden units</span></span><br><span class="line">            <span class="string">'seed'</span>: <span class="number">345</span>,</span><br><span class="line">            <span class="string">'emb_dimension'</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="comment"># dimension of word embedding</span></span><br><span class="line">            <span class="string">'nepochs'</span>: <span class="number">60</span>,</span><br><span class="line">            <span class="comment"># 60 is recommended</span></span><br><span class="line">            <span class="string">'savemodel'</span>: <span class="literal">False</span>&#125;</span><br><span class="line">    print(param)</span><br><span class="line"></span><br><span class="line">    folder_name = os.path.basename(__file__).split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">    folder = os.path.join(os.path.dirname(__file__), folder_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder):</span><br><span class="line">        os.mkdir(folder)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># load the dataset</span></span><br><span class="line">    train_set, valid_set, test_set, dic = atisfold(param[<span class="string">'fold'</span>])</span><br><span class="line"></span><br><span class="line">    idx2label = dict((k, v) <span class="keyword">for</span> v, k <span class="keyword">in</span> dic[<span class="string">'labels2idx'</span>].items())</span><br><span class="line">    idx2word = dict((k, v) <span class="keyword">for</span> v, k <span class="keyword">in</span> dic[<span class="string">'words2idx'</span>].items())</span><br><span class="line"></span><br><span class="line">    train_lex, train_ne, train_y = train_set</span><br><span class="line">    valid_lex, valid_ne, valid_y = valid_set</span><br><span class="line">    test_lex, test_ne, test_y = test_set</span><br><span class="line"></span><br><span class="line">    vocsize = len(dic[<span class="string">'words2idx'</span>])</span><br><span class="line">    nclasses = len(dic[<span class="string">'labels2idx'</span>])</span><br><span class="line">    nsentences = len(train_lex)</span><br><span class="line"></span><br><span class="line">    groundtruth_valid = [map(<span class="keyword">lambda</span> x: idx2label[x], y) <span class="keyword">for</span> y <span class="keyword">in</span> valid_y]</span><br><span class="line">    words_valid = [map(<span class="keyword">lambda</span> x: idx2word[x], w) <span class="keyword">for</span> w <span class="keyword">in</span> valid_lex]</span><br><span class="line">    groundtruth_test = [map(<span class="keyword">lambda</span> x: idx2label[x], y) <span class="keyword">for</span> y <span class="keyword">in</span> test_y]</span><br><span class="line">    words_test = [map(<span class="keyword">lambda</span> x: idx2word[x], w) <span class="keyword">for</span> w <span class="keyword">in</span> test_lex]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># instanciate the model</span></span><br><span class="line">    numpy.random.seed(param[<span class="string">'seed'</span>])</span><br><span class="line">    random.seed(param[<span class="string">'seed'</span>])</span><br><span class="line"></span><br><span class="line">    rnn = RNNSLU(nh=param[<span class="string">'nhidden'</span>],</span><br><span class="line">                 nc=nclasses,</span><br><span class="line">                 ne=vocsize,</span><br><span class="line">                 de=param[<span class="string">'emb_dimension'</span>],</span><br><span class="line">                 cs=param[<span class="string">'win'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># train with early stopping on validation set</span></span><br><span class="line">    best_f1 = -numpy.inf</span><br><span class="line">    param[<span class="string">'clr'</span>] = param[<span class="string">'lr'</span>]</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(param[<span class="string">'nepochs'</span>]):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># shuffle</span></span><br><span class="line">        shuffle([train_lex, train_ne, train_y], param[<span class="string">'seed'</span>])</span><br><span class="line"></span><br><span class="line">        param[<span class="string">'ce'</span>] = e</span><br><span class="line">        tic = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, (x, y) <span class="keyword">in</span> enumerate(zip(train_lex, train_y)):</span><br><span class="line">            rnn.train(x, y, param[<span class="string">'win'</span>], param[<span class="string">'clr'</span>])</span><br><span class="line">            print(<span class="string">'[learning] epoch %i &gt;&gt; %2.2f%%'</span> % (</span><br><span class="line">                e, (i + <span class="number">1</span>) * <span class="number">100.</span> / nsentences), end=<span class="string">' '</span>)</span><br><span class="line">            print(<span class="string">'completed in %.2f (sec) &lt;&lt;\r'</span> % (timeit.default_timer() - tic), end=<span class="string">''</span>)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># evaluation // back into the real world : idx -&gt; words</span></span><br><span class="line">        predictions_test = [map(<span class="keyword">lambda</span> x: idx2label[x],</span><br><span class="line">                            rnn.classify(numpy.asarray(</span><br><span class="line">                            contextwin(x, param[<span class="string">'win'</span>])).astype(<span class="string">'int32'</span>)))</span><br><span class="line">                            <span class="keyword">for</span> x <span class="keyword">in</span> test_lex]</span><br><span class="line">        predictions_valid = [map(<span class="keyword">lambda</span> x: idx2label[x],</span><br><span class="line">                             rnn.classify(numpy.asarray(</span><br><span class="line">                             contextwin(x, param[<span class="string">'win'</span>])).astype(<span class="string">'int32'</span>)))</span><br><span class="line">                             <span class="keyword">for</span> x <span class="keyword">in</span> valid_lex]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># evaluation // compute the accuracy using conlleval.pl</span></span><br><span class="line">        res_test = conlleval(predictions_test,</span><br><span class="line">                             groundtruth_test,</span><br><span class="line">                             words_test,</span><br><span class="line">                             folder + <span class="string">'/current.test.txt'</span>,</span><br><span class="line">                             folder)</span><br><span class="line">        res_valid = conlleval(predictions_valid,</span><br><span class="line">                              groundtruth_valid,</span><br><span class="line">                              words_valid,</span><br><span class="line">                              folder + <span class="string">'/current.valid.txt'</span>,</span><br><span class="line">                              folder)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res_valid[<span class="string">'f1'</span>] &gt; best_f1:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> param[<span class="string">'savemodel'</span>]:</span><br><span class="line">                rnn.save(folder)</span><br><span class="line"></span><br><span class="line">            best_rnn = copy.deepcopy(rnn)</span><br><span class="line">            best_f1 = res_valid[<span class="string">'f1'</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> param[<span class="string">'verbose'</span>]:</span><br><span class="line">                print(<span class="string">'NEW BEST: epoch'</span>, e,</span><br><span class="line">                      <span class="string">'valid F1'</span>, res_valid[<span class="string">'f1'</span>],</span><br><span class="line">                      <span class="string">'best test F1'</span>, res_test[<span class="string">'f1'</span>])</span><br><span class="line"></span><br><span class="line">            param[<span class="string">'vf1'</span>], param[<span class="string">'tf1'</span>] = res_valid[<span class="string">'f1'</span>], res_test[<span class="string">'f1'</span>]</span><br><span class="line">            param[<span class="string">'vp'</span>], param[<span class="string">'tp'</span>] = res_valid[<span class="string">'p'</span>], res_test[<span class="string">'p'</span>]</span><br><span class="line">            param[<span class="string">'vr'</span>], param[<span class="string">'tr'</span>] = res_valid[<span class="string">'r'</span>], res_test[<span class="string">'r'</span>]</span><br><span class="line">            param[<span class="string">'be'</span>] = e</span><br><span class="line"></span><br><span class="line">            subprocess.call([<span class="string">'mv'</span>, folder + <span class="string">'/current.test.txt'</span>,</span><br><span class="line">                            folder + <span class="string">'/best.test.txt'</span>])</span><br><span class="line">            subprocess.call([<span class="string">'mv'</span>, folder + <span class="string">'/current.valid.txt'</span>,</span><br><span class="line">                            folder + <span class="string">'/best.valid.txt'</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> param[<span class="string">'verbose'</span>]:</span><br><span class="line">                print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># learning rate decay if no improvement in 10 epochs</span></span><br><span class="line">        <span class="keyword">if</span> param[<span class="string">'decay'</span>] <span class="keyword">and</span> abs(param[<span class="string">'be'</span>]-param[<span class="string">'ce'</span>]) &gt;= <span class="number">10</span>:</span><br><span class="line">            param[<span class="string">'clr'</span>] *= <span class="number">0.5</span></span><br><span class="line">            rnn = best_rnn</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> param[<span class="string">'clr'</span>] &lt; <span class="number">1e-5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'BEST RESULT: epoch'</span>, param[<span class="string">'be'</span>],</span><br><span class="line">           <span class="string">'valid F1'</span>, param[<span class="string">'vf1'</span>],</span><br><span class="line">           <span class="string">'best test F1'</span>, param[<span class="string">'tf1'</span>],</span><br><span class="line">           <span class="string">'with the model'</span>, folder)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - 实现Contractive Auto-encoders]]></title>
      <url>http://www.wrran.com/blog/2017/03/24/howto/theano/8-contractive-auto-encoders/</url>
      <content type="html"><![CDATA[<blockquote><p>你对Theano一无所知<br>(ง •_•)ง</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分是学习用theano构建神经网络的教程。建议读者阅读原文，注意先阅读<a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a>及<a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a>部分。同时，该博文仅仅罗列出原文的完整代码（可能加上自己<strong>主观的理解</strong>），请谨慎食用。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> logistic_sgd <span class="keyword">import</span> load_data</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> tile_raster_images</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> PIL.Image <span class="keyword">as</span> image</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'wrran'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cA</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" Contractive Auto-Encoder class (cA)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The contractive autoencoder tries to reconstruct the input with an</span></span><br><span class="line"><span class="string">    additional constraint on the latent space. With the objective of</span></span><br><span class="line"><span class="string">    obtaining a robust representation of the input space, we regularize the</span></span><br><span class="line"><span class="string">    L2 norm (Froebenius) of the jacobian of the hidden representation with</span></span><br><span class="line"><span class="string">    respect to the input. Please refer to Rifai et al., 2011 for more details.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If x is the input then</span></span><br><span class="line"><span class="string">    equation (1) computes the projection of the input into the latent space h.</span></span><br><span class="line"><span class="string">    equation (2) computes the jacobian of h with respect to x.</span></span><br><span class="line"><span class="string">    equation (3) computes the reconstruction of the input.</span></span><br><span class="line"><span class="string">    equation (4) computes the reconstruction error and the added</span></span><br><span class="line"><span class="string">    regularization trem from Eq. (2).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. math::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       h_i = s(W_i x + b_i)                                           (1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       J_i = h_i (1 - h_i) * W_i                                      (2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       x' = s(W' h + b')                                              (3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       L = -sum_&#123;k=1&#125;^d [x_k \log x'_k + (1-x_k) \log (1-x'_k)]</span></span><br><span class="line"><span class="string">           + lambda * sum_&#123;i=1&#125;^d sum_&#123;j=1&#125;^n J_&#123;ij&#125;^2                (4)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 numpy_rng,</span></span></span><br><span class="line"><span class="function"><span class="params">                 input=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 n_visible=<span class="number">784</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 n_hidden=<span class="number">100</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 n_batchsize=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 W=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 bhid=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 bvis=None)</span>:</span></span><br><span class="line">        <span class="string">""" Initialize the cA class by specifying the number of visible units</span></span><br><span class="line"><span class="string">        (the dimension d of the input), the number of hidden units (the</span></span><br><span class="line"><span class="string">        dimension d' of the latent or hidden space) and the contraction level.</span></span><br><span class="line"><span class="string">        The constructor also receives symbolic variables for the input,</span></span><br><span class="line"><span class="string">        weights and bias.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type numpy_rng: numpy.random.RandomState</span></span><br><span class="line"><span class="string">        :param numpy_rng: number random generator used to generate weights</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type input: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param input: a symbolic description of the input or None for</span></span><br><span class="line"><span class="string">        standalone cA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_visible: int</span></span><br><span class="line"><span class="string">        :param n_visible: number of visible units</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_hidden: int</span></span><br><span class="line"><span class="string">        :param n_hidden: number of hidden units</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_batchsize: int</span></span><br><span class="line"><span class="string">        :param n_batchsize: number of examples per batch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type W: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param W: Theano variable pointing to a set of weights that should be</span></span><br><span class="line"><span class="string">        shared belong the dA and another architecture; if dA should be</span></span><br><span class="line"><span class="string">        standalone set this to None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type bhid: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param bhid: Theano variable pointing to a set of biases values (for</span></span><br><span class="line"><span class="string">        hidden units) that should be shared belong dA and another</span></span><br><span class="line"><span class="string">        architecture; if dA should be standalone set this to None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type bvis: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param bvis: Theano variable pointing to a set of biaes values (for</span></span><br><span class="line"><span class="string">        visible units) that should be shared belong dA and another</span></span><br><span class="line"><span class="string">        architecture; if dA should be standalone set this to None.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.n_visible = n_visible</span><br><span class="line">        self.n_hidden = n_hidden</span><br><span class="line">        self.n_batchsize = n_batchsize</span><br><span class="line">        <span class="comment"># note: W' was written as `W_prime` and b' as `b_prime`</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> W:</span><br><span class="line">            <span class="comment"># W is initialized with `initial_W` which is uniformely sampled</span></span><br><span class="line">            <span class="comment"># from -4*sqrt(6./(n_visible+n_hidden)) and</span></span><br><span class="line">            <span class="comment"># 4*sqrt(6./(n_hidden+n_visible))the output of uniform if</span></span><br><span class="line">            <span class="comment"># converted using asarray to dtype</span></span><br><span class="line">            <span class="comment"># theano.config.floatX so that the code is runable on GPU</span></span><br><span class="line">            initial_W = numpy.asarray(</span><br><span class="line">                numpy_rng.uniform(</span><br><span class="line">                    low=<span class="number">-4</span> * numpy.sqrt(<span class="number">6.</span> / (n_hidden + n_visible)),</span><br><span class="line">                    high=<span class="number">4</span> * numpy.sqrt(<span class="number">6.</span> / (n_hidden + n_visible)),</span><br><span class="line">                    size=(n_visible, n_hidden)</span><br><span class="line">                ),</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            )</span><br><span class="line">            W = theano.shared(value=initial_W, name=<span class="string">'W'</span>, borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bvis:</span><br><span class="line">            bvis = theano.shared(value=numpy.zeros(n_visible,</span><br><span class="line">                                                   dtype=theano.config.floatX),</span><br><span class="line">                                 borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bhid:</span><br><span class="line">            bhid = theano.shared(value=numpy.zeros(n_hidden,</span><br><span class="line">                                                   dtype=theano.config.floatX),</span><br><span class="line">                                 name=<span class="string">'b'</span>,</span><br><span class="line">                                 borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.W = W</span><br><span class="line">        <span class="comment"># b corresponds to the bias of the hidden</span></span><br><span class="line">        self.b = bhid</span><br><span class="line">        <span class="comment"># b_prime corresponds to the bias of the visible</span></span><br><span class="line">        self.b_prime = bvis</span><br><span class="line">        <span class="comment"># tied weights, therefore W_prime is W transpose</span></span><br><span class="line">        self.W_prime = self.W.T</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if no input is given, generate a variable representing the input</span></span><br><span class="line">        <span class="keyword">if</span> input <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># we use a matrix because we expect a minibatch of several</span></span><br><span class="line">            <span class="comment"># examples, each example being a row</span></span><br><span class="line">            self.x = T.dmatrix(name=<span class="string">'input'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.x = input</span><br><span class="line"></span><br><span class="line">        self.params = [self.W, self.b, self.b_prime]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_hidden_values</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        <span class="string">""" Compute the values of the hidden layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        h_i = s(W_i x + b_i)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> T.nnet.sigmoid(T.dot(input, self.W) + self.b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_jacobian</span><span class="params">(self, hidden, W)</span>:</span></span><br><span class="line">        <span class="string">""" Computes the jacobian of the hidden layer with respect to the</span></span><br><span class="line"><span class="string">        input, reshapes are necessary for broadcasting the element-wise</span></span><br><span class="line"><span class="string">        product on the right axis.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        J_i = h_i (1 - h_i) * W_i</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        first_term = T.reshape(hidden * (<span class="number">1</span> - hidden),</span><br><span class="line">                               (self.n_batchsize, <span class="number">1</span>, self.n_hidden))</span><br><span class="line">        second_term = T.reshape(W,</span><br><span class="line">                                (<span class="number">1</span>, self.n_visible, self.n_hidden))</span><br><span class="line">        <span class="keyword">return</span> first_term * second_term</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_reconstructed_input</span><span class="params">(self, hidden)</span>:</span></span><br><span class="line">        <span class="string">""" Computes the reconstructed input given the values of the hidden</span></span><br><span class="line"><span class="string">        layer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        x' = s(W' h + b')</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> T.nnet.sigmoid(T.dot(hidden, self.W_prime) + self.b_prime)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cost_updates</span><span class="params">(self, contraction_level, learning_rate)</span>:</span></span><br><span class="line">        <span class="string">""" This function computes the cost and the updates for one training</span></span><br><span class="line"><span class="string">        step of the cA.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        y = self.get_hidden_values(self.x)</span><br><span class="line">        z = self.get_reconstructed_input(y)</span><br><span class="line">        J = self.get_jacobian(y, self.W)</span><br><span class="line">        <span class="comment"># note : We sum over the size of a datapoint; if we are using</span></span><br><span class="line">        <span class="comment"># minibatches, L will be a vector, with one entry pre example in</span></span><br><span class="line">        <span class="comment"># minibatch</span></span><br><span class="line">        self.L_rec = - T.sum(</span><br><span class="line">            self.x * T.log(z) + (<span class="number">1</span> - self.x) * T.log(<span class="number">1</span>-z),</span><br><span class="line">            axis=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># compute the jacobian and average over the number of samples/minibatch</span></span><br><span class="line">        self.L_jacob = T.sum(J ** <span class="number">2</span>) // self.n_batchsize</span><br><span class="line"></span><br><span class="line">        <span class="comment"># note: L is now a vector, where each element is the cross-entropy</span></span><br><span class="line">        <span class="comment"># cost of the reconstruction of the corresponding example of the</span></span><br><span class="line">        <span class="comment"># minibatch. We need to compute the average of all these to get the</span></span><br><span class="line">        <span class="comment"># cost of the minibatch.</span></span><br><span class="line">        cost = T.mean(self.L_rec) + contraction_level * T.mean(self.L_jacob)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute the gradients of the cost of the `cA` with respect to its</span></span><br><span class="line">        <span class="comment"># parameters</span></span><br><span class="line">        g_params = T.grad(cost, self.params)</span><br><span class="line">        <span class="comment"># generate the list of updates</span></span><br><span class="line">        updates = []</span><br><span class="line">        <span class="keyword">for</span> param, g_param <span class="keyword">in</span> zip(self.params, g_params):</span><br><span class="line">            updates.append(</span><br><span class="line">                    (param, param - learning_rate * g_param)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cost, updates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_cA</span><span class="params">(learning_rate=<span class="number">0.01</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            training_epochs=<span class="number">20</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            dataset=<span class="string">'mnist.pkl.gz'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            batch_size=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            output_folder=<span class="string">'cA_plots'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            contraction_level=<span class="number">.1</span>)</span>:</span></span><br><span class="line">    <span class="string">""" This demo is tested on MNIST.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type learning_rate: float</span></span><br><span class="line"><span class="string">    :param learning_rate: learning rate used for training the contracting</span></span><br><span class="line"><span class="string">    AutoEncoder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type training_epochs: int</span></span><br><span class="line"><span class="string">    :param training_epochs: number of epochs used for training</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type dataset: string</span></span><br><span class="line"><span class="string">    :param dataset: path to the picked dataset</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    datasets = load_data(dataset)</span><br><span class="line">    train_set_x, train_set_y = datasets[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute number of minibatches for training, validation and testing</span></span><br><span class="line">    n_train_batches = train_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># allocate symbolic variables for the data</span></span><br><span class="line">    index = T.lscalar()  <span class="comment"># index to a [mini]batch</span></span><br><span class="line">    x = T.matrix(<span class="string">'x'</span>)  <span class="comment"># the data is presented as rasterized images</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(output_folder):</span><br><span class="line">        os.makedirs(output_folder)</span><br><span class="line">    os.chdir(output_folder)</span><br><span class="line"></span><br><span class="line">    <span class="comment">######################</span></span><br><span class="line">    <span class="comment"># BUILDING THE MODEL #</span></span><br><span class="line">    <span class="comment">######################</span></span><br><span class="line">    rng = numpy.random.RandomState(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">    ca = cA(numpy_rng=rng,</span><br><span class="line">            input=x,</span><br><span class="line">            n_visible=<span class="number">28</span> * <span class="number">28</span>,</span><br><span class="line">            n_hidden=<span class="number">500</span>,</span><br><span class="line">            n_batchsize=batch_size)</span><br><span class="line"></span><br><span class="line">    cost, updates = ca.get_cost_updates(contraction_level=contraction_level,</span><br><span class="line">                                        learning_rate=learning_rate)</span><br><span class="line"></span><br><span class="line">    train_ca = theano.function(</span><br><span class="line">        [index],</span><br><span class="line">        [T.mean(ca.L_rec), ca.L_jacob],</span><br><span class="line">        updates=updates,</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: train_set_x[</span><br><span class="line">                index * batch_size: (index + <span class="number">1</span>) * batch_size</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="comment"># TRAINING #</span></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># go through training epochs</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line">        <span class="comment"># go through training set</span></span><br><span class="line">        c = []</span><br><span class="line">        <span class="keyword">for</span> batch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">            c.append(train_ca(batch_index))</span><br><span class="line"></span><br><span class="line">        c_array = numpy.vstack(c)</span><br><span class="line">        print(<span class="string">'Training epoch %d, reconstruction cost '</span> % epoch,</span><br><span class="line">              numpy.mean(c_array[<span class="number">0</span>]),</span><br><span class="line">              <span class="string">' jacobian norm '</span>,</span><br><span class="line">              numpy.mean(numpy.sqrt(c_array[<span class="number">1</span>]))</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    training_time = (end_time - start_time)</span><br><span class="line"></span><br><span class="line">    print((<span class="string">'The code for file '</span> + os.path.split(__file__)[<span class="number">1</span>] +</span><br><span class="line">           <span class="string">' ran for %.2fm'</span> % (training_time / <span class="number">60.</span>)),</span><br><span class="line">          file=sys.stderr)</span><br><span class="line">    image = Image.fromarray(tile_raster_images(</span><br><span class="line">        X=ca.W.get_value(borrow=<span class="literal">True</span>).T,</span><br><span class="line">        img_shape=(<span class="number">28</span>, <span class="number">28</span>),</span><br><span class="line">        tile_shape=(<span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">        tile_spacing=(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    ))</span><br><span class="line">    image.save(<span class="string">'cae_filters.png'</span>)</span><br><span class="line"></span><br><span class="line">    os.chdir(<span class="string">'../'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_cA()</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How bad is China's communism?]]></title>
      <url>http://www.wrran.com/blog/2017/03/23/people-say/170323-01/</url>
      <content type="html"><![CDATA[<blockquote><p>暗爽^_-</p></blockquote><a id="more"></a><p>该问题转载自<a href="https://www.quora.com/How-bad-is-Chinas-communism" target="_blank" rel="noopener">Quora - How bad is China’s communism?</a></p><hr><p>@<a href="https://www.quora.com/How-bad-is-Chinas-communism/answer/Robin-Daverman?srid=huVq3" target="_blank" rel="noopener">Robin Daverman, World traveler</a></p><blockquote><p>Well, China’s communism is still bad enough that Xi is paid around 22,000 USD a year as the President of China. The salaries of all Chinese government officials and employees are public. A mayor of a small Chinese city may be managing 20 USD billion government budget a year on a personal salary of 10,000 USD a year. A US Senator is paid 174,000 USD a year. A Chinese Congressman is a part-time job paying a big fat 0 USD. The idea behind it is that if you don’t have a regular job, how can you represent the regular people?</p></blockquote><blockquote><p>The President of Singapore is paid 1.7 USD million a year. Obama, the President of the U. S. is paid 400,000 USD a year, with additional perks such as Air Force One. Angela Merkel, the Chancellor of Germany, gets ~ 234,000 USD a year. The President of Congo is paid 110,000 USD a year, while the GDP per capita in Congo is less than 500 USD a year. The President of China, managing 1.4 billion people and 2.2 trillion government budget, gets paid 22,000 USD a year without perks like an official airplane. Communist parties are supposed to have solidarity with the labor, and government officials are supposed to be public servants. So it’s simply not politically possible to pay government employees above average salary. Average Chinese Getting Richer If you think of China as an investment fund, its management cost is exceedingly low. Next time Xi refuses to fork over more money for the UN because “China is a developing, third-world country”, you should know that he totally, sincerely, means it. That’s how you would feel if you live on 22,000 USD a year as the Head of the State.</p></blockquote><blockquote><p>China’s communism is also bad enough that both healthcare and education cost very little. China spends ~ 730 USD per capita in healthcare to reach average life expectancy of 76.1 years (from average life expectancy of 36 years in 1949) (List of countries by life expectancy, China) and 4.15% of GDP on education while providing 96%+ literacy rate, free 9-year education, and pumping out 8 million college graduates a year (from 20% literacy rate in 1950), while becoming a rising powerhouse in science. The price-to-performance ratio is astoundingly good. In comparison, the U.S. spends ~ 10,000 USD per capita a year on healthcare, and achieving life expectancy of 78.8 years.</p></blockquote><blockquote><p>China’s communism is also bad enough that you some times see weird stuff happening, like some average Joe volunteers to risk his life for others just because he is a member of the Communist Party. Like these guys below.</p></blockquote><blockquote><p>These guys volunteered to stay working on the dam during the flood to give other people a chance to survive. They viewed it as a duty as members of the CCP. Similar things happen every year. It is especially weird because China has been rock solid atheist since like ~ 500 BC. For the past 2500 years, the Chinese have never prayed to God when facing death. They just write a poem or a letter to their family, a remembrance of their lives. So it’s not like those people believe they are going to heaven or anything. Still, China just seems to have an endless supply of people who happily risk their lives for their communities.</p></blockquote><blockquote><p>Sometimes you have to ask what Communism is exactly? By the U.S. standard, China has been communist since ~ 500 BC, when Confucius (551 – 479 BC) proclaimed that “the world belongs to the Public”, and Mencius (372 – 289 BC) proclaimed “men who have no compassion do not deserve to be called human”. There was even a proto-CCP organization, led by Mozi (ca. 470 – ca. 391 BC), who was an atheist technocrat who advocated that people should just love each other the same way they love their own families (“universal love”). The nation did not belong to the emperor. The emperor was the country manager, and when he managed the country badly, he had to apologize to the People. You will find emperors writing “Letter of Apology”, which were then publicized all over the country for the People to know, since 89 BC. The incompetent emperors sometimes had to write half a dozen Letters of Apology to the People during their terms. In comparison, the European kings only ever apologize to the Church, and do so exceedingly rarely, but never to their people.</p></blockquote><blockquote><p>By Chinese standard, however, China is so far away from Communism that she’s practically on the other side of the earth. Being poor is not communism. Communism means being rich together. The whole point of getting rid of the emperors was because people disliked inequality. When Deng introduced market reform, he promised to “let some people get rich first”, meaning later on the wealthy people will help the poor people get rich too. With the rising income inequality, the Chinese are getting very anxious. By 2014, the Chinese have ranked Income Inequality as the No. 1 concern of the country. China’s Income Inequality Surpasses U.S., Posing Risk for Xi In part, the Xi et. al. were brought on to tackle this problem. Their approach of reducing rural poverty by increasing urbanization seems to be working. Up on the farm Still, if you ask a Chinese if China is communist, he’ll laugh his socks off - “I’m still so poor and the society is so unequal!” - the notion that China is in anyway communistic is beyond ridiculous. They’d say that the country that’s closest to communism is Sweden, and a good Communist is probably somebody like Bill Gates, who led his team to create a lot of wealth, and then willing to give 99% of it away to help other people get rich. In fact, quite a number of Chinese communists have been giving their entire personal wealth away on things like education for poor kids.</p></blockquote><hr>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> china </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写出Pythonic代码]]></title>
      <url>http://www.wrran.com/blog/2017/03/15/howto/python/pythonic-code/</url>
      <content type="html"><![CDATA[<blockquote><p><strong>Pythonic</strong> means code that doesn’t just get the syntax right but that follows the conventions of the Python community and uses the language in the way it is intended to be used.</p></blockquote><p>想说还没说的有很多，攒着是为了写成博客</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一言以蔽之，使用<strong>Pythonic Code</strong>会使你的代码更加优雅，也更加高效。</p><h1 id="性能相关"><a href="#性能相关" class="headerlink" title="性能相关"></a>性能相关</h1><h2 id="多使用内置函数"><a href="#多使用内置函数" class="headerlink" title="多使用内置函数"></a>多使用内置函数</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># count elements in a list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 26.5ms</span></span><br><span class="line">how_many = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> ONE_MILLLION_ELEMENTS:</span><br><span class="line">    how_many += <span class="number">1</span></span><br><span class="line">print(how_many)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 96.7ns</span></span><br><span class="line">print(len(ONE_MILLION_ELEMENTS))</span><br></pre></td></tr></table></figure><h2 id="使用列表解析式"><a href="#使用列表解析式" class="headerlink" title="使用列表解析式"></a>使用列表解析式</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter a list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 222ms</span></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> MILLION_NUMBERS:</span><br><span class="line">    <span class="keyword">if</span> element % <span class="number">2</span>:</span><br><span class="line">        output.append(element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 234ms</span></span><br><span class="line">list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span>, MILLION_NUMBERS))</span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 127ms</span></span><br><span class="line">[item <span class="keyword">for</span> item <span class="keyword">in</span> MILLION_NUMBERS <span class="keyword">if</span> item % <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="多使用try-except而不是if"><a href="#多使用try-except而不是if" class="headerlink" title="多使用try/except而不是if"></a>多使用<code>try/except</code>而不是<code>if</code></h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permissions or forgiveness ?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 149ns</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    hello = <span class="string">'world'</span></span><br><span class="line">foo = Foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hasattr(foo, <span class="string">'hello'</span>):</span><br><span class="line">    foo.hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 43.1ns</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    foo.hello</span><br><span class="line"><span class="keyword">except</span> AttributeError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="选用合适的数据结构"><a href="#选用合适的数据结构" class="headerlink" title="选用合适的数据结构"></a>选用合适的数据结构</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># membership testing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 18ms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_number</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> MILLION_NUMBERS:</span><br><span class="line">        <span class="keyword">if</span> item == number:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 8.45ms</span></span><br><span class="line"><span class="number">500000</span> <span class="keyword">in</span> MILLION_NUMBERS</span><br><span class="line"></span><br><span class="line">MILLION_SET = set(MILLION_NUMBERS)  <span class="comment"># time: 106ms</span></span><br><span class="line"><span class="number">100</span> <span class="keyword">in</span> MILLION_SET  <span class="comment"># time: 46.3ns</span></span><br><span class="line"><span class="number">999999</span> <span class="keyword">in</span> MILLION_SET  <span class="comment"># time: 63.3ns</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># remove duplicates</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 8.29s</span></span><br><span class="line">unique = []</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> MILLION_ELEMENTS:</span><br><span class="line">    <span class="keyword">if</span> element <span class="keyword">not</span> <span class="keyword">in</span> unique:</span><br><span class="line">        unique.append(element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 19.3ms</span></span><br><span class="line">set(MILLION_ELEMENTS)</span><br></pre></td></tr></table></figure><h2 id="避免产生不必要的数据-操作"><a href="#避免产生不必要的数据-操作" class="headerlink" title="避免产生不必要的数据/操作"></a>避免产生不必要的数据/操作</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list sorting</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 467ms</span></span><br><span class="line">sorted(MILLION_RANDOM_NUMBERS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 77.6ms</span></span><br><span class="line">MILLION_RANDOM_NUMBERS.sort()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1000 operations and 1 function</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 399us</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> number ** <span class="number">2</span></span><br><span class="line">squares = [square(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 314us</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_squares</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># checking for true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 35.8ns</span></span><br><span class="line"><span class="keyword">if</span> variable == <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 28.7ns</span></span><br><span class="line"><span class="keyword">if</span> variable <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 20.6ns</span></span><br><span class="line"><span class="keyword">if</span> variable:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment"># checking for false #</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 35.1ns</span></span><br><span class="line"><span class="keyword">if</span> variable == <span class="literal">False</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 26.9ns</span></span><br><span class="line"><span class="keyword">if</span> variable <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 19.8ns</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> variable:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="多使用语法糖"><a href="#多使用语法糖" class="headerlink" title="多使用语法糖"></a>多使用语法糖</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list() or []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 104ns</span></span><br><span class="line">list()</span><br><span class="line"></span><br><span class="line"><span class="comment"># time: 22.5ns</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h1 id="Pythonic-Code"><a href="#Pythonic-Code" class="headerlink" title="Pythonic Code"></a>Pythonic Code</h1><h2 id="使用xrange-range"><a href="#使用xrange-range" class="headerlink" title="使用xrange/range"></a>使用<code>xrange</code>/<code>range</code></h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">print</span> i ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="comment"># BETTER #</span></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">print</span> i ** <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="遍历序列"><a href="#遍历序列" class="headerlink" title="遍历序列"></a>遍历序列</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(colors)):</span><br><span class="line">    <span class="keyword">print</span> colors[i]</span><br><span class="line"></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="comment"># BETTER #</span></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    <span class="keyword">print</span> color</span><br></pre></td></tr></table></figure><h2 id="反向遍历"><a href="#反向遍历" class="headerlink" title="反向遍历"></a>反向遍历</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(colors)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">print</span> colors[i]</span><br><span class="line"></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="comment"># BETTER #</span></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> reversed(colors):</span><br><span class="line">    <span class="keyword">print</span> color</span><br></pre></td></tr></table></figure><h2 id="遍历元素与索引"><a href="#遍历元素与索引" class="headerlink" title="遍历元素与索引"></a>遍历元素与索引</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(colors)):</span><br><span class="line">    <span class="keyword">print</span> i, <span class="string">'---&gt;'</span>, colors[i]</span><br><span class="line"></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="comment"># BETTER #</span></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">for</span> i, color <span class="keyword">in</span> enumerate(colors):</span><br><span class="line">    <span class="keyword">print</span> i, <span class="string">'---&gt;'</span>, color</span><br></pre></td></tr></table></figure><h2 id="遍历多个列表"><a href="#遍历多个列表" class="headerlink" title="遍历多个列表"></a>遍历多个列表</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"></span><br><span class="line">n = min(len(names), len(colors))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">print</span> names[i], <span class="string">'---&gt;'</span>, colors[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> zip(names, colors):</span><br><span class="line">    <span class="keyword">print</span> name, <span class="string">'---&gt;'</span>, color</span><br><span class="line"></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="comment"># BETTER #</span></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> izip(names, colors):</span><br><span class="line">    <span class="keyword">print</span> name, <span class="string">'---&gt;'</span>, color</span><br></pre></td></tr></table></figure><p>注：<code>zip</code>会生成一个新的列表，使用更多的内存；<code>izip</code>会生成一个生成器，节省内存。在Python3中，<code>izip</code>被重命名为<code>zip</code>。</p><h2 id="遍历并排序"><a href="#遍历并排序" class="headerlink" title="遍历并排序"></a>遍历并排序</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># forward sorted order</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> sorted(colors):</span><br><span class="line">    <span class="keyword">print</span> colors</span><br><span class="line"></span><br><span class="line"><span class="comment"># backwards sorted order</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> sorted(colors, reverse=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">print</span> color</span><br><span class="line"></span><br><span class="line"><span class="comment">##########</span></span><br><span class="line"><span class="comment"># BETTER #</span></span><br><span class="line"><span class="comment">##########</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.youtube.com/watch%3Ffeature%3Dplayer_embedded%26v%3DOSGv2VnC0go" target="_blank" rel="noopener">YouTube传送门</a><br><a href="http://switowski.github.io/europython2016/#/" target="_blank" rel="noopener">相关PPT</a><br><a href="https://zhuanlan.zhihu.com/p/25715093" target="_blank" rel="noopener">知乎专栏</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
            <category> code guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - 实现Restricted Boltzmann Machines]]></title>
      <url>http://www.wrran.com/blog/2017/03/14/howto/theano/7-restricted-boltzmann-machines/</url>
      <content type="html"><![CDATA[<blockquote><p>你对Theano一无所知<br>(ง •_•)ง</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分是学习用theano构建神经网络的教程。建议读者阅读原文，注意先阅读<a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a>及<a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a>部分。同时，该博文仅仅罗列出原文的完整代码（可能加上自己<strong>主观的理解</strong>），请谨慎食用。</p><h1 id="存疑"><a href="#存疑" class="headerlink" title="存疑"></a>存疑</h1><p>[ ] 不了解RBM模型<br>[ ] 不了解Theano内部优化算法，不明白为什么在<code>propup</code>/<code>propdown</code>返回结果<br>总之，得再看一次</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment"># created 2017/3/14</span></span><br><span class="line"><span class="string">""" Restricted Boltzmann Machines</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> PIL.Image <span class="keyword">as</span> Image</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> theano.sandbox.rng_mrg <span class="keyword">import</span> MRG_RandomStreams <span class="keyword">as</span> RandomStreams</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> tile_raster_images</span><br><span class="line"><span class="keyword">from</span> logistic_sgd <span class="keyword">import</span> load_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RBM</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" Restricted Boltzman Machine (RBM) """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            self,</span></span></span><br><span class="line"><span class="function"><span class="params">            input=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            n_visible=<span class="number">28</span> * <span class="number">28</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            n_hidden=<span class="number">500</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            W=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            hbias=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            vbias=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            numpy_rng=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            theano_rng=None</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>:</span></span><br><span class="line">        <span class="string">""" RBM constructor.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Define the parameters of the model along with basic operation for</span></span><br><span class="line"><span class="string">        inferring hidden from visible (and vice-versa), as well as for</span></span><br><span class="line"><span class="string">        performing CD updates.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type input: None or theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param input: None for standalone RBMs or symbolic variable if RBM is</span></span><br><span class="line"><span class="string">        part of a larger graph.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_visible: int</span></span><br><span class="line"><span class="string">        :param n_visible: number of visible units</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_hidden: int</span></span><br><span class="line"><span class="string">        :param n_hidden: number of hidden units</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type W: None or theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param W: None for standalone RBMs or symbolic variable pointing to a</span></span><br><span class="line"><span class="string">         shared weight matrix in case RBM is part of a DBN network; in a DBN,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type hbias: None or theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param hbias: None for standalone RBMs or symbolic variable pointing</span></span><br><span class="line"><span class="string">        to a shared hidden units bias vector in case RBM is part of a different</span></span><br><span class="line"><span class="string">        network</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type vbias: None or theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param vbias: None for standaloe RBMs or a symbolic variable pointing</span></span><br><span class="line"><span class="string">         to a shared visible unit bias</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type numpy_rng: None or numpy.random.RandomState</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type theano_rng: None or theano.sandbox.rng_mrg.MRG_RandomStreams</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.n_visible = n_visible</span><br><span class="line">        self.n_hidden = n_hidden</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> numpy_rng <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># create a number generator</span></span><br><span class="line">            numpy_rng = numpy.random.RandomState(<span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> theano_rng <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            theano_rng = RandomStreams(numpy_rng.randint(<span class="number">2</span> ** <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> W <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            initial_W = numpy.asarray(</span><br><span class="line">                numpy_rng.uniform(</span><br><span class="line">                    low=<span class="number">-4</span> * numpy.sqrt(<span class="number">6.</span> / (n_hidden + n_visible)),</span><br><span class="line">                    high=<span class="number">4</span> * numpy.sqrt(<span class="number">6.</span> / (n_hidden + n_visible)),</span><br><span class="line">                    size=(n_visible, n_hidden)</span><br><span class="line">                ),</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># theano shared variables for weights and biases</span></span><br><span class="line">            W = theano.shared(value=initial_W, name=<span class="string">'W'</span>, borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hbias <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># create shared variable for hidden units bias</span></span><br><span class="line">            hbias = theano.shared(</span><br><span class="line">                value=numpy.zeros(</span><br><span class="line">                    n_hidden,</span><br><span class="line">                    dtype=theano.config.floatX</span><br><span class="line">                ),</span><br><span class="line">                name=<span class="string">'hbias'</span>,</span><br><span class="line">                borrow=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> vbias <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># create shared variable for visible units bias</span></span><br><span class="line">            vbias = theano.shared(</span><br><span class="line">                value=numpy.zeros(</span><br><span class="line">                    n_visible,</span><br><span class="line">                    dtype=theano.config.floatX</span><br><span class="line">                ),</span><br><span class="line">                name=<span class="string">'vbias'</span>,</span><br><span class="line">                borrow=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialize input layer for standalone RBM or layer0 of DBN</span></span><br><span class="line">        self.input = input</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> input:</span><br><span class="line">            self.input = T.matrix(<span class="string">'input'</span>)</span><br><span class="line"></span><br><span class="line">        self.W = W</span><br><span class="line">        self.hbias = hbias</span><br><span class="line">        self.vbias = vbias</span><br><span class="line">        self.theano_rng = theano_rng</span><br><span class="line">        <span class="comment"># **** WARNING: It is not a good idea to put things in this list</span></span><br><span class="line">        <span class="comment"># other than shared variables created in this function</span></span><br><span class="line">        self.params = [self.W, self.hbias, self.vbias]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free_energy</span><span class="params">(self, v_sample)</span>:</span></span><br><span class="line">        <span class="string">""" Function to compute the free energy. """</span></span><br><span class="line">        wx_b = T.dot(v_sample, self.W) + self.hbias</span><br><span class="line">        vbias_term = T.dot(v_sample, self.vbias)</span><br><span class="line">        hidden_term = T.sum(T.log(<span class="number">1</span> + T.exp(wx_b)), axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> -hidden_term, -vbias_term</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">propup</span><span class="params">(self, vis)</span>:</span></span><br><span class="line">        <span class="string">""" This function propagates the visible units activation upwards to</span></span><br><span class="line"><span class="string">        the hidden units.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note that we return also the pre-sigmoid activation of the layer. As</span></span><br><span class="line"><span class="string">        it will turn out later, due to how Theano deals with optimizations,</span></span><br><span class="line"><span class="string">        this symbolic variable will be needed to write demo a more stable</span></span><br><span class="line"><span class="string">        computational graph (see details in the reconstruction cost function).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pre_sigmoid_activation = T.dot(vis, self.W) + self.hbias</span><br><span class="line">        <span class="keyword">return</span> [pre_sigmoid_activation, T.nnet.sigmoid(pre_sigmoid_activation)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sample_h_given_v</span><span class="params">(self, v0_sample)</span>:</span></span><br><span class="line">        <span class="string">""" This function infers state of hidden units given visible units. """</span></span><br><span class="line">        <span class="comment"># compute the activation of the hidden units given a sample of the</span></span><br><span class="line">        <span class="comment"># visible</span></span><br><span class="line">        pre_sigmoid_h1, h1_mean = self.propup(v0_sample)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get a sample of the hidden given their activation</span></span><br><span class="line">        <span class="comment"># Note that theano_rng.binomial returns a symbolic sample of dtype</span></span><br><span class="line">        <span class="comment"># int64 by default. If we want to keep our computations in floatX for</span></span><br><span class="line">        <span class="comment">#  the GPU we need to specify to return the dtype floatX.</span></span><br><span class="line">        h1_sample = self.theano_rng.binomial(size=h1_mean.shape,</span><br><span class="line">                                             n=<span class="number">1</span>, p=h1_mean,</span><br><span class="line">                                             dtype=theano.config.floatX)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [pre_sigmoid_h1, h1_mean, h1_sample]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">propdown</span><span class="params">(self, hid)</span>:</span></span><br><span class="line">        <span class="string">""" This function propagates the hidden units activation downwards to</span></span><br><span class="line"><span class="string">        to the visible units.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note that we return also the pre_sigmoid_activation of the layer. As</span></span><br><span class="line"><span class="string">        it will turn out later, due to how Theano deals with optimizations,</span></span><br><span class="line"><span class="string">        this symbolic variable will be needed to write down a more stable</span></span><br><span class="line"><span class="string">        computational graph (see details in the reconstruction cost function)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pre_sigmoid_activation = T.dot(hid, self.W.T) + self.vbias</span><br><span class="line">        <span class="keyword">return</span> [pre_sigmoid_activation, T.nnet.sigmoid(pre_sigmoid_activation)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sample_v_given_h</span><span class="params">(self, h0_sample)</span>:</span></span><br><span class="line">        <span class="string">""" This function infers state of visible units given hidden units. """</span></span><br><span class="line">        <span class="comment"># compute the activation of the visible given the hidden sample</span></span><br><span class="line">        pre_sigmoid_v1, v1_mean = self.propdown(h0_sample)</span><br><span class="line">        <span class="comment"># get a sample of the visible given their activation</span></span><br><span class="line">        <span class="comment"># Note that theano_rng.binomial returns a symbolic sample of dtype</span></span><br><span class="line">        <span class="comment"># int64 by default. If we want to keep our computations in floatX for</span></span><br><span class="line">        <span class="comment">#  the GPU we need to specify to return the dtype floatX.</span></span><br><span class="line">        v1_sample = self.theano_rng.binomial(size=v1_mean.shape,</span><br><span class="line">                                             n=<span class="number">1</span>, p=v1_mean,</span><br><span class="line">                                             dtype=theano.config.floatX)</span><br><span class="line">        <span class="keyword">return</span> [pre_sigmoid_v1, v1_mean, v1_sample]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gibbs_hvh</span><span class="params">(self, h0_sample)</span>:</span></span><br><span class="line">        <span class="string">""" This function implements one step of Gibbs sampling, starting</span></span><br><span class="line"><span class="string">        from the hidden state.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pre_sigmoid_v1, v1_mean, v1_sample = self.sample_v_given_h(h0_sample)</span><br><span class="line">        pre_sigmoid_h1, h1_mean, h1_sample = self.sample_h_given_v(v1_sample)</span><br><span class="line">        <span class="keyword">return</span> [pre_sigmoid_v1, v1_mean, v1_sample,</span><br><span class="line">                pre_sigmoid_h1, h1_mean, h1_mean]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gibbs_vhv</span><span class="params">(self, v0_sample)</span>:</span></span><br><span class="line">        <span class="string">""" This function implements one step of Gibbs sampling, starting</span></span><br><span class="line"><span class="string">        from the visible state."""</span></span><br><span class="line">        pre_sigmoid_h1, h1_mean, h1_sample = self.sample_h_given_v(v0_sample)</span><br><span class="line">        pre_sigmoid_v1, v1_mean, v1_sample = self.sample_v_given_h(h1_sample)</span><br><span class="line">        <span class="keyword">return</span> [pre_sigmoid_h1, h1_mean, h1_sample,</span><br><span class="line">                pre_sigmoid_v1, v1_mean, v1_sample]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cost_updates</span><span class="params">(self, lr=<span class="number">0.1</span>, persistent=None, k=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">""" This function implements one step of CD-k or PCD-k</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param lr: learning rate used to train the RBM</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param persistent: None for CD. For PCD, shared variable containing</span></span><br><span class="line"><span class="string">        old state of Gibbs chain. This mush be a shared variable of size</span></span><br><span class="line"><span class="string">        (batch size, number of hidden units).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param k: number of Gibbs steps to do in CD-k/PCD-k</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: a proxy for the cost and the updates dictionary. The</span></span><br><span class="line"><span class="string">        dictionary contains the update rules for weights and biases but also</span></span><br><span class="line"><span class="string">        an update of the shared variable used to store the persistent chain,</span></span><br><span class="line"><span class="string">        if one is used.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># compute positive phase</span></span><br><span class="line">        pre_sigmoid_ph, ph_mean, ph_sample = self.sample_h_given_v(self.input)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># decide how to initialize persistent chain:</span></span><br><span class="line">        <span class="comment"># for CD, we use the newly generate hidden sample</span></span><br><span class="line">        <span class="comment"># for PCD, we initialize from the old state of the chain</span></span><br><span class="line">        <span class="keyword">if</span> persistent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            chain_start = ph_sample</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chain_start = persistent</span><br><span class="line"></span><br><span class="line">        <span class="comment"># perform actual negative phase</span></span><br><span class="line">        <span class="comment"># in order to implement CD-k/PCD-k we need to scan over the function</span></span><br><span class="line">        <span class="comment"># that implements one gibbs step k times.</span></span><br><span class="line">        <span class="comment"># Read Theano tutorial on scan for more information:</span></span><br><span class="line">        <span class="comment"># http://deeplearning.net/software/theano/library/scan.htm</span></span><br><span class="line">        <span class="comment"># the scan will return the entire Gibbs chain</span></span><br><span class="line">        (</span><br><span class="line">            [</span><br><span class="line">                pre_sigmoid_nvs,</span><br><span class="line">                nv_means,</span><br><span class="line">                nv_samples,</span><br><span class="line">                pre_sigmoid_nhs,</span><br><span class="line">                nh_means,</span><br><span class="line">                nh_samples</span><br><span class="line">            ],</span><br><span class="line">            updates</span><br><span class="line">        ) = theano.scan(</span><br><span class="line">            self.gibbs_hvh,</span><br><span class="line">            <span class="comment"># the None are place holders, saying that chain_start is the</span></span><br><span class="line">            <span class="comment"># initial state corresponding to 6th output</span></span><br><span class="line">            outputs_info=[<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, chain_start],</span><br><span class="line">            n_steps=k,</span><br><span class="line">            name=<span class="string">'gibbs_hvh'</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># determine gradients on RBM parameters</span></span><br><span class="line">        <span class="comment"># note that we only need the sample at the end of the chain</span></span><br><span class="line">        chain_end = nv_samples[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        cost = T.mean(self.free_energy(self.input)) - T.mean(</span><br><span class="line">                self.free_energy(chain_end))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># We must not compute the gradient through the gibbs sampling</span></span><br><span class="line">        g_params = T.grad(cost, self.params, consider_constant=[chain_end])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># constructs the update dictionary</span></span><br><span class="line">        <span class="keyword">for</span> g_param, param <span class="keyword">in</span> zip(g_params, self.params):</span><br><span class="line">            <span class="comment"># make sure that the learning rate is of the right dtype</span></span><br><span class="line">            updates[param] = param - g_param * T.cast(</span><br><span class="line">                lr,</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">if</span> persistent:</span><br><span class="line">            <span class="comment"># Note that this works only if persistent is a shared variable</span></span><br><span class="line">            updates[persistent] = nh_samples[<span class="number">-1</span>]</span><br><span class="line">            <span class="comment"># pseudo-likelihood is a better proxy for PCD</span></span><br><span class="line">            monitoring_cost = self.get_pseudo_likelihood_cost(updates)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># reconstruction cross-entropy is a better proxy for CD</span></span><br><span class="line">            monitoring_cost = self.get_reconstruction_cost(updates,</span><br><span class="line">                                                           pre_sigmoid_nvs[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> monitoring_cost, updates</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_pseudo_likelihood_cost</span><span class="params">(self, updates)</span>:</span></span><br><span class="line">        <span class="string">""" Stochastic approximation to the pseudo-likelihood """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># index of bit i in expression p(x_i | x_&#123;\i&#125;)</span></span><br><span class="line">        bit_i_idx = theano.shared(value=<span class="number">0</span>, name=<span class="string">'bit_i_idx'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># binarize the input image by rounding to nearest integer</span></span><br><span class="line">        xi = T.round(self.input)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># calculate free energy for the given bit configuration</span></span><br><span class="line">        fe_xi = self.free_energy(xi)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># flip bit x_i of matrix xi and preserve all other bits x_&#123;\i&#125;</span></span><br><span class="line">        <span class="comment"># Equivalent to xi[:, bit_i_idx] = 1 - xi[:, bit_i_idx],</span></span><br><span class="line">        <span class="comment"># but assigns the result to xi_flip, instead of working in place on xi.</span></span><br><span class="line">        xi_flip = T.set_subtensor(xi[:, bit_i_idx], <span class="number">1</span> - xi[:, bit_i_idx])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># calculate free energy with bit flipped</span></span><br><span class="line">        fe_xi_flip = self.free_energy(xi_flip)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># equivalent to e^(-FE(x_i)) / (e^(-FE(x_i)) + e^(-FE(x_&#123;\i&#125;)))</span></span><br><span class="line">        cost = T.mean(self.n_visible * T.log(T.nnet.sigmoid(fe_xi_flip -</span><br><span class="line">                                                            fe_xi)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># increment bit_i_idx % number as part of updates</span></span><br><span class="line">        updates[bit_i_idx] = (bit_i_idx + <span class="number">1</span>) % self.n_visible</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cost</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_reconstruction_cost</span><span class="params">(self, updates, pre_sigmoid_nv)</span>:</span></span><br><span class="line">        <span class="string">""" Approximation to the reconstruction error</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note that this function requires the pre-sigmoid activation as</span></span><br><span class="line"><span class="string">        input.  To understand why this is so you need to understand a</span></span><br><span class="line"><span class="string">        bit about how Theano works. Whenever you compile a Theano</span></span><br><span class="line"><span class="string">        function, the computational graph that you pass as input gets</span></span><br><span class="line"><span class="string">        optimized for speed and stability.  This is done by changing</span></span><br><span class="line"><span class="string">        several parts of the subgraphs with others.  One such</span></span><br><span class="line"><span class="string">        optimization expresses terms of the form log(sigmoid(x)) in</span></span><br><span class="line"><span class="string">        terms of softplus.  We need this optimization for the</span></span><br><span class="line"><span class="string">        cross-entropy since sigmoid of numbers larger than 30. (or</span></span><br><span class="line"><span class="string">        even less then that) turn to 1. and numbers smaller than</span></span><br><span class="line"><span class="string">        -30. turn to 0 which in terms will force theano to compute</span></span><br><span class="line"><span class="string">        log(0) and therefore we will get either -inf or NaN as</span></span><br><span class="line"><span class="string">        cost. If the value is expressed in terms of softplus we do not</span></span><br><span class="line"><span class="string">        get this undesirable behaviour. This optimization usually</span></span><br><span class="line"><span class="string">        works fine, but here we have a special case. The sigmoid is</span></span><br><span class="line"><span class="string">        applied inside the scan op, while the log is</span></span><br><span class="line"><span class="string">        outside. Therefore Theano will only see log(scan(..)) instead</span></span><br><span class="line"><span class="string">        of log(sigmoid(..)) and will not apply the wanted</span></span><br><span class="line"><span class="string">        optimization. We can not go and replace the sigmoid in scan</span></span><br><span class="line"><span class="string">        with something else also, because this only needs to be done</span></span><br><span class="line"><span class="string">        on the last step. Therefore the easiest and more efficient way</span></span><br><span class="line"><span class="string">        is to get also the pre-sigmoid activation as an output of</span></span><br><span class="line"><span class="string">        scan, and apply both the log and sigmoid outside scan such</span></span><br><span class="line"><span class="string">        that Theano can catch and optimize the expression.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cross_entropy = T.mean(</span><br><span class="line">            T.sum(</span><br><span class="line">                self.input * T.log(T.nnet.sigmoid(pre_sigmoid_nv)) +</span><br><span class="line">                (<span class="number">1</span> - self.input) * T.log(<span class="number">1</span> - T.nnet.sigmoid(pre_sigmoid_nv)),</span><br><span class="line">                axis=<span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> cross_entropy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_rbm</span><span class="params">(learning_rate=<span class="number">0.1</span>, training_epochs=<span class="number">15</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             dataset=<span class="string">'mnist.pkl.gz'</span>, batch_size=<span class="number">20</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             n_chains=<span class="number">20</span>, n_samples=<span class="number">10</span>, output_folder=<span class="string">'rbm_plots'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             n_hidden=<span class="number">500</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Demonstrate how to train and afterward sample from it using Thenao.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is demonstrated on MNIST.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param learning_rate: learning rate used for training the RBM</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param training_epochs: number of epochs used for training</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param dataset: path to the pickled dataset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param batch_size: size of a batch used to train the RBM</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param n_chains: number of parallel Gibbs chains to be used for sampling</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param n_samples: number fo samples to plot for each chain</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    datasets = load_data(dataset)</span><br><span class="line"></span><br><span class="line">    train_set_x, train_set_y = datasets[<span class="number">0</span>]</span><br><span class="line">    test_set_x, test_set_y = datasets[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute number of mini-batches for training, validation and testing</span></span><br><span class="line">    n_train_batches = train_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># allocate symbolic variable for the data</span></span><br><span class="line">    index = T.lscalar()  <span class="comment"># index to a [mini]batch</span></span><br><span class="line">    x = T.matrix(<span class="string">'x'</span>)  <span class="comment"># the data is presented as rasterized images</span></span><br><span class="line"></span><br><span class="line">    rng = numpy.random.RandomState(<span class="number">123</span>)</span><br><span class="line">    theano_rng = RandomStreams(rng.randint(<span class="number">2</span> ** <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initialize storage for the persistent chain (state = hidden layer of</span></span><br><span class="line">    <span class="comment"># chain)</span></span><br><span class="line">    persistent_chain = theano.shared(numpy.zeros((batch_size, n_hidden),</span><br><span class="line">                                                 dtype=theano.config.floatX),</span><br><span class="line">                                     borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct the RBM class</span></span><br><span class="line">    rbm = RBM(input=x, n_visible=<span class="number">28</span> * <span class="number">28</span>,</span><br><span class="line">              n_hidden=n_hidden, numpy_rng=rng, theano_rng=theano_rng)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the cost and the gradient corresponding to one step of CD-15</span></span><br><span class="line">    cost, updates = rbm.get_cost_updates(lr=learning_rate,</span><br><span class="line">                                         persistent=persistent_chain, k=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#################################</span></span><br><span class="line">    <span class="comment">#     Training the RBM          #</span></span><br><span class="line">    <span class="comment">#################################</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(output_folder):</span><br><span class="line">        os.makedirs(output_folder)</span><br><span class="line">    os.chdir(output_folder)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># start-snippet-5</span></span><br><span class="line">    <span class="comment"># it is ok for a theano function to have no output</span></span><br><span class="line">    <span class="comment"># the purpose of train_rbm is solely to update the RBM parameters</span></span><br><span class="line">    train_rbm = theano.function(</span><br><span class="line">        [index],</span><br><span class="line">        cost,</span><br><span class="line">        updates=updates,</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: train_set_x[index * batch_size: (index + <span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;,</span><br><span class="line">        name=<span class="string">'train_rbm'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    plotting_time = <span class="number">0.</span></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># go through training epochs</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># go through the training set</span></span><br><span class="line">        mean_cost = []</span><br><span class="line">        <span class="keyword">for</span> batch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">            mean_cost += [train_rbm(batch_index)]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Training epoch %d, cost is '</span> % epoch, numpy.mean(mean_cost))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot filters after each training epoch</span></span><br><span class="line">        plotting_start = timeit.default_timer()</span><br><span class="line">        <span class="comment"># Construct image from the weight matrix</span></span><br><span class="line">        image = Image.fromarray(</span><br><span class="line">            tile_raster_images(</span><br><span class="line">                X=rbm.W.get_value(borrow=<span class="literal">True</span>).T,</span><br><span class="line">                img_shape=(<span class="number">28</span>, <span class="number">28</span>),</span><br><span class="line">                tile_shape=(<span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">                tile_spacing=(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        image.save(<span class="string">'filters_at_epoch_%i.png'</span> % epoch)</span><br><span class="line">        plotting_stop = timeit.default_timer()</span><br><span class="line">        plotting_time += (plotting_stop - plotting_start)</span><br><span class="line"></span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    pretraining_time = (end_time - start_time) - plotting_time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Training took %f minutes'</span> % (pretraining_time / <span class="number">60.</span>))</span><br><span class="line">    <span class="comment"># end-snippet-5 start-snippet-6</span></span><br><span class="line">    <span class="comment">#################################</span></span><br><span class="line">    <span class="comment">#     Sampling from the RBM     #</span></span><br><span class="line">    <span class="comment">#################################</span></span><br><span class="line">    <span class="comment"># find out the number of test samples</span></span><br><span class="line">    number_of_test_samples = test_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pick random test examples, with which to initialize the persistent chain</span></span><br><span class="line">    test_idx = rng.randint(number_of_test_samples - n_chains)</span><br><span class="line">    persistent_vis_chain = theano.shared(</span><br><span class="line">        numpy.asarray(</span><br><span class="line">            test_set_x.get_value(borrow=<span class="literal">True</span>)[test_idx:test_idx + n_chains],</span><br><span class="line">            dtype=theano.config.floatX</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># end-snippet-6 start-snippet-7</span></span><br><span class="line">    plot_every = <span class="number">1000</span></span><br><span class="line">    <span class="comment"># define one step of Gibbs sampling (mf = mean-field) define a</span></span><br><span class="line">    <span class="comment"># function that does `plot_every` steps before returning the</span></span><br><span class="line">    <span class="comment"># sample for plotting</span></span><br><span class="line">    (</span><br><span class="line">        [</span><br><span class="line">            presig_hids,</span><br><span class="line">            hid_mfs,</span><br><span class="line">            hid_samples,</span><br><span class="line">            presig_vis,</span><br><span class="line">            vis_mfs,</span><br><span class="line">            vis_samples</span><br><span class="line">        ],</span><br><span class="line">        updates</span><br><span class="line">    ) = theano.scan(</span><br><span class="line">        rbm.gibbs_vhv,</span><br><span class="line">        outputs_info=[<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, persistent_vis_chain],</span><br><span class="line">        n_steps=plot_every,</span><br><span class="line">        name=<span class="string">"gibbs_vhv"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add to updates the shared variable that takes care of our persistent</span></span><br><span class="line">    <span class="comment"># chain :.</span></span><br><span class="line">    updates.update(&#123;persistent_vis_chain: vis_samples[<span class="number">-1</span>]&#125;)</span><br><span class="line">    <span class="comment"># construct the function that implements our persistent chain.</span></span><br><span class="line">    <span class="comment"># we generate the "mean field" activations for plotting and the actual</span></span><br><span class="line">    <span class="comment"># samples for reinitializing the state of our persistent chain</span></span><br><span class="line">    sample_fn = theano.function(</span><br><span class="line">        [],</span><br><span class="line">        [</span><br><span class="line">            vis_mfs[<span class="number">-1</span>],</span><br><span class="line">            vis_samples[<span class="number">-1</span>]</span><br><span class="line">        ],</span><br><span class="line">        updates=updates,</span><br><span class="line">        name=<span class="string">'sample_fn'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create a space to store the image for plotting ( we need to leave</span></span><br><span class="line">    <span class="comment"># room for the tile_spacing as well)</span></span><br><span class="line">    image_data = numpy.zeros(</span><br><span class="line">        (<span class="number">29</span> * n_samples + <span class="number">1</span>, <span class="number">29</span> * n_chains - <span class="number">1</span>),</span><br><span class="line">        dtype=<span class="string">'uint8'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(n_samples):</span><br><span class="line">        <span class="comment"># generate `plot_every` intermediate samples that we discard,</span></span><br><span class="line">        <span class="comment"># because successive samples in the chain are too correlated</span></span><br><span class="line">        vis_mf, vis_sample = sample_fn()</span><br><span class="line">        print(<span class="string">' ... plotting sample %d'</span> % idx)</span><br><span class="line">        image_data[<span class="number">29</span> * idx:<span class="number">29</span> * idx + <span class="number">28</span>, :] = tile_raster_images(</span><br><span class="line">            X=vis_mf,</span><br><span class="line">            img_shape=(<span class="number">28</span>, <span class="number">28</span>),</span><br><span class="line">            tile_shape=(<span class="number">1</span>, n_chains),</span><br><span class="line">            tile_spacing=(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct image</span></span><br><span class="line">    image = Image.fromarray(image_data)</span><br><span class="line">    image.save(<span class="string">'samples.png'</span>)</span><br><span class="line">    <span class="comment"># end-snippet-7</span></span><br><span class="line">    os.chdir(<span class="string">'../'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_rbm()</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.deeplearning.net/tutorial/rbm.html#rbm" target="_blank" rel="noopener">Restricted Boltzmann Machines (RBM)</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - 实现Stacked Denoising AutoEncoders]]></title>
      <url>http://www.wrran.com/blog/2017/03/14/howto/theano/6-stacked-denoising-autoencoders/</url>
      <content type="html"><![CDATA[<blockquote><p>你对Theano一无所知<br>(ง •_•)ง</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分是学习用theano构建神经网络的第二个教程。建议读者阅读原文，注意先阅读<a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a>及<a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a>部分。同时，该博文仅仅罗列出原文的完整代码（可能加上自己<strong>主观的理解</strong>），请谨慎食用。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment"># created 2017/3/14</span></span><br><span class="line"><span class="string">""" Stacked denoising auto-encoder class (SdA)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> theano.sandbox.rng_mrg <span class="keyword">import</span> MRG_RandomStreams <span class="keyword">as</span> RandomStreams</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> logistic_sgd <span class="keyword">import</span> LogisticRegression, load_data</span><br><span class="line"><span class="keyword">from</span> mlp <span class="keyword">import</span> HiddenLayer</span><br><span class="line"><span class="keyword">from</span> dA <span class="keyword">import</span> dA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'wrran'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SdA</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" Stacked denoising auto-encoder class (SdA)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A stacked denoising autoencoder model is obtained by stacking several</span></span><br><span class="line"><span class="string">    dAs. The hidden layer of the dA at layer `i` becomes the input of the dA</span></span><br><span class="line"><span class="string">    at layer `i+1`. The first layer dA gets as input the input of the SdA,</span></span><br><span class="line"><span class="string">    and the hidden layer of the last dA represents the output. Note that</span></span><br><span class="line"><span class="string">    after pre-training, the SdA is dealt with as a normal MLP, the dAs are</span></span><br><span class="line"><span class="string">    only used to initialize the weights.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            self,</span></span></span><br><span class="line"><span class="function"><span class="params">            numpy_rng,</span></span></span><br><span class="line"><span class="function"><span class="params">            theano_rng=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            n_ins=<span class="number">28</span> * <span class="number">28</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            hidden_layer_size=<span class="params">(<span class="number">500</span>, <span class="number">500</span>)</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            n_outs=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            corruption_levels=<span class="params">(<span class="number">0.1</span>, <span class="number">0.1</span>)</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>:</span></span><br><span class="line">        <span class="string">""" This class is made to support a variable number of layers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type numpy_rng: numpy.random.RandomState</span></span><br><span class="line"><span class="string">        :param numpy_rng: numpy random number generator used to draw initial</span></span><br><span class="line"><span class="string">        weights</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type theano_rng: theano.tensor.shared_randomstreams.RandomStreams</span></span><br><span class="line"><span class="string">        :param theano_rng: Theano random generator; if None is given one is</span></span><br><span class="line"><span class="string">        generated based on a seed drawn from `rng`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_ins: int</span></span><br><span class="line"><span class="string">        :param n_ins: dimension of the input to the SdA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type hidden_layer_size: list of ints</span></span><br><span class="line"><span class="string">        :param hidden_layer_size: intermediate layers size, must contain at</span></span><br><span class="line"><span class="string">        least one value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_outs: int</span></span><br><span class="line"><span class="string">        :param n_outs: dimension of the output of the network</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type corruption_levels: list of float</span></span><br><span class="line"><span class="string">        :param corruption_levels: amount of corruption to use for each layer</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.sigmoid_layers = []</span><br><span class="line">        self.dA_layers = []</span><br><span class="line">        self.params = []</span><br><span class="line">        self.n_layers = len(hidden_layer_size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> self.n_layers &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> theano_rng:</span><br><span class="line">            theano_rng = RandomStreams(numpy_rng.randint(<span class="number">2</span> ** <span class="number">30</span>))</span><br><span class="line">        <span class="comment"># allocate symbolic variables for the data</span></span><br><span class="line">        self.x = T.matrix(<span class="string">'x'</span>)  <span class="comment"># the data is presented as rasterized images</span></span><br><span class="line">        <span class="comment"># the labels are presented as 1D vector of [int] labels</span></span><br><span class="line">        self.y = T.ivector(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># the SdA is an MLP, for which all weight of intermediate layers and</span></span><br><span class="line">        <span class="comment"># shared with a different denoising autoencoders.</span></span><br><span class="line">        <span class="comment"># We will first construct the SdA as a deep multilayer perceptron,</span></span><br><span class="line">        <span class="comment"># and when constructing each sigmoidal layer we also construct a</span></span><br><span class="line">        <span class="comment"># denoising autoencoder that shares weights with that layer</span></span><br><span class="line">        <span class="comment"># During pre-training we will train these autoencoders (which will</span></span><br><span class="line">        <span class="comment"># lead to chaining the weights of the MLP as well)</span></span><br><span class="line">        <span class="comment"># During fine-tunining we will finish training the SdA by doing</span></span><br><span class="line">        <span class="comment"># stochastich gradient descent on the MLP</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n_layers):</span><br><span class="line">            <span class="comment"># construct the sigmoidal layer</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># the size of the input is either the number of hidden units of</span></span><br><span class="line">            <span class="comment"># the layer below or the input size if we are on the first layer</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                input_size = n_ins</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                input_size = hidden_layer_size[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># the input to this layer is either the activation of the hidden</span></span><br><span class="line">            <span class="comment"># layer below or the input of the SdA if you are on the first layer</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                layer_input = self.x</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                layer_input = self.sigmoid_layers[<span class="number">-1</span>].output</span><br><span class="line"></span><br><span class="line">            sigmoid_layer = HiddenLayer(rng=numpy_rng,</span><br><span class="line">                                        input=layer_input,</span><br><span class="line">                                        n_in=input_size,</span><br><span class="line">                                        n_out=hidden_layer_size[i],</span><br><span class="line">                                        activation=T.nnet.sigmoid)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># add the layer to our list of layers</span></span><br><span class="line">            self.sigmoid_layers.append(sigmoid_layer)</span><br><span class="line">            <span class="comment"># its arguably a philosophical question ...</span></span><br><span class="line">            <span class="comment"># but we are going to only declare that the parameters of the</span></span><br><span class="line">            <span class="comment"># sigmoid_layers are parameters of the StackedDAA</span></span><br><span class="line">            <span class="comment"># the visible biases in the dA are parameters of those dA,</span></span><br><span class="line">            <span class="comment"># but not the SdA</span></span><br><span class="line">            self.params.extend(sigmoid_layer.params)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Construct a denoising autoencoder that shared weights with this</span></span><br><span class="line">            <span class="comment">#  layer</span></span><br><span class="line">            dA_layer = dA(numpy_rng=numpy_rng,</span><br><span class="line">                          theano_rng=theano_rng,</span><br><span class="line">                          input=layer_input,</span><br><span class="line">                          n_visible=input_size,</span><br><span class="line">                          n_hidden=hidden_layer_size[i],</span><br><span class="line">                          W=sigmoid_layer.W,</span><br><span class="line">                          bhid=sigmoid_layer.b)</span><br><span class="line">            self.dA_layers.append(dA_layer)</span><br><span class="line">        <span class="comment"># We now need to add a logistic layer on top of the MLP</span></span><br><span class="line">        self.logLayer = LogisticRegression(</span><br><span class="line">            input=self.sigmoid_layers[<span class="number">-1</span>].output,</span><br><span class="line">            n_in=hidden_layer_size[<span class="number">-1</span>],</span><br><span class="line">            n_out=n_outs</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.params.extend(self.logLayer.params)</span><br><span class="line">        <span class="comment"># construct a function that implements are step of fine-tunining</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute the cost for second phase of training</span></span><br><span class="line">        <span class="comment"># defined as the negative log likelihood</span></span><br><span class="line">        self.finetune_cost = self.logLayer.negative_log_likelihood(self.y)</span><br><span class="line">        <span class="comment"># compute the gradients w.r.t. to the model parameters</span></span><br><span class="line">        <span class="comment"># symbolic variable that points to the number of errors made on the</span></span><br><span class="line">        <span class="comment"># minibatch given by self.x and self.y</span></span><br><span class="line">        self.errors = self.logLayer.errors(self.y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pretraining_functions</span><span class="params">(self, train_set_x, batch_size)</span>:</span></span><br><span class="line">        <span class="string">""" Generates a list of functions, each of them implementing one step in</span></span><br><span class="line"><span class="string">         training the dA corresponding to the layer with same index. The</span></span><br><span class="line"><span class="string">         function will require as input the minibatch index, and to train a</span></span><br><span class="line"><span class="string">         dA you just need to iterate, calling the corresponding function on</span></span><br><span class="line"><span class="string">         all minibatch indexes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type train_set_x: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param train_set_x: Shared variable that contains all data points</span></span><br><span class="line"><span class="string">        used for training the dA.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type batch_size: int</span></span><br><span class="line"><span class="string">        :param batch_size: size of a [mini]batch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># index to a [mini]batch</span></span><br><span class="line">        index = T.lscalar(<span class="string">'index'</span>)  <span class="comment"># index to a minibatch</span></span><br><span class="line">        corruption_level = T.scalar(<span class="string">'corruption'</span>)  <span class="comment"># % of corruption to use</span></span><br><span class="line">        learning_rate = T.scalar(<span class="string">'lr'</span>)  <span class="comment"># learning rate to use</span></span><br><span class="line">        <span class="comment"># begining of a batch, given `index`</span></span><br><span class="line">        batch_begin = index * batch_size</span><br><span class="line">        <span class="comment"># ending of a batch given `index`</span></span><br><span class="line">        batch_end = batch_begin + batch_size</span><br><span class="line"></span><br><span class="line">        pretrain_fns = []</span><br><span class="line">        <span class="keyword">for</span> dA <span class="keyword">in</span> self.dA_layers:</span><br><span class="line">            <span class="comment"># get the cost and the updates list</span></span><br><span class="line">            cost, updates = dA.get_cost_updates(corruption_level,</span><br><span class="line">                                                learning_rate)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># compile the theano function</span></span><br><span class="line">            fn = theano.function(</span><br><span class="line">                inputs=[</span><br><span class="line">                    index,</span><br><span class="line">                    theano.In(corruption_level, value=<span class="number">0.2</span>),</span><br><span class="line">                    theano.In(learning_rate, value=<span class="number">0.1</span>)</span><br><span class="line">                ],</span><br><span class="line">                outputs=cost,</span><br><span class="line">                updates=updates,</span><br><span class="line">                givens=&#123;</span><br><span class="line">                    self.x: train_set_x[batch_begin: batch_end]</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># append `fn` to the list of functions</span></span><br><span class="line">            pretrain_fns.append(fn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pretrain_fns</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_finetune_function</span><span class="params">(self, datasets, batch_size, learning_rate)</span>:</span></span><br><span class="line">        <span class="string">""" Generates a function `train` that implements one step of</span></span><br><span class="line"><span class="string">        fine-tuning, a function `validate` that computes the error on a batch</span></span><br><span class="line"><span class="string">        from the validation set, and a function `test` that computes the error</span></span><br><span class="line"><span class="string">        on a batch from the testing set.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type datasets: list of pairs of theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param datasets: It is a list that contain all the datasets; the has</span></span><br><span class="line"><span class="string">        to contain three pairs, `train`, `valid`, `test` in this order,</span></span><br><span class="line"><span class="string">        where each pair is formed of two Theano variables, one for the data</span></span><br><span class="line"><span class="string">        points, the other for the labels</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type batch_size: int</span></span><br><span class="line"><span class="string">        :param batch_size: size of a minibatch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type learning_rate: float</span></span><br><span class="line"><span class="string">        :param learning_rate: learning rate used during fine-tune stage</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        train_set_x, train_set_y = datasets[<span class="number">0</span>]</span><br><span class="line">        valid_set_x, valid_set_y = datasets[<span class="number">1</span>]</span><br><span class="line">        test_set_x, test_set_y = datasets[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute number of minibatches for training, validation and testing</span></span><br><span class="line">        n_valid_batches = valid_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>]</span><br><span class="line">        n_valid_batches //= batch_size</span><br><span class="line">        n_test_batches = test_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>]</span><br><span class="line">        n_test_batches //= batch_size</span><br><span class="line"></span><br><span class="line">        index = T.lscalar(<span class="string">'index'</span>)  <span class="comment"># index to a [minibatch]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute the gradients w.r.t the model parameters</span></span><br><span class="line">        g_params = T.grad(self.finetune_cost, self.params)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute list of fine-tuning updates</span></span><br><span class="line">        updates = [</span><br><span class="line">            (param, param - g_param * learning_rate)</span><br><span class="line">            <span class="keyword">for</span> param, g_param <span class="keyword">in</span> zip(self.params, g_params)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        train_fn = theano.function(</span><br><span class="line">            inputs=[index],</span><br><span class="line">            outputs=self.finetune_cost,</span><br><span class="line">            updates=updates,</span><br><span class="line">            givens=&#123;</span><br><span class="line">                self.x : train_set_x[</span><br><span class="line">                    index * batch_size: (index+<span class="number">1</span>) * batch_size</span><br><span class="line">                ],</span><br><span class="line">                self.y: train_set_y[</span><br><span class="line">                    index * batch_size: (index+<span class="number">1</span>) * batch_size</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            name=<span class="string">'train'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        test_score_i = theano.function(</span><br><span class="line">            [index],</span><br><span class="line">            self.errors,</span><br><span class="line">            givens=&#123;</span><br><span class="line">                self.x: test_set_x[</span><br><span class="line">                    index * batch_size: (index+<span class="number">1</span>) * batch_size</span><br><span class="line">                ],</span><br><span class="line">                self.y: test_set_y[</span><br><span class="line">                    index * batch_size: (index+<span class="number">1</span>) * batch_size</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            name=<span class="string">'test'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        valid_score_i = theano.function(</span><br><span class="line">            [index],</span><br><span class="line">            self.errors,</span><br><span class="line">            givens=&#123;</span><br><span class="line">                self.x: valid_set_x[</span><br><span class="line">                    index * batch_size: (index+<span class="number">1</span>) * batch_size</span><br><span class="line">                ],</span><br><span class="line">                self.y: valid_set_y[</span><br><span class="line">                    index * batch_size: (index+<span class="number">1</span>) * batch_size</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            name=<span class="string">'valid'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create a function that scans the entire validation set</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">valid_score</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> [valid_score_i(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(n_valid_batches)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create a function that scans the entire test set</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_score</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> [test_score_i(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(n_test_batches)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> train_fn, valid_score, test_score</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_SdA</span><span class="params">(finetune_lr=<span class="number">0.1</span>, pretraining_epochs=<span class="number">15</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             pretrain_lr=<span class="number">0.001</span>, training_epochs=<span class="number">1000</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             dataset=<span class="string">'mnist.pkl.gz'</span>, batch_size=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Demonstrates how to train and test a stochastic denoising autoencoder.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is demonstrated on MNIST.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type finetune_lr: float</span></span><br><span class="line"><span class="string">    :param finetune_lr: learning rate used in the fine-tune stage (factor for</span></span><br><span class="line"><span class="string">    the stochastic gradinet_</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type pretraining_epochs: int</span></span><br><span class="line"><span class="string">    :param pretraining_epochs: number of epoch to do pre-training</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type pretrain_lr: float</span></span><br><span class="line"><span class="string">    :param pretrain_lr: learning rate to be used during pre-training</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type training_epochs: int</span></span><br><span class="line"><span class="string">    :param training_epochs: maximal number of iterations to run the optimizer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type dataset: str</span></span><br><span class="line"><span class="string">    :param dataset: path to the picked dataset</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    datasets = load_data(dataset)</span><br><span class="line"></span><br><span class="line">    train_set_x, train_set_y = datasets[<span class="number">0</span>]</span><br><span class="line">    valid_set_x, valid_set_y = datasets[<span class="number">1</span>]</span><br><span class="line">    test_set_x, test_set_y = datasets[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute number of minibatches for training, validation and testing</span></span><br><span class="line">    n_train_batches = train_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>]</span><br><span class="line">    n_train_batches //= batch_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># numpy random generator</span></span><br><span class="line">    numpy_rng = numpy.random.RandomState(<span class="number">89677</span>)</span><br><span class="line">    print(<span class="string">'... building the model'</span>)</span><br><span class="line">    <span class="comment"># construct the stacked denoising autoencoder class</span></span><br><span class="line">    sda = SdA(</span><br><span class="line">        numpy_rng=numpy_rng,</span><br><span class="line">        n_ins=<span class="number">28</span> * <span class="number">28</span>,</span><br><span class="line">        hidden_layer_size=[<span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>],</span><br><span class="line">        n_outs=<span class="number">10</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">#########################</span></span><br><span class="line">    <span class="comment"># PRETRAINING THE MODEL #</span></span><br><span class="line">    <span class="comment">#########################</span></span><br><span class="line">    print(<span class="string">'... getting the pretraining functions'</span>)</span><br><span class="line">    pretraining_fns = sda.pretraining_functions(train_set_x=train_set_x,</span><br><span class="line">                                                batch_size=batch_size)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'... pre-training the model'</span>)</span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line">    <span class="comment"># Pre-train layer-wise</span></span><br><span class="line">    corruption_levels = [<span class="number">.1</span>, <span class="number">.2</span>, <span class="number">.3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(sda.n_layers):</span><br><span class="line">        <span class="comment"># go through pre-training epochs</span></span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> range(pretraining_epochs):</span><br><span class="line">            <span class="comment"># go through the training set</span></span><br><span class="line">            c = []</span><br><span class="line">            <span class="keyword">for</span> batch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">                c.append(pretraining_fns[i](index=batch_index,</span><br><span class="line">                                            corrupton=corruption_levels[i],</span><br><span class="line">                                            lr=pretrain_lr))</span><br><span class="line">                print(<span class="string">'pre-training layer %i, epoch %d, cost %f'</span> %</span><br><span class="line">                      (</span><br><span class="line">                          i, epoch, numpy.mean(c, dtype=<span class="string">'float64'</span>)</span><br><span class="line">                      ))</span><br><span class="line"></span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'The pre-training code for file '</span> +</span><br><span class="line">          os.path.split(__file__)[<span class="number">1</span>] +</span><br><span class="line">          <span class="string">' ran for %.2fm'</span> % ((end_time-start_time) / <span class="number">60.</span>),</span><br><span class="line">          file=sys.stderr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">########################</span></span><br><span class="line">    <span class="comment"># FINETUNING THE MODEL #</span></span><br><span class="line">    <span class="comment">########################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the training, validation and testing function for the model</span></span><br><span class="line">    print(<span class="string">'... getting the fine-tuning functions'</span>)</span><br><span class="line">    train_fn, validate_model, test_model = sda.build_finetune_function(</span><br><span class="line">        datasets=datasets,</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">        learning_rate=finetune_lr</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'... fine-tuning the model'</span>)</span><br><span class="line">    <span class="comment"># early-stopping parameters</span></span><br><span class="line">    patience = <span class="number">10</span> * n_train_batches  <span class="comment"># look as this many examples regardless</span></span><br><span class="line">    patience_increase = <span class="number">2.</span>  <span class="comment"># wait this much longer when a new best is found</span></span><br><span class="line">    <span class="comment"># a relative improvement of this much is considered significatn</span></span><br><span class="line">    improvement_threshold = <span class="number">0.995</span></span><br><span class="line">    <span class="comment"># go through this many minibatch before checking the network on the</span></span><br><span class="line">    <span class="comment"># validation set; in this case we check every epoch</span></span><br><span class="line">    validation_frequency = min(n_train_batches, patience // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    best_validation_loss = numpy.inf</span><br><span class="line">    test_score = <span class="number">0.</span></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    done_looping = <span class="literal">False</span></span><br><span class="line">    epoch = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (epoch &lt; training_epochs) <span class="keyword">and</span> (<span class="keyword">not</span> done_looping):</span><br><span class="line">        epoch += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> minibatch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">            minibatch_avg_cost = train_fn(minibatch_index)</span><br><span class="line">            iter = (epoch - <span class="number">1</span>) * n_train_batches + minibatch_index</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (iter + <span class="number">1</span>) % validation_frequency == <span class="number">0</span>:</span><br><span class="line">                validation_losses = validate_model</span><br><span class="line">                this_validation_loss = numpy.mean(validation_losses,</span><br><span class="line">                                                  dtype=<span class="string">'float64'</span>)</span><br><span class="line">                print(<span class="string">'epoch %i, minibatch %i/%i, validation error %f %%'</span> %</span><br><span class="line">                      (</span><br><span class="line">                          epoch,</span><br><span class="line">                          minibatch_index + <span class="number">1</span>,</span><br><span class="line">                          n_train_batches,</span><br><span class="line">                          this_validation_loss * <span class="number">100</span></span><br><span class="line">                      )</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="comment"># if we got the best validation score until noe</span></span><br><span class="line">                <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss:</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># improve patience if loss improvement is good enough</span></span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                        this_validation_loss &lt; best_validation_loss *</span><br><span class="line">                            improvement_threshold</span><br><span class="line">                    ):</span><br><span class="line">                        patience = max(patience, iter * patience_increase)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># save best validation score ant iteration number</span></span><br><span class="line">                    best_validation_loss = this_validation_loss</span><br><span class="line">                    best_iter = iter</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># test it on the test set</span></span><br><span class="line">                    test_losses = test_model()</span><br><span class="line">                    test_score = numpy.mean(test_losses, dtype=<span class="string">'float64'</span>)</span><br><span class="line">                    print(<span class="string">'epoch %i, minibatch %i/%i, test error of best '</span></span><br><span class="line">                          <span class="string">'model %f %%'</span> %</span><br><span class="line">                          (</span><br><span class="line">                              epoch,</span><br><span class="line">                              minibatch_index + <span class="number">1</span>,</span><br><span class="line">                              n_train_batches,</span><br><span class="line">                              test_score * <span class="number">100.</span></span><br><span class="line">                          )</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> patience &lt;= iter:</span><br><span class="line">                done_looping = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">'Optimization complete with best validation score of %f %%,'</span></span><br><span class="line">        <span class="string">'on iteration %i, '</span></span><br><span class="line">        <span class="string">'with test performance %f %%'</span></span><br><span class="line">        % (best_validation_loss * <span class="number">100.</span>, best_iter + <span class="number">1</span>, test_score * <span class="number">100.</span>)</span><br><span class="line">    )</span><br><span class="line">    print(</span><br><span class="line">        <span class="string">'The training code for file'</span> +</span><br><span class="line">        os.path.split(__file__)[<span class="number">1</span>] +</span><br><span class="line">        <span class="string">' ran for %.2fm'</span></span><br><span class="line">        % ((end_time - start_time) / <span class="number">60.</span>),</span><br><span class="line">        file=sys.stderr</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_SdA()</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.deeplearning.net/tutorial/SdA.html#sda" target="_blank" rel="noopener">Stacked Denoising Autoencoders (SdA)</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - 实现Denoising AutoEncoders]]></title>
      <url>http://www.wrran.com/blog/2017/03/12/howto/theano/5-denoising-autoencoders/</url>
      <content type="html"><![CDATA[<blockquote><p>你对Theano一无所知<br>(ง •_•)ง</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分是学习用theano构建神经网络的第二个教程。建议读者阅读原文，注意先阅读<a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a>及<a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a>部分。同时，该博文仅仅罗列出原文的完整代码（可能加上自己<strong>主观的理解</strong>），请谨慎食用。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment"># created 2017/3/12</span></span><br><span class="line"><span class="string">""" denoising auto-encoders</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> theano.sandbox.rng_mrg <span class="keyword">import</span> MRG_RandomStreams <span class="keyword">as</span> RandomSteams</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> logistic_sgd <span class="keyword">import</span> load_data</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> tile_raster_images</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> PIL.Image <span class="keyword">as</span> Image</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'wrran'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dA</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" Denoising Auto-Encoder class (dA)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A denoising auto-encoders tries to reconstruct the input from a corrupted</span></span><br><span class="line"><span class="string">    version of it by projecting it first in a latent space and reprojecting</span></span><br><span class="line"><span class="string">    it afterwards back in the input space. Please refer to Vincent et al., 2008</span></span><br><span class="line"><span class="string">    for more details.</span></span><br><span class="line"><span class="string">    If x is the input then equation (1) computes a partially destroyed</span></span><br><span class="line"><span class="string">    version of x by means of a stochastic mapping q_D.</span></span><br><span class="line"><span class="string">    Equation (2) computes the projection of the input into the latent space.</span></span><br><span class="line"><span class="string">    Equation (3) computes the reconstruction of the input, while equation (4)</span></span><br><span class="line"><span class="string">    computes the reconstruction error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. math::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        \tilde&#123;x&#125; ~ q_D(\tilde&#123;x&#125;|x)                                     (1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        y = s(W \tilde&#123;x&#125; + b)                                           (2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        x = s(W' y + b')                                                 (3)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        L(x, z) = -sum(k=1)^d [x_k \log z_k + (1-x_k) \log( 1-z_k)]      (4)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            self,</span></span></span><br><span class="line"><span class="function"><span class="params">            numpy_rng,</span></span></span><br><span class="line"><span class="function"><span class="params">            theano_rng=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            input=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            n_visible=<span class="number">784</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            n_hidden=<span class="number">500</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            W=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            bhid=None,</span></span></span><br><span class="line"><span class="function"><span class="params">            bvis=None</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize the dA class by specifying the number of visible units</span></span><br><span class="line"><span class="string">        (the dimension d of the input), the number of hidden units</span></span><br><span class="line"><span class="string">        (the dimension d' of the latent or hidden space) and the corruption</span></span><br><span class="line"><span class="string">        level.</span></span><br><span class="line"><span class="string">        The constructor also receives symbolic variables for the input, weights</span></span><br><span class="line"><span class="string">        and bias. Such a symbolic variables are useful when, for example the</span></span><br><span class="line"><span class="string">        input is the result of some computations, or when weights are shared</span></span><br><span class="line"><span class="string">        between the dA and an MLP layer. When dealing with SdAs this always</span></span><br><span class="line"><span class="string">        happens, the dA on layer 2 gets as input the output of the dA on</span></span><br><span class="line"><span class="string">        layer 1, and the weights of the dA are used in the second stage of</span></span><br><span class="line"><span class="string">        training to construct an MLP.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type numpy_rng: numpy.random.RandomState</span></span><br><span class="line"><span class="string">        :param numpy_rng: number random generator used to generate weights</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type theano_rng: theano.tensor.shared_randomstreams.RandomStreams</span></span><br><span class="line"><span class="string">        :param theano_rng: Theano random generator; if None is given one is</span></span><br><span class="line"><span class="string">        generated based on a seed from `rng`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type input: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param input: a symbolic description of the input or None for</span></span><br><span class="line"><span class="string">        standalone dA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_visible: int</span></span><br><span class="line"><span class="string">        :param n_visible: number of visible units</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_hidden: int</span></span><br><span class="line"><span class="string">        :param n_hidden: number of hidden units</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type W: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param W: Theano variable pointing to a set of weights that should be</span></span><br><span class="line"><span class="string">        shared belong the dA and another architecture; if dA should be</span></span><br><span class="line"><span class="string">        standalone set this to None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type bhid: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param bhid: Theano variable pointing to a set of biases values (for</span></span><br><span class="line"><span class="string">        hidden units) that should be shared belong dA and another</span></span><br><span class="line"><span class="string">        architecture, if dA should be standalone set this to None</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type bvis: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param bvis: Theano variable pointing to a set of biases values (for</span></span><br><span class="line"><span class="string">        visible units) that should be shared be shared belong dA and another</span></span><br><span class="line"><span class="string">        architecture; if dA should be standalone set this to None.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.n_visible = n_visible</span><br><span class="line">        self.n_hidden = n_hidden</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a Theano random generator that gives symbolic random values</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> theano_rng:</span><br><span class="line">            theano_rng = RandomSteams(numpy_rng.randint(<span class="number">2</span> ** <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># note: W' was written as `W_prime` and b' as `b_prime`</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> W:</span><br><span class="line">            <span class="comment"># W is initialized with `initial_W` which is uniformly sampled from</span></span><br><span class="line">            <span class="comment"># -4*sqrt(6./(n_visible+n_hidden)) and 4*sqrt(6./(</span></span><br><span class="line">            <span class="comment"># n_hidden+n_visible))</span></span><br><span class="line">            <span class="comment"># the ouptut of uniform if converted using asarray to dtype</span></span><br><span class="line">            <span class="comment"># theano.config.floatX so that the code is runable on GPU</span></span><br><span class="line">            initial_W = numpy.asarray(</span><br><span class="line">                numpy_rng.uniform(</span><br><span class="line">                    low=<span class="number">-4</span> * numpy.sqrt(<span class="number">6.</span>/(n_hidden + n_visible)),</span><br><span class="line">                    high=<span class="number">4</span> * numpy.sqrt(<span class="number">6.</span>/(n_hidden + n_visible)),</span><br><span class="line">                    size=(n_visible, n_hidden)</span><br><span class="line">                ),</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            )</span><br><span class="line">            W = theano.shared(value=initial_W, name=<span class="string">'W'</span>, borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bvis:</span><br><span class="line">            bvis = theano.shared(</span><br><span class="line">                value=numpy.zeros(</span><br><span class="line">                    n_visible,</span><br><span class="line">                    dtype=theano.config.floatX</span><br><span class="line">                ),</span><br><span class="line">                borrow=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bhid:</span><br><span class="line">            bhid = theano.shared(</span><br><span class="line">                value=numpy.zeros(</span><br><span class="line">                    n_hidden,</span><br><span class="line">                    dtype=theano.config.floatX</span><br><span class="line">                ),</span><br><span class="line">                name=<span class="string">'b'</span>,</span><br><span class="line">                borrow=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        self.W = W</span><br><span class="line">        <span class="comment"># b corresponds to the bias of the hidden</span></span><br><span class="line">        self.b = bhid</span><br><span class="line">        <span class="comment"># b_prime corresponds to the bias of the visible</span></span><br><span class="line">        self.b_prime = bvis</span><br><span class="line">        <span class="comment"># tied weights, therefore W_prime is W transpose</span></span><br><span class="line">        self.W_prime = self.W.T</span><br><span class="line">        self.theano_rng = theano_rng</span><br><span class="line">        <span class="comment"># if no input is given, generate a variable representing the input</span></span><br><span class="line">        <span class="keyword">if</span> input <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># we use a matrix because we expect a minibatch of several</span></span><br><span class="line">            <span class="comment"># examples, each example being a row</span></span><br><span class="line">            self.x = T.dmatrix(name=<span class="string">'input'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.x = input</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_corrupted_input</span><span class="params">(self, input, corruption_level)</span>:</span></span><br><span class="line">        <span class="string">""" This function keep ``1-corruption_level`` entries of the inputs</span></span><br><span class="line"><span class="string">        the same and zero-out randomly selected subset of size ``corruption</span></span><br><span class="line"><span class="string">        level``</span></span><br><span class="line"><span class="string">        NOTE:</span></span><br><span class="line"><span class="string">        first argument of theano.rng.binomial is the shape (size) of</span></span><br><span class="line"><span class="string">        random numbers that it should produce</span></span><br><span class="line"><span class="string">        second argument is the number of trials</span></span><br><span class="line"><span class="string">        third argument is the probability of success of any trial</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        this will produce on array of 0s and 1s where 1 has a probability of</span></span><br><span class="line"><span class="string">        1 - ``corruption_level`` and 0 with ``corruption_level``</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The binomial function return int64 data type by default. int 64</span></span><br><span class="line"><span class="string">        multiplicated by the input type(floatX) always return float64. To</span></span><br><span class="line"><span class="string">        keep all data in floatX when floatX is float32, we set the dtype of</span></span><br><span class="line"><span class="string">        the binomial to floatX. As in our case, the value of the binomial is</span></span><br><span class="line"><span class="string">        always 0 or 1, this don't change the result. This is need to allow</span></span><br><span class="line"><span class="string">        the gpu to work correctly as it only support float32 for now.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.theano_rng.binomial(size=input.shape,</span><br><span class="line">                                        n=<span class="number">1</span>,</span><br><span class="line">                                        p=<span class="number">1</span>-corruption_level,</span><br><span class="line">                                        dtype=theano.config.floatX) * input</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_hidden_values</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        <span class="string">""" Computes the values of the hidden layer"""</span></span><br><span class="line">        <span class="keyword">return</span> T.nnet.sigmoid(T.dot(input, self.W) + self.b)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_reconstructed_input</span><span class="params">(self, hidden)</span>:</span></span><br><span class="line">        <span class="string">""" Computes the reconstructed input given the values of the hidden</span></span><br><span class="line"><span class="string">        layer</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> T.nnet.sigmoid(T.dot(hidden, self.W_prime) + self.b_prime)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cost_updates</span><span class="params">(self, corruption_level, learning_rate)</span>:</span></span><br><span class="line">        <span class="string">""" This function computes the cost and the updates for one training</span></span><br><span class="line"><span class="string">        step of the dA</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        tilde_x = self.get_corrupted_input(self.x, corruption_level)</span><br><span class="line">        y = self.get_hidden_values(tilde_x)</span><br><span class="line">        z = self.get_reconstructed_input(y)</span><br><span class="line">        <span class="comment"># note : we sum over the size of a datapoint</span></span><br><span class="line">        <span class="comment"># if we are using minibatches, note will be a vector, with one entry per</span></span><br><span class="line">        <span class="comment">#  example in minibatch</span></span><br><span class="line">        loss = - T.sum(self.x * T.log(z) + (<span class="number">1</span>-self.x) * T.log(<span class="number">1</span>-z), axis=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># note : loss is now a vector, where each element is the</span></span><br><span class="line">        <span class="comment"># cross-entropy cost of the reconstruction of the corresponding</span></span><br><span class="line">        <span class="comment"># example of the minibatch. We need to compute the average of all</span></span><br><span class="line">        <span class="comment"># these to get the cost of the minibatch.</span></span><br><span class="line">        cost = T.mean(loss)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute the gradients of the cost of the `dA` w.r.t its parameters</span></span><br><span class="line">        g_params = T.grad(cost, self.params)</span><br><span class="line">        <span class="comment"># generate the list of updates</span></span><br><span class="line">        updates = [</span><br><span class="line">            (param, param - learning_rate * g_params)</span><br><span class="line">            <span class="keyword">for</span> param, g_param <span class="keyword">in</span> zip(self.params, g_params)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cost, updates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_dA</span><span class="params">(learning_rate=<span class="number">0.1</span>, training_epochs=<span class="number">15</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            dataset=<span class="string">'mnist.pkl.gz'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            batch_size=<span class="number">20</span>, output_folder=<span class="string">'dA_plots'</span>)</span>:</span></span><br><span class="line">    <span class="string">""" This demo is tested on MNIST.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type learning_rate: float</span></span><br><span class="line"><span class="string">    :param learning_rate: learning rate used for training the DeNosing</span></span><br><span class="line"><span class="string">    AutoEncoder</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type training_epochs: int</span></span><br><span class="line"><span class="string">    :param training_epochs: number of epochs used for training</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type dataset: str</span></span><br><span class="line"><span class="string">    :param dataset: path to the picked dataset</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    datasets = load_data(dataset)</span><br><span class="line">    train_set_x, train_set_y = datasets[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute number of minibatches for training, validation and testing</span></span><br><span class="line">    n_train_batches = train_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># allocate symbolic variables for the data</span></span><br><span class="line">    index = T.lscalar()  <span class="comment"># index to a [mini]batch</span></span><br><span class="line">    x = T.matrix(<span class="string">'x'</span>)  <span class="comment"># the data is presented as rasterized images</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(output_folder):</span><br><span class="line">        os.makedirs(output_folder)</span><br><span class="line">    os.chdir(output_folder)</span><br><span class="line"></span><br><span class="line">    <span class="comment">####################################</span></span><br><span class="line">    <span class="comment"># BUILDING THE MODEL NO CORRUPTION #</span></span><br><span class="line">    <span class="comment">####################################</span></span><br><span class="line"></span><br><span class="line">    rng = numpy.random.RandomState(<span class="number">123</span>)</span><br><span class="line">    theano_rng = RandomSteams(rng.randint(<span class="number">2</span> ** <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">    da = dA(</span><br><span class="line">        numpy_rng=rng,</span><br><span class="line">        theano_rng=theano_rng,</span><br><span class="line">        input=x,</span><br><span class="line">        n_visible=<span class="number">28</span> * <span class="number">28</span>,</span><br><span class="line">        n_hidden=<span class="number">500</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    cost, updates = da.get_cost_updates(</span><br><span class="line">        corruption_level=<span class="number">0</span>,</span><br><span class="line">        learning_rate=learning_rate</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    train_da = theano.function(</span><br><span class="line">        [index],</span><br><span class="line">        cost,</span><br><span class="line">        updates=updates,</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: train_set_x[index * batch_size: (index+<span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="comment"># TRAINING #</span></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># go through training epochs</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line">        <span class="comment"># go through training set</span></span><br><span class="line">        c = []</span><br><span class="line">        <span class="keyword">for</span> batch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">            c.append(train_da(batch_index))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Training epoch %d, cost '</span> % epoch, numpy.mean(c,</span><br><span class="line">                                                             dtype=<span class="string">'float64'</span>))</span><br><span class="line"></span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    training_time = end_time - start_time</span><br><span class="line"></span><br><span class="line">    print((<span class="string">'The no corruption code for file '</span>+</span><br><span class="line">           os.path.split(__file__)[<span class="number">1</span>] +</span><br><span class="line">           <span class="string">' ran for %.2fm'</span> % (training_time / <span class="number">60.</span>)), file=sys.stderr)</span><br><span class="line">    image = Image.fromarray(</span><br><span class="line">        tile_raster_images(X=da.W.get_value(borrow=<span class="literal">True</span>).T,</span><br><span class="line">                           img_shape=(<span class="number">28</span>, <span class="number">28</span>), tile_shape=(<span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">                           tile_spacing=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    )</span><br><span class="line">    image.save(<span class="string">'filters_corruption_0.png'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#####################################</span></span><br><span class="line">    <span class="comment"># BUILDING THE MODEL CORRUPTION 30% #</span></span><br><span class="line">    <span class="comment">#####################################</span></span><br><span class="line"></span><br><span class="line">    rng = numpy.random.RandomState(<span class="number">123</span>)</span><br><span class="line">    theano_rng = RandomSteams(rng.randint(<span class="number">2</span> ** <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">    da = dA(</span><br><span class="line">        numpy_rng=rng,</span><br><span class="line">        theano_rng=theano_rng,</span><br><span class="line">        input=x,</span><br><span class="line">        n_visible=<span class="number">28</span> * <span class="number">28</span>,</span><br><span class="line">        n_hidden=<span class="number">500</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    cost, updates = da.get_cost_updates(</span><br><span class="line">        corruption_level=<span class="number">0.3</span>,</span><br><span class="line">        learning_rate=learning_rate</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    train_da = theano.function(</span><br><span class="line">        [index],</span><br><span class="line">        cost,</span><br><span class="line">        updates=updates,</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: train_set_x[index * batch_size: (index+<span class="number">1</span>) * batch_index]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line">    <span class="comment"># TRAINING #</span></span><br><span class="line">    <span class="comment">############</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># go through training epochs</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line">        <span class="comment"># go through training set</span></span><br><span class="line">        c = []</span><br><span class="line">        <span class="keyword">for</span> batch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">            c.append(train_da(batch_index))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Training epoch %d, cost '</span> % epoch, numpy.mean(c,</span><br><span class="line">                                                             dtype=<span class="string">'float64'</span>))</span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    training_time = (end_time - start_time)</span><br><span class="line"></span><br><span class="line">    print((<span class="string">'The 30% corruption code for file '</span> +</span><br><span class="line">           os.path.split(__file__)[<span class="number">1</span>] +</span><br><span class="line">           <span class="string">' ran for %.2fm'</span> % (training_time / <span class="number">60.</span>)), file=sys.stderr)</span><br><span class="line"></span><br><span class="line">    image = Image.fromarray(tile_raster_images(</span><br><span class="line">        X=da.W.get_value(borrow=<span class="literal">True</span>).T,</span><br><span class="line">        img_shape=(<span class="number">28</span>, <span class="number">28</span>), tile_shape=(<span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">        tile_spacing=(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    image.save(<span class="string">'filters_corruption_30.png'</span>)</span><br><span class="line"></span><br><span class="line">    os.chdir(<span class="string">'../'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_dA()</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.deeplearning.net/tutorial/dA.html#daa" target="_blank" rel="noopener">Denoising Autoencoders (dA)</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - 实现CNN]]></title>
      <url>http://www.wrran.com/blog/2017/03/12/howto/theano/4-convolutional-mlp/</url>
      <content type="html"><![CDATA[<blockquote><p>你对Theano一无所知<br>(ง •_•)ง</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分是学习用theano构建神经网络的第二个教程。建议读者阅读原文，注意先阅读<a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a>及<a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a>部分。同时，该博文仅仅罗列出原文的完整代码（可能加上自己<strong>主观的理解</strong>），请谨慎食用。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> theano.tensor.signal <span class="keyword">import</span> pool</span><br><span class="line"><span class="keyword">from</span> theano.tensor.nnet <span class="keyword">import</span> conv2d</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> logistic_sgd <span class="keyword">import</span> LogisticRegression, load_data</span><br><span class="line"><span class="keyword">from</span> mlp <span class="keyword">import</span> HiddenLayer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeNetConvPoolLayer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" Pool Layer of a convolutional network """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rng, input, filter_shape, image_shape, poolsize=<span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span>)</span>:</span></span><br><span class="line">        <span class="string">""" Allocate a LeNetConvPoolLayer with shared variable internal parameters.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type rng: numpy.random.RandomState</span></span><br><span class="line"><span class="string">        :param rng: a random number generator used to initialize weights</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type input: theano.tensor.dtensor4</span></span><br><span class="line"><span class="string">        :param input: symbolic image tensor, of shape image_shape</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type filter_shape: tuple or list of length 4</span></span><br><span class="line"><span class="string">        :param filter_shape: (number of filters, num input feature maps,</span></span><br><span class="line"><span class="string">                              filter height, filter width)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type image_shape: tuple or list of length 4</span></span><br><span class="line"><span class="string">        :param image_shape: (batch size, num input feature maps,</span></span><br><span class="line"><span class="string">                             image height, image width)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type poolsize: tuple or list of length 2</span></span><br><span class="line"><span class="string">        :param poolsize: the downsampling (pooling) factor (#rows, #cols)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> image_shape[<span class="number">1</span>] == filter_shape[<span class="number">1</span>]</span><br><span class="line">        self.input = input</span><br><span class="line"></span><br><span class="line">        <span class="comment"># there are "num input feature maps * filter height * filter width"</span></span><br><span class="line">        <span class="comment"># inputs to each hidden unit</span></span><br><span class="line">        fan_in = numpy.prod(filter_shape[<span class="number">1</span>:])</span><br><span class="line">        <span class="comment"># each unit in the lower layer receives a gradient from:</span></span><br><span class="line">        <span class="comment"># "num output feature maps * filter height * filter width" /</span></span><br><span class="line">        <span class="comment">#   pooling size</span></span><br><span class="line">        fan_out = (filter_shape[<span class="number">0</span>] * numpy.prod(filter_shape[<span class="number">2</span>]) //</span><br><span class="line">                  numpy.prod(poolsize))</span><br><span class="line">        <span class="comment"># initalize weights with random weights</span></span><br><span class="line">        W_bound = numpy.sqrt(<span class="number">6.</span> / (fan_in + fan_out))</span><br><span class="line">        self.W = theano.shared(</span><br><span class="line">            numpy.asarray(</span><br><span class="line">                rng.uniform(low=-W_bound, high=W_bound, size=filter_shape),</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            ),</span><br><span class="line">            borrow=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># the bias is a 1D tensor -- one bias per output feature map</span></span><br><span class="line">        b_values = numpy.zeros((filter_shape[<span class="number">0</span>],), dtype=theano.config.floatX)</span><br><span class="line">        self.b = theano.shared(value=b_values, borrow=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># convolve input feature maps with filters</span></span><br><span class="line">        conv_out = conv2d(</span><br><span class="line">            input=input,</span><br><span class="line">            filters=self.W,</span><br><span class="line">            filter_shape=filter_shape,</span><br><span class="line">            input_shape=image_shape</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pool each feature map individually, using maxpooling</span></span><br><span class="line">        pooled_out = pool.pool_2d(</span><br><span class="line">            input=conv_out,</span><br><span class="line">            ds=poolsize,</span><br><span class="line">            ignore_border=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># add the bias term.</span></span><br><span class="line">        <span class="comment"># Since the bias is a vector (1D array), we first reshape it to a tensor</span></span><br><span class="line">        <span class="comment"># of shape (1, n_filters, 1, 1).</span></span><br><span class="line">        <span class="comment"># Each bias will thus be broadcasted across mini-batches and feature</span></span><br><span class="line">        <span class="comment"># map width &amp; height.</span></span><br><span class="line">        self.output = T.tanh(pooled_out + self.b.dimshuffle(<span class="string">'x'</span>, <span class="number">0</span>, <span class="string">'x'</span>, <span class="string">'x'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># store parameters of this layer</span></span><br><span class="line">        self.params = [self.W, self.b]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># keep track of model input</span></span><br><span class="line">        self.input = input</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span> <span class="title">lenet5</span><span class="params">(learning_rate=<span class="number">0.1</span>, n_epochs=<span class="number">200</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    dataset=<span class="string">'mnist.pkl.gz'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    nkerns=[<span class="number">20</span>, <span class="number">50</span>], batch_size=<span class="number">500</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Demonstrates lenet on MNIST dataset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type learning_rate: float</span></span><br><span class="line"><span class="string">    :param learning_rate: learning rate used (factor for the stochastic</span></span><br><span class="line"><span class="string">                          gradient)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type n_epochs: int</span></span><br><span class="line"><span class="string">    :param n_epochs: maximal number of epochs to run the optimizer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type dataset: string</span></span><br><span class="line"><span class="string">    :param dataset: path to the dataset used for training /testing (MNIST here)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type nkerns: list of ints</span></span><br><span class="line"><span class="string">    :param nkerns: number of kernels on each layer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    rng = numpy.random.RandomState(<span class="number">23455</span>)</span><br><span class="line"></span><br><span class="line">    datasets = load_data(dataset)</span><br><span class="line"></span><br><span class="line">    train_set_x, train_set_y = datasets[<span class="number">0</span>]</span><br><span class="line">    valid_set_x, valid_set_y = datasets[<span class="number">1</span>]</span><br><span class="line">    test_set_x, test_set_y = datasets[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute number of mini-batches for training, validation and testing</span></span><br><span class="line">    n_train_batches = train_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>]</span><br><span class="line">    n_valid_batches = valid_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>]</span><br><span class="line">    n_test_batches = test_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>]</span><br><span class="line">    n_train_batches //= batch_size</span><br><span class="line">    n_valid_batches //= batch_size</span><br><span class="line">    n_test_batches //= batch_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># allocate symbolic variables for the data</span></span><br><span class="line">    index = T.lscalar()  <span class="comment"># index to a [mini]batch</span></span><br><span class="line"></span><br><span class="line">    x = T.matrix(<span class="string">'x'</span>)  <span class="comment"># the data is presented as rasterized images</span></span><br><span class="line">    <span class="comment"># the lables are presented as 1D vector of [int] labels</span></span><br><span class="line">    y = T.ivector(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">######################</span></span><br><span class="line">    <span class="comment"># BUILD ACTUAL MODEL #</span></span><br><span class="line">    <span class="comment">######################</span></span><br><span class="line">    print(<span class="string">'... building the model'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Reshape matrix of rastrized images of shape (batch_size, 28 * 28)</span></span><br><span class="line">    <span class="comment"># to a 4D tensor, compatible with our LeNetConPoolLayer.</span></span><br><span class="line">    <span class="comment"># (28, 28) is the size of MNIST images.</span></span><br><span class="line">    layer0_input = x.reshape((batch_size, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct the first convolutional pooling layer:</span></span><br><span class="line">    <span class="comment"># filtering reduces the image size to (28-5+1, 28-5+1) = (24, 24)</span></span><br><span class="line">    <span class="comment"># maxpooling reduces this further to (24/2, 24/2) = (12, 12)</span></span><br><span class="line">    <span class="comment"># 4D output tensor is thus of shape (batch_size, nkerns[0], 12, 12)</span></span><br><span class="line">    layer0 = LeNetConvPoolLayer(</span><br><span class="line">        rng,</span><br><span class="line">        input=layer0_input,</span><br><span class="line">        image_shape=(batch_size, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>),</span><br><span class="line">        filter_shape=(nkerns[<span class="number">0</span>], <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">        poolsize=(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct the second convolutional pooling layer:</span></span><br><span class="line">    <span class="comment"># filtering reduces the image size to (12-5+1, 12-5+1) = (8, 8)</span></span><br><span class="line">    <span class="comment"># maxpooling reduces this further to (8/2, 8/2) = (4, 4)</span></span><br><span class="line">    <span class="comment"># 4D output tensor is thus of shape (batch_size, nkerns[1], 4, 4)</span></span><br><span class="line">    layer1 = LeNetConvPoolLayer(</span><br><span class="line">        rng,</span><br><span class="line">        input=layer0.output,</span><br><span class="line">        image_shape=(batch_size, <span class="number">1</span>, <span class="number">12</span>, <span class="number">12</span>),</span><br><span class="line">        filter_shape=(nkerns[<span class="number">1</span>], nkerns[<span class="number">0</span>], <span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">        poolsize=(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the HiddenLayer being fully-connected, it operates on 2D matrices of</span></span><br><span class="line">    <span class="comment"># shape (batch_size, num_pixels) (i.e. matrix of rasterized images).</span></span><br><span class="line">    <span class="comment"># This will generate a matrix of shape (batch_size, nkerns[1] * 4 * 4),</span></span><br><span class="line">    <span class="comment"># or (500, 50 * 4 * 4) = (500, 800) with the default values.</span></span><br><span class="line">    layer2_input = layer1.output.flatten(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct a fully-connected sigmoidal layer</span></span><br><span class="line">    layer2 = HiddenLayer(</span><br><span class="line">        rng,</span><br><span class="line">        n_input=layer2_input,</span><br><span class="line">        n_in=nkerns[<span class="number">1</span>] * <span class="number">4</span> * <span class="number">4</span>,</span><br><span class="line">        n_out=<span class="number">500</span>,</span><br><span class="line">        activation=T.tanh</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># classify the values of the fully-connected sigmoidal layer</span></span><br><span class="line">    layer3 = LogisticRegression(input=layer2.output, n_in=<span class="number">500</span>, n_out=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the cost we minimize during training is the NLL of the model value</span></span><br><span class="line">    cose = layer3.negative_log_likelihood(y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create a function to compute the mistakes that are made by the model</span></span><br><span class="line">    test_model = theano.function(</span><br><span class="line">        [index],</span><br><span class="line">        layer3.errors(y),</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: test_set_y[index * batch_size: (index+<span class="number">1</span>) * batch_size],</span><br><span class="line">            y: test_set_y[index * batch_size: (index+<span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    validate_model = theano.function(</span><br><span class="line">        [index],</span><br><span class="line">        layer3.errors(y),</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: valid_set_x[index * batch_size: (index+<span class="number">1</span>) * batch_size],</span><br><span class="line">            y: valid_set_y[index * batch_size: (index+<span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create a list of all model parameters to be fit by gradient descent</span></span><br><span class="line">    params = layer3.params + layer2.params + layer1.params + layer0.params</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create a list of gradients for all model parameters</span></span><br><span class="line">    grads = T.grad(cost, params)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># train_model is a function that updates the model parameters by SGD.</span></span><br><span class="line">    <span class="comment"># Since this model has many parameters, it would be tedious to manually</span></span><br><span class="line">    <span class="comment"># create an update rule for each model parameter.</span></span><br><span class="line">    <span class="comment"># We thus create the updates list by automatically looping over all</span></span><br><span class="line">    <span class="comment"># (params[i], grads[i]) pairs.</span></span><br><span class="line">    updates = [</span><br><span class="line">        (param_i, param_i - learning_rate * grad_i)</span><br><span class="line">        <span class="keyword">for</span> param_i, grad_i <span class="keyword">in</span> zip(params, grads)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    train_model = theano.function(</span><br><span class="line">        [index],</span><br><span class="line">        cost,</span><br><span class="line">        updates=updates,</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: train_set_x[index * batch_size: (index+<span class="number">1</span>) * batch_size],</span><br><span class="line">            y: train_set_y[index * batch_size: (index+<span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">###############</span></span><br><span class="line">    <span class="comment"># TRAIN MODEL #</span></span><br><span class="line">    <span class="comment">###############</span></span><br><span class="line">    print(<span class="string">'... training'</span>)</span><br><span class="line">    <span class="comment"># early-stopping parameters</span></span><br><span class="line">    patience = <span class="number">10000</span>  <span class="comment"># look as this many examples regardless</span></span><br><span class="line">    <span class="comment"># wait this much longer when a new best is found</span></span><br><span class="line">    patience_increase = <span class="number">2</span></span><br><span class="line">    <span class="comment"># a relative improvement of this much is considered significant</span></span><br><span class="line">    improvement_threshold = <span class="number">2</span></span><br><span class="line">    <span class="comment"># go through this many mini-batch</span></span><br><span class="line">    <span class="comment"># before checking the network on the validation set;</span></span><br><span class="line">    <span class="comment"># in this case we check every epoch</span></span><br><span class="line">    validation_frequency = min(n_train_batches, patience // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    best_validation_loss = numpy.inf</span><br><span class="line">    best_iter = <span class="number">0</span></span><br><span class="line">    test_score = <span class="number">0.</span></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    epoch = <span class="number">0</span></span><br><span class="line">    done_looping = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (epoch &lt; n_epochs) <span class="keyword">and</span> (<span class="keyword">not</span> done_looping):</span><br><span class="line">        epoch += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> minibatch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">            iter = (epoch - <span class="number">1</span>) * n_train_batches + minibatch_index</span><br><span class="line">            <span class="keyword">if</span> iter % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'training @ iter = '</span>, iter)</span><br><span class="line">            cost_ij = train_model(minibatch_index)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (iter + <span class="number">1</span>) % validation_frequency == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                <span class="comment"># compute zero-one loss on validation set</span></span><br><span class="line">                validation_losses = [validate_model(i) <span class="keyword">for</span> i</span><br><span class="line">                                     <span class="keyword">in</span> range(n_valid_batches)]</span><br><span class="line">                this_validation_loss = numpy.mean(validation_losses)</span><br><span class="line">                print(<span class="string">'epoch %i, minibatch %i/%i, validation error %f %%'</span> %</span><br><span class="line">                    (</span><br><span class="line">                        epoch,</span><br><span class="line">                        minibatch_index + <span class="number">1</span>,</span><br><span class="line">                        n_train_batches,</span><br><span class="line">                        this_validation_loss * <span class="number">100.</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="comment"># if we got the best validation score util now</span></span><br><span class="line">                <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss:</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># improve patience if lloss improvement is good enough</span></span><br><span class="line">                    <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss * \</span><br><span class="line">                        improvement_threshold:</span><br><span class="line">                         patience = max(patience, iter * patience_increase)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># save best validation score and iteration number</span></span><br><span class="line">                    best_validation_loss = this_validation_loss</span><br><span class="line">                    best_iter = iter</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># test it on the test set</span></span><br><span class="line">                    test_losses = [test_model(i) <span class="keyword">for</span> i</span><br><span class="line">                                  <span class="keyword">in</span> range(n_test_batches)]</span><br><span class="line">                    test_score = numpy.mean(test_losses)</span><br><span class="line">                    print(<span class="string">'epoch %i, minibatch %i/%i, '</span> + </span><br><span class="line">                          <span class="string">'test error of best model %f %%'</span> %</span><br><span class="line">                          (</span><br><span class="line">                              epoch,</span><br><span class="line">                              minibatch_index + <span class="number">1</span>,</span><br><span class="line">                              n_train_batches,</span><br><span class="line">                              test_score * <span class="number">100.</span></span><br><span class="line">                          )</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> patience &lt;= iter:</span><br><span class="line">                done_looping = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'Optimization complete.'</span>)</span><br><span class="line">    print(<span class="string">'Best validation score of %f %% obtained at iteration %i, '</span> +</span><br><span class="line">          <span class="string">'with test performance %f %%'</span> %</span><br><span class="line">          (</span><br><span class="line">              best_validation_loss * <span class="number">100.</span>,</span><br><span class="line">              best_iter + <span class="number">1</span>,</span><br><span class="line">              test_score * <span class="number">100.</span></span><br><span class="line">          ))</span><br><span class="line">    print(<span class="string">'The code for file '</span> +</span><br><span class="line">          os.path.split(__file__)[<span class="number">1</span>] +</span><br><span class="line">          <span class="string">' ran for %.2fm'</span> %</span><br><span class="line">          (</span><br><span class="line">              (end_time - start_time) / <span class="number">60.</span></span><br><span class="line">          ),</span><br><span class="line">          file=sys.stderr</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">'__main__'</span>:</span><br><span class="line">    evaluate_lenet5()</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.deeplearning.net/tutorial/lenet.html#lenet" target="_blank" rel="noopener">Convolutional Neural Networks (LeNet)</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - 实现Multilayer Perceptron]]></title>
      <url>http://www.wrran.com/blog/2017/03/11/howto/theano/3-multilayer-perceptron/</url>
      <content type="html"><![CDATA[<blockquote><p>你对Theano一无所知<br>(ง •_•)ง</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分是学习用theano构建神经网络的第二个教程。建议读者阅读原文，注意先阅读<a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a>及<a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a>部分。同时，该博文仅仅罗列出原文的完整代码（可能加上自己<strong>主观的理解</strong>），请谨慎食用。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> logistic_sgd <span class="keyword">import</span> LogisticRegression, load_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HiddenLayer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rng, input, n_in, n_out, W=None, b=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                activation=T.tanh)</span>:</span></span><br><span class="line">        <span class="string">""" Typical hidden layer of a MLP: units are fully-connected and have</span></span><br><span class="line"><span class="string">        sigmoidal activation function. Weight matrix W is of shape (n_in, n_out)</span></span><br><span class="line"><span class="string">        and the bias vector b is of shape (n_out,).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        NOTE: the nonlinearity used here is tanh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Hidden unit activation is given by: tanh(dot(input, W) + b)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type rng: numpy.random.RandomState</span></span><br><span class="line"><span class="string">        :param rng: a random number generator used to initialize weights</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type input: theano.tensor.dmatrix</span></span><br><span class="line"><span class="string">        :param input: a symbolic tensor of shape (n_examples, n_in)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_in: int</span></span><br><span class="line"><span class="string">        :param n_in: dimensionality of input</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_out: int</span></span><br><span class="line"><span class="string">        :param n_out: number of hidden units</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type activation: theano.Op or function</span></span><br><span class="line"><span class="string">        :param activation: Non linearity to be applied in the hidden layer</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.input = input</span><br><span class="line"></span><br><span class="line">        <span class="comment"># `W` is initialized with `W_values` which is uniformely sampled</span></span><br><span class="line">        <span class="comment"># from sqrt(-6./(n_in+n_hidden)) and sqrt(6./(n_in+n_hidden))</span></span><br><span class="line">        <span class="comment"># for tanh activation function</span></span><br><span class="line">        <span class="comment"># the output of uniform if converted using asarray to dtype</span></span><br><span class="line">        <span class="comment"># theano.config.floatX so that the code is runable on GPU</span></span><br><span class="line">        <span class="comment"># Note : optimal initialization of weights is dependent on the</span></span><br><span class="line">        <span class="comment">#        activation function used (among other things).</span></span><br><span class="line">        <span class="comment">#        For example, results presented in [Xavier10] suggest that you</span></span><br><span class="line">        <span class="comment">#        should use 4 times larger initial weights for sigmoid</span></span><br><span class="line">        <span class="comment">#        compared to tanh</span></span><br><span class="line">        <span class="comment">#        We have no info for other function, so we use the same as</span></span><br><span class="line">        <span class="comment">#        tanh.</span></span><br><span class="line">        <span class="keyword">if</span> W <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            W_values = numpy.asarray(</span><br><span class="line">                rng.uniform(</span><br><span class="line">                    low=-numpy.sqrt(<span class="number">6.</span>/(n_in + n_out)),</span><br><span class="line">                    high=numpy.sqrt(<span class="number">6.</span>/(n_in + n_out)),</span><br><span class="line">                    size=(n_in, n_out)</span><br><span class="line">                ),</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> activation == theano.tensor.nnet.sigmoid:</span><br><span class="line">                W_values *= <span class="number">4</span></span><br><span class="line">            </span><br><span class="line">            W = theano.shared(value=W_values, name=<span class="string">'W'</span>, borrow=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            b_values = numpy.zeros((n_out,), dtype=theano.config.floatX)</span><br><span class="line">            b = theano.shared(value=b_values, name=<span class="string">'b'</span>, borrow=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        self.W = W</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">        lin_output = T.dot(input, self.W) + self.b</span><br><span class="line">        self.output = (</span><br><span class="line">            lin_output <span class="keyword">if</span> activation <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span> activation(lin_output)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># parameters of the model</span></span><br><span class="line">        self.params = [self.W, self.b]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLP</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" Multi-layer Perceptron Class</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A multilayer perceptron is a feed-forward artificial neural network model</span></span><br><span class="line"><span class="string">    that has one layer or more of hidden units and nonlinear activations.</span></span><br><span class="line"><span class="string">    Intermediate layers usually have as activation function tanh or the sigmoid</span></span><br><span class="line"><span class="string">    function (defined here by a ``HiddenLayer`` class) while the top layer is a</span></span><br><span class="line"><span class="string">    softmax layer (defined here by a ``LogisticRegression`` class).</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rng, input, n_in, hidden, n_out)</span>:</span></span><br><span class="line">        <span class="string">"""Initialize the parameters for the multilayer perceptron</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type rng: numpy.random.RandomState</span></span><br><span class="line"><span class="string">        :param rng: a random number generator used to initialize weights</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type input: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param input: symbolic variable that describes the input of the</span></span><br><span class="line"><span class="string">        architecture (one minibatch)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_in: int</span></span><br><span class="line"><span class="string">        :param n_in: number of input units, the dimension of the space in</span></span><br><span class="line"><span class="string">        which the datapoints lie</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_hidden: int</span></span><br><span class="line"><span class="string">        :param n_hidden: number of hidden units</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_out: int</span></span><br><span class="line"><span class="string">        :param n_out: number of output units, the dimension of the space in</span></span><br><span class="line"><span class="string">        which the labels lie</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Since we are dealing with a one hidden layer MLP, this will translate</span></span><br><span class="line">        <span class="comment"># into a HiddenLayer with a tanh activation function connected to the</span></span><br><span class="line">        <span class="comment"># LogisticRegression layer; the activation function can be replaced by</span></span><br><span class="line">        <span class="comment"># sigmoid or any other nonlinear function</span></span><br><span class="line">        self.hiddenLayer = HiddenLayer(</span><br><span class="line">            rng=rng,</span><br><span class="line">            input=input,</span><br><span class="line">            n_in=n_in,</span><br><span class="line">            n_out=n_hidden,</span><br><span class="line">            activation=T.tanh</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The logistic regression layer gets as input the hidden units</span></span><br><span class="line">        <span class="comment"># of the hidden layer</span></span><br><span class="line">        self.logRegressionLayer = LogisticRegression(</span><br><span class="line">            input=self.hiddenLayer.output,</span><br><span class="line">            n_in=n_hidden,</span><br><span class="line">            n_out=n_out</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># L1 norm</span></span><br><span class="line">        <span class="comment"># one regularization option is to enforce L1 norm to be small</span></span><br><span class="line">        self.L1 = (</span><br><span class="line">            abs(self.hiddenLayer.W).sum()</span><br><span class="line">            + abs(self.logRegressionLayer.W).sum()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># square of L2 norm</span></span><br><span class="line">        <span class="comment"># one regularization option is to enforce square of L2 norm to be small</span></span><br><span class="line">        self.L2_sqr = (</span><br><span class="line">            (self.hiddenLayer.W ** <span class="number">2</span>).sum()</span><br><span class="line">            + (self.logRegressionLayer.W ** <span class="number">2</span>).sum()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># negative log likelihood of the MLP is given by the negative</span></span><br><span class="line">        <span class="comment"># log likelihood of the output of the model, computed in the</span></span><br><span class="line">        <span class="comment"># logistic regression layer</span></span><br><span class="line">        self.negative_log_likelihood = (</span><br><span class="line">            self.logRegressionLayer.negative_log_likelihood</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># same holds for the function computing the number of errors</span></span><br><span class="line">        self.errors = self.logRegressionLayer.errors</span><br><span class="line"></span><br><span class="line">        <span class="comment"># the parameters of the model are the parameters of the two layer it is</span></span><br><span class="line">        <span class="comment"># made out of</span></span><br><span class="line">        self.params = self.hiddenLayer.params + self.logRegressionLayer.params</span><br><span class="line">        <span class="comment"># end-snippet-3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># keep track of model input</span></span><br><span class="line">        self.input = input</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_mlp</span><span class="params">(learning_rate=<span class="number">0.01</span>, L1_reg=<span class="number">0.00</span>, L2_reg=<span class="number">0.00001</span>, n_epochs=<span class="number">1000</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             dataset=<span class="string">'mnist.pkl.gz'</span>, batch_size=<span class="number">20</span>, n_hidden=<span class="number">500</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Demonstrate stochastic gradient descent optimization for a multilayer</span></span><br><span class="line"><span class="string">    perceptron</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is demonstrated on MNIST.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type learning_rate: float</span></span><br><span class="line"><span class="string">    :param learning_rate: learning rate used (factor for the stochastic</span></span><br><span class="line"><span class="string">    gradient</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type L1_reg: float</span></span><br><span class="line"><span class="string">    :param L1_reg: L1-norm's weight when added to the cost (see</span></span><br><span class="line"><span class="string">    regularization)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type L2_reg: float</span></span><br><span class="line"><span class="string">    :param L2_reg: L2-norm's weight when added to the cost (see</span></span><br><span class="line"><span class="string">    regularization)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type n_epochs: int</span></span><br><span class="line"><span class="string">    :param n_epochs: maximal number of epochs to run the optimizer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type dataset: string</span></span><br><span class="line"><span class="string">    :param dataset: the path of the MNIST dataset file from</span></span><br><span class="line"><span class="string">                 http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    datasets = load_data(dataset)</span><br><span class="line"></span><br><span class="line">    train_set_x, train_set_y = datasets[<span class="number">0</span>]</span><br><span class="line">    valid_set_x, valid_set_y = datasets[<span class="number">1</span>]</span><br><span class="line">    test_set_x, test_set_y = datasets[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute number of minibatches for training, validation and testing</span></span><br><span class="line">    n_train_batches = train_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line">    n_valid_batches = valid_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line">    n_test_batches = test_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">######################</span></span><br><span class="line">    <span class="comment"># BUILD ACTUAL MODEL #</span></span><br><span class="line">    <span class="comment">######################</span></span><br><span class="line">    print(<span class="string">'... building the model'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># allocate symbolic variables for the data</span></span><br><span class="line">    index = T.lscalar()  <span class="comment"># index to a [mini]batch</span></span><br><span class="line">    x = T.matrix(<span class="string">'x'</span>)  <span class="comment"># the data is presented as rasterized images</span></span><br><span class="line">    <span class="comment"># the labels are presented as 1D vector of [int] labels</span></span><br><span class="line">    y = T.ivector(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">    rng = numpy.random.RandomState(<span class="number">1234</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct the MLP classes</span></span><br><span class="line">    classifier = MLP(</span><br><span class="line">        rng=rng,</span><br><span class="line">        input=x,</span><br><span class="line">        n_in=<span class="number">28</span> * <span class="number">28</span>,</span><br><span class="line">        n_hidden=n_hidden,</span><br><span class="line">        n_out=<span class="number">10</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the cost we minimize during training is the negative log likelihood of </span></span><br><span class="line">    <span class="comment"># the model plus the regularization terms (L1 and L2)</span></span><br><span class="line">    <span class="comment"># cost is expressed here symbolically</span></span><br><span class="line">    cost = (</span><br><span class="line">        classifier.negative_log_likelihood(y)</span><br><span class="line">        + L1_reg * classifier.L1</span><br><span class="line">        + L2_reg * classifier.L2_sqr</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compiling a Theano function that computes the mistakes that are made</span></span><br><span class="line">    <span class="comment"># by the model on a mini-batch</span></span><br><span class="line">    test_model = theano.function(</span><br><span class="line">        inputs=[index],</span><br><span class="line">        outputs=classifier.errors(y),</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: test_set_x[index * batch_size:(index + <span class="number">1</span>) * batch_size],</span><br><span class="line">            y: test_set_y[index * batch_size:(index + <span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    validate_model = theano.function(</span><br><span class="line">        inputs=[index],</span><br><span class="line">        outputs=classifier.errors(y),</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: valid_set_x[index * batch_size:(index + <span class="number">1</span>) * batch_size],</span><br><span class="line">            y: valid_set_y[index * batch_size:(index + <span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the gradient of cost with respect to theta (sorted in params)</span></span><br><span class="line">    <span class="comment"># the resulting gradients will be stored in a list gparams</span></span><br><span class="line">    gparams = [T.grad(cost, param) <span class="keyword">for</span> param <span class="keyword">in</span> classifier.params]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># specify how to update the parameters of the model as a list of</span></span><br><span class="line">    <span class="comment"># (variable, update expression) pairs</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># given two lists of the same length, A = [a1, a2, a3, a4] and</span></span><br><span class="line">    <span class="comment"># B = [b1, b2, b3, b4], zip generates a list C of same size, where each</span></span><br><span class="line">    <span class="comment"># element is a pair formed from the two lists :</span></span><br><span class="line">    <span class="comment">#    C = [(a1, b1), (a2, b2), (a3, b3), (a4, b4)]</span></span><br><span class="line">    updates = [</span><br><span class="line">        (param, param - learning_rate * gparam)</span><br><span class="line">        <span class="keyword">for</span> param, gparam <span class="keyword">in</span> zip(classifier.params, gparams)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compiling a Theano function `train_model` that returns the cost, but</span></span><br><span class="line">    <span class="comment"># in the same time updates the parameter of the model based on the rules</span></span><br><span class="line">    <span class="comment"># defined in `updates`</span></span><br><span class="line">    train_model = theano.function(</span><br><span class="line">        inputs=[index],</span><br><span class="line">        outputs=cost,</span><br><span class="line">        updates=updates,</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: train_set_x[index * batch_size: (index + <span class="number">1</span>) * batch_size],</span><br><span class="line">            y: train_set_y[index * batch_size: (index + <span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">###############</span></span><br><span class="line">    <span class="comment"># TRAIN MODEL #</span></span><br><span class="line">    <span class="comment">###############</span></span><br><span class="line">    print(<span class="string">'... training'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># early-stopping parameters</span></span><br><span class="line">    patience = <span class="number">10000</span>  <span class="comment"># look as this many examples regardless</span></span><br><span class="line">    patience_increase = <span class="number">2</span>  <span class="comment"># wait this much longer when a new best is</span></span><br><span class="line">                           <span class="comment"># found</span></span><br><span class="line">    improvement_threshold = <span class="number">0.995</span>  <span class="comment"># a relative improvement of this much is</span></span><br><span class="line">                                   <span class="comment"># considered significant</span></span><br><span class="line">    validation_frequency = min(n_train_batches, patience // <span class="number">2</span>)</span><br><span class="line">                                  <span class="comment"># go through this many</span></span><br><span class="line">                                  <span class="comment"># minibatche before checking the network</span></span><br><span class="line">                                  <span class="comment"># on the validation set; in this case we</span></span><br><span class="line">                                  <span class="comment"># check every epoch</span></span><br><span class="line"></span><br><span class="line">    best_validation_loss = numpy.inf</span><br><span class="line">    best_iter = <span class="number">0</span></span><br><span class="line">    test_score = <span class="number">0.</span></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    epoch = <span class="number">0</span></span><br><span class="line">    done_looping = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (epoch &lt; n_epochs) <span class="keyword">and</span> (<span class="keyword">not</span> done_looping):</span><br><span class="line">        epoch = epoch + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> minibatch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line"></span><br><span class="line">            minibatch_avg_cost = train_model(minibatch_index)</span><br><span class="line">            <span class="comment"># iteration number</span></span><br><span class="line">            iter = (epoch - <span class="number">1</span>) * n_train_batches + minibatch_index</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (iter + <span class="number">1</span>) % validation_frequency == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># compute zero-one loss on validation set</span></span><br><span class="line">                validation_losses = [validate_model(i) <span class="keyword">for</span> i</span><br><span class="line">                                     <span class="keyword">in</span> range(n_valid_batches)]</span><br><span class="line">                this_validation_loss = numpy.mean(validation_losses)</span><br><span class="line"></span><br><span class="line">                print(</span><br><span class="line">                    <span class="string">'epoch %i, minibatch %i/%i, validation error %f %%'</span> %</span><br><span class="line">                    (</span><br><span class="line">                        epoch,</span><br><span class="line">                        minibatch_index + <span class="number">1</span>,</span><br><span class="line">                        n_train_batches,</span><br><span class="line">                        this_validation_loss * <span class="number">100.</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="comment"># if we got the best validation score until now</span></span><br><span class="line">                <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss:</span><br><span class="line">                    <span class="comment">#improve patience if loss improvement is good enough</span></span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                        this_validation_loss &lt; best_validation_loss *</span><br><span class="line">                        improvement_threshold</span><br><span class="line">                    ):</span><br><span class="line">                        patience = max(patience, iter * patience_increase)</span><br><span class="line"></span><br><span class="line">                    best_validation_loss = this_validation_loss</span><br><span class="line">                    best_iter = iter</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># test it on the test set</span></span><br><span class="line">                    test_losses = [test_model(i) <span class="keyword">for</span> i</span><br><span class="line">                                   <span class="keyword">in</span> range(n_test_batches)]</span><br><span class="line">                    test_score = numpy.mean(test_losses)</span><br><span class="line"></span><br><span class="line">                    print((<span class="string">'     epoch %i, minibatch %i/%i, test error of '</span></span><br><span class="line">                           <span class="string">'best model %f %%'</span>) %</span><br><span class="line">                          (epoch, minibatch_index + <span class="number">1</span>, n_train_batches,</span><br><span class="line">                           test_score * <span class="number">100.</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> patience &lt;= iter:</span><br><span class="line">                done_looping = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line">    print((<span class="string">'Optimization complete. Best validation score of %f %% '</span></span><br><span class="line">           <span class="string">'obtained at iteration %i, with test performance %f %%'</span>) %</span><br><span class="line">          (best_validation_loss * <span class="number">100.</span>, best_iter + <span class="number">1</span>, test_score * <span class="number">100.</span>))</span><br><span class="line">    print((<span class="string">'The code for file '</span> +</span><br><span class="line">           os.path.split(__file__)[<span class="number">1</span>] +</span><br><span class="line">           <span class="string">' ran for %.2fm'</span> % ((end_time - start_time) / <span class="number">60.</span>)), file=sys.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_mlp()</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.deeplearning.net/tutorial/mlp.html#mlp" target="_blank" rel="noopener">Multilayer Perceptron</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - 实现Logistic Regression]]></title>
      <url>http://www.wrran.com/blog/2017/03/11/howto/theano/2-logistic-regression/</url>
      <content type="html"><![CDATA[<blockquote><p>你对Theano一无所知<br>(ง •_•)ง</p></blockquote><a id="more"></a><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>该部分是学习用theano构建神经网络的第一个教程。建议读者阅读原文，注意先阅读<a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a>及<a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a>部分。同时，该博文仅仅罗列出原文的完整代码（可能加上自己<strong>主观的理解</strong>），请谨慎食用。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> six.moves.cPickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticRegression</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" Multi-class Logistic Regression Class</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The logistic regression is fully described by a weight matrix `W`,</span></span><br><span class="line"><span class="string">    and bias vector `b`. Classification is done by projecting data points</span></span><br><span class="line"><span class="string">    onto a set of hyperplanes, the distance to which is used to</span></span><br><span class="line"><span class="string">    determine a class membership probability.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input, n_in, n_out)</span>:</span></span><br><span class="line">        <span class="string">""" Initialize the parameters of the logistic regression</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type input: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">        :param input: symbolic variable that describes the input of the</span></span><br><span class="line"><span class="string">                      architecture (one minibatch)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_in: int</span></span><br><span class="line"><span class="string">        :param n_in: number of input units, the dimension of the space in</span></span><br><span class="line"><span class="string">                     which the data points lie</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :type n_out: int</span></span><br><span class="line"><span class="string">        :param n_out: number of output units, the dimension of the space in</span></span><br><span class="line"><span class="string">                      which the labels lie</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialize with 0 the weights W as a matrix of shape (n_in, n_out)</span></span><br><span class="line">        self.W = theano.shared(</span><br><span class="line">            value=numpy.zeros(</span><br><span class="line">                (n_in, n_out),</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            ),</span><br><span class="line">            name=<span class="string">'W'</span>,</span><br><span class="line">            borrow=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># initialize the biases b as a vector of n_out 0 s</span></span><br><span class="line">        self.b = theano.shared(</span><br><span class="line">            value=numpy.zeros(</span><br><span class="line">                (n_out, ),</span><br><span class="line">                dtype=theano.config.floatX</span><br><span class="line">            ),</span><br><span class="line">            name=<span class="string">'b'</span>,</span><br><span class="line">            borrow=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># symbolic expression for computing the matrix of class-membership</span></span><br><span class="line">        <span class="comment"># probabilities</span></span><br><span class="line">        <span class="comment"># Where:</span></span><br><span class="line">        <span class="comment"># W is a matrix where column-k represent the separation hyperplane for class-k</span></span><br><span class="line">        <span class="comment"># x is a matrix where row-j represents input training sample-j</span></span><br><span class="line">        <span class="comment"># b is a vector where element-k represent the free parameter of hyperplane-k</span></span><br><span class="line">        self.p_y_given_x = T.nnet.softmax(T.dot(input, self.W) + self.b)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># symbolic description of how to compute prediction as class whose</span></span><br><span class="line">        <span class="comment"># probability is maximal</span></span><br><span class="line">        self.y_pred = T.argmax(self.p_y_given_x, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parameters of the model</span></span><br><span class="line">        self.params = [self.W, self.b]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># keep track of model input</span></span><br><span class="line">        self.input = input</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">negative_log_likehood</span><span class="params">(self, y)</span>:</span></span><br><span class="line">    <span class="string">""" Return the mean of the negative log-likelihood of the prediction</span></span><br><span class="line"><span class="string">    of this model under a given target distribution.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type y: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">    :param y: corresponds to a vector that gives for each example the corret label</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y.shape[0] is (symbolically) the number of rows in y, i.e.,</span></span><br><span class="line">    <span class="comment"># number of examples (call it n) in the mini-batch</span></span><br><span class="line">    <span class="comment"># T.arange(y.shape[0]) is a symbolic vector which will contain [0,1,2,...,n-1]</span></span><br><span class="line">    <span class="comment"># T.log(self.p_y_given_x) is a matrix of Log-Probabilities (call it LP) with</span></span><br><span class="line">    <span class="comment"># one row per example and one column pre class LP[T.arange(y.shape[0]), y]</span></span><br><span class="line">    <span class="comment"># is a vector v containing [LP[0, y[0]], LP[1, y[1]], ... LP[n-1, y[n-1]]]</span></span><br><span class="line">    <span class="comment"># and T.mean(LP[T.arange(y.shape[0]), y]) is the mean (across mini-batch examples)</span></span><br><span class="line">    <span class="comment"># of the elements in v, i.e., the mean log-likelihood across the mini-batch</span></span><br><span class="line">    <span class="keyword">return</span> -T.mean(T.log(self.p_y_given_x)[T.arange(y.shape[<span class="number">0</span>]), y])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">errors</span><span class="params">(self, y)</span>:</span></span><br><span class="line">    <span class="string">""" Return a float representing the number of errosrs in the mini-batch</span></span><br><span class="line"><span class="string">    over the total number of examples of the mini-batch;</span></span><br><span class="line"><span class="string">    zero-one loss over the size of the mini-batch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type y: theano.tensor.TensorType</span></span><br><span class="line"><span class="string">    :param y: corresponds to a vector that gives for each example the correct label</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if y has same dimension of y_pred</span></span><br><span class="line">    <span class="keyword">if</span> y.ndim != self.y_pred.dim:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(</span><br><span class="line">            <span class="string">'y should have the same shape as self.y_pred'</span>,</span><br><span class="line">            (<span class="string">'y'</span>, y.type, <span class="string">'y_pred'</span>, self.y_pred.type)</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if y is of the correct data type</span></span><br><span class="line">    <span class="keyword">if</span> y.dtype.startswith(<span class="string">'int'</span>):</span><br><span class="line">        <span class="comment"># the T.neq operator returns a vector of 0s and 1s,</span></span><br><span class="line">        <span class="comment"># where 1 represents a mistake in prediction</span></span><br><span class="line">        <span class="keyword">return</span> T.mean(T.neq(self.y_pred, y))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(dataset)</span>:</span></span><br><span class="line">    <span class="string">""" Load the dataset</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type dataset: str</span></span><br><span class="line"><span class="string">    :param dataset: the path to the dataset (here MNIST)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#############</span></span><br><span class="line">    <span class="comment"># LOAD DATA #</span></span><br><span class="line">    <span class="comment">#############</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Download the MNIST dataset if it is not present</span></span><br><span class="line">    data_dir, data_file = os.path.split(dataset)</span><br><span class="line">    <span class="keyword">if</span> data_dir == <span class="string">''</span> <span class="keyword">and</span> <span class="keyword">not</span> os.path.isfile(dataset):</span><br><span class="line">        <span class="comment"># Check if dataset is in the data directory.</span></span><br><span class="line">        new_path = os.path.join(</span><br><span class="line">            os.path.split(__file__)[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'..'</span>,</span><br><span class="line">            <span class="string">'data'</span>,</span><br><span class="line">            dataset</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(new_path) <span class="keyword">or</span> data_file == <span class="string">'mnist.pkl.gz'</span>:</span><br><span class="line">            dataset = new_path</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> os.path.isfile(dataset)) <span class="keyword">and</span> data_file == <span class="string">'mnist.pkl.gz'</span>:</span><br><span class="line">        <span class="keyword">from</span> six.moves <span class="keyword">import</span> urllib</span><br><span class="line">        origin = (</span><br><span class="line">            <span class="string">'http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz'</span></span><br><span class="line">        )</span><br><span class="line">        print(<span class="string">'Downloading data from %s'</span> % origin)</span><br><span class="line">        urllib.request.urlretrieve(origin, dataset)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'... loading data'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load the dataset</span></span><br><span class="line">    <span class="keyword">with</span> gzip.open(dataset, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            train_set, valid_set, test_set = pickle.load(f, encoding=<span class="string">'latin1'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            train_set, valid_set, test_set = pickle.load(f)</span><br><span class="line">    <span class="comment"># train_set, valid_set, test_set format: tuple(input, target)</span></span><br><span class="line">    <span class="comment"># input is a numpy.ndarray of 2 dimensions (a matrix)</span></span><br><span class="line">    <span class="comment"># where each row corresponds to an example.</span></span><br><span class="line">    <span class="comment"># target is a numpy.ndarry of 1 dimension (vector)</span></span><br><span class="line">    <span class="comment"># that has the same length as the number of rows in the input.</span></span><br><span class="line">    <span class="comment"># It should give the target to the example with the same index in the input.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shared_dataset</span><span class="params">(data_xy, borrow=True)</span>:</span></span><br><span class="line">        <span class="string">""" Function that loads the dataset into shared varibales</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The reason we store our dataset in shared variables is to allow</span></span><br><span class="line"><span class="string">        Theano to copy it into the GPU memory (when code is run on GPU).</span></span><br><span class="line"><span class="string">        Since copying data into the GPU is slow, copying a mini-batch</span></span><br><span class="line"><span class="string">        every time is needed (the default behaviour if the data is not in a</span></span><br><span class="line"><span class="string">        shared variable) would lead to a large decrease in performance.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data_x, data_y = data_xy</span><br><span class="line">        shared_x = theano.shared(numpy.asarray(data_x,</span><br><span class="line">                                               dtype=theano.config.floatX),</span><br><span class="line">                                 borrow=<span class="literal">True</span>)</span><br><span class="line">        shared_y = theano.shared(numpy.asarray(data_y,</span><br><span class="line">                                               dtype=theano.config.floatX),</span><br><span class="line">                                 borrow=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># When storing data on the GPU it has to be stored as floats</span></span><br><span class="line">        <span class="comment"># therefore we will store the labels as `floatX` as well</span></span><br><span class="line">        <span class="comment"># (`shared_y` does exactly that). But during our computations</span></span><br><span class="line">        <span class="comment"># we need them as ints (we use labels as index, and if they are</span></span><br><span class="line">        <span class="comment"># floats it doesn't make sense) therefore instead of returning</span></span><br><span class="line">        <span class="comment"># `shared_y` we will have to cast it to int.</span></span><br><span class="line">        <span class="comment"># This little hack lets us get around this issue.</span></span><br><span class="line">        <span class="keyword">return</span> shared_x, T.cast(shared_y, <span class="string">'int32'</span>)</span><br><span class="line">    </span><br><span class="line">    test_set_x, test_set_y = shared_dataset(test_set)</span><br><span class="line">    valid_set_x, valid_set_y = shared_dataset(valid_set)</span><br><span class="line">    train_set_x, train_set_y = shared_dataset(train_set)</span><br><span class="line"></span><br><span class="line">    rval = [(train_set_x, train_set_y),</span><br><span class="line">            (valid_set_x, valid_set_y),</span><br><span class="line">            (test_set_x, test_set_y)]</span><br><span class="line">    <span class="keyword">return</span> rval</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgd_optimization_mnist</span><span class="params">(learning_rate=<span class="number">0.13</span>, n_epochs=<span class="number">1000</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           dataset=<span class="string">'mnist.pkl.gz'</span>, batch_size=<span class="number">600</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Demonstrate stochastic gradient descent optimization of a log-linear</span></span><br><span class="line"><span class="string">    model</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This is demonstrated on MNIST.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type learning_rate: float</span></span><br><span class="line"><span class="string">    :param learning_rate: learning rate used (factor for the stochastic gradient)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type n_epochs: int</span></span><br><span class="line"><span class="string">    :param n_epochs: maximal number of epochs to run the optimizer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :type dataset: str</span></span><br><span class="line"><span class="string">    :param dataset: the path of the MNIST dataset file from</span></span><br><span class="line"><span class="string">                    http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dataset = load_data(dataset)</span><br><span class="line"></span><br><span class="line">    train_set_x, train_set_y = datasets[<span class="number">0</span>]</span><br><span class="line">    valid_set_x, valid_set_y = datasets[<span class="number">1</span>]</span><br><span class="line">    test_set_x, test_set_y = datasets[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute number of mini-batches for training, validation and testing</span></span><br><span class="line">    n_train_batches = train_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line">    n_valid_batches = valid_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line">    n_test_batches = test_set_x.get_value(borrow=<span class="literal">True</span>).shape[<span class="number">0</span>] // batch_size</span><br><span class="line"></span><br><span class="line">    <span class="comment">######################</span></span><br><span class="line">    <span class="comment"># BUILD ACTUAL MODEL #</span></span><br><span class="line">    <span class="comment">######################</span></span><br><span class="line">    print(<span class="string">'... building the model'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># allocate symbolic variables for the data</span></span><br><span class="line">    index = T.lscalar()  <span class="comment"># index to a [mini]batch</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate symbolic variables for input</span></span><br><span class="line">    <span class="comment"># (x and y represent a mini-batch)</span></span><br><span class="line">    x = T.matrix(<span class="string">'x'</span>)  <span class="comment"># data, presented as rasterized images</span></span><br><span class="line">    y = T.ivector(<span class="string">'y'</span>)  <span class="comment"># labels, presented as 1D vector of [int] labels</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct the logistic regression class</span></span><br><span class="line">    <span class="comment"># Each MNIST image has size 28 * 28</span></span><br><span class="line">    classifier = LogisticRegression(input=x, n_in=<span class="number">28</span>*<span class="number">28</span>, n_out=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the cost we minimize during training is the negative log likelihood</span></span><br><span class="line">    <span class="comment"># of the model in symbolic format</span></span><br><span class="line">    cost = classifier.negative_log_likelihood(y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compiling a Theano function that computes the mistakes that are made by</span></span><br><span class="line">    <span class="comment"># the model on a mini-batch</span></span><br><span class="line">    test_model = theano.function(</span><br><span class="line">        inputs=[index],</span><br><span class="line">        outputs=classifier.errors(y),</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: test_set_x[index * batch_size: (index+<span class="number">1</span>) * batch_size],</span><br><span class="line">            y: test_set_y[index * batch_size: (index+<span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    validate_model = theano.function(</span><br><span class="line">        inputs=[index],</span><br><span class="line">        outputs=classifier.errors(y),</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: valid_set_x[index * batch_size: (index+<span class="number">1</span>) * batch_size],</span><br><span class="line">            y: valid_set_y[index * batch_size: (index+<span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compute the gradient of cost w.r.t. theta = (W, b)</span></span><br><span class="line">    g_W = T.grad(cost=cost, wrt=classifier.W)</span><br><span class="line">    g_b = T.grad(cost=cost, wrt=classifier.b)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># specify how to update the parameters of the model as </span></span><br><span class="line">    <span class="comment"># a list of (variable, update expression) pairs.</span></span><br><span class="line">    updates = [(classifier.W, classifier.W - learning_rate * g_W),</span><br><span class="line">               (classifier.b, classifier.b - learning_rate * g_b)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compiling a Theano function `train_model` that</span></span><br><span class="line">    <span class="comment"># returns the cost, but in the same time updaets the parameter of the model</span></span><br><span class="line">    <span class="comment"># based on the rules definded in the `updates`</span></span><br><span class="line">    train_model = theano.function(</span><br><span class="line">        inputs=[inputs],</span><br><span class="line">        outputs=cost,</span><br><span class="line">        updates=updates,</span><br><span class="line">        givens=&#123;</span><br><span class="line">            x: train_set_x[index * batch_size: (index+<span class="number">1</span>) * batch_size],</span><br><span class="line">            y: train_set_y[index * batch_size: (index+<span class="number">1</span>) * batch_size]</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">###############</span></span><br><span class="line">    <span class="comment"># TRAIN MODEL #</span></span><br><span class="line">    <span class="comment">###############</span></span><br><span class="line">    print(<span class="string">'... training the model'</span>)</span><br><span class="line">    <span class="comment"># early-stopping parameters</span></span><br><span class="line">    patience = <span class="number">5000</span>  <span class="comment"># look as this many examples regardless</span></span><br><span class="line">    patience_increase = <span class="number">2</span>  <span class="comment"># wait this much longer when a new best is founc</span></span><br><span class="line">    <span class="comment"># a relative improvement of this much is considered significant</span></span><br><span class="line">    improvement_threshold = <span class="number">0.995</span></span><br><span class="line">    <span class="comment"># go through this many mini-batch before checking the network on the </span></span><br><span class="line">    <span class="comment"># validation set; in this case we check every epoch</span></span><br><span class="line">    validation_frequency = min(n_train_batches, patience // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    best_validation_loss = numpy.inf</span><br><span class="line">    test_score = <span class="number">0.</span></span><br><span class="line">    start_time = timeit.default_timer()</span><br><span class="line"></span><br><span class="line">    done_looping = <span class="literal">False</span></span><br><span class="line">    epoch = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (epoch &lt; n_epochs) <span class="keyword">and</span> (<span class="keyword">not</span> done_looping):</span><br><span class="line">        epoch += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> minibatch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">            minibatch_avg_cost = train_model(minibatch_index)</span><br><span class="line">            <span class="comment"># iteration number</span></span><br><span class="line">            iter = (epoch - <span class="number">1</span>) * n_train_batches + minibatch_index</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (iter + <span class="number">1</span>) % validation_frequency == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># compute zero-one loss on validation set</span></span><br><span class="line">                validation_losses = [validate_model(i)</span><br><span class="line">                                     <span class="keyword">for</span> i <span class="keyword">in</span> range(n_valid_batches)]</span><br><span class="line">                this_validation_loss = numpy.mean(validation_losses)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">'epoch %i, minibatch %i/%i, validation error %f %%'</span> %</span><br><span class="line">                    (</span><br><span class="line">                        epoch,</span><br><span class="line">                        minibatch_index + <span class="number">1</span>,</span><br><span class="line">                        n_train_batches,</span><br><span class="line">                        this_validation_loss * <span class="number">100.</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="comment"># if we got the best validation score util now</span></span><br><span class="line">                <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss:</span><br><span class="line">                    <span class="comment"># improve patience if loss improvement is good enough</span></span><br><span class="line">                    <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss * \</span><br><span class="line">                        improvement_threshold:</span><br><span class="line">                        patience = max(patience, iter * patience_increase)</span><br><span class="line"></span><br><span class="line">                    best_validation_loss = this_validation_loss</span><br><span class="line">                    <span class="comment"># test it on the test set</span></span><br><span class="line"></span><br><span class="line">                    test_losses = [test_mode(i)</span><br><span class="line">                                  <span class="keyword">for</span> i <span class="keyword">in</span> range(n_test_batches)]</span><br><span class="line">                    test_score = numpy.mean(test_losses)</span><br><span class="line"></span><br><span class="line">                    print(<span class="string">'epoch %i, minibatch %i/%i, test error of best'</span> +</span><br><span class="line">                          <span class="string">' model %f %%'</span> %</span><br><span class="line">                          (</span><br><span class="line">                              epoch,</span><br><span class="line">                              minibatch_index + <span class="number">1</span>,</span><br><span class="line">                              n_train_batches,</span><br><span class="line">                              test_score * <span class="number">100.</span></span><br><span class="line">                          )</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># save the best model</span></span><br><span class="line">                    <span class="keyword">with</span> open(<span class="string">'best_mode.pkl'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        pickle.dump(classifier, f)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> patience &lt;= iter:</span><br><span class="line">                done_looping = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    end_time = timeit.default_timer()</span><br><span class="line">    print(<span class="string">'Optimization complete with best validation score of %f %%,'</span> + </span><br><span class="line">          <span class="string">'with test performance %f %%'</span> %</span><br><span class="line">          (</span><br><span class="line">              best_validation_loss * <span class="number">100.</span>,</span><br><span class="line">              test_score * <span class="number">100.</span></span><br><span class="line">          )</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">'The code run for %d epochs, with %f epochs/sec'</span> %</span><br><span class="line">        (</span><br><span class="line">            epoch,</span><br><span class="line">            <span class="number">1.</span> * epoch / (end_time - start_time)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">'The code for file '</span> +</span><br><span class="line">          os.path.split(__file__)[<span class="number">1</span>] +</span><br><span class="line">          <span class="string">' ran for %.1fs'</span> % (end_time - start_time),</span><br><span class="line">          file=sys.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" An example of how to load a trained model and use it to predict labels"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load the saved model</span></span><br><span class="line">    classifier = pickle.load(open(<span class="string">'best_model.pkl'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compile a predictor function</span></span><br><span class="line">    predict_model = theano.function(</span><br><span class="line">        inputs=[classifier.input],</span><br><span class="line">        outputs=classifier.y_pred</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We can test it on some examples from test set</span></span><br><span class="line">    dataset = <span class="string">'mnist.pkl.gz'</span></span><br><span class="line">    datasets = load_data(dataset)</span><br><span class="line">    test_set_x, test_set_y = datasets[<span class="number">2</span>]</span><br><span class="line">    test_set_x = test_set_x.get_value()</span><br><span class="line"></span><br><span class="line">    predicted_values = predict_model(test_set_x[:<span class="number">10</span>])</span><br><span class="line">    print(<span class="string">'Predicted values for the first 10 examples in test set:'</span>)</span><br><span class="line">    print(predicted_values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sgd_optimization_mnist()</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.deeplearning.net/tutorial/logreg.html#logreg" target="_blank" rel="noopener">Classifying MNIST digits using Logistic Regression</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano常见错误示例 一]]></title>
      <url>http://www.wrran.com/blog/2017/03/10/bugfix/theano-1/</url>
      <content type="html"><![CDATA[<blockquote><p>see, see, theano</p></blockquote><a id="more"></a><h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p>特别鸣谢<strong>@小黄学长</strong>(●’◡’●)</p><h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shared_rand_matrix</span><span class="params">(size, name, uniform_range=<span class="number">0</span>)</span>:</span></span><br><span class="line">    matrix = np.random.uniform(low=-uniform_range,</span><br><span class="line">                               high=uniform_range,</span><br><span class="line">                               size = size)</span><br><span class="line">    <span class="keyword">return</span> theano.shared(value=np.asarray(matrix,</span><br><span class="line">                         dtype=theano.config.floatX),</span><br><span class="line">                         name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopicMapper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, src_topic_dim, tar_topic_dim,</span></span></span><br><span class="line"><span class="function"><span class="params">                 uniform_range, prefix=<span class="string">'unknown'</span>)</span>:</span></span><br><span class="line">        self.src_topic_dim = src_topic_dim</span><br><span class="line">        self.tar_topic_dim = tar_topic_dim</span><br><span class="line">        self.uniform_range = uniform_range</span><br><span class="line">        self.name = prefix + <span class="string">'_topic_mapper'</span></span><br><span class="line">        </span><br><span class="line">        self.Wm = shared_rand_matrix(</span><br><span class="line">            size=(self.tar_topic_dim, self.src_topic_dim),</span><br><span class="line">            name=self.name+<span class="string">'-Wm'</span>,</span><br><span class="line">            uniform_range=self.uniform_range</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.bm = shared_rand_matrix(</span><br><span class="line">            size=(self.tar_topic_dim,),</span><br><span class="line">            name=self.name+<span class="string">'-bm'</span>,</span><br><span class="line">            uniform_range=self.uniform_range</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.paras = [self.Wm, self.bm]</span><br><span class="line"></span><br><span class="line">        self.l1_norm = T.sum(T.abs_(self.Wm))</span><br><span class="line">        self.l2_norm = T.sum(self.Wm ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTopicMapper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, src_topic, tar_topic)</span>:</span></span><br><span class="line">        self.src_t_embedding = src_topic</span><br><span class="line">        self.tar_t_embedding = tar_topic</span><br><span class="line">        self.src_topic_map = TopicMapper(</span><br><span class="line">            src_topic.shape[<span class="number">1</span>],</span><br><span class="line">            tar_topic.shape[<span class="number">1</span>],</span><br><span class="line">            <span class="number">0.1</span>,</span><br><span class="line">            prefix=<span class="string">'test'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_loss_topic_map_oneStep</span><span class="params">(self, src_topic_index, tar_topic_index)</span>:</span></span><br><span class="line">        src_topic = self.src_t_embedding[src_topic_index]</span><br><span class="line">        tar_topic = self.tar_t_embedding[tar_topic_index]</span><br><span class="line">        transform_topic = T.tanh(</span><br><span class="line">            self.src_topic_map.bm + T.dot(</span><br><span class="line">                src_topic,</span><br><span class="line">                self.src_topic_map.Wm</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        loss = T.sum((tar_topic - transform_topic) ** <span class="number">2</span>) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独更新主题映射的训练与测试函数</span></span><br><span class="line">src_topic_indexs = T.ivector()  <span class="comment"># 源主题嵌入的index</span></span><br><span class="line">tar_topic_indexs = T.ivector()  <span class="comment"># 目标主题嵌入的index</span></span><br><span class="line">src_topic_indexs = T.vector()</span><br><span class="line"></span><br><span class="line">src_topic = np.matrix([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line">tar_topic = np.matrix([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line">model = TestTopicMapper(src_topic, tar_topic)</span><br><span class="line">loss_topic, updates_topic = theano.scan(</span><br><span class="line">    fn=model.get_loss_topic_map_oneStep,</span><br><span class="line">    sequences=[src_topic_indexs, tar_topic_indexs]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">loss_topic = T.sum(loss_topic) / len(loss_topic)</span><br><span class="line">train_batch_topic_map = theano.function(</span><br><span class="line">    [src_topic_indexs, tar_topic_indexs],</span><br><span class="line">    outputs=[loss_topic],</span><br><span class="line">    updates=updates_topic</span><br><span class="line">)</span><br><span class="line">test_batch_topic_map = theano.function(</span><br><span class="line">    [src_topic_indexs, tar_topic_indexs],</span><br><span class="line">    outputs=[loss_topic]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_src_topic_index = np.asarray([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">test_tar_topic_index = np.asarray([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">train_batch_topic_map(test_src_topic_indexs, test_tar_topic_index)</span><br><span class="line">test_batch_topic_map(test_src_topic_indexs, test_tar_topic_index)</span><br></pre></td></tr></table></figure><h1 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h1><p>错误一：重复定义了<code>src_topic_indexs</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单独更新主题映射的训练与测试函数</span></span><br><span class="line">src_topic_indexs = T.ivector()  <span class="comment"># 源主题嵌入的index</span></span><br><span class="line">tar_topic_indexs = T.ivector()  <span class="comment"># 目标主题嵌入的index</span></span><br><span class="line">src_topic_indexs = T.vector()</span><br></pre></td></tr></table></figure><p>第三行重复定义了<code>src_topic_indexs</code>，数据类型变为<code>float</code>，而<code>float</code>的变量不能用做索引</p><p>纠正：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单独更新主题映射的训练与测试函数</span></span><br><span class="line">src_topic_indexs = T.ivector()  <span class="comment"># 源主题嵌入的index</span></span><br><span class="line">tar_topic_indexs = T.ivector()  <span class="comment"># 目标主题嵌入的index</span></span><br></pre></td></tr></table></figure><p></p><p>错误二：主题的嵌入表示的类型错误</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src_topic = np.matrix([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line">tar_topic = np.matrix([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br></pre></td></tr></table></figure><p>上述两个变量被用作为主题的嵌入表示，但是类型却为<em>numpy的数组</em>；而在函数<code>get_loss_topic_map_oneStep</code>中：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src_topic = self.src_t_embedding[src_topic_index]</span><br><span class="line">tar_topic = self.tar_t_embedding[tar_topic_index]</span><br></pre></td></tr></table></figure><p>中的<code>src_topic_index</code>和<code>tar_topic_index</code>却是<em>theano的变量</em>，从而导致错误。</p><p>纠正：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src_topic = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line">tar_topic = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">src_topic = theano.shared(src_topic)</span><br><span class="line">tar_topic = theano.shared(tar_topic)</span><br></pre></td></tr></table></figure><p></p><p>将<code>src_topic</code>和<code>tar_topic</code>变为<em>theano的变量</em></p><p>错误三：对<em>theano变量</em>调用方法<code>len</code><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loss_topic, updates_topic = theano.scan(</span><br><span class="line">    fn=model.get_loss_topic_map_oneStep,</span><br><span class="line">    sequences=[src_topic_indexs, tar_topic_indexs]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">loss_topic = T.sum(loss_topic) / len(loss_topic)</span><br></pre></td></tr></table></figure><p></p><p>此处的<code>loss_topic</code>为<em>theano的变量</em>，不支持<code>len</code>函数。如果要实现取均值的目的，可以通过如下形式。</p><p>纠正：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss_topic = T.sum(loss_topic)</span><br><span class="line">loss_topic = T.mean(loss_topic)</span><br></pre></td></tr></table></figure><p></p><p>或者</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss_topic = T.sum(loss_topic) / loss_topic.shape[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>错误四： 将<em>theano变量</em>当作正常的数组</p><p><code>TopicMapper</code>的构造函数中在构造成员成员变量<code>Wm</code>与<code>bm</code>时：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">self.Wm = shared_rand_matrix(</span><br><span class="line">    size=(self.tar_topic_dim, self.src_topic_dim),</span><br><span class="line">    name=self.name+<span class="string">'-Wm'</span>,</span><br><span class="line">    uniform_range=self.uniform_range</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">self.bm = shared_rand_matrix(</span><br><span class="line">    size=(self.tar_topic_dim,),</span><br><span class="line">    name=self.name+<span class="string">'-bm'</span>,</span><br><span class="line">    uniform_range=self.uniform_range</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><p>因为传入该处的<code>src_topic</code>与<code>tar_topic</code>都是<em>theano变量</em>，这导致由它们推导而来的<code>self.tar_topic_dim</code>与<code>self.src_topic_dim</code>也是<em>theano变量</em>。而方法<code>shared_rand_matrix</code>的参数类型为整数。</p><p>纠正：<br>将<code>TestTopicMapper</code>的方法<code>__init__</code>方法改成如下形式：<br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, src_topic, tar_topic)</span>:</span></span><br><span class="line">    self.src_t_embedding = src_topic</span><br><span class="line">    self.tar_t_embedding = tar_topic</span><br><span class="line">    self.src_topic_map = TopicMapper(</span><br><span class="line">        src_topic.get_value().shape[<span class="number">1</span>],</span><br><span class="line">        tar_topic.get_value().shape[<span class="number">1</span>],</span><br><span class="line">        <span class="number">0.1</span>, prefix=<span class="string">'test'</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p></p><p>这里的<code>.get_value()</code>是<em>theano的shared变量</em>获取实际的<em>numpy数组</em>的方法，如此取出来的<code>shape[1]</code>就是个实际数值，而不是<em>theano变量</em>了。</p><h1 id="正确代码"><a href="#正确代码" class="headerlink" title="正确代码"></a>正确代码</h1><p>将上述问题修正，汇总如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shared_rand_matrix</span><span class="params">(size, name, uniform_range=<span class="number">0</span>)</span>:</span></span><br><span class="line">    matrix = np.random.uniform(low=-uniform_range,</span><br><span class="line">                               high=uniform_range,</span><br><span class="line">                               size = size)</span><br><span class="line">    <span class="keyword">return</span> theano.shared(value=np.asarray(matrix,</span><br><span class="line">                         dtype=theano.config.floatX),</span><br><span class="line">                         name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopicMapper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, src_topic_dim, tar_topic_dim,</span></span></span><br><span class="line"><span class="function"><span class="params">                 uniform_range, prefix=<span class="string">'unknown'</span>)</span>:</span></span><br><span class="line">        self.src_topic_dim = src_topic_dim</span><br><span class="line">        self.tar_topic_dim = tar_topic_dim</span><br><span class="line">        self.uniform_range = uniform_range</span><br><span class="line">        self.name = prefix + <span class="string">'_topic_mapper'</span></span><br><span class="line">        </span><br><span class="line">        self.Wm = shared_rand_matrix(</span><br><span class="line">            size=(self.tar_topic_dim, self.src_topic_dim),</span><br><span class="line">            name=self.name+<span class="string">'-Wm'</span>,</span><br><span class="line">            uniform_range=self.uniform_range</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.bm = shared_rand_matrix(</span><br><span class="line">            size=(self.tar_topic_dim,),</span><br><span class="line">            name=self.name+<span class="string">'-bm'</span>,</span><br><span class="line">            uniform_range=self.uniform_range</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.paras = [self.Wm, self.bm]</span><br><span class="line"></span><br><span class="line">        self.l1_norm = T.sum(T.abs_(self.Wm))</span><br><span class="line">        self.l2_norm = T.sum(self.Wm ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTopicMapper</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, src_topic, tar_topic)</span>:</span></span><br><span class="line">        self.src_t_embedding = src_topic</span><br><span class="line">        self.tar_t_embedding = tar_topic</span><br><span class="line">        self.src_topic_map = TopicMapper(</span><br><span class="line">            src_topic.get_value().shape[<span class="number">1</span>],  <span class="comment"># BUGFIX-4</span></span><br><span class="line">            tar_topic.get_value().shape[<span class="number">1</span>],  <span class="comment"># BUGFIX-4</span></span><br><span class="line">            <span class="number">0.1</span>,</span><br><span class="line">            prefix=<span class="string">'test'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_loss_topic_map_oneStep</span><span class="params">(self, src_topic_index, tar_topic_index)</span>:</span></span><br><span class="line">        src_topic = self.src_t_embedding[src_topic_index]</span><br><span class="line">        tar_topic = self.tar_t_embedding[tar_topic_index]</span><br><span class="line">        transform_topic = T.tanh(</span><br><span class="line">            self.src_topic_map.bm + T.dot(</span><br><span class="line">                src_topic,</span><br><span class="line">                self.src_topic_map.Wm</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        loss = T.sum((tar_topic - transform_topic) ** <span class="number">2</span>) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独更新主题映射的训练与测试函数</span></span><br><span class="line">src_topic_indexs = T.ivector()  <span class="comment"># 源主题嵌入的index</span></span><br><span class="line">tar_topic_indexs = T.ivector()  <span class="comment"># 目标主题嵌入的index</span></span><br><span class="line"><span class="comment"># BUGFIX-1</span></span><br><span class="line"><span class="comment"># src_topic_indexs = T.vector()</span></span><br><span class="line"></span><br><span class="line">src_topic = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line">tar_topic = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line">src_topic = theano.shared(src_topic)  <span class="comment"># BUGFIX-2</span></span><br><span class="line">tar_topic = theano.shared(tar_topic)  <span class="comment"># BUGFIX-2</span></span><br><span class="line"></span><br><span class="line">model = TestTopicMapper(src_topic, tar_topic)</span><br><span class="line">loss_topic, updates_topic = theano.scan(</span><br><span class="line">    fn=model.get_loss_topic_map_oneStep,</span><br><span class="line">    sequences=[src_topic_indexs, tar_topic_indexs]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">loss_topic = T.sum(loss_topic)  <span class="comment"># BUGFIX-3</span></span><br><span class="line">loss_topic = T.mean(loss_topic)  <span class="comment"># BUGFIX-3</span></span><br><span class="line"></span><br><span class="line">train_batch_topic_map = theano.function(</span><br><span class="line">    [src_topic_indexs, tar_topic_indexs],</span><br><span class="line">    outputs=[loss_topic],</span><br><span class="line">    updates=updates_topic</span><br><span class="line">)</span><br><span class="line">test_batch_topic_map = theano.function(</span><br><span class="line">    [src_topic_indexs, tar_topic_indexs],</span><br><span class="line">    outputs=[loss_topic]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_src_topic_index = np.asarray([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">test_tar_topic_index = np.asarray([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">train_batch_topic_map(test_src_topic_indexs, test_tar_topic_index)</span><br><span class="line">test_batch_topic_map(test_src_topic_indexs, test_tar_topic_index)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> bugfix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyCharm常用设置]]></title>
      <url>http://www.wrran.com/blog/2017/03/09/cheatsheet/shortcut/pycharm/</url>
      <content type="html"><![CDATA[<blockquote><p>南村群童欺我老无力</p></blockquote><a id="more"></a><h1 id="教程列表"><a href="#教程列表" class="headerlink" title="教程列表"></a>教程列表</h1><ol><li><a href="http://blog.csdn.net/u013088062/article/details/50100121" target="_blank" rel="noopener">定制外观</a></li><li><a href="http://blog.csdn.net/u013088062/article/details/50113593" target="_blank" rel="noopener">代码风格</a></li><li><a href="http://blog.csdn.net/u013088062/article/details/50135135" target="_blank" rel="noopener">有关Python解释器的相关配置</a></li><li><a href="http://blog.csdn.net/u013088062/article/details/50263637" target="_blank" rel="noopener">Pycharm编辑器功能之代码快速修改</a></li><li><a href="http://blog.csdn.net/u013088062/article/details/50262567" target="_blank" rel="noopener">Pycharm编辑器功能之模板应用</a></li><li><a href="http://blog.csdn.net/u013088062/article/details/50251413" target="_blank" rel="noopener">Pycharm编辑器功能之代码自动生成</a></li><li><a href="http://blog.csdn.net/u013088062/article/details/50250915" target="_blank" rel="noopener">Pycharm编辑器功能之自动生成格式</a></li></ol><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl+NumPad -</code></td><td style="text-align:left">折叠代码块</td></tr><tr><td style="text-align:center"><code>Ctrl+NumPad +</code></td><td style="text-align:left">展开代码块</td></tr><tr><td style="text-align:center"><code>Ctrl+Alt+NumPad -</code></td><td style="text-align:left">折叠代码块（递归）</td></tr><tr><td style="text-align:center"><code>Ctrl+Alt+NumPad +</code></td><td style="text-align:left">展开代码块（递归）</td></tr><tr><td style="text-align:center"><code>Ctrl+Shift+NumPad -</code></td><td style="text-align:left">折叠所有代码块</td></tr><tr><td style="text-align:center"><code>Ctrl+Shift+NumPad +</code></td><td style="text-align:left">展开所有代码块</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/column/details/pycharm.html?&amp;page=1" target="_blank" rel="noopener">最全Pycharm教程</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> shortcut </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> pycharm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[theano实战 - Getting Started]]></title>
      <url>http://www.wrran.com/blog/2017/03/08/howto/theano/1-getting-started/</url>
      <content type="html"><![CDATA[<blockquote><p>Show you how to run deep learning algorithms using <a href="http://deeplearning.net/software/theano" target="_blank" rel="noopener">Theano</a>.</p></blockquote><a id="more"></a><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>建议读者直接阅读参考资料中的原文，该博文只是我杂乱的笔记。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>每个学习算法的页面，你都可以单独下载对应的文件。如果你想一次性下载所有文件，可以尝试执行如下命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lisa-lab/DeepLearningTutorials.git</span><br></pre></td></tr></table></figure><p></p><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cPickle, gzip, numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># load the dataset</span></span><br><span class="line">f = gzip.open(<span class="string">'mnist.pkl.gz'</span>, <span class="string">'rb'</span>)</span><br><span class="line">train_set, valid_set, test_set = cPickle.load(f)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shared_dataset</span><span class="params">(data_y)</span>:</span></span><br><span class="line">    <span class="string">""" Function that loads the dataset into shared variables</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The reason we store our dataset in shared variables is to allow</span></span><br><span class="line"><span class="string">    Theano to copy it into the GPU memory (when code is run on GPU).</span></span><br><span class="line"><span class="string">    Since copying data into the GPU is slow, copying a minibatch everytime</span></span><br><span class="line"><span class="string">    is needed (the default behaviour if the data is not in a shared</span></span><br><span class="line"><span class="string">    variable) would lead to a large decrease in performance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    data_x, data_y = data_xy</span><br><span class="line">    shared_x = theano.shared(numpy.asarray(data_x, dtype=theano.config.floatX))</span><br><span class="line">    shared_y = theano.shared(numpy.asarray(data_y, dtype=theano.config.floatX))</span><br><span class="line">    <span class="comment"># When storing data on the GPU it has to be stored as floats</span></span><br><span class="line">    <span class="comment"># therefore we will store the labels as ``floatX`` as well</span></span><br><span class="line">    <span class="comment"># (``shared_y`` does exactly that). But during our computations</span></span><br><span class="line">    <span class="comment"># we need them as ints (we use labels as index, and if they are</span></span><br><span class="line">    <span class="comment"># floats it doesn't make sense) therefore instead of returning</span></span><br><span class="line">    <span class="comment"># ``shared_y`` we will have to cast it to int. This little hack</span></span><br><span class="line">    <span class="comment"># lets us get around this issue</span></span><br><span class="line">    <span class="keyword">return</span> shared_x, T.cast(shared_y, <span class="string">'int32'</span>)</span><br><span class="line"></span><br><span class="line">test_set_x, test_set_y = shared_dataset(test_set)</span><br><span class="line">valid_set_x, valid_set_y = shared_dataset(valid_set)</span><br><span class="line">train_set_x, train_set_y = shared_dataset(train_set)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">500</span>  <span class="comment"># size of the minibatch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># accessing the third minibatch of the training set</span></span><br><span class="line">data = train_set_x[<span class="number">2</span> * batch_size: <span class="number">3</span> * batch_size]</span><br><span class="line">label = train_set_y[<span class="number">2</span> * batch_size: <span class="number">3</span> * batch_size]</span><br></pre></td></tr></table></figure><h2 id="MNIST-Dataset"><a href="#MNIST-Dataset" class="headerlink" title="MNIST Dataset"></a>MNIST Dataset</h2><h1 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h1><h2 id="数据集-1"><a href="#数据集-1" class="headerlink" title="数据集"></a>数据集</h2><table><thead><tr><th style="text-align:center">记号</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">$$D$$</td><td style="text-align:left">数据集</td></tr><tr><td style="text-align:center">$$D_{train}$$</td><td style="text-align:left">训练集</td></tr><tr><td style="text-align:center">$$D_{valid}$$</td><td style="text-align:left">验证集</td></tr><tr><td style="text-align:center">$$D_{test}$$</td><td style="text-align:left">测试集</td></tr></tbody></table><p>注：验证集用来挑选模型及超参；测试集用来评估模型的泛化能力，并比较不同算法下模型的性能。</p><p>该教程大部分处理的是分类任务，所以数据集$$D$$是一系列数据对$$(x^{(i)}, y^{(i)})$$。我们使用上标来区分训练集中不同的实例：$$x^{(i)}\in R^D$$表示的就是维度为$D$的第$i$个训练实例。相似的，$y^{(i)} \in {0, \cdots, L}$表示输入$x^{i}$的标签。</p><h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><table><thead><tr><th style="text-align:center">记号</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">$W$</td><td style="text-align:left">除非另有说明，否则就是指矩阵</td></tr><tr><td style="text-align:center">$W_{ij}$</td><td style="text-align:left">矩阵$W$的第$i$行第$j$列的元素</td></tr><tr><td style="text-align:center">$W_{i·}$</td><td style="text-align:left">向量，矩阵$W$的第$i$行</td></tr><tr><td style="text-align:center">$W_{i}$</td><td style="text-align:left">向量，矩阵$W$的第$j$行</td></tr><tr><td style="text-align:center">$W_{·j}$</td><td style="text-align:left">向量，矩阵$W$的第$j$列</td></tr><tr><td style="text-align:center">$b$</td><td style="text-align:left">除非另有说明，否则就是指向量</td></tr><tr><td style="text-align:center">$b_{i}$</td><td style="text-align:left">向量 $b$ 的第$i$个元素</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th style="text-align:center">记号</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">$D$</td><td style="text-align:left">输入数据的维数</td></tr><tr><td style="text-align:center">$D^{(i)}_h$</td><td style="text-align:left">第$i$层隐层表示的维数</td></tr><tr><td style="text-align:center">$f(x)$</td><td style="text-align:left">*见注释</td></tr><tr><td style="text-align:center">$L$</td><td style="text-align:left">标签数</td></tr><tr><td style="text-align:center">$L(\theta, D)$</td><td style="text-align:left">参数为$\theta$的模型关于数据$D$的对数似然</td></tr><tr><td style="text-align:center">$l(\theta, D)$</td><td style="text-align:left">参数为$\theta$的预测函数$f$关于数据$D$的经验损失</td></tr><tr><td style="text-align:center">NLL</td><td style="text-align:left">负对数似然</td></tr><tr><td style="text-align:center">$\theta$</td><td style="text-align:left">某个指定模型的所有参数</td></tr></tbody></table><p>注：$f_{\theta}(x)$为模型$P(Y|x,\theta)$的分类函数，定义为$argmax P(Y=k|x,\theta)$。实际使用中常常省略参数$\theta$</p><h2 id="Python命名空间"><a href="#Python命名空间" class="headerlink" title="Python命名空间"></a>Python命名空间</h2><p>该教程中的代码都是实现执行了如下代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> theano.tensor <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure><h1 id="深度学习中监督优化的简介"><a href="#深度学习中监督优化的简介" class="headerlink" title="深度学习中监督优化的简介"></a>深度学习中监督优化的简介</h1><h2 id="学习一个分类器"><a href="#学习一个分类器" class="headerlink" title="学习一个分类器"></a>学习一个分类器</h2><p><strong>Zero-One loss</strong><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zero_one_loss is a Theano variable representing a symbolic</span></span><br><span class="line"><span class="comment"># expression of the zero one loss ; to get the actual value this</span></span><br><span class="line"><span class="comment"># symbolic expression has to be compiled into a Theano function (see</span></span><br><span class="line"><span class="comment"># the Theano tutorial for more details)</span></span><br><span class="line">zero_one_loss = T.sum(T.neq(T.argmax(p_y_given_x), y))</span><br></pre></td></tr></table></figure><p></p><p><strong>Negative Log-Likelihood Loss</strong><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NLL is a symbolic variable ; to get the actual value of NLL, this symbolic</span></span><br><span class="line"><span class="comment"># expression has to be compiled into a Theano function (see the Theano</span></span><br><span class="line"><span class="comment"># tutorial for more details)</span></span><br><span class="line">NLL = -T.sum(T.log(p_y_given_x)[T.arange(y.shape[<span class="number">0</span>]), y])</span><br><span class="line"><span class="comment"># note on syntax: T.arange(y.shape[0]) is a vector of integers [0,1,2,...,len(y)].</span></span><br><span class="line"><span class="comment"># Indexing a matrix M by the two vectors [0,1,...,K], [a,b,...,k] returns the</span></span><br><span class="line"><span class="comment"># elements M[0,a], M[1,b], ..., M[K,k] as a vector.  Here, we use this</span></span><br><span class="line"><span class="comment"># syntax to retrieve the log-probability of the correct labels, y.</span></span><br></pre></td></tr></table></figure><p></p><h2 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GRADIENT DESCENT pseudocode</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    loss = f(params)</span><br><span class="line">    d_loss_wrt_params = ... <span class="comment"># compute gradient</span></span><br><span class="line">    params -= learning_rate * d_loss_wrt_params</span><br><span class="line">    <span class="keyword">if</span> &lt;stopping condition <span class="keyword">is</span> met&gt;:</span><br><span class="line">        <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># STOCHASTIC GRADIENT DESCENT pseudocode</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x_i, y_i) <span class="keyword">in</span> training_set:</span><br><span class="line">                              <span class="comment"># imagine on infinite generator</span></span><br><span class="line">                              <span class="comment"># that may repeat examples (if there is only a finite training set)</span></span><br><span class="line">    loss = f(params, x_i, y_i)</span><br><span class="line">    d_loss_wrt_params = ...  <span class="comment"># compute gradient</span></span><br><span class="line">    params -= learning_rate * d_loss_wrt_params</span><br><span class="line">    <span class="keyword">if</span> &lt;stopping condition <span class="keyword">is</span> met&gt;:</span><br><span class="line">        <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MINIBATCH SGD pseudocode</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x_batch, y_batch) <span class="keyword">in</span> train_batches:</span><br><span class="line">                            <span class="comment"># imagine on infinite generator</span></span><br><span class="line">                            <span class="comment"># that may repeat examples</span></span><br><span class="line">    loss = f(params, x_batch, y_batch)</span><br><span class="line">    d_loss_wrt_params = ... <span class="comment"># compute gradient using theano</span></span><br><span class="line">    params -= learning_rate * d_loss_wrt_params</span><br><span class="line">    <span class="keyword">if</span> &lt;stopping condition <span class="keyword">is</span> met&gt;:</span><br><span class="line">        <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Minibatch Stochastic Gradient Descent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># assume loss is a symboilc description of the loss function given</span></span><br><span class="line"><span class="comment"># the symbolic variables params (shared variable), x_batch, y_batch;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># compute gradient of loss with respect to params</span></span><br><span class="line">d_loss_wrt_params = T.grad(loss, params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile the MSGD step into a theano function</span></span><br><span class="line">updates = [(params, params - learning_rate * d_loss_wrt_params)]</span><br><span class="line">MSGD = theano.function([x_batch, y_batch], loss, updates=updates)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x_batch, y_batch) <span class="keyword">in</span> train_batches:</span><br><span class="line">    <span class="comment"># here x_batch and y_batch are elements of train_batches and</span></span><br><span class="line">    <span class="comment"># therefore numpy arrays; function MSGD also updates the params</span></span><br><span class="line">    print(<span class="string">'Current loss is'</span>, MSGD(x_batch, y_batch))</span><br><span class="line">    <span class="keyword">if</span> stopping_codiction_is_met:</span><br><span class="line">        <span class="keyword">return</span> params</span><br></pre></td></tr></table></figure><h2 id="正则化项"><a href="#正则化项" class="headerlink" title="正则化项"></a>正则化项</h2><p><strong>L1 and L2 regularization</strong><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># symbolic Theano variable that represents the L1 regularization term</span></span><br><span class="line">L1 = T.sum(abs(param))</span><br><span class="line"></span><br><span class="line"><span class="comment"># symbolic Theano variable that represents the squared L2 term</span></span><br><span class="line">L2 = T.sum(param ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the loss</span></span><br><span class="line">loss = NLL + lambda_1 * L1 + lambda_2 * L2</span><br></pre></td></tr></table></figure><p></p><p><strong>Early-Stopping</strong><br></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># early-stopping parameters</span></span><br><span class="line">patience = <span class="number">5000</span>  <span class="comment"># look as this many examples regardless</span></span><br><span class="line">patience_increase = <span class="number">2</span>  <span class="comment"># wait this much longer when a new best is found</span></span><br><span class="line">improvement_threshold = <span class="number">0.95</span>  <span class="comment"># a relative improvement of this much is considered significant</span></span><br><span class="line">validation_frequency = min(n_train_batches, patience/<span class="number">2</span>)</span><br><span class="line">                             <span class="comment"># go through this many minibatches</span></span><br><span class="line">                             <span class="comment"># before checking the network</span></span><br><span class="line">                             <span class="comment"># on the validation set</span></span><br><span class="line">                             <span class="comment"># in this case we check every epoch</span></span><br><span class="line"></span><br><span class="line">best_params = <span class="literal">None</span></span><br><span class="line">best_validation_loss = numpy.inf</span><br><span class="line">test_score = <span class="number">0.</span></span><br><span class="line">start_time = time.clock()</span><br><span class="line"></span><br><span class="line">done_looping = <span class="literal">False</span></span><br><span class="line">epoch = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (epoch &lt; n_epochs) <span class="keyword">and</span> (<span class="keyword">not</span> done_looping):</span><br><span class="line">    <span class="comment"># Report `1` for first epoch, `n_epochs` for last epoch</span></span><br><span class="line">    epoch = epoch + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> minibatch_index <span class="keyword">in</span> range(n_train_batches):</span><br><span class="line">        </span><br><span class="line">        d_loss_wrt_params = ...  <span class="comment"># compute gradient</span></span><br><span class="line">        params -= learning_rate * d_loss_wrt_params  <span class="comment"># gradient descent</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># iteration number. We want it to start at 0.</span></span><br><span class="line">        iter = (epoch - <span class="number">1</span>) * n_train_batches + minibatch_index</span><br><span class="line">        <span class="comment"># note that if we do `iter % validation_frequency`</span></span><br><span class="line">        <span class="comment"># it will be true for iter = 0</span></span><br><span class="line">        <span class="comment"># which we do not want.</span></span><br><span class="line">        <span class="comment"># We want it true for iter = validation_frequency - 1</span></span><br><span class="line">        <span class="keyword">if</span> (iter + <span class="number">1</span>) % validation_frequency == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            this_validation_loss = ... <span class="comment"># compute zero-one loss on validation set</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># improve patience if loss improvement is good enough</span></span><br><span class="line">                <span class="keyword">if</span> this_validation_loss &lt; best_validation_loss * improvement_threshold:</span><br><span class="line">                    patience = max(patience, iter * patience_increase)</span><br><span class="line">                best_params = copy.deepcopy(params)</span><br><span class="line">                best_validation_loss = this_validation_loss</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> patience &lt;= iter:</span><br><span class="line">            done_looping = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># POSTCONDITION</span></span><br><span class="line"><span class="comment"># best_params refers to the best out-of-sample parameters observed during the optimization</span></span><br></pre></td></tr></table></figure><p></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h1 id="Theano-Python常用技巧"><a href="#Theano-Python常用技巧" class="headerlink" title="Theano/Python常用技巧"></a>Theano/Python常用技巧</h1><h2 id="加载-保存模型"><a href="#加载-保存模型" class="headerlink" title="加载/保存模型"></a>加载/保存模型</h2><p>实际实验时，往往会花费很长时间。及时保存模型就显得很重要啦。</p><p><strong>使用cPickle保存你的共享变量</strong><br>保存/压缩模型参数的最好方式是使用<strong>pickle/deepcopy</strong>。举例来说，假设我们有共享变量<code>w, v, u</code>，那么我们可以在命令行中执行如下命令保存它们：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cPickle</span><br><span class="line">save_file = open(<span class="string">'path'</span>, <span class="string">'wb'</span>)  <span class="comment"># this will overwrite current contents</span></span><br><span class="line">cPickle.dump(w.get_value(borrow=<span class="literal">True</span>), save_file, <span class="number">-1</span>)  <span class="comment"># the -1 is for HIGHEST_PROTOCOL</span></span><br><span class="line">cPickle.dump(v.get_value(borrow=<span class="literal">True</span>), save_file, <span class="number">-1</span>)  <span class="comment"># ... and it triggers much more efficient</span></span><br><span class="line">cPickle.dump(u.get_value(borrow=<span class="literal">True</span>), save_file, <span class="number">-1</span>)  <span class="comment"># ... storage than numpy's default</span></span><br><span class="line">save_file.close()</span><br></pre></td></tr></table></figure><p>载入时就可以执行如下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">save_file = open(<span class="string">'path'</span>)</span><br><span class="line">w.set_value(cPickle.load(save_file), borrow=<span class="literal">True</span>)</span><br><span class="line">v.set_value(cPickle.load(save_file), borrow=<span class="literal">True</span>)</span><br><span class="line">u.set_value(cPickle.load(save_file), borrow=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>别使用cPickle长期保存你的训练/测试函数</strong><br>Theano中的function是兼容Python中的<code>deepcopy/pickle</code>机制的，但是不应当使用这些机制长期保存这些函数。因为Theano内部处在活跃发展阶段，保存函数之后可能就没法再次<code>un-pickle</code>。正确的打开方式是，使用这些机制来短期保存function。</p><p>更多详情，可以参见<a href="http://deeplearning.net/software/theano/tutorial/loading_and_saving.html" target="_blank" rel="noopener">serialization in Theano</a>或者<a href="http://docs.python.org/library/pickle.html" target="_blank" rel="noopener">Python’s pickling</a>。</p><h2 id="绘制中间结果"><a href="#绘制中间结果" class="headerlink" title="绘制中间结果"></a>绘制中间结果</h2><p>可视化有助于我们了解模型或者训练算法正在做什么。如果你有充足的硬盘空间，你的训练脚本可以保存这些中间模型，之后再使用可视化脚本处理这些被保存的模型。<br>那些可能有助于你可视化的库：<a href="http://www.pythonware.com/products/pil" target="_blank" rel="noopener">Python Image Library</a>与<a href="http://matplotlib.sourceforge.net/" target="_blank" rel="noopener">matplotlib</a>。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.deeplearning.net/tutorial/gettingstarted.html#gettingstarted" target="_blank" rel="noopener">Getting Started</a><br><a href="http://www.deeplearning.net/tutorial/" target="_blank" rel="noopener">Deep Learning Tutorials</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单了解Git Submodule]]></title>
      <url>http://www.wrran.com/blog/2017/03/01/learn/git/git-patch-1-submodule/</url>
      <content type="html"><![CDATA[<blockquote><p>git help submodule</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>关于该指令的详细解释可以阅读执行指令<code>git help submodule</code>后得到的帮助文档。</p><blockquote><p>Inspects, updates and manages submodules.</p></blockquote><p>A submodule allows you to keep another Git repository in a subdirectory of your repository. The other repository has its own history, which does not interfere with the history of the current repository. This can be used to have external dependencies such as third party libraries for example.</p><p>When cloning or pulling a repository containing submodules however, these will not be checked out by default; the <code>init</code> and <code>update</code> subcommands will maintain submodules checked out and at appropriate revision in your working tree.</p><p>Submodules are composed from a so-called <em>gitlink</em> tree entry in the main repository that refers to a particular commit object within the inner repository that is completely separate. A record in the <em>.gitmodules</em> file at the root of the source tree assigns a logical name to the submodule and describes the default URL the submodule shall be cloned from. The logical name can be used for overriding this URL within your local repository configuration (see <code>submodule init</code>).</p><p>Submodules are not to be confused with remotes, which are other repositories of the same project; submodules are meant for different projects you would like to make part of your source tree, while the history of the two projects still stays completely independent and you cannot modify the contents of the submodule from within the main project. If you want to merge the project histories and want to treat the aggregated whole as a single project from then on, you may want to add a remote for the other project and use the <em>subtree</em> merge strategy, instead of treating the other project as a submodule. Directories that come from both projects can be cloned and checked out as a whole if you choose to go that route.</p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p>待补充</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/wangjia55/article/details/24400501" target="_blank" rel="noopener">git submodule的使用</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Waterline (sails) 常用方法]]></title>
      <url>http://www.wrran.com/blog/2017/03/01/cheatsheet/dev/sails-waterline/</url>
      <content type="html"><![CDATA[<blockquote><p>You cannot live without me.</p></blockquote><a id="more"></a><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/balderdashy/waterline-docs" target="_blank" rel="noopener">github - Public Documentation for Waterline</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> dev </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> sails.js </tag>
            
            <tag> waterline </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见的神经网络架构]]></title>
      <url>http://www.wrran.com/blog/2017/02/28/cheatsheet/ml-ann/</url>
      <content type="html"><![CDATA[<blockquote><p>the neural network zoo<br>@ Fljodor</p></blockquote><a id="more"></a><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><code>2017年9月30日</code><br><a href="http://blog.csdn.net/prom1201/article/details/52221822" target="_blank" rel="noopener">RNN介绍，较易懂</a><br><a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/" target="_blank" rel="noopener">The Unreasonable Effectiveness of Recurrent Neural Networks</a><br><a href="http://blog.csdn.net/heyongluoyao8/article/details/48636251" target="_blank" rel="noopener">循环神经网络(RNN, Recurrent Neural Networks)介绍</a></p><p><code>2017年3月1日</code><br><a href="http://www.360doc.com/content/16/0915/20/13792507_591115257.shtml" target="_blank" rel="noopener">360doc - 图文并茂的神经网络架构大盘点</a><br><a href="http://www.asimovinstitute.org/neural-network-zoo/" target="_blank" rel="noopener">THE ASIMOV INSTITUTE - THE NEURAL NETWORK ZOO</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> machine learning </tag>
            
            <tag> neural network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在MySQL中创建UTF8字符集的数据库]]></title>
      <url>http://www.wrran.com/blog/2017/02/28/bugfix/mysql-db-utf8/</url>
      <content type="html"><![CDATA[<blockquote><p>别看我<br>看标题</p></blockquote><a id="more"></a><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db_name <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.cnblogs.com/micro-chen/p/5810838.html" target="_blank" rel="noopener">mysql创建utf-8字符集数据库</a></p>]]></content>
      
        <categories>
            
            <category> bugfix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[情话连篇 - 01]]></title>
      <url>http://www.wrran.com/blog/2017/02/28/people-say/170228-01/</url>
      <content type="html"><![CDATA[<blockquote><p>姐姐<br>今夜我不关心人类<br>我只想你<br>@ 海子</p></blockquote><a id="more"></a><blockquote><p>若逢新雪初霁<br>满月当空<br>下面平铺着皓影<br>上面流转着亮银<br>而你带笑地向我走来<br>月色和雪色之间<br>你是<br>第三种绝色<br>@ 余光中</p></blockquote><hr><blockquote><p>你要是愿意<br>我就永远爱你<br>你要是不愿意<br>我就永远相思<br>@ 王小波</p></blockquote><hr><blockquote><p>你站在桥上看风景<br>看风景的人在楼上看你<br>明月装饰了你的窗子<br>你装饰了别人的梦<br>@ 卞之琳</p></blockquote><hr><blockquote><p>我寄你的信<br>总要送往邮局<br>不喜欢放在街边的绿色邮筒中<br>我总心疑那里会慢一点<br>@ 鲁迅</p></blockquote><hr><blockquote><p>你永远是我的神，<br>跟我的心同在。<br>我的目光永远地跟随着你。<br>我的心里永远有你。<br>@ 萧珊</p></blockquote><hr><blockquote><p>我可是有血有肉的活生生的女孩儿，而且现在就在你的怀抱里表白说喜欢你。只要你一声令下，赴汤蹈火都在所不惜。虽然我多少有蛮不讲理的地方，但心地善良正直，勤快能干，脸蛋也相当俊俏，乳房形状也够好看，饭菜做得又好，父亲的遗产也办了信托存款，你还不以为这是大甩卖？你要是不买，我不久就到别处去。<br>@ 绿子 IN 《挪威的森林》</p></blockquote><p>注：上述内容转载自<a href="https://www.zhihu.com/question/54897857" target="_blank" rel="noopener">知乎问题 - 你读过最美的告白的句子是什么？</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> love song </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中正则表达式语法 简介]]></title>
      <url>http://www.wrran.com/blog/2017/02/27/howto/python/re/</url>
      <content type="html"><![CDATA[<blockquote><p>import re<br>re.complie(‘i can do re :)’)</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该部分简单介绍下Python中正则表达式的语法，并提供实验代码验证（<strong>待补充</strong>）。博文将按照如下部分展开：</p><ul><li><a href="#grammar">语法</a></li><li><a href="#grammar.char.special">特殊字符</a></li><li><a href="#grammar.sign.preset">预定义符号</a></li><li><a href="#grammar.number">数量词</a></li><li><a href="#grammar.border">边界匹配</a></li><li><a href="#grammar.group">逻辑分组</a></li><li><a href="#grammar.group.special">特殊构造</a></li><li><a href="$grammar.mode">模式设置</a></li><li><a href="#grammar.other">其他</a></li><li><a href="#dummy">实验</a></li></ul><div id="grammar"></div><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><div id="grammar.char.special"></div><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>.</code></td><td style="text-align:left">匹配除<code>\n</code>之外的所有单个字符。如<code>a.c</code>匹配<code>abc</code>或<code>acc</code>等</td></tr><tr><td style="text-align:center"><code>\</code></td><td style="text-align:left">转义字符。如想匹配<code>*</code>，可以用<code>\*</code>或者<code>[*]</code></td></tr><tr><td style="text-align:center"><code>[...]</code></td><td style="text-align:left">字符集，匹配<code>[]</code>字符集中的任意一个字符。如<code>[abc]</code>可以匹配<code>a</code>/<code>b</code>/<code>c</code>中任意一个字符，<code>[^...]</code>表示不匹配字符集中的任意字符</td></tr></tbody></table><div id="grammar.sign.preset"></div><h2 id="预定义字符"><a href="#预定义字符" class="headerlink" title="预定义字符"></a>预定义字符</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>\d</code></td><td style="text-align:left">数字，等价于<code>[0-9]</code></td></tr><tr><td style="text-align:center"><code>\D</code></td><td style="text-align:left">非数字，等价于<code>[^0-9]</code></td></tr><tr><td style="text-align:center"><code>\s</code></td><td style="text-align:left">空白字符，等价于<code>[\t\r\n\f\v]</code></td></tr><tr><td style="text-align:center"><code>\S</code></td><td style="text-align:left">非空白字符，等价于<code>[^\t\r\n\f\v]</code></td></tr><tr><td style="text-align:center"><code>\w</code></td><td style="text-align:left">单词字符，等价于<code>[0-9A-Za-z]</code></td></tr><tr><td style="text-align:center"><code>\W</code></td><td style="text-align:left">非单词字符，等价于<code>[^0-9A-Za-z]</code></td></tr></tbody></table><div id="grammar.number"></div><h2 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>*</code></td><td style="text-align:left">匹配前一个字符零次或多次</td></tr><tr><td style="text-align:center"><code>+</code></td><td style="text-align:left">匹配前一个字符一次或多次</td></tr><tr><td style="text-align:center"><code>?</code></td><td style="text-align:left">匹配前一个字符零次或一次</td></tr><tr><td style="text-align:center"><code>{m}</code></td><td style="text-align:left">匹配前一个字符m次</td></tr><tr><td style="text-align:center"><code>{m,n}</code></td><td style="text-align:left">匹配前一个字符m次到n次</td></tr></tbody></table><div id="grammar.border"></div><h2 id="边界匹配"><a href="#边界匹配" class="headerlink" title="边界匹配"></a>边界匹配</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>^</code></td><td style="text-align:left">匹配以后面一个字符开头的字符串（多行模式中每一行）</td></tr><tr><td style="text-align:center"><code>$</code></td><td style="text-align:left">匹配以前面一个字符结束的字符串（多行模式中每一行）</td></tr><tr><td style="text-align:center"><code>\A</code></td><td style="text-align:left">匹配以后面一个字符开头的字符串</td></tr><tr><td style="text-align:center"><code>\Z</code></td><td style="text-align:left">匹配以前面一个字符结束的字符串</td></tr><tr><td style="text-align:center"><code>\b</code></td><td style="text-align:left">匹配前面一个字符为<code>\w</code>且后面一个字符为<code>\W</code>的字符串，如<code>a\b!c</code>匹配<code>a!c</code></td></tr><tr><td style="text-align:center"><code>\B</code></td><td style="text-align:left">等价于<code>[^\b]</code></td></tr></tbody></table><div id="grammar.group"></div><h2 id="逻辑分组"><a href="#逻辑分组" class="headerlink" title="逻辑分组"></a>逻辑分组</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>(...)</code></td><td style="text-align:left">括起来的表达式作为一个分组，从表达式左边开始每遇到一个分组的<code>(</code>，编号加一（见<a href="#grammar.number"><code>\&lt;number&gt;</code></a>。如<code>(abc){2}</code>匹配<code>abcabc</code></td></tr><tr><td style="text-align:center"><code>(?P&lt;name&gt;...)</code></td><td style="text-align:left">分组，除原有的编号外再指定一个名为<code>&lt;name&gt;</code>的别名。如，<code>(?P&lt;id&gt;123){2}</code>匹配<code>123123</code></td></tr><tr><td style="text-align:center"><code>\&lt;number&gt;</code></td><td style="text-align:left">将编号为<code>&lt;number&gt;</code>的分组匹配到字符串。如<code>(1)abc\1</code>匹配<code>1abc1</code>匹配<code>1abc</code>或<code>3abc3</code>等</td></tr><tr><td style="text-align:center"><code>(?P=&lt;name&gt;)</code></td><td style="text-align:left">将别名为<code>&lt;name&gt;</code>的分组匹配到字符串。如<code>(?P&lt;id&gt;123)abc(?P=id)</code>匹配<code>123abc123</code></td></tr></tbody></table><p>另外，由于hexo插件缺陷，我无法将<code>|</code>放置在表格中，单独列出说明：<br><code>|</code>：匹配<code>|</code>左右两边任意一串字符传，<code>|</code>没被<code>()</code>包住时，范围为整个正则表达式。如<code>abc|abd</code>匹配<code>abc</code>或<code>abd</code>，<code>a(123|423)c</code>匹配<code>a123c</code>或<code>a423c</code></p><div id="grammar.group.special"></div><h2 id="特殊构造"><a href="#特殊构造" class="headerlink" title="特殊构造"></a>特殊构造</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>(?#...)</code></td><td style="text-align:left"><code>#</code>后面的作为注释被忽略。如<code>abc(?#comment)123</code>匹配<code>abc123</code></td></tr><tr><td style="text-align:center"><code>(?=...)</code></td><td style="text-align:left">前一个字符后面的字符串必须匹配=后面的表达式才能匹配成功。如<code>a(?=\d)</code>可以匹配<code>a1</code>或<code>a2</code>等中的<code>a</code></td></tr><tr><td style="text-align:center"><code>(?!...)</code></td><td style="text-align:left">前一个字符后面的字符串必须不匹配!后面的表达式才能匹配成功。如<code>a(?!\d)</code>可以匹配<code>ab</code>或<code>ad</code>等中的<code>a</code></td></tr><tr><td style="text-align:center"><code>(?&lt;=...)</code></td><td style="text-align:left">后面一个字符前面的字符串必须匹配=后面的表达式才能匹配成功。如<code>(?&lt;=\d)a</code>可以匹配<code>1a</code>或<code>2a</code>等中的<code>a</code></td></tr><tr><td style="text-align:center"><code>(?&lt;!...)</code></td><td style="text-align:left">后面一个字符前面的字符串必须不匹配!后面的表达式才能匹配成功。如<code>(?&lt;!\d)a</code>可以匹配<code>ba</code>或<code>aa</code>等中的<code>a</code></td></tr></tbody></table><p>同样的原因，我单独列出该特殊构造：<br><code>(?(&lt;id&gt;/&lt;name&gt;)&lt;yes-patten&gt;|&lt;no-pattern&gt;)</code>：如果编号为<code>&lt;id&gt;</code>或别名为<code>&lt;name&gt;</code>的分组匹配到字符，则匹配<code>&lt;yes-pattern&gt;</code>，否则匹配<code>&lt;no-pattern&gt;</code>。如<code>(\d)abc(?(1)\d|def)</code>可以匹配<code>2abc5</code>或<code>abcdef</code>。</p><div id="grammar.mode"></div><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">贪婪模式</td><td style="text-align:left">尽可能匹配更多符合的字符。如<code>ab*</code>匹配字符串<code>abbbc</code>的结果为<code>abbb</code></td></tr><tr><td style="text-align:center">非贪婪模式</td><td style="text-align:left">尽可能匹配更少的字符。如<code>ab*?</code>匹配字符串<code>abbbc</code>的结果为<code>a</code></td></tr></tbody></table><p>注：<code>*?</code>,<code>+?</code>,<code>??</code>,<code>{m,n}?</code>使得<code>*</code>,<code>+</code>,<code>?</code>,<code>{m,n}</code>变成非贪婪模式</p><div id="grammar.other"></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>反斜杠：大多数编程语言中，使用<code>\\</code>表示<code>\</code>。因此使用正则表达式匹配<code>\</code>需要使用<code>\\\\</code></p><div id="dummy"></div><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>待补充</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.cnblogs.com/tina-python/p/5508402.html" target="_blank" rel="noopener">python中的正则表达式（re模块）</a><br><a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">re — Regular expression operations</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> regular expression </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C/C++ 常用开源库]]></title>
      <url>http://www.wrran.com/blog/2017/02/27/cheatsheet/dev/open-lib-in-c/</url>
      <content type="html"><![CDATA[<blockquote><p>open source, open mind<br>你信吗，我反正是</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这份开源库的推荐列表已经看过很多次了，但没有仔细研读过，使用过的就更少了。不过，将这份资料列表展示在我的博客上。一方面了解C++的强大，一方面了解自己可能会涉及的领域。</p><h1 id="C开源项目"><a href="#C开源项目" class="headerlink" title="C开源项目"></a>C开源项目</h1><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://home.tiscali.cz/~cz210552/webbench.html" target="_blank" rel="noopener">webbench</a></td><td style="text-align:left">linux下的网站压测工具</td></tr><tr><td style="text-align:center"><a href="https://sourceforge.net/projects/tinyhttpd/" target="_blank" rel="noopener">tinyhttpd</a></td><td style="text-align:left">超轻量级的HTTP Server</td></tr><tr><td style="text-align:center"><a href="https://sourceforge.net/projects/cjson/" target="_blank" rel="noopener">cJSON</a></td><td style="text-align:left">JSON编码器</td></tr><tr><td style="text-align:center"><a href="http://code.google.com/p/cmockery/downloads/list" target="_blank" rel="noopener">cMockery</a></td><td style="text-align:left">轻量级C语言单元测试框架</td></tr><tr><td style="text-align:center"><a href="http://software.schmorp.de/pkg/libev.html" target="_blank" rel="noopener">libev</a></td><td style="text-align:left">开源的事件驱动库</td></tr><tr><td style="text-align:center"><a href="http://memcached.org/" target="_blank" rel="noopener">memcached</a></td><td style="text-align:left">高性能分布式内存对象缓存系统</td></tr><tr><td style="text-align:center"><a href="http://www.lua.org/" target="_blank" rel="noopener">Lua</a></td><td style="text-align:left">c语言实现的“新”语言</td></tr><tr><td style="text-align:center"><a href="http://www.sqlite.org/" target="_blank" rel="noopener">SQLite</a></td><td style="text-align:left">嵌入式关系数据库</td></tr><tr><td style="text-align:center"><a href="http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6" target="_blank" rel="noopener">UNIX v6</a></td><td style="text-align:left">操作系统内核代码</td></tr><tr><td style="text-align:center"><a href="http://www.netbsd.org/" target="_blank" rel="noopener">NETBSD</a></td><td style="text-align:left">高度移植性的UNIX-like操作系统</td></tr></tbody></table><h1 id="C-资源列表"><a href="#C-资源列表" class="headerlink" title="C++资源列表"></a>C++资源列表</h1><p>C++资源丰富，我们按照以下顺序介绍，更完整的列表可以参见<a href="https://zhuanlan.zhihu.com/p/25443704" target="_blank" rel="noopener">值得推荐的C/C++框架和库</a>：</p><ul><li><a href="#cpp.stl">标准库</a></li><li><a href="#cpp.framework">框架</a></li><li><a href="#cpp.db">数据库</a></li><li><a href="#cpp.mp">图像处理</a></li><li><a href="#cpp.math">数学</a></li><li><a href="#cpp.ml">机器学习</a></li><li><a href="#cpp.other">其他</a></li></ul><div id="cpp.stl"></div><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/C%2B%2B_Standard_Library" target="_blank" rel="noopener">C++ Standard library</a></td><td style="text-align:left">核心语言编写，同时也是C++ISO标准的一部分</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/Standard_Template_Library" target="_blank" rel="noopener">Standard Template Library</a></td><td style="text-align:left">标准模板库</td></tr><tr><td style="text-align:center"><a href="https://en.wikipedia.org/wiki/C_POSIX_library" target="_blank" rel="noopener">C POSIX Library</a></td><td style="text-align:left">POSIX系统的C标准库规范</td></tr><tr><td style="text-align:center"><a href="https://github.com/cplusplus" target="_blank" rel="noopener">ISO C++ Standards Committee</a></td><td style="text-align:left">C++标准委员会</td></tr></tbody></table><div id="cpp.framework"></div><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td style="text-align:center"><a href>Apache C++ Standard Library</a></td><td style="text-align:left">算法，容器，迭代器和其他基本组件的集合</td></tr><tr><td style="text-align:center"><a href="https://stlab.adobe.com/" target="_blank" rel="noopener">ASL</a></td><td style="text-align:left">Adobe公司的C++开源库</td></tr><tr><td style="text-align:center"><a href="https://github.com/boostorg" target="_blank" rel="noopener">Boost</a></td><td style="text-align:left">C++准标准库</td></tr><tr><td style="text-align:center"><a href="https://github.com/bloomberg/bde" target="_blank" rel="noopener">BDE</a></td><td style="text-align:left">Bloomberg公司使用的开发环境</td></tr><tr><td style="text-align:center"><a href="https://libcinder.org/" target="_blank" rel="noopener">Cinder</a></td><td style="text-align:left">Cinder is a free and open source library for professional-quality creative coding in C++.</td></tr><tr><td style="text-align:center"><a href="http://ryan.gulix.cl/fossil.cgi/cxxomfort/home" target="_blank" rel="noopener">Cxxomfort</a></td><td style="text-align:left">Cxxomfort is a small, header-only library that backports to C++03 or C++11 some of the nifty C++11 and later goodies, including some proposals still in the works.</td></tr><tr><td style="text-align:center"><a href="http://dlib.net/" target="_blank" rel="noopener">Dlib</a></td><td style="text-align:left">Dlib is a modern C++ toolkit containing machine learning algorithms and tools for creating complex software in C++ to solve real world problems.</td></tr><tr><td style="text-align:center"><a href="https://github.com/electronicarts/EASTL" target="_blank" rel="noopener">EASTL</a></td><td style="text-align:left">EASTL stands for Electronic Arts Standard Template Library. It is an extensive and robust implementation that has an emphasis on high performance.</td></tr><tr><td style="text-align:center"><a href="https://github.com/sumeetchhetri/ffead-cpp" target="_blank" rel="noopener">ffead-cpp</a></td><td style="text-align:left">Framework for Enterprise Application Development, c++ framework, c++ web framework, c++ application framework, c++ rest framework, c++ soap framework, c++ web sites,c++ web applications, c++ driven web development - c++</td></tr><tr><td style="text-align:center"><a href="https://github.com/facebook/folly" target="_blank" rel="noopener">Folly</a></td><td style="text-align:left">An open-source C++ library developed and used at Facebook.</td></tr><tr><td style="text-align:center"><a href="https://github.com/julianstorer/JUCE" target="_blank" rel="noopener">JUCE</a></td><td style="text-align:left">The JUCE cross-platform C++ framework.</td></tr><tr><td style="text-align:center"><a href="https://github.com/facebook/libphenom" target="_blank" rel="noopener">libPhenom</a></td><td style="text-align:left">An eventing framework for building high performance and high scalability systems in C.</td></tr><tr><td style="text-align:center"><a href="https://github.com/sourcey/libsourcey" target="_blank" rel="noopener">libSourcey</a></td><td style="text-align:left">C++11 evented IO libraries for high performance networking and media based applications</td></tr><tr><td style="text-align:center"><a href="https://github.com/koanlogic/libu" target="_blank" rel="noopener">libU</a></td><td style="text-align:left">LibU is a multiplatform utility library written in C, with APIs for handling memory allocation, networking and URI parsing, string manipulation, debugging, and logging in a very compact way, plus many other miscellaneous tasks</td></tr><tr><td style="text-align:center"><a href="http://loki-lib.sourceforge.net/" target="_blank" rel="noopener">loki</a></td><td style="text-align:left">Loki is a C++ library of designs, containing flexible implementations of common design patterns and idioms.</td></tr><tr><td style="text-align:center"><a href="https://code.google.com/p/reason/" target="_blank" rel="noopener">Reason</a></td><td style="text-align:left">跨平台的框架，使开发者能够更容易地使用Java，.Net和Python，同时也满足了他们对C++性能和优势的需求。</td></tr><tr><td style="text-align:center"><a href="https://root.cern.ch/" target="_blank" rel="noopener">ROOT</a></td><td style="text-align:left">ROOT is a modular scientific software framework. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other languages such as Python and R.</td></tr><tr><td style="text-align:center"><a href="http://www.stlport.org/" target="_blank" rel="noopener">STLport</a></td><td style="text-align:left">STL中具有代表性的版本</td></tr><tr><td style="text-align:center"><a href="http://stxxl.org/" target="_blank" rel="noopener">STXXL</a></td><td style="text-align:left">STXXL: Standard Template Library for Extra Large Data Sets</td></tr><tr><td style="text-align:center"><a href="http://www.ultimatepp.org/" target="_blank" rel="noopener">Ultimate++</a></td><td style="text-align:left">Ultimate++ is a C++ cross-platform rapid application development framework</td></tr><tr><td style="text-align:center"><a href="https://sourceforge.net/projects/wtl/" target="_blank" rel="noopener">Windows Template Library</a></td><td style="text-align:left">Windows Template Library (WTL) is a C++ library for developing Windows applications and UI components.</td></tr></tbody></table><div id="cpp.db"></div><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/paulftw/hiberlite" target="_blank" rel="noopener">hiberlite</a></td><td style="text-align:left">C++ ORM for SQLite</td></tr><tr><td style="text-align:center"><a href="https://github.com/redis/hiredis" target="_blank" rel="noopener">Hiredis</a></td><td style="text-align:left">Minimalistic C client for Redis &gt;= 1.2</td></tr><tr><td style="text-align:center"><a href="https://github.com/google/leveldb" target="_blank" rel="noopener">LevelDB</a></td><td style="text-align:left">LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.</td></tr><tr><td style="text-align:center"><a href="http://www.tangentsoft.net/mysql++/" target="_blank" rel="noopener">MySQL++</a></td><td style="text-align:left">MySQL++ is a C++ wrapper for MySQL’s C API.</td></tr><tr><td style="text-align:center"><a href="https://github.com/facebook/rocksdb" target="_blank" rel="noopener">RocksDB</a></td><td style="text-align:left">A library that provides an embeddable, persistent key-value store for fast storage.</td></tr><tr><td style="text-align:center"><a href="http://www.sqlite.org/" target="_blank" rel="noopener">SQLite</a></td><td style="text-align:left">SQLite is a self-contained, high-reliability, embedded, full-featured, public-domain, SQL database engine.</td></tr></tbody></table><div id="cpp.mp"></div><h2 id="图形图像处理"><a href="#图形图像处理" class="headerlink" title="图形图像处理"></a>图形图像处理</h2><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://www.cgal.org/" target="_blank" rel="noopener">CGAL</a></td><td style="text-align:left">CGAL is a software project that provides easy access to efficient and reliable geometric algorithms in the form of a C++ library.</td></tr><tr><td style="text-align:center"><a href="http://ggt.sourceforge.net/" target="_blank" rel="noopener">GMTL</a></td><td style="text-align:left">GGT is a collection of tools implementing Graphics primitives in generalized ways. Using modern C++ template metaprogramming and generic programming paradigms, GGT is a fast and flexible base for any modern graphics project.</td></tr><tr><td style="text-align:center"><a href="http://www.boost.org/doc/libs/1_56_0/libs/gil/doc/index.html" target="_blank" rel="noopener">Boost.GIL</a></td><td style="text-align:left">Generic Image Library</td></tr><tr><td style="text-align:center"><a href="https://sourceforge.net/projects/cimg/" target="_blank" rel="noopener">CImg</a></td><td style="text-align:left">An easy-to-use, efficient, portable C++ library for image processing.</td></tr><tr><td style="text-align:center"><a href="http://www.xdp.it/cximage.htm" target="_blank" rel="noopener">xdp</a></td><td style="text-align:left">CxImage is a C++ class that can load, save, display, transform images in a very simple and fast way.</td></tr><tr><td style="text-align:center"><a href="http://freeimage.sourceforge.net/" target="_blank" rel="noopener">FreeImage</a></td><td style="text-align:left">FreeImage is an Open Source library project for developers who would like to support popular graphics image formats like PNG, BMP, JPEG, TIFF and others as needed by today’s multimedia applications.</td></tr><tr><td style="text-align:center"><a href="http://gdcm.sourceforge.net/wiki/index.php/Main_Page" target="_blank" rel="noopener">GDCM</a></td><td style="text-align:left">GDCM is an open source implementation of the DICOM standard. Digital Imaging and Communications in Medicine (DICOM) is a standard that governs this capability by specifying handling, storing, printing, and transmitting information in medical imaging.</td></tr><tr><td style="text-align:center"><a href="https://itk.org/" target="_blank" rel="noopener">ITK</a></td><td style="text-align:left">ITK is an open-source, cross-platform system that provides developers with an extensive suite of software tools for image analysis.</td></tr><tr><td style="text-align:center"><a href="http://www.imagemagick.org/script/api.php" target="_blank" rel="noopener">ImageMagick</a></td><td style="text-align:left">ImageMagick includes a number of ready-made interfaces. This makes it possible to modify or create images automagically and dynamically utilizing your favorite development platform.</td></tr><tr><td style="text-align:center"><a href="http://www.vtk.org/" target="_blank" rel="noopener">VTK</a></td><td style="text-align:left">The Visualization Toolkit (VTK) is an open-source, freely available software system for 3D computer graphics, image processing, and visualization.</td></tr></tbody></table><div id="cpp.math"></div><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://github.com/FFTW/fftw3" target="_blank" rel="noopener">FFTW</a></td><td style="text-align:left">This is the official repository for the FFTW Fourier transform library, version 3.x</td></tr><tr><td style="text-align:center"><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL</a></td><td style="text-align:left">The GNU Scientific Library (GSL) is a numerical library for C and C++ programmers.</td></tr><tr><td style="text-align:center"><a href="http://arma.sourceforge.net/" target="_blank" rel="noopener">Armadillo</a></td><td style="text-align:left">Armadillo is a high quality linear algebra library (matrix maths) for the C++ language, aiming towards a good balance between speed and ease of use</td></tr><tr><td style="text-align:center"><a href="http://ceres-solver.org/" target="_blank" rel="noopener">Ceres Solver</a></td><td style="text-align:left">Ceres Solver is an open source C++ library for modeling and solving large, complicated optimization problems.</td></tr><tr><td style="text-align:center"><a href="http://cmldev.net/" target="_blank" rel="noopener">CML</a></td><td style="text-align:left">The CML (Configurable Math Library) is a free C++ math library for games and graphics.</td></tr><tr><td style="text-align:center"><a href="http://eigen.tuxfamily.org/index.php?title=Main_Page" target="_blank" rel="noopener">Eigen</a></td><td style="text-align:left">Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms.</td></tr></tbody></table><div id="cpp.ml"></div><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><table><thead><tr><th style="text-align:center">项目名称</th><th style="text-align:left">简介</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://eodev.sourceforge.net/" target="_blank" rel="noopener">Evolving Objects</a></td><td style="text-align:left">EO is a template-based, ANSI-C++ evolutionary computation library which helps you to write your own stochastic optimization algorithms insanely fast.</td></tr><tr><td style="text-align:center"><a href="https://github.com/BVLC/caffe" target="_blank" rel="noopener">Caffe</a></td><td style="text-align:left">Caffe: a fast open framework for deep learning.</td></tr><tr><td style="text-align:center"><a href="https://github.com/liuliu/ccv" target="_blank" rel="noopener">CCV</a></td><td style="text-align:left">C-based/Cached/Core Computer Vision Library, A Modern Computer Vision Library</td></tr><tr><td style="text-align:center"><a href="http://www.mlpack.org/" target="_blank" rel="noopener">mlpack</a></td><td style="text-align:left">mlpack is a scalable machine learning library, written in C++, that aims to provide fast, extensible implementations of cutting-edge machine learning algorithms.</td></tr><tr><td style="text-align:center"><a href="https://github.com/opencv/opencv" target="_blank" rel="noopener">OpenCV</a></td><td style="text-align:left">Open Source Computer Vision Library</td></tr><tr><td style="text-align:center"><a href="https://github.com/shogun-toolbox/shogun" target="_blank" rel="noopener">shogun</a></td><td style="text-align:left">The Shogun Machine Learning Toolbox (Source Code)</td></tr><tr><td style="text-align:center"><a href="https://gmplib.org/" target="_blank" rel="noopener">GMP</a></td><td style="text-align:left">GMP is a free library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers.</td></tr></tbody></table><div id="cpp.other"></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/25443704" target="_blank" rel="noopener">值得推荐的C/C++框架和库</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> dev </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> dev-libs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[boost / asio]]></title>
      <url>http://www.wrran.com/blog/2017/02/25/howto/boost/asio/</url>
      <content type="html"><![CDATA[<blockquote><p>Asio - Portable networking and other low-level I/O, including sockets, timers, hostname resolution, socket iostreams, serial ports, file descriptors and Windows HANDLEs, from Chris Kohlhoff</p></blockquote><a id="more"></a><h2 id="Basic-Skills"><a href="#Basic-Skills" class="headerlink" title="Basic Skills"></a>Basic Skills</h2><p>下列这些教程介绍了使用<strong>Boost.Asio</strong>的必要概念。在网络编程之前，我们应当熟练运用下面这些教程中涉及的同步/异步计时器。<br><a href="#timer.1">Time.1 - Using a timer synchronously</a><br><a href="#timer.2">Time.2 - Using a timer asynchronously</a><br><a href="#timer.3">Time.3 - Binding arguments to a handler</a><br><a href="#timer.4">Time.4 - Using a member function as a handler</a><br><a href="#timer.5">Time.5 - Synchronising handlers in multithreaded programs</a></p><h2 id="Introduction-to-Sockets"><a href="#Introduction-to-Sockets" class="headerlink" title="Introduction to Sockets"></a>Introduction to Sockets</h2><p>下列这些教程介绍了用<strong>Boost.Asio</strong>来开发简单的C/S程序例子。这些教程都基于一个支持TCP/UDP的<a href="http://www.ietf.org/rfc/rfc867.txt" target="_blank" rel="noopener">daytime协议</a>。<br>下面这些教程用TCP实现了daytime协议：<br><a href="#daytime.1">Daytime.1 - A synchronous TCP daytime client</a><br><a href="#daytime.2">Daytime.2 - A synchronous TCP daytime server</a><br><a href="#daytime.3">Daytime.3 - An asynchronous TCP daytime server</a></p><p>下面这些则用UDP实现了该协议：（<strong>暂不涉及</strong>）<br><a href="#dummy">Daytime.4</a><br><a href="#dummy">Daytime.5</a><br><a href="#dummy">Daytime.6</a></p><p>最后这个则展示了如何在一个程序中使用TCP和UDP：（<strong>暂不涉及</strong>）<br><a href="#dummy">Daytime.7</a></p><div id="timer.1"></div><h2 id="Timer-1-Using-a-timer-synchronously"><a href="#Timer-1-Using-a-timer-synchronously" class="headerlink" title="Timer.1 - Using a timer synchronously"></a>Timer.1 - Using a timer synchronously</h2><p><a href="#src.timer.1">Timer1 Source</a></p><p>该部分介绍如何在<strong>Boost.Asio</strong>中实现一个阻塞的计时器。<br>我们首先要包含必要的头文件，<strong>Boost.Asio</strong>中的所有类都被包含在头文件<code>asio.hpp</code>，所以包含该文件就足够了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p>该例中使用到了计时器，我们也需要使用<code>Boost.Date_Time</code>的头文件，来方便地操作时间：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p>在所有用到<strong>Boost.Asio</strong>的程序中至少会出现一次类型为<code>io_service</code>的对象。该类提供了I/O相关的功能。我们在<code>main</code>函数的一开头就声明了该对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    boost::asio::io_service io;</span><br></pre></td></tr></table></figure><p>之后我们声明了一个类型为<code>boost::asio::deadline_timer</code>的对象。在所有与IO相关的核心组件中（在该例中是一个计时器）的构造函数的第一个参数必然是一个<code>io_service</code>的对象。构造函数的第二个参数是指出该计时器将在5秒之后触发：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boost::asio::<span class="function">deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">5</span>))</span></span>;</span><br></pre></td></tr></table></figure><p>在该例中我们展示了如何实现计时器的<strong>阻塞等待</strong>。简单来说就是调用函数<code>deadline_timer::wait()</code>，该函数之后在计时器触发后才会返回（在该例中，该方法就会在计时器<em>创建后5秒</em>才触发，注意<em>并不是调用该函数之后5秒</em>）。<br>一个<code>deadline_timer</code>只会处于两种状态：<em>expired</em>或者<em>not expired</em>。如果函数<code>deadline_timer::wait()</code>在一个已经失效的计时器上被调用，则将会立即返回：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.wait();</span><br></pre></td></tr></table></figure><p>最后，我们在计时器过期后打印出至理名言<code>Hello, world!</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, world!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div id="src.timer.1"></div><h3 id="Source-Listing-for-Timer-1"><a href="#Source-Listing-for-Timer-1" class="headerlink" title="Source Listing for Timer.1"></a>Source Listing for Timer.1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// timer.cpp</span></span><br><span class="line"><span class="comment">// ~~~~~~~~~</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2016 Christopher M. Kohlhoff (chris at kohlhoff dot com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Distributed under the Boost Software License, Version 1.0. (See accompanying</span></span><br><span class="line"><span class="comment">// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  boost::asio::io_service io;</span><br><span class="line"></span><br><span class="line">  boost::asio::<span class="function">deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">5</span>))</span></span>;</span><br><span class="line">  t.wait();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, world!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#timer.1">Return Timer.1</a></p><div id="timer.2"></div><h2 id="Timer-2-Using-a-timer-asynchronously"><a href="#Timer-2-Using-a-timer-asynchronously" class="headerlink" title="Timer.2 - Using a timer asynchronously"></a>Timer.2 - Using a timer asynchronously</h2><p><a href="#src.timer.2">Timer.2 Source</a></p><p>该部分将上述的同步阻塞变为异步调用，来展示如何使用异步的回调函数实现功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p>使用<strong>Boost.Asio</strong>的异步功能意味着异步操作完成之后将有一个回调函数被调用。在本例中我们的回调函数是<code>print</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; <span class="comment">/*e*/</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, world!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    boost::asio::io_service io;</span><br><span class="line">    boost::asio::<span class="function">deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">5</span>))</span></span>;</span><br></pre></td></tr></table></figure><p>与<a href="#time.1">Timer.1</a>不同，我们这次通过调用<code>deadline_timer::async_wait()</code>实现异步等待，并将上述定义的函数<code>print</code>作为异步调用的回调函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.async_wait(&amp;print);</span><br></pre></td></tr></table></figure><p>最后，我们必须调用<code>io_service</code>对象的<code>io_service::run()</code>。<br><strong>Boost.Asio</strong>保证回调函数只会被调用了<code>io_service::run()</code>的线程调用。所以除非你主动调用了<code>io_service::run()</code>，要不然相应的回调函数不会被执行。<br>在还有些“工作”需要完成时，<code>io_service::run()</code>将会一直运行而不返回。在该例中，这些“工作”就是计时器的异步等待。所以该方法将会在计时器失效并且回调函数完成后才返回。<br>关键一点是记住在调用<code>io_service::run()</code>之前分配些任务去做。举例来说，如果我们省略了上述的调用<code>deadline_timer::async_wait()</code>，这会使得<code>io_service</code>没有任何“工作”需要完成，进而导致它立即返回。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    io.run();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div id="src.timer.2"></div><h3 id="Source-Listing-for-Timer-2"><a href="#Source-Listing-for-Timer-2" class="headerlink" title="Source Listing for Timer.2"></a>Source Listing for Timer.2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// timer.cpp</span></span><br><span class="line"><span class="comment">// ~~~~~~~~~</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2016 Christopher M. Kohlhoff (chris at kohlhoff dot com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Distributed under the Boost Software License, Version 1.0. (See accompanying</span></span><br><span class="line"><span class="comment">// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; <span class="comment">/*e*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, world!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  boost::asio::io_service io;</span><br><span class="line"></span><br><span class="line">  boost::asio::<span class="function">deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">5</span>))</span></span>;</span><br><span class="line">  t.async_wait(&amp;print);</span><br><span class="line"></span><br><span class="line">  io.run();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#timer.2">Return Timer.2</a></p><div id="timer.3"></div><h2 id="Timer-3-Binding-arguments-to-a-handler"><a href="#Timer-3-Binding-arguments-to-a-handler" class="headerlink" title="Timer.3 - Binding arguments to a handler"></a>Timer.3 - Binding arguments to a handler</h2><p><a href="#src.timer.3">Timer.3 Source</a></p><p>该部分接着修改<a href="#timer.2">Timer.2</a>，让计时器每过一秒触发一次，同时也将展示如何向回调函数传入附加的参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p>为了实现反复触发计时器，我们需要在每次计时器失效时都在回调函数中再次设定计时器的失效时间并开启新的异步等待。这也意味着我们的回调函数可以获取到计时器，为此我们向原有的<code>print</code>函数增加了两个参数：</p><ul><li>一个指向计时器的指针</li><li>一个计数器，从而让我们在第六次触发后停止</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; <span class="comment">/*e*/</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">           boost::asio::deadline_timer* t, <span class="keyword">int</span>* count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br></pre></td></tr></table></figure><p>如上所述，我们在计数器达到6时停止程序运行。然而总览代码，你会发现并没有显式地停止调用调用<code>io_service</code>。也正如前文中所述，<code>io_service::run()</code>会在没有“工作”之后停止运行。所以当计数器达到5时，我们不再开启一个新的异步等待，就会使得<code>io_service</code>停止运行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (*count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *coount &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    ++(*count);</span><br></pre></td></tr></table></figure><p>接着就是设置计时器的失效时间了。通过计算相对于新的失效时间，我们可以保证不会因为回调函数执行等导致的延误而出现太大偏差：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t-&gt;expires_at(t-&gt;expires_at() + boost::posix_time::seconds(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>之后我们调用计时器的异步等待。如你所见，我们使用<code>boost::bind()</code>来向回调函数传入更多的参数。方法<code>deadline_timer::async_wait()</code>的回调函数需要的格式为<code>void(const boost::system::error_code&amp;)</code>。而<code>boost::bind()</code>将多出来的参数绑定到新的<code>print</code>并形成新的函数对象，进而正确匹配该格式。<br>更多详细信息可以参阅<a href="http://www.boost.org/libs/bind/bind.html" target="_blank" rel="noopener">Boost.Bind documentation</a>。<br>在该例中，<code>boost::bind()</code>的第一个参数是类型为<code>boost::asio::placeholders::error</code>的对象，它是回调函数的错误对象的占位符。当进行异步操作初始化或者调用<code>boost::bind()</code>时，应当注意保证传入的实参与回调函数的参数列表相一致。在<a href="#timer.4">Timer.4</a>中，我们也将看到如何省略到错误对象这个占位符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      t-&gt;async_wait(boost::bind(print,</span><br><span class="line">          boost::asio::placeholders::error, t, count));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    boost::asio::io_service io;</span><br></pre></td></tr></table></figure><p>计数器<code>count</code>用来保证程序可以适时终止：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">boost::asio::<span class="function">deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">1</span>))</span></span>;</span><br></pre></td></tr></table></figure><p>跟第四步一样，我们在<code>main</code>函数中调用<code>deadline_timer::async_wait()</code>时同样也要绑定参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t.async_wait(boost::bind(print, </span><br><span class="line">    boost::asio::placeholders::error,, &amp;t, &amp;count));</span><br><span class="line">io.run();</span><br></pre></td></tr></table></figure><p>最后，为了验证变量<code>count</code>确实被函数<code>print</code>修改了，我们打印出该变量的值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Final count is "</span> &lt;&lt; count &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div id="src.timer.3"></div><h3 id="Source-Listing-for-Timer-3"><a href="#Source-Listing-for-Timer-3" class="headerlink" title="Source Listing for Timer.3"></a>Source Listing for Timer.3</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// timer.cpp</span></span><br><span class="line"><span class="comment">// ~~~~~~~~~</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2016 Christopher M. Kohlhoff (chris at kohlhoff dot com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Distributed under the Boost Software License, Version 1.0. (See accompanying</span></span><br><span class="line"><span class="comment">// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; <span class="comment">/*e*/</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    boost::asio::deadline_timer* t, <span class="keyword">int</span>* count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (*count &lt; <span class="number">5</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *count &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    ++(*count);</span><br><span class="line"></span><br><span class="line">    t-&gt;expires_at(t-&gt;expires_at() + boost::posix_time::seconds(<span class="number">1</span>));</span><br><span class="line">    t-&gt;async_wait(boost::bind(print,</span><br><span class="line">          boost::asio::placeholders::error, t, count));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  boost::asio::io_service io;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  boost::asio::<span class="function">deadline_timer <span class="title">t</span><span class="params">(io, boost::posix_time::seconds(<span class="number">1</span>))</span></span>;</span><br><span class="line">  t.async_wait(boost::bind(print,</span><br><span class="line">        boost::asio::placeholders::error, &amp;t, &amp;count));</span><br><span class="line"></span><br><span class="line">  io.run();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Final count is "</span> &lt;&lt; count &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#timer.3">Return Timer.3</a></p><div id="timer.4"></div><h2 id="Timer-4-Using-a-member-function-as-a-handler"><a href="#Timer-4-Using-a-member-function-as-a-handler" class="headerlink" title="Timer.4 - Using a member function as a handler"></a>Timer.4 - Using a member function as a handler</h2><p><a href="#src.timer.4">Timer.4 Source</a></p><p>这部分与<a href="#timer.3">Timer.3</a>的逻辑相同，唯一不同在于回调函数是一个类成员方法。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><p>与上述不同，该部分我们将全局函数<code>print</code>转变为一个类：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">printer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br></pre></td></tr></table></figure><p></p><p>类的构造函数需要一个<code>io_service</code>以初始化成员<code>timer_</code>，计数器也放到类中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printer(boost::asio::io_service&amp; io)</span><br><span class="line">  : timer_(io, boost::posix_time::seconds(<span class="number">1</span>)),</span><br><span class="line">    count_(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure><p>函数<code>boost::bind()</code>不仅可以应用在全局函数的绑定上，也可以应用在类成员方法上。因为所有的类非静态方法都有一个默认的参数<code>this</code>，我们将它传入到成员函数中就可。跟教程<a href="timer.3">Timer.3</a>相同，<code>boost::bind()</code>将会成功将回调函数转换成合法的方法对象。<br>细心的读者可能发现我们在这儿并没有指定<code>boost::asio::placeholders::error</code>，这是因为成员方法没有将它作为参数。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  timer_.async_wait(boost::bind(&amp;printer::print, <span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们在析构函数中打印出计数器最终的状态：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~printer()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Final count is "</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>成员方法形式的<code>print</code>与全局函数<code>print</code>形式很像。不同之处在于成员方法现在可以直接面向类成员进行操作，而不需要额外再传入参数。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count_ &lt; <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      ++count_;</span><br><span class="line"></span><br><span class="line">      timer_.expires_at(timer_.expires_at() + boost::posix_time::seconds(<span class="number">1</span>));</span><br><span class="line">      timer_.async_wait(boost::bind(&amp;printer::print, <span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  boost::asio::deadline_timer timer_;</span><br><span class="line">  <span class="keyword">int</span> count_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>此时的函数<code>main</code>比前面简单很多，但同样还是需要声明一个<code>boost::asio::io_service</code>对象。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  boost::asio::io_service io;</span><br><span class="line">  <span class="function">printer <span class="title">p</span><span class="params">(io)</span></span>;</span><br><span class="line">  io.run();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><div id="src.timer.4"></div><h3 id="Source-listing-for-Timer-4"><a href="#Source-listing-for-Timer-4" class="headerlink" title="Source listing for Timer.4"></a>Source listing for Timer.4</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// timer.cpp</span></span><br><span class="line"><span class="comment">// ~~~~~~~~~</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2016 Christopher M. Kohlhoff (chris at kohlhoff dot com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Distributed under the Boost Software License, Version 1.0. (See accompanying</span></span><br><span class="line"><span class="comment">// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">printer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  printer(boost::asio::io_service&amp; io)</span><br><span class="line">    : timer_(io, boost::posix_time::seconds(<span class="number">1</span>)),</span><br><span class="line">      count_(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    timer_.async_wait(boost::bind(&amp;printer::print, <span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~printer()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Final count is "</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count_ &lt; <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      ++count_;</span><br><span class="line"></span><br><span class="line">      timer_.expires_at(timer_.expires_at() + boost::posix_time::seconds(<span class="number">1</span>));</span><br><span class="line">      timer_.async_wait(boost::bind(&amp;printer::print, <span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  boost::asio::deadline_timer timer_;</span><br><span class="line">  <span class="keyword">int</span> count_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  boost::asio::io_service io;</span><br><span class="line">  <span class="function">printer <span class="title">p</span><span class="params">(io)</span></span>;</span><br><span class="line">  io.run();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#timer.4">Return Timer.4</a></p><div id="timer.5"></div><h2 id="Timer-5-Synchronising-handlers-in-multithreaded-programs"><a href="#Timer-5-Synchronising-handlers-in-multithreaded-programs" class="headerlink" title="Timer.5 - Synchronising handlers in multithreaded programs"></a>Timer.5 - Synchronising handlers in multithreaded programs</h2><p><a href="#src.timer.5">Timer.5 Source</a></p><p>该教程介绍了如何使用<code>boost::asio::strand</code>实现多线程程序间的同步问题。<br>前四个教程都只涉及了在一个线程中调用<code>io_service::run()</code>，而没有涉及到多线程的同步问题。前面提到<code>Boost.Asio</code>保证回调函数只会被当前调用了<code>io_service::run()</code>的线程调用。因此仅仅一个线程调用<code>io_service::run()</code>保证了回调函数无法真正并行（run concurrently）。<br>单线程往往是新手熟悉<code>Boost.Asio</code>的不二选择，但是它在程序，特别是服务器端程序，存在限制：</p><ul><li>响应慢，回调函数要花很长时间完成任务后才能再次响应</li><li>无法充分发挥多核系统的优势</li></ul><p>如果你遇到了上述这些问题，一个方法就是在多个线程中调用<code>io_service::run()</code>。然而，回调函数的多线程特性使得我们需要定义合适的策略处理共享的非线程安全的资源：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p>与上个教程一样，我们定义类<code>printer</code>，但这次将同时使用两个计时器：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">printer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br></pre></td></tr></table></figure><p></p><p>除了初始化常规的成员<code>boost::asio::deadline_timer</code>，我们还初始化了类型为<code>boost::asio::strand</code>的实例<code>strand_</code>。<br>类<code>boost::asio::stran</code>保证了由它调度的线程的原子性（An boost::asio::strand guarantees that, for those handlers that are dispatched through it, an executing handler will be allowed to complete before the next one is started.）。如此我们就可以调用随意多的线程来跑<code>io_service::run()</code>了。当然，那些没有通过该类调度或者通过不同实例调度的回调函数将会并行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">printer(boost::asio::io_service&amp; io)</span><br><span class="line">  : strand_(io),</span><br><span class="line">    timer1_(io, boost::posix_time::seconds(<span class="number">1</span>)),</span><br><span class="line">    timer2_(io, boost::posix_time::seconds(<span class="number">1</span>)),</span><br><span class="line">    count_(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure><p>当初始化那些异步操作时，每一个回调函数都应该使用<code>boost::asio::strand</code>包裹（wrapped）下。通过<code>strand::wrap()</code>函数包裹后的回调函数将会被自动调度。同一<code>boost::asio::strand</code>实例包裹的回调函数是不会并行的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  timer1_.async_wait(strand_.wrap(boost::bind(&amp;printer::print1, <span class="keyword">this</span>)));</span><br><span class="line">  timer2_.async_wait(strand_.wrap(boost::bind(&amp;printer::print2, <span class="keyword">this</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~printer()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Final count is "</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在多线程程序中，如果两个线程共享了某些资源时就需要适时同步。本例中，回调函数<code>print1</code>和<code>print2</code>共享资源有<code>std::cout</code>和<code>count_</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count_ &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Timer 1: "</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      ++count_;</span><br><span class="line"></span><br><span class="line">      timer1_.expires_at(timer1_.expires_at() + boost::posix_time::seconds(<span class="number">1</span>));</span><br><span class="line">      timer1_.async_wait(strand_.wrap(boost::bind(&amp;printer::print1, <span class="keyword">this</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count_ &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Timer 2: "</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      ++count_;</span><br><span class="line"></span><br><span class="line">      timer2_.expires_at(timer2_.expires_at() + boost::posix_time::seconds(<span class="number">1</span>));</span><br><span class="line">      timer2_.async_wait(strand_.wrap(boost::bind(&amp;printer::print2, <span class="keyword">this</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  boost::asio::io_service::strand strand_;</span><br><span class="line">  boost::asio::deadline_timer timer1_;</span><br><span class="line">  boost::asio::deadline_timer timer2_;</span><br><span class="line">  <span class="keyword">int</span> count_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在就剩<code>main</code>函数在两个线程中调用<code>io_service::run()</code>了。这通过<code>boost::thread</code>实现。<br>与在单线程执行一样，并行情况下的<code>io_service::run()</code>在“工作”没有完成的情况下是不会返回的。只有当所有后台的工作都完成了，后台的线程才会退出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  boost::asio::io_service io;</span><br><span class="line">  <span class="function">printer <span class="title">p</span><span class="params">(io)</span></span>;</span><br><span class="line">  boost::<span class="function">thread <span class="title">t</span><span class="params">(boost::bind(&amp;boost::asio::io_service::run, &amp;io))</span></span>;</span><br><span class="line">  io.run();</span><br><span class="line">  t.join();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div id="src.timer.5"></div><h3 id="Source-listing-for-Timer-5"><a href="#Source-listing-for-Timer-5" class="headerlink" title="Source listing for Timer.5"></a>Source listing for Timer.5</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// timer.cpp</span></span><br><span class="line"><span class="comment">// ~~~~~~~~~</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2016 Christopher M. Kohlhoff (chris at kohlhoff dot com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Distributed under the Boost Software License, Version 1.0. (See accompanying</span></span><br><span class="line"><span class="comment">// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">printer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  printer(boost::asio::io_service&amp; io)</span><br><span class="line">    : strand_(io),</span><br><span class="line">      timer1_(io, boost::posix_time::seconds(<span class="number">1</span>)),</span><br><span class="line">      timer2_(io, boost::posix_time::seconds(<span class="number">1</span>)),</span><br><span class="line">      count_(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    timer1_.async_wait(strand_.wrap(boost::bind(&amp;printer::print1, <span class="keyword">this</span>)));</span><br><span class="line">    timer2_.async_wait(strand_.wrap(boost::bind(&amp;printer::print2, <span class="keyword">this</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~printer()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Final count is "</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count_ &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Timer 1: "</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      ++count_;</span><br><span class="line"></span><br><span class="line">      timer1_.expires_at(timer1_.expires_at() + boost::posix_time::seconds(<span class="number">1</span>));</span><br><span class="line">      timer1_.async_wait(strand_.wrap(boost::bind(&amp;printer::print1, <span class="keyword">this</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count_ &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Timer 2: "</span> &lt;&lt; count_ &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      ++count_;</span><br><span class="line"></span><br><span class="line">      timer2_.expires_at(timer2_.expires_at() + boost::posix_time::seconds(<span class="number">1</span>));</span><br><span class="line">      timer2_.async_wait(strand_.wrap(boost::bind(&amp;printer::print2, <span class="keyword">this</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  boost::asio::io_service::strand strand_;</span><br><span class="line">  boost::asio::deadline_timer timer1_;</span><br><span class="line">  boost::asio::deadline_timer timer2_;</span><br><span class="line">  <span class="keyword">int</span> count_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  boost::asio::io_service io;</span><br><span class="line">  <span class="function">printer <span class="title">p</span><span class="params">(io)</span></span>;</span><br><span class="line">  boost::<span class="function">thread <span class="title">t</span><span class="params">(boost::bind(&amp;boost::asio::io_service::run, &amp;io))</span></span>;</span><br><span class="line">  io.run();</span><br><span class="line">  t.join();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#timer.5">Return Timer.5</a></p><div id="daytime.1"></div><h2 id="Daytime-1-A-synchronous-TCP-daytime-client"><a href="#Daytime-1-A-synchronous-TCP-daytime-client" class="headerlink" title="Daytime.1 - A synchronous TCP daytime client"></a>Daytime.1 - A synchronous TCP daytime client</h2><p><a href="#src.daytime.1">Daytime.1 Source</a></p><p>该部分介绍如何使用<strong>Boost.Asio</strong>实现TCP的客户端。同样以include开局：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/array.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><p>该应用是用来获取daytime服务的，所以需要用户手动输入服务器位置：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> boost::asio::ip::tcp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Usage: client &lt;host&gt;"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>也一样需要至少一个<code>io_service</code>实例：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boost::asio::io_service io_service;</span><br></pre></td></tr></table></figure><p></p><p>我们需要将用户输入的信息映射到TCP的服务终端上，这步可以借助<code>ip::tcp::resolver</code>：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp::<span class="function">resolver <span class="title">resolver</span><span class="params">(io_service)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>resolver对象还需要一个query对象才能实现转换。我们使用传入的服务器地址及服务名称构造一个<code>tcp::resolver::query</code>：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp::resolver::<span class="function">query <span class="title">query</span><span class="params">(argv[<span class="number">1</span>], <span class="string">"daytime"</span>)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>最后计算出来的终端类型为<code>ip::tcp::resolver::iterator</code>（注意：使用默认构造器构造的<code>ip::tcp::resolver::iterator</code>可以被当作<em>end iterator</em>）：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);</span><br></pre></td></tr></table></figure><p></p><p>下一步就是创建并连接到socket。上述过程获取的终端可能包含IPv4和IPv6终端，所以我们迭代上述的列表直到找到一个可以用的。这种做法使得应用与IP的版本保持松耦合。上述过程由<code>boost::asio::connect()</code>完成：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp::<span class="function">socket <span class="title">socket</span><span class="params">(io_service)</span></span>;</span><br><span class="line">boost::asio::connect(socket, endpoint_iterator);</span><br></pre></td></tr></table></figure><p></p><p>当连接成功建立吼，我们需要做的就是读取服务daytime返回的响应数据了。<br>我们此处使用<code>boost::array()</code>来接收数据。<code>boost::asio::buffer()</code>可以自动决定数组的大小，充分利用了内存。除了<code>boost::array()</code>，我们也可以使用<code>char[]</code>或者<code>std::vector</code>：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">  boost::<span class="built_in">array</span>&lt;<span class="keyword">char</span>, 128&gt; buf;</span><br><span class="line">  boost::system::error_code error;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> len = socket.read_some(boost::asio::buffer(buf), error);</span><br></pre></td></tr></table></figure><p></p><p>当连接被服务端关闭时，<code>ip::tcp::socket::read_some()</code>会抛出错误<code>boost::asio::error::eof()</code>。所以通过判断异常的存在，我们就知道该不该退出循环了：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (error == boost::asio::error::eof)</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">// Connection closed cleanly by peer.</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (error)</span><br><span class="line">    <span class="keyword">throw</span> boost::system::system_error(error); <span class="comment">// Some other error.</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span>.write(buf.data(), len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后，我们再抛出其他可能的异常：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (<span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><div id="src.daytime.1"></div><h3 id="Source-listing-for-Daytime-1"><a href="#Source-listing-for-Daytime-1" class="headerlink" title="Source listing for Daytime.1"></a>Source listing for Daytime.1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// client.cpp</span></span><br><span class="line"><span class="comment">// ~~~~~~~~~~</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2016 Christopher M. Kohlhoff (chris at kohlhoff dot com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Distributed under the Boost Software License, Version 1.0. (See accompanying</span></span><br><span class="line"><span class="comment">// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/array.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::asio::ip::tcp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Usage: client &lt;host&gt;"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boost::asio::io_service io_service;</span><br><span class="line"></span><br><span class="line">    tcp::<span class="function">resolver <span class="title">resolver</span><span class="params">(io_service)</span></span>;</span><br><span class="line">    tcp::resolver::<span class="function">query <span class="title">query</span><span class="params">(argv[<span class="number">1</span>], <span class="string">"daytime"</span>)</span></span>;</span><br><span class="line">    tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);</span><br><span class="line"></span><br><span class="line">    tcp::<span class="function">socket <span class="title">socket</span><span class="params">(io_service)</span></span>;</span><br><span class="line">    boost::asio::connect(socket, endpoint_iterator);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">      boost::<span class="built_in">array</span>&lt;<span class="keyword">char</span>, 128&gt; buf;</span><br><span class="line">      boost::system::error_code error;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">size_t</span> len = socket.read_some(boost::asio::buffer(buf), error);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (error == boost::asio::error::eof)</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// Connection closed cleanly by peer.</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (error)</span><br><span class="line">        <span class="keyword">throw</span> boost::system::system_error(error); <span class="comment">// Some other error.</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span>.write(buf.data(), len);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (<span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#daytime.1">Return Daytime.1</a></p><div id="daytime.2"></div><h2 id="Daytime-2-A-synchronous-TCP-daytime-server"><a href="#Daytime-2-A-synchronous-TCP-daytime-server" class="headerlink" title="Daytime.2 - A synchronous TCP daytime server"></a>Daytime.2 - A synchronous TCP daytime server</h2><p><a href="#src.daytime.2">Daytime.2 Source</a></p><p>这个教程则来演示如何用<strong>Boost.Asio</strong>实现TCP的服务端。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::asio::ip::tcp;</span><br></pre></td></tr></table></figure><p></p><p>我们定义了全局函数<code>make_daytime_string()</code>，用来产生响应客户端的消息。这个函数在接下来的几个都会被使用：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">make_daytime_string</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">// For time_t, time and ctime;</span></span><br><span class="line">  <span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ctime(&amp;now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    boost::asio::io_service io_service;</span><br></pre></td></tr></table></figure><p></p><p>创建一个负责监听新连接的<code>ip::tcp::acceptor</code>，它使用IPv4，并监听端口13。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp::<span class="function">acceptor <span class="title">acceptor</span><span class="params">(io_service, tcp::endpoint(tcp::v4(), <span class="number">13</span>))</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>该例中的服务端是<em>iterative server</em>，即同时只能服务一个连接。创建一个代表与用户对话的socket，并等待客户端的请求：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">  tcp::<span class="function">socket <span class="title">socket</span><span class="params">(io_service)</span></span>;</span><br><span class="line">  acceptor.accept(socket);</span><br></pre></td></tr></table></figure><p></p><p>当客户端发送请求时，我们将服务端的时间作为信息发送给它：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> message = make_daytime_string();</span><br><span class="line"></span><br><span class="line">    boost::system::error_code ignored_error;</span><br><span class="line">    boost::asio::write(socket, boost::asio::buffer(message), ignored_error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>同样记得处理异常：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">catch</span> (<span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><div id="src.daytime.2"></div><h3 id="Source-listing-for-Daytime-2"><a href="#Source-listing-for-Daytime-2" class="headerlink" title="Source listing for Daytime 2"></a>Source listing for Daytime 2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// server.cpp</span></span><br><span class="line"><span class="comment">// ~~~~~~~~~~</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2016 Christopher M. Kohlhoff (chris at kohlhoff dot com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Distributed under the Boost Software License, Version 1.0. (See accompanying</span></span><br><span class="line"><span class="comment">// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::asio::ip::tcp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">make_daytime_string</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">// For time_t, time and ctime;</span></span><br><span class="line">  <span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ctime(&amp;now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    boost::asio::io_service io_service;</span><br><span class="line"></span><br><span class="line">    tcp::<span class="function">acceptor <span class="title">acceptor</span><span class="params">(io_service, tcp::endpoint(tcp::v4(), <span class="number">13</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">      tcp::<span class="function">socket <span class="title">socket</span><span class="params">(io_service)</span></span>;</span><br><span class="line">      acceptor.accept(socket);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span> message = make_daytime_string();</span><br><span class="line"></span><br><span class="line">      boost::system::error_code ignored_error;</span><br><span class="line">      boost::asio::write(socket, boost::asio::buffer(message), ignored_error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (<span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#daytime.2">Return Daytime.2</a></p><h2 id="Daytime-3-An-asynchronous-TCP-daytime-server"><a href="#Daytime-3-An-asynchronous-TCP-daytime-server" class="headerlink" title="Daytime.3 - An asynchronous TCP daytime server"></a>Daytime.3 - An asynchronous TCP daytime server</h2><p><a href="#src.daytime.3">Daytime.3 Source</a></p><p>这会我们先看看<code>main</code>函数：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br></pre></td></tr></table></figure><p></p><p>我们要声明一个服务端对象应对客户端的请求，当然还需要<code>io_service</code>来提供I/O服务，如该例中的socket。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boost::asio::io_service io_service;</span><br><span class="line"><span class="function">tcp_server <span class="title">server</span><span class="params">(io_service)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>调用<code>io_service.run()</code>来开始异步操作：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    io_service.run();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (<span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>再来看看类<code>tcp_server</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tcp_server</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br></pre></td></tr></table></figure><p>构造函数初始化了一个使用IPv4并监听端口13的acceptor：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  tcp_server(boost::asio::io_service&amp; io_service)</span><br><span class="line">    : acceptor_(io_service, tcp::endpoint(tcp::v4(), <span class="number">13</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    start_accept();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br></pre></td></tr></table></figure><p></p><p>方法<code>start_accept()</code>创建了一个socket并又初始化了一些对象以应付下一个连接：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_accept</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  tcp_connection::pointer new_connection =</span><br><span class="line">    tcp_connection::create(acceptor_.get_io_service());</span><br><span class="line"></span><br><span class="line">  acceptor_.async_accept(new_connection-&gt;socket(),</span><br><span class="line">    boost::bind(&amp;tcp_server::handle_accept, <span class="keyword">this</span>, new_connection,</span><br><span class="line">      boost::asio::placeholders::error));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在异步函数<code>start_accept()</code>完成操作之后，函数<code>handle_accept()</code>将会被调用。它真正处理客户的请求，并在函数末将调用<code>start_accept()</code>：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_accept</span><span class="params">(tcp_connection::pointer new_connection,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> boost::system::error_code&amp; error)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!error)</span><br><span class="line">  &#123;</span><br><span class="line">    new_connection-&gt;start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start_accept();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着是类<code>tcp_connection</code>。为了防止不出现野指针（即只要有操作涉及到该类时，该类就一直存在）我们使用了<code>shared_ptr</code>和<code>enable_shared_from_this</code>：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tcp_connection</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> boost::enable_shared_from_this&lt;tcp_connection&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;tcp_connection&gt; pointer;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> pointer <span class="title">create</span><span class="params">(boost::asio::io_service&amp; io_service)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pointer(<span class="keyword">new</span> tcp_connection(io_service));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tcp::<span class="function">socket&amp; <span class="title">socket</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> socket_;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p>在函数<code>start（）</code>中，我们调用<code>boost::asio::async_write()</code>将数据发送给客户端。注意在这里我们使用的是<code>boost::asio::async_write()</code>而不是<code>ip::tcp::socket::async_write_some()</code>，是为了将整个数据一次发送出去：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br></pre></td></tr></table></figure><p></p><p>发送的数据存放在类成员<code>message_</code>。所以我们需要保证数据合法，直至异步操作被完成：<br></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">message_</span> = make_daytime_string()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p></p><p>接着就是初始化异步操作的部分了，同样是在<code>boost::bind()</code>的帮助下完成。值得注意的是，因为在<code>handle_write()</code>中并没有用到传入的占位符（<code>boost::asio::placeholders::error</code>与<code>boost::asio::placeholders::bytes_transferred</code>），因此可以省略：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  boost::asio::async_write(socket_, boost::asio::buffer(message_),</span><br><span class="line">    boost::bind(&amp;tcp_connection::handle_write, shared_from_this(),</span><br><span class="line">      boost::asio::placeholders::error,</span><br><span class="line">      boost::asio::placeholders::bytes_transferred));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>至于具体如何处理客户端的连接，就可以在<code>handle_write()</code>中实现了：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  tcp_connection(boost::asio::io_service&amp; io_service)</span><br><span class="line">    : socket_(io_service)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handle_write</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; <span class="comment">/*error*/</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">size_t</span> <span class="comment">/*bytes_transferred*/</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tcp::socket socket_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> message_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><div id="src.daytime.3"></div><h3 id="Source-listing-for-Daytime-3"><a href="#Source-listing-for-Daytime-3" class="headerlink" title="Source listing for Daytime.3"></a>Source listing for Daytime.3</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// server.cpp</span></span><br><span class="line"><span class="comment">// ~~~~~~~~~~</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2003-2016 Christopher M. Kohlhoff (chris at kohlhoff dot com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Distributed under the Boost Software License, Version 1.0. (See accompanying</span></span><br><span class="line"><span class="comment">// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/bind.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/shared_ptr.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/enable_shared_from_this.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/asio.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> boost::asio::ip::tcp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">make_daytime_string</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">// For time_t, time and ctime;</span></span><br><span class="line">  <span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ctime(&amp;now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tcp_connection</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> boost::enable_shared_from_this&lt;tcp_connection&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> boost::<span class="built_in">shared_ptr</span>&lt;tcp_connection&gt; pointer;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> pointer <span class="title">create</span><span class="params">(boost::asio::io_service&amp; io_service)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pointer(<span class="keyword">new</span> tcp_connection(io_service));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tcp::<span class="function">socket&amp; <span class="title">socket</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> socket_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    message_ = make_daytime_string();</span><br><span class="line"></span><br><span class="line">    boost::asio::async_write(socket_, boost::asio::buffer(message_),</span><br><span class="line">        boost::bind(&amp;tcp_connection::handle_write, shared_from_this(),</span><br><span class="line">          boost::asio::placeholders::error,</span><br><span class="line">          boost::asio::placeholders::bytes_transferred));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  tcp_connection(boost::asio::io_service&amp; io_service)</span><br><span class="line">    : socket_(io_service)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handle_write</span><span class="params">(<span class="keyword">const</span> boost::system::error_code&amp; <span class="comment">/*error*/</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">size_t</span> <span class="comment">/*bytes_transferred*/</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tcp::socket socket_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> message_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tcp_server</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  tcp_server(boost::asio::io_service&amp; io_service)</span><br><span class="line">    : acceptor_(io_service, tcp::endpoint(tcp::v4(), <span class="number">13</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    start_accept();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">start_accept</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    tcp_connection::pointer new_connection =</span><br><span class="line">      tcp_connection::create(acceptor_.get_io_service());</span><br><span class="line"></span><br><span class="line">    acceptor_.async_accept(new_connection-&gt;socket(),</span><br><span class="line">        boost::bind(&amp;tcp_server::handle_accept, <span class="keyword">this</span>, new_connection,</span><br><span class="line">          boost::asio::placeholders::error));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handle_accept</span><span class="params">(tcp_connection::pointer new_connection,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">const</span> boost::system::error_code&amp; error)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!error)</span><br><span class="line">    &#123;</span><br><span class="line">      new_connection-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start_accept();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tcp::acceptor acceptor_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    boost::asio::io_service io_service;</span><br><span class="line">    <span class="function">tcp_server <span class="title">server</span><span class="params">(io_service)</span></span>;</span><br><span class="line">    io_service.run();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (<span class="built_in">std</span>::exception&amp; e)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="#daytime.3">Return Daytime.3</a></p><div id="dummy"></div><h2 id="Daytime-4-A-synchronous-UDP-daytime-client"><a href="#Daytime-4-A-synchronous-UDP-daytime-client" class="headerlink" title="Daytime.4 - A synchronous UDP daytime client"></a>Daytime.4 - A synchronous UDP daytime client</h2><h2 id="Daytime-5-A-synchronous-UDP-daytime-server"><a href="#Daytime-5-A-synchronous-UDP-daytime-server" class="headerlink" title="Daytime.5 - A synchronous UDP daytime server"></a>Daytime.5 - A synchronous UDP daytime server</h2><h2 id="Daytime-6-An-asynchronous-UDP-daytime-server"><a href="#Daytime-6-An-asynchronous-UDP-daytime-server" class="headerlink" title="Daytime.6 - An asynchronous UDP daytime server"></a>Daytime.6 - An asynchronous UDP daytime server</h2><h2 id="Daytime-7-A-combined-TCP-UDP-asynchronous-server"><a href="#Daytime-7-A-combined-TCP-UDP-asynchronous-server" class="headerlink" title="Daytime.7 - A combined TCP/UDP asynchronous server"></a>Daytime.7 - A combined TCP/UDP asynchronous server</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.boost.org/doc/libs/1_63_0/doc/html/boost_asio.html" target="_blank" rel="noopener">Boost.Asio - Boost.org</a><br><a href="https://msdn.microsoft.com/en-us/library/6sehtctf.aspx" target="_blank" rel="noopener">Modifying WINVER and _WIN32_WINNT</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> boost </category>
            
        </categories>
        
        
        <tags>
            
            <tag> boost </tag>
            
            <tag> asio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习theano的scan]]></title>
      <url>http://www.wrran.com/blog/2017/02/24/howto/theano/scan/</url>
      <content type="html"><![CDATA[<blockquote><p><code>scan</code> - looping in theano</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h1 id="接口详解"><a href="#接口详解" class="headerlink" title="接口详解"></a>接口详解</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://deeplearning.net/software/theano/library/scan.html#" target="_blank" rel="noopener">api documentation - scan</a><br><a href="http://blog.csdn.net/wangjian1204/article/details/50518591" target="_blank" rel="noopener">五个例子掌握theano.scan函数</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> theano </category>
            
        </categories>
        
        
        <tags>
            
            <tag> theano </tag>
            
            <tag> scan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0242] - Valid Anagram]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0242-valid-anagram/</url>
      <content type="html"><![CDATA[<blockquote><p>判断两个字符串是否“同型异构”<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/valid-anagram/?tab=Description" target="_blank" rel="noopener">Valid Anagram</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>“同型异构”的首要要求是两个字符串的长度相同，之后更加严格的要求就是各个字母的数目相同。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(sz)$，$sz$为字符串的长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isAnagram</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.size() != t.size()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> ch[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i != s.size() ; ++i) &#123;</span><br><span class="line">            ++ch[s[i] - <span class="string">'a'</span>];</span><br><span class="line">            --ch[t[i] - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=<span class="number">0</span>; i != <span class="number">26</span> ; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[i] != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode - Majority Element]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0169-majority-element/</url>
      <content type="html"><![CDATA[<blockquote><p>查找一个数组中的<em>Majority Element</em><br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/majority-element/?tab=Description" target="_blank" rel="noopener">Majority Element</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>因为<em>Majority Element</em>的性质，我们可以知道该元素的个数必然超过数组长度的一半。因此我们可以迭代数组，先设定一个可能的备选者<em>Majority Element</em>，相同时计数器加一，不相同时计数器减一；当计数器小于一时，更换备选者。如此迭代，因为前面提到的性质，备选者一定就是我们需要找的元素。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为数组长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size(), maybe=nums[<span class="number">0</span>], cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == maybe) ++cnt;</span><br><span class="line">            <span class="keyword">else</span> --cnt;</span><br><span class="line">            <span class="keyword">if</span>(cnt&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                maybe = nums[i];</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maybe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0100] - Same Tree]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0100-same-tree/</url>
      <content type="html"><![CDATA[<blockquote><p>判断两个二叉树是否相同<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/same-tree/?tab=Description" target="_blank" rel="noopener">Same Tree</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>递归的思想：两个二叉树相同就是根节点相同，并且两者的左子树相同，两者的右子树相同。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为两个二叉树中节点数目较小的那一位</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span> &amp;&amp; q == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span> || q == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;val == q-&gt;val &amp;&amp; isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0237] - Delete Node in a Linked List]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0237-delete-node-in-a-linked-list/</url>
      <content type="html"><![CDATA[<blockquote><p>实现删除链表中指定节点的方法<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/?tab=Description" target="_blank" rel="noopener">Delete Node in a Linked List</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>链表中删除一个节点的标准做法就是将该节点删除后，将该节点的前件指向该节点的后件。但该题有所不同，我们的参数只有一个要删除的节点，同时该节点不会是尾部节点。所以可以将该节点的后件的值（包括后件的后件）复制给当前节点，之后删除后件节点就可。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">        ListNode* next = node-&gt;next;</span><br><span class="line">        node-&gt;val = next-&gt;val;</span><br><span class="line">        node-&gt;next = next-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode - Excel Sheet Column Number]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0171-excel-sheet-column-number/</url>
      <content type="html"><![CDATA[<blockquote><p>将Excel中的列转化为数字，如AA =&gt; 27<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/excel-sheet-column-number/?tab=Description" target="_blank" rel="noopener">Excel Sheet Column Nnumber</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这种题目的解决类似进制转换。但又有所不同，该题并没有$0$这种数字。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为字符串的长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> retVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> sz = s.size();</span><br><span class="line">        <span class="keyword">int</span> unit = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> i=sz<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">            retVal += unit * (s[i]-<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">            unit *= <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[李沐 - 博士这五年]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/people-say/170222-01/</url>
      <content type="html"><![CDATA[<blockquote><p>软广一枚<br>你有本事你也来写</p></blockquote><a id="more"></a><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://zhuanlan.zhihu.com/p/25099638" target="_blank" rel="noopener">博士这五年 - 李沐</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[神经网络中使用ReLu的理由]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/learn/ml-activation-function-relu/</url>
      <content type="html"><![CDATA[<blockquote><p>神经网络的ReLu为什么会比tanh/sigmoid更有用？</p></blockquote><a id="more"></a><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.zhihu.com/question/29021768" target="_blank" rel="noopener">知乎 - 请问人工神经网络中的activation function的作用具体是什么？</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> machine learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> machine learning </tag>
            
            <tag> activation function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0094] - Binary Tree Inorder Traversal]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0094-binary-tree-inorder-traversal/</url>
      <content type="html"><![CDATA[<blockquote><p>要求用迭代的方式实现一个二叉树的中序遍历。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/?tab=Description" target="_blank" rel="noopener">Binary Tree Inorder Traversal</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>中序遍历时要求先输出左树的中序遍历，很自然的涉及到堆栈的先入后出的特征。我们用堆栈将左节点与当前节点压入；在压出的时候去检查当前节点的右树节点，如果有则将右树节点的左节点与当前节点压入；如此反复，直至堆栈为空。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为节点数量<br>空间复杂度：$O(h)$，$h$为树深</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rt;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode *cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            st.push(cur);</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!st.empty()) &#123;</span><br><span class="line">            cur = st.top(); st.pop();</span><br><span class="line">            rt.push_back(cur-&gt;val);</span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                st.push(cur);</span><br><span class="line">                cur = cur-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0173] - Binary Search Tree Iterator]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0173-binary-search-tree-iterator/</url>
      <content type="html"><![CDATA[<blockquote><p>要求实现一个排序二叉树的先序遍历迭代器<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/binary-search-tree-iterator/?tab=Description" target="_blank" rel="noopener">Binary Search Tree Iterator</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>题意要求每次调用<code>next()</code>时都返回当前剩余节点下最小的值。同时因为BST的特性，这种要求实质上相当于BST的先序遍历方式。而二叉树的中序遍历可以用传统的方式：<br>用一个堆栈存储下当前最左的子节点；每次弹出该节点时，检查节点的右子树节点，并将右子树节点的左孩子们压入到堆栈中。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p><code>next()</code>与<code>hasNext()</code>确实满足题意中要求的时间复杂度为$O(1)$，空间复杂度为$O(h)$，其中$h$为树深。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BSTIterator(TreeNode *root) &#123;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            st.push(root);</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** @return whether we have a next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !st.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** @return the next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = st.top()-&gt;val;</span><br><span class="line">        TreeNode *rt = st.top()-&gt;right; st.pop();</span><br><span class="line">        <span class="keyword">while</span>(rt) &#123;</span><br><span class="line">            st.push(rt);</span><br><span class="line">            rt = rt-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your BSTIterator will be called like this:</span></span><br><span class="line"><span class="comment"> * BSTIterator i = BSTIterator(root);</span></span><br><span class="line"><span class="comment"> * while (i.hasNext()) cout &lt;&lt; i.next();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0309] - Best Time to Buy and Sell Stock with Cooldown]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0309-best-time-to-buy-and-sell-stock-with-cooldown/</url>
      <content type="html"><![CDATA[<blockquote><p>已知一个股票的价格随时间变化的数列，交易的限制是在买进之前必须卖出，并且卖出之后必须等待一天才能进行操作。求最大的收益<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/?tab=Description" target="_blank" rel="noopener">Best Time to Buy and Sell Stock with Cooldown</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>对于每一天而言，我们可以进行三种操作：买入/卖出/等待。同时因为题目的限制，我们知道：买入的前置情形为等待；卖出的前置情形为买入；等待的前置情形为卖出。所以，我们记录下各个前置情形下的效益及当前操作产生的效益。从中取出最大的就是我们所要的答案。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为数组的长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = prices.size();</span><br><span class="line">        <span class="keyword">if</span> (sz == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pbuy = -prices[<span class="number">0</span>]; <span class="comment">// 买入产生的效益</span></span><br><span class="line">        <span class="keyword">int</span> psell = INT_MIN; <span class="comment">// 卖出产生的效益</span></span><br><span class="line">        <span class="keyword">int</span> pcooldown = <span class="number">0</span>; <span class="comment">// 等待产生的效益</span></span><br><span class="line">        <span class="keyword">int</span> buy, sell, cooldown;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            buy = <span class="built_in">std</span>::max(pbuy, pcooldown - prices[i]);</span><br><span class="line">            sell = <span class="built_in">std</span>::max(psell, pbuy + prices[i]);</span><br><span class="line">            cooldown = <span class="built_in">std</span>::max(pcooldown, psell);</span><br><span class="line">            pbuy = buy;</span><br><span class="line">            psell = sell;</span><br><span class="line">            pcooldown = cooldown;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::max(<span class="built_in">std</span>::max(pbuy, psell), pcooldown);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[123] - Best Time to Buy and Sell Stock III]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0123-best-time-to-buy-and-sell-stock-iii/</url>
      <content type="html"><![CDATA[<blockquote><p>已知一个股票的价格随时间变化的数列，交易的限制是在买进之前必须卖出，并且只能完成两桩交易。求最大的收益。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/?tab=Description" target="_blank" rel="noopener">Best Time to Buy and Sell Stock III</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>因为只可以进行两次交易并且买入之前必须卖出。我们需要做的就是比较在某日之前可以获得的最大利润及之后可以获得的最大利润的和，找出其中最大的。就是我们需要的答案。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为数组的长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = prices.size();</span><br><span class="line">        <span class="keyword">if</span> (sz == <span class="number">0</span> || sz == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (sz == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[<span class="number">1</span>] &gt; prices[<span class="number">0</span>]) <span class="keyword">return</span> prices[<span class="number">1</span>] - prices[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cmin(sz, INT_MAX); <span class="comment">// cmin[i]记录包含i在内的之前最低的价格</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cmax(sz, INT_MIN); <span class="comment">// cmax[i]记录包含i在内的之后最高的价格</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preMax(sz, <span class="number">0</span>); <span class="comment">// preMax[i]记录包含i在内的之前的最大利润</span></span><br><span class="line">        cmin[<span class="number">0</span>] = prices[<span class="number">0</span>];</span><br><span class="line">        cmax[sz<span class="number">-1</span>] = prices[sz<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            cmin[i] = <span class="built_in">std</span>::min(cmin[i - <span class="number">1</span>], prices[i]);</span><br><span class="line">            cmax[sz<span class="number">-1</span>-i] = <span class="built_in">std</span>::max(cmax[sz-i], prices[sz<span class="number">-1</span>-i]);</span><br><span class="line">            preMax[i] = <span class="built_in">std</span>::max(preMax[i - <span class="number">1</span>], prices[i] - cmin[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            tot = <span class="built_in">std</span>::max(tot, cmax[i] - prices[i] + preMax[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0121] - Best Time to Buy and Sell Stock]]></title>
      <url>http://www.wrran.com/blog/2017/02/22/acm/leetcode/0121-best-time-to-buy-and-sell-stock-i/</url>
      <content type="html"><![CDATA[<blockquote><p>已知一个股票的价格随时间变化的数列，交易的限制是只能买入卖出一次。求最大的收益。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/?tab=Description" target="_blank" rel="noopener">Best Time to Buy and Sell Stock I</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>最大的利润就是元素之间最大的差，也就是最大元素与最小元素的差。但也要注意该差是不是大于零。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为数组的长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = prices.size();</span><br><span class="line">        <span class="keyword">if</span> (sz == <span class="number">0</span> || sz == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> curMin = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> curMax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            curMax = max(curMax, prices[i] - curMin);</span><br><span class="line">            curMin = <span class="built_in">std</span>::min(curMin, prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::max(<span class="number">0</span>, curMax);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[boost / program options]]></title>
      <url>http://www.wrran.com/blog/2017/02/21/howto/boost/program-options/</url>
      <content type="html"><![CDATA[<blockquote><p>what you want for me :)</p></blockquote><a id="more"></a><h1 id="boost-program-options"><a href="#boost-program-options" class="headerlink" title="boost / program options"></a>boost / program options</h1><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>该部分介绍了Boost库中program options最常用的场景。完整的示例可以参看文件夹<code>BOOST_ROOT/libs/program_options/example</code>中的内容。<br>以下示例代码中都假设已经预先定义了如下命名空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> po = boost::program_options;</span><br></pre></td></tr></table></figure><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>第一个例子，该例子仅仅处理两个<code>option</code>。代码如下，完整代码参见<code>example/first.cpp</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare the supported options</span></span><br><span class="line">po::<span class="function">options_description <span class="title">desc</span><span class="params">(<span class="string">"Allowed options"</span>)</span></span>;</span><br><span class="line">desc.add_options()</span><br><span class="line">    (<span class="string">"help"</span>, <span class="string">"produce help message"</span>)</span><br><span class="line">    (<span class="string">"compression"</span>, po::value&lt;<span class="keyword">int</span>&gt;(), <span class="string">"set compression level"</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">po::variables_map vm;</span><br><span class="line">po::store(po::parse_command_line(ac, av, desc), vm);</span><br><span class="line">po::notify(vm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"help"</span>)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; desc &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"compression"</span>)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Compression level was set to "</span></span><br><span class="line">  &lt;&lt; vm[<span class="string">"compression"</span>].as&lt;<span class="keyword">int</span>&gt;() &lt;&lt; <span class="string">".\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Compression level was not set.\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例子中我们先定义了一个类<code>options_description</code>，之后调用该类的方法<code>add_options</code>，这个方法返回了一个定义了操作符<code>()</code>的代理对象。该代理对象的方法即操作符<code>()</code>可以声明<em>options</em>，有三个参数：选项名称，选项可取值的信息，选项含义。在该例中，第一个参数没有值，第二个参数的值为类型<code>int</code>。</p><p>之后，我们还声明了一个类型为<code>variables_map</code>的对象。该类可以用来存储任意类型的数值，用来存储options的具体取值。之后，调用了<code>store</code>/<code>parse_command_line</code>/<code>notify</code>函数让<code>vm</code>包含命令行中输入的各个值等。</p><p>之后，我们就可以像使用<code>std::map</code>一样使用<code>vm</code>。除了，我们在取值时，必须使用方法<code>as</code>来指定类型。（如果<code>as</code>中指定的类型与声明时的类型不同，将抛出异常。）</p><p>编译上述代码，可以如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bin/gcc/debug/first</span><br><span class="line"><span class="comment"># Compression level was not set</span></span><br><span class="line"></span><br><span class="line">bin/gcc/debug/first --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># Allowed options:</span></span><br><span class="line"><span class="comment">#   --help              : produce help message</span></span><br><span class="line"><span class="comment">#   --compression arg   : set compression level</span></span><br><span class="line"></span><br><span class="line">bin/gcc/debug/first --compression 10</span><br><span class="line"><span class="comment"># Compression level was set to 10.</span></span><br></pre></td></tr></table></figure><h3 id="Option-Details"><a href="#Option-Details" class="headerlink" title="Option Details"></a>Option Details</h3><p>option的取值，除了类型（如上例中的<code>int</code>)外，还有许多值得探讨的地方。我们在这节中予以讨论。该部分的所有代码段可以参见<code>example/options_description.cpp</code>。</p><p>假设我们要正在写跟编译器相关的程序，可能的options有：</p><ul><li>优化级别（optimization level）</li><li>一些头文件路径（a number of include paths）</li><li>一些输入文件（a number of input files）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line">po::<span class="function">options_description <span class="title">desc</span><span class="params">(<span class="string">"Allowed options"</span>)</span></span>;</span><br><span class="line">desc.add_options()</span><br><span class="line">    (<span class="string">"help"</span>, <span class="string">"produce help message"</span>)</span><br><span class="line">    (<span class="string">"optimization level"</span>, po::value&lt;<span class="keyword">int</span>&gt;(&amp;opt)-&gt;default_value(<span class="number">10</span>),</span><br><span class="line">     <span class="string">"optimization level"</span>)</span><br><span class="line">     (<span class="string">"include-path,I"</span>, po::value&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(), <span class="string">"include path"</span>)</span><br><span class="line">     (<span class="string">"input-file"</span>, po::value&lt;&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(), <span class="string">"input file"</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><code>help</code>与上例中的并无区别，提供这个选项应当被当作标配。<br>选项<code>optimization</code>有两点值得注意：</p><ul><li>我们指定了存值的对象<code>&amp;opt</code>。这样之后我们将可以通过该对象取得命令行输入的具体参数</li><li>我们指定了默认值为<code>10</code>。如果用户没有输入值，则该选项的值就将为<code>10</code><br>选项<code>include-path</code>同样有两点值得注意：</li><li>用户常常使用简写字母来代替长指令。我们通过将<code>options name</code>指定为<code>include-path,I</code>来实现这一目的。如此，我们就可以通过<code>-I</code>来代替<code>--include-path</code>了。</li><li><code>include-path</code>的类型被指定为<code>std::vector</code>。这样定义之后，用户输入多个<code>--include-path</code>将会被收集到一个<code>vector</code>中。<br>选项<code>input-file</code>与<code>include-path</code>相比，并没有什么不同。但我们会发现，用户常常使用如下指令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compiler a.cpp</span><br></pre></td></tr></table></figure><p>而不是如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compiler --input-file=a.cpp</span><br></pre></td></tr></table></figure><p>我们接着就来讨论该问题。</p><p>上述命令行中并没有输入<code>option name</code>，在该库中这些被成为<code>positional options</code>。通过用户输入的格式，实现上述功能的代码见下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">po::positional_options_description p;</span><br><span class="line">p.add(<span class="string">"input-file"</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">po::variables_map vm;</span><br><span class="line">po::store(po::command_line_parser(ac, av)</span><br><span class="line">          .options(desc)</span><br><span class="line">          .positional(p)</span><br><span class="line">          .run(), vm);</span><br><span class="line">po::notify(vm);</span><br></pre></td></tr></table></figure><p>上述代码段的前两行是说，所有的<code>positional options</code>都当作选项<code>input-file</code>。同样值得注意的是，我们使用了<code>command_line_parser</code>来解析命令行参数，而不是<code>parse_command_line</code>。后者只适用于简单情形。</p><p>到此为止，我们解析了所有的<code>options</code>。现在我们将之打印出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"include-path"</span>)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Include paths are: "</span></span><br><span class="line">         &lt;&lt; vm[<span class="string">"include-path"</span>].as&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"input-file"</span>)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input files are: "</span></span><br><span class="line">         &lt;&lt; vm[<span class="string">"input-file"</span>].as&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"optimization level is "</span> &lt;&lt; opt &lt;&lt; <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure><p>测试部分如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bin/gcc/debug/options_description --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># Usage: options_description [options]</span></span><br><span class="line"><span class="comment"># Allowed options:</span></span><br><span class="line"><span class="comment">#   --help                 : produce help message</span></span><br><span class="line"><span class="comment">#   --optimization arg     : optimization level</span></span><br><span class="line"><span class="comment">#   -I [ --include-path ] arg : include path</span></span><br><span class="line"><span class="comment">#   --input-file arg       : input file</span></span><br><span class="line"></span><br><span class="line">bin/gcc/debug/options_description</span><br><span class="line"><span class="comment"># Optimization level is 10</span></span><br><span class="line"></span><br><span class="line">bin/gcc/debug/options_description --optimization 4 -I foo a.cpp</span><br><span class="line">Include paths are: foo</span><br><span class="line">Input files are: a.cpp</span><br><span class="line">Optimization level is 4</span><br></pre></td></tr></table></figure><p>注意上述程序中可能存在的一个小问题就是，用户仍旧可以使用选项<code>--input-file</code>。这可能导致一些困惑，更好的选择是限制该功能的使用。但我们还是先进入到下一个实例吧。</p><h3 id="Multiple-Sources"><a href="#Multiple-Sources" class="headerlink" title="Multiple Sources"></a>Multiple Sources</h3><p>让用户在命令行中一次性输入所有的options是种不友好的交互形式。更好的选择是用配置文件及命令行来共同配置程序。</p><p>此时，我们就需要同时考虑配置文件及命令行中的参数了。如，命令行中的<code>optimization level</code>应当覆盖配置文件中的该选项；命令行中的<code>include paths</code>与配置文件中的该选项应当组合起来使用。</p><p>我们来阅读下面的代码段，完整的程序可以参见<code>example/multiple_sources.cpp</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare a group of options that will be</span></span><br><span class="line"><span class="comment">// allowed only on command line</span></span><br><span class="line">po::<span class="function">options_description <span class="title">generic</span><span class="params">(<span class="string">"Generic options"</span>)</span></span>;</span><br><span class="line">generic.add_options()</span><br><span class="line">    (<span class="string">"version,v"</span>, <span class="string">"print version string"</span>)</span><br><span class="line">    (<span class="string">"help"</span>, <span class="string">"produce help message"</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare a group of options that will be</span></span><br><span class="line"><span class="comment">// allowed both on command line and in config file</span></span><br><span class="line">po::<span class="function">options_description <span class="title">config</span><span class="params">(<span class="string">"Configuration"</span>)</span></span>;</span><br><span class="line">config.add_options()</span><br><span class="line">    (<span class="string">"optimization"</span>, po::value&lt;<span class="keyword">int</span>&gt;(&amp;opt)-&gt;default_value(<span class="number">10</span>),</span><br><span class="line">        <span class="string">"optimization level"</span>)</span><br><span class="line">    (<span class="string">"include-path,I"</span>, po::value&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;()-&gt;composing(),</span><br><span class="line">        <span class="string">"include path"</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hidden options, will be allowed both on command line and</span></span><br><span class="line"><span class="comment">// in config file, but will not be shown to the user.</span></span><br><span class="line">po::<span class="function">options_description <span class="title">hidden</span><span class="params">(<span class="string">"Hidden options"</span>)</span></span>;</span><br><span class="line">hidden.add_options()</span><br><span class="line">    (<span class="string">"input-file"</span>, po::value&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(), <span class="string">"input file"</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>上述代码中，我们声明了多个类型为<code>options_description</code>的实例。这样做的原因是因为总的来说，并非所有options都是相同的；另外，帮助信息有一定结构比长长一串的罗列好的多。故此，我们将options分为了三组：<code>generic</code>/<code>config</code>/<code>hidden</code>。</p><p>值得注意的有，我们调用了选项<code>include-path</code>的<code>composing</code>，这告诉库去将不同来源的选项组合在一起。</p><p>类<code>options_description</code>的方法<code>add</code>可以用来组合不同的options：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">po::options_description cmdline_options;</span><br><span class="line">cmdline_options.add(generic).add(config).add(hidden);</span><br><span class="line"></span><br><span class="line">po::options_description config_file_options;</span><br><span class="line">config_file_options.add(config).add(hidden);</span><br><span class="line"></span><br><span class="line">po::<span class="function">options_description <span class="title">visible</span><span class="params">(<span class="string">"Allowed options"</span>)</span></span>;</span><br><span class="line">visible.add(generic).add(config);</span><br></pre></td></tr></table></figure><p>解析与存储的过程与以往的大同小异。不同的地方在于我们在调用<code>parse_config_file</code>，并调用了方法<code>store</code>两次。但如果命令行与配置文件都定义了某个选项时，谁发挥作用呢？<strong>通常，最先存储的值最优先。</strong>对于调用了<code>composing</code>的选项，这些值将被合并在一起。</p><p>测试部分如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bin\gcc\debug\multiple_sources</span><br><span class="line"><span class="comment"># Include paths are: /opt</span></span><br><span class="line"><span class="comment"># Optimization level is 1</span></span><br><span class="line"></span><br><span class="line">bin\gcc\debug\multiple_sources --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># Allowed options:</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Generic options:</span></span><br><span class="line"><span class="comment">#   -v [ --version ]    : print version string</span></span><br><span class="line"><span class="comment">#   --help              : produce help message</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Configuration:</span></span><br><span class="line"><span class="comment">#   --optimization n    : optimization level</span></span><br><span class="line"><span class="comment">#   -I [ --include-path ] path : include path</span></span><br><span class="line"></span><br><span class="line">bin\gcc\debug\multiple_sources --optimization=4 -I foo a.cpp b.cpp</span><br><span class="line"><span class="comment"># Include paths are: foo /opt</span></span><br><span class="line"><span class="comment"># Input files are: a.cpp b.cpp</span></span><br><span class="line"><span class="comment"># Optimization level is 4</span></span><br></pre></td></tr></table></figure><p></p><p>第一个实例使用了配置文件的取值，第三个实例则同时使用了配置文件与命令行。</p><h2 id="Library-Overview"><a href="#Library-Overview" class="headerlink" title="Library Overview"></a>Library Overview</h2><p>该部分将讨论<strong>program options</strong>的设计及其中各个部件的功能。<br>该库包含三个主要组件：</p><ul><li><em>options description</em>：描述允许的options及该选项的值可以进行的操作</li><li><em>parsers</em>：用来从数据源处解析option的名称及取值</li><li><em>storage</em>：提供取出选项的值的接口，并能将原始的字符串信息转换为对应的C++类型。<br>更具体的说，<code>options_description</code>实现<em>options description</em>的功能，<code>parse_command_line</code>实现<em>parsers</em>的功能，<code>variables_map</code>实现<em>storage</em>的功能。</li></ul><p>在<strong>Tutorial</strong>部分我们学习了如何在<code>main</code>函数中解析命令行或者配置文件。在去深究各个组件的细节前，我们先来说说<code>main</code>之外的一些事情。<br>总的来说，对于<code>main</code>函数之外的代码而言最重要的组件可能就是<em>storage</em>了。那些需要使用option的组件可以通过<em>storage</em>轻易的取到所需的内容；并且也只能在选项被正确解析之后才能正常工作。当然，也会存在各个单独的组件将选项解析完成之后传给主程序合并的情况。当然，这只会发生在选项数量巨大，并且在一处声明所有选项变得困难的情形下。</p><h3 id="Options-Description-Component"><a href="#Options-Description-Component" class="headerlink" title="Options Description Component"></a>Options Description Component</h3><p>组件<em>option description</em>提供了三个主要的类：<code>option_description</code>/<code>value_semantic</code>/<code>options_description</code>。前两者共同描述一个单独的选项，<code>option_description</code>包含选项的名称/描述以及一个指向<code>value_semantic</code>的指针；<code>value_semantic</code>则负责选项的值的类别/解析该选项/使用默认值等；<code>options_description</code>则是包含多个<code>option_description</code>的实例的容器。</p><p>我们在定义选项组时，可以使用常规的做法：先声明一个类型为<code>options_description</code>的实例，之后反复调用方法<code>add</code>，增加一个个具体的选项。但当选项数量达到20~30时就显得太过冗长。所以我们选用了操作符<code>()</code>，从而形成了如下的代码段：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">options_description desc;</span><br><span class="line">desc.add_options()</span><br><span class="line">    (<span class="string">"help"</span>, <span class="string">"produce help"</span>)</span><br><span class="line">    (<span class="string">"optimization"</span>, value&lt;<span class="keyword">int</span>&gt;()-&gt;default_value(<span class="number">10</span>), <span class="string">"optimization level"</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p></p><p>调用方法<code>value</code>将返回一个继承自<code>value_semantic</code>的类<code>typed_value</code>。该类包含了如何解析指定类型的代码，并向用户提供了进一步制定其他信息的接口。调用<code>add_options</code>返回的对象的<code>operator()</code>可以创建类<code>option_description</code>的实例。<br>库除了提供<code>value</code>之外，还提供了<code>value_semantic</code>的继承类<code>bool_switch</code>。当然用户也可以自定义<code>value_semantic</code>。下面我们来详细地探讨下方法<code>value</code>。</p><p>一个选项的信息可以分为两类：语法信息与句法信息。语法信息包括选项的名称及确定选项值的标识符的个数。这部分信息在解析器将字符串解析为<em>(name, value)</em>对时被使用到了，其中<em>value</em>只是类型为<code>std::vector&lt;std::string&gt;</code>的实例。句法信息负责将这些字符串转换为具体的C++类型。</p><p>分隔符在该库的设计中起到的作用相当重要。解析器仅仅依靠语法信息将输入信息转换为复杂的结构。因此，对于解析器来说正确解析<code>calc --expression=1 + 2/3</code>为<code>1 + 2/3</code>并不容易；而如果解析<code>calc --expression=&quot;1 + 2/3&quot;</code>则显得容易的多。</p><h4 id="Syntactic-Information"><a href="#Syntactic-Information" class="headerlink" title="Syntactic Information"></a>Syntactic Information</h4><p>语法信息由<code>boost::program_options::option_description</code>及<code>boost::program_options::value_semantic</code>的部分方法提供支持，包括如下内容：</p><ul><li>选项的名称，<em>name</em>，用来确定程序内部使用的选项的名称</li><li>选项的描述信息，<em>description</em>，可以向用户解释选项的含义</li><li>确定选项值时标识符的个数，用来正确解析数据源</li></ul><p>以下面的代码段为例：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">options_description desc;</span><br><span class="line">desc.add_options()</span><br><span class="line">    (<span class="string">"help"</span>, <span class="string">"produce help message"</span>)</span><br><span class="line">    (<span class="string">"compression"</span>, value&lt;<span class="built_in">string</span>&gt;(), <span class="string">"compression level"</span>)</span><br><span class="line">    (<span class="string">"verbose"</span>, value&lt;<span class="built_in">string</span>&gt;()-&gt;implicit_value(<span class="string">"0"</span>), <span class="string">"verbosity level"</span>)</span><br><span class="line">    (<span class="string">"email"</span>, value&lt;<span class="built_in">string</span>&gt;()-&gt;multitoken(), <span class="string">"email to send to"</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p></p><p>第一个选项只提供了名称与描述信息，并没有提供取值的相关信息；第二个选型确定了只能取一个值；第三个选项可以为值提供一个或者不提供标识符；最后一个选项则可以提供多个标识符。比如说，下面的命令行就是合法的：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test --help --compression <span class="number">10</span> --verbose --email beadle@mars beadle2@mars</span><br></pre></td></tr></table></figure><p></p><h4 id="Description-formatting"><a href="#Description-formatting" class="headerlink" title="Description formatting"></a>Description formatting</h4><p>有时选项的提示信息文档，<em>description</em>，篇幅不短。我们在这节介绍一些简单的排版机制。<br>选项的提示信息文档由一个或多个<code>\n</code>分隔的段落组成时，该库将计算出文档的缩进大小，并在每一个段落前自动插入这段缩进。如果一个段落超过了一行，则会缩进一次但跨越多行。<br>你也可以在提示文档信息前插入些空格，从而增加第一个段落的缩进。如下所示：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options.add_options()</span><br><span class="line">   (<span class="string">"help"</span>, <span class="string">"    A long help msg a long help msg a long help msg a long help</span></span><br><span class="line"><span class="string">   msg a long help msg a long help msg a long help msg a long help msg"</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p></p><p>上述代码将产生如下的输出信息：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--<span class="built_in">help</span>                    A long <span class="built_in">help</span> msg a long</span><br><span class="line">                        <span class="built_in">help</span> msg a long <span class="built_in">help</span> msg</span><br><span class="line">                        a long <span class="built_in">help</span> msg a long</span><br><span class="line">                        <span class="built_in">help</span> msg a long <span class="built_in">help</span> msg</span><br><span class="line">                        a long <span class="built_in">help</span> msg a long</span><br><span class="line">                        <span class="built_in">help</span> msg</span><br></pre></td></tr></table></figure><p></p><p>当你想在某些行之前插入额外的缩进，可以使用符号<code>\t</code>。如下所示：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">options.add_options()</span><br><span class="line">      (<span class="string">"well_formated"</span>, <span class="string">"As you can see this is a very well formatted</span></span><br><span class="line"><span class="string">option description.\n"</span></span><br><span class="line">                        <span class="string">"You can do this for example:\n\n"</span></span><br><span class="line">                        <span class="string">"Values:\n"</span></span><br><span class="line">                        <span class="string">"  Value1: \tdoes this and that, bla bla bla bla</span></span><br><span class="line"><span class="string">bla bla bla bla bla bla bla bla bla bla bla\n"</span></span><br><span class="line">                        <span class="string">"  Value2: \tdoes something else, bla bla bla bla</span></span><br><span class="line"><span class="string">bla bla bla bla bla bla bla bla bla bla bla\n\n"</span></span><br><span class="line">                        <span class="string">"    This paragraph has a first line indent only,</span></span><br><span class="line"><span class="string">bla bla bla bla bla bla bla bla bla bla bla bla bla bla bla"</span>);</span><br></pre></td></tr></table></figure><p></p><p>输出将会是这个形式：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">--well_formated       As you can see this is a</span><br><span class="line">                      very well formatted</span><br><span class="line">                      option description.</span><br><span class="line">                      You can <span class="keyword">do</span> this <span class="keyword">for</span></span><br><span class="line">                      example:</span><br><span class="line"></span><br><span class="line">                      Values:</span><br><span class="line">                        Value1: does this and</span><br><span class="line">                                that, bla bla</span><br><span class="line">                                bla bla bla bla</span><br><span class="line">                                bla bla bla bla</span><br><span class="line">                                bla bla bla bla</span><br><span class="line">                                bla</span><br><span class="line">                        Value2: does something</span><br><span class="line">                                <span class="keyword">else</span>, bla bla</span><br><span class="line">                                bla bla bla bla</span><br><span class="line">                                bla bla bla bla</span><br><span class="line">                                bla bla bla bla</span><br><span class="line">                                bla</span><br><span class="line"></span><br><span class="line">                          This paragraph has a</span><br><span class="line">                      first line indent only,</span><br><span class="line">                      bla bla bla bla bla bla</span><br><span class="line">                      bla bla bla bla bla bla</span><br><span class="line">                      bla bla bla</span><br></pre></td></tr></table></figure><p></p><p>在使用<code>\t</code>时注意如下几点：</p><ul><li>在输出之前，<code>\t</code>符号被去除</li><li>每个段落仅仅允许使用一个<code>\t</code>，否则将抛出异常<code>program_options::error</code></li><li>如果<code>\t</code>不在段落的第一行或者在第一行的末尾时，将会被忽略</li></ul><h4 id="Semantic-Information"><a href="#Semantic-Information" class="headerlink" title="Semantic Information"></a>Semantic Information</h4><p>句法信息完全由类<code>boost::program_options::value_semantic</code>提供。举例来说：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">options_description desc;</span><br><span class="line">desc.add_options()</span><br><span class="line">    (<span class="string">"compression"</span>, value&lt;<span class="keyword">int</span>&gt;()-&gt;default_value(<span class="number">10</span>), <span class="string">"compress level"</span>)</span><br><span class="line">    (<span class="string">"email"</span>, value&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;()-&gt;composing()-&gt;notifier(&amp;your_function), <span class="string">"email"</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p></p><p>上述代码中，第一个选项的默认值被设置为10；第二个选项允许出现多次，并且在不同数据源的信息将被合并，并且在解析完成之后，将该选项的值作为参数待用函数<code>&amp;your_function</code>。</p><h4 id="Positional-Options"><a href="#Positional-Options" class="headerlink" title="Positional Options"></a>Positional Options</h4><p>我们将选项视为<em>(name, value)</em>是简单有效的。但在某些情形下这样做还不足够，即在命令行中包含了<em>positional option</em>，即没有指定任何名称。如<code>archiver --compression=9 /etc/passwd</code>中，<code>/etc/passwd</code>就根本没有指定任何选项名称。<br>一种做法是强制用户明确<em>positional option</em>的名称。但更好的做法是提供一种自动识别的机制，确定命令行的<em>positional option</em>的名称。用上述例子来说，就是转换成如下形式：<code>archiver --compression=9 --input-file=/etc/passwd</code>。</p><p><code>positional_options_description</code>便实现了上述的功能。该类用来指定哪些选项是<em>positional option</em>，每个<em>positional option</em>允许多少取值：</p><p>举例来说，<code>positional_options_description pd; pd.add(&quot;input-file&quot;, 1);&quot;</code>指定了只有一个<em>positional option</em>，取值个数为1，名称为<code>input-file</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">positional_options_description pd;</span><br><span class="line">pd.add(<span class="string">"output-file"</span>, <span class="number">2</span>).add(<span class="string">"input-file"</span>, <span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p></p><p>上例中，则指定了两个<em>positional option</em>。第一个option取值个数为2，名称为<code>output-file</code>，其他所有的<em>positional option</em>的名称都为<code>input-file</code>。</p><p>注意：<code>positional_options_description</code>仅仅是将<em>positional option</em>与名称绑定在一起；选项的名称（<code>option name</code>）依旧需要在<code>options_description</code>中进行“注册”。</p><h3 id="Parsers-Component"><a href="#Parsers-Component" class="headerlink" title="Parsers Component"></a>Parsers Component</h3><p>组件<em>parsers</em>将数据源解析为<em>(name, value)</em>。每个解析器都去查找到可能的选项，并根据选项的<em>description</em>组件决定这个option是否已知以及值如何确定。在最简单的情形下，选项的名称被显式指定，这让库很容易知道该选项是否已知。如果该选项已知，<code>value_semantic</code>将判断如果取值；如果不可知，则一个异常将被抛出。常见的场景是用户明确指定了选项的值。当选项不能被明确指定时，但一个选项的出现与否也暗示了该选项的值，如<code>true</code>。所以，解析器在必要时检查该选项的值，并返回新的<em>(name, value)</em>对。</p><p>触发解析器的常用做法是将<em>options description</em>及命令行内容或者配置文档等作为参数传给某些方法。调用该方法将返回一个类型为<code>parsed_options</code>的实例。该对象一般是直接传给了组件<em>storage</em>，但是我们其实也可以直接使用该对象。</p><p>上述处理过程中可能会抛出三种异常，全都与传统的命令行参数有关。它们的实现都要求组件<em>options description</em>的功能，这些附加的复杂度还处于可容忍范围内。</p><ul><li>命令行传入的选项名称与注册的选项名称不符</li><li>多次赋值。比如，选项<code>--email-recipient</code>可能之后跟多个email，并且每一个都是由单独的<code>--email-recipient</code>分开。这种行为是被支持的，但因为可能导致解析过程的不确定性而默认没被打开</li><li>命令行中包含<em>positional options</em>，即元素没有任何相关的名称。如我们所见，命令行解析器提供了对每个选项猜测名称的机制。</li></ul><h3 id="Storage-Component"><a href="#Storage-Component" class="headerlink" title="Storage Component"></a>Storage Component</h3><p>组件<em>storage</em>的作用有：</p><ul><li>将选项的值转换为特定的类型，并存放到普通变量（regular variables）中</li><li>处理不同数据源的优先级</li><li>将选项的值作为参数调用用户自定义的<code>notify</code></li></ul><p>举例来说：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">variables_map vm;</span><br><span class="line">store(parse_command_line(argc, argv, desc), vm);</span><br><span class="line">store(parse_config_file(<span class="string">"example.cfg"</span>, desc), vm);</span><br><span class="line">notify(vm);</span><br></pre></td></tr></table></figure><p></p><p>类<code>variables_map</code>用来存储选项的具体取值。两次调用方法<code>store</code>分别从命令行与配置文件中读取值到<code>vm</code>中；最后调用方法<code>notify</code>则运行用户自定义的<code>notify</code>的逻辑，并将必要的变量存放到普通变量中。<br>优先级的处理则基于如下这样的规则：如果选项已经确定了值，则函数<code>store</code>不会改变选项的值。所以在上例中，命令行确定某个选项的值的话；配置文件中对应的选项将被忽略。</p><p>注意：在调用了所有函数<code>store</code>之后，别忘了调用函数<code>notify</code>。</p><h3 id="Specific-Parsers"><a href="#Specific-Parsers" class="headerlink" title="Specific Parsers"></a>Specific Parsers</h3><h4 id="Configuration-file-parser"><a href="#Configuration-file-parser" class="headerlink" title="Configuration file parser"></a>Configuration file parser</h4><p>函数<code>parse_config_file</code>实现了简单的解析类<em>INI</em>配置文件的解析器。配置文件的语法是基于行的：</p><ul><li>如<code>name=value</code>给出一个选项的取值</li><li>如<code>[section name]</code>则开启新的一节</li><li><code>#</code>表示从这个符号到行末都是注释<br>选项名称是与<code>section names</code>相对的，所以下列的配置项：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[gui.accessibility]</span><br><span class="line">visual_bell=yes</span><br></pre></td></tr></table></figure></li></ul><p>等价于<code>gui.accessibility.visual_bell=yes</code></p><h4 id="Environment-variables-parser"><a href="#Environment-variables-parser" class="headerlink" title="Environment variables parser"></a>Environment variables parser</h4><p>在C程序中所有的程序都可以通过调用函数<code>getenv</code>来获取字符串类型的<em>environment variables</em>。系统可以根据用户的不同设置不同的值，并且可以通过命令行对这些变量进行修改。比如，在Windows系统下用户可以通过控制面板进行修改；在Unix系统下，则通过修改文件<code>/etc/profile</code>/<code>~/.profile</code>/<code>~/.bash_profile</code>来进行修改。因为环境变量的作用域是整个系统，故而特别适合用来设置那些对所有程序都适用的选项。</p><p>环境变量可以通过调用函数<code>parse_environment</code>来解析。该函数有多个重载版本。其第一个参数是类型为<code>options_description</code>的实例；第二个参数指出那些变量应当被处理，其对应的是那个选项。为了描述第二个参数，我们需要考虑环境变量的名称转换问题。</p><p>如果你要通过环境变量来决定选项的值，你需要先为它想个名字。为了避免<em>name clashes</em>，我们建议你为环境变量添加一个独一无二的前缀。另外，相较于其他类型的选项名为小写，我们建议环境变量相关的选项名称全为大写。举例来说，选项名称为<code>proxy</code>的环境变量名可以取为<code>BOOST_PROXY</code>。在解析过程中，我们需要反向操作。这个过程通过传入选定的<em>前缀</em>作为函数<code>parse_environment</code>的第二个参数。比如说，你将第二个参数设为<code>BOOST_</code>，同时环境变量有<code>CSVROOT</code>和<code>BOOST_PROXY</code>，则第一个变量直接被忽略，第二个将转换赋值给<code>proxy</code>。</p><p>上述的逻辑已经足够应付大多数的情形了。此外，我们也可以将<code>parse_environment</code>的第二个参数赋值为一个参数为<code>std::string</code>并返回<code>std::string</code>的函数。这个函数将对每个环境变量调用一次，它姚明返回对应选项的名称，要么返回空字符串（此时表示该环境变量应当被忽略）。</p><h2 id="How-to"><a href="#How-to" class="headerlink" title="How to"></a>How to</h2><p>该节更详细的介绍本库的使用场景。</p><h3 id="Non-conventional-Syntax"><a href="#Non-conventional-Syntax" class="headerlink" title="Non-conventional Syntax"></a>Non-conventional Syntax</h3><p>有时候本库提供的默认的命令行语法格式不适用。例如，GCC编译器的命令行就有这样的选项<code>-frtti</code>及<code>-fno-rtti</code>，这些都没有直接提供支持。<br>对于这种场景，用户可以通过定义自己的<strong>additional parser</strong>来解析。<strong>additional parser</strong>是一个函数，它将会在每一个命令行的元素上进行调用，并且会在本库所有操作直接进行。如果这个额外添加的解析器识别出了该句法，则返回选项的名称与值，这些都会被直接使用。上述例子中的方法就可以用下述代码实现：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; reg_foo(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.find(<span class="string">"-f"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.substr(<span class="number">2</span>, <span class="number">3</span>) == <span class="string">"no-"</span>)</span><br><span class="line">            <span class="keyword">return</span> make_pair(s.substr(<span class="number">5</span>), <span class="built_in">string</span>(<span class="string">"false"</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> make_pair(s.substr(<span class="number">2</span>), <span class="built_in">string</span>(<span class="string">"true"</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> make_pair(<span class="built_in">string</span>(), <span class="built_in">string</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>除了上述的<strong>additional parser</strong>的定义外，还需要如下处理：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store(command_line_parser(ac, av).options(desc).extra_parser(reg_foo).run(), vm);</span><br></pre></td></tr></table></figure><p></p><p>完整样例可以参见文件<code>example/custom_syntax.cpp</code>。</p><h3 id="Response-Files"><a href="#Response-Files" class="headerlink" title="Response Files"></a>Response Files</h3><p>某些系统对命令行的输入命令长度有所限制。对此处理的常规做法是使用<strong>response file</strong>，其就是一个使用与命令行相同语法的配置文件。如果命令行中指定了该文件的路径，则在处理原先命令行输入的命令外还应当加载并解析该文件。该库并没有直接对该应用情景提供支持，但我们可以通过如下三步进行处理：</p><p>第一步，你需要为<strong>response file</strong>定义选项：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"response-file"</span>, value&lt;<span class="built_in">string</span>&gt;(), <span class="string">"can be specified with '@name', too"</span>)</span><br></pre></td></tr></table></figure><p></p><p>第二步，定义解析<code>@file</code>的<strong>additional parser</strong>：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; at_option_parser(<span class="built_in">string</span> <span class="keyword">const</span>&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'@'</span> == s[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(<span class="built_in">string</span>(<span class="string">"response-file"</span>), s.substr(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后一步，当选项<code>response-file</code>出现时，你要解析该文件，并将之传递给命令行解析器。这部分最为麻烦。我们可以使用库<code>Boost.Tokenizer</code>，也可以使用<code>Boost.StringAlgo</code>：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"response-file"</span>)) &#123;</span><br><span class="line">    <span class="comment">// Load the file and tokenize it</span></span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(vm[<span class="string">"response-file"</span>].as&lt;<span class="built_in">string</span>&gt;().c_str())</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!ifs) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Could not open the response file\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Read the whole file into a string</span></span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; ifs.rdbuf();</span><br><span class="line">    <span class="comment">// Split the file content</span></span><br><span class="line">    char_separator&lt;<span class="keyword">char</span>&gt; sep(<span class="string">" \n\r"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ResponsefileContents</span><span class="params">(ss.str())</span></span>;</span><br><span class="line">    tokenizer&lt;char_separator&lt;<span class="keyword">char</span>&gt;&gt; tok(<span class="keyword">return</span>, sep);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; args;</span><br><span class="line">    copy(tok.begin(), tok.end(), back_inserter(args));</span><br><span class="line">    <span class="comment">// Parse the file and store the options</span></span><br><span class="line">    store(command_line_parser(args).options(desc).run(), vm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>完整代码可以参见文件<code>example/response_file.cpp</code>。</p><h3 id="Winmain-Command-line"><a href="#Winmain-Command-line" class="headerlink" title="Winmain Command line"></a>Winmain Command line</h3><p>在Windows操作系统下，GUI应用处理命令行命令时是作为完整的一个字符串，而不是分割为组。因此命令行解析器不能被直接应用。虽然有些编译器对此进行处理了，但是这种做法无法保证在所有操作系统的所有版本上有同样的处理机制。为此，该库提供了函数<code>split_winmain</code>。<br>使用示例代码：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; args = split_winmain(lpCmdLine);</span><br><span class="line">store(command_line_parser(args).options(desc).run(), vm);</span><br></pre></td></tr></table></figure><p></p><p>函数<code>split_winmain</code>也有重载为处理类型<code>wchar_t</code>的字符串，因此也可以在使用<code>Unicode</code>的字符集应用中使用。</p><h3 id="Option-Group-and-Hidden-Options"><a href="#Option-Group-and-Hidden-Options" class="headerlink" title="Option Group and Hidden Options"></a>Option Group and Hidden Options</h3><p>在一个程序中只使用一个<code>options_description</code>实例来处理所有的选项，可能会存在如下问题：</p><ul><li>一些选项仅仅对特定的源有效</li><li>用户更喜欢有结构有层次的帮助文档</li><li>一些选项不应当出现在帮助文档中</li></ul><p>为了解决上述存在的问题，该库允许程序员创建多个<code>options_description</code>实例，并按照不同方式组合起来使用。下面的例子中定义了三组选项：命令行及两组为特定模块定义的选项组。</p><p>每一组都是使用标准的语法，但是你应当为每个实例取个具有表现力的名字：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">options_description <span class="title">general</span><span class="params">(<span class="string">"General options"</span>)</span></span>;</span><br><span class="line">general.add_options()</span><br><span class="line">    (<span class="string">"help"</span>, <span class="string">"produce a help message"</span>)</span><br><span class="line">    (<span class="string">"help-module"</span>, value&lt;<span class="built_in">string</span>&gt;(),</span><br><span class="line">        <span class="string">"produce a help for a given module"</span>)</span><br><span class="line">    (<span class="string">"version"</span>, <span class="string">"output the version number"</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="function">options_description <span class="title">gui</span><span class="params">(<span class="string">"GUI options"</span>)</span></span>;</span><br><span class="line">gui.add_options()</span><br><span class="line">    (<span class="string">"display"</span>, value&lt;<span class="built_in">string</span>&gt;(), <span class="string">"display to use"</span>)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="function">options_description <span class="title">backend</span><span class="params">(<span class="string">"Backend options"</span>)</span></span>;</span><br><span class="line">backend.add_options()</span><br><span class="line">    (<span class="string">"num-threads"</span>, value&lt;<span class="keyword">int</span>&gt;(), <span class="string">"the initial number of threads"</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p></p><p>如上声明之后，我们将其合并为两组。第一组包含所有选项并用来解析，第二组用来展示提示信息，即选项<code>--help</code>的帮助文档。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare an options description instance which will include</span></span><br><span class="line"><span class="comment">// all the options</span></span><br><span class="line"><span class="function">options_description <span class="title">all</span><span class="params">(<span class="string">"Allowed options"</span>)</span></span>;</span><br><span class="line">all.add(general).add(gui).add(backend);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare an options description instance which will be shown</span></span><br><span class="line"><span class="comment">// to the user</span></span><br><span class="line"><span class="function">options_description <span class="title">visible</span><span class="params">(<span class="string">"Allowed options"</span>)</span></span>;</span><br><span class="line">visible.add(general).add(gui);</span><br></pre></td></tr></table></figure><p>剩下的就是解析处理选项了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">variables_map vm;</span><br><span class="line">store(parse_command_line(ac, av, all), vm);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"help"</span>)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; visible;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"help-module"</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span>&amp; s = vm[<span class="string">"help-module"</span>].as&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">"gui"</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; gui;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">"backend"</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; backend;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Unknown module '"</span></span><br><span class="line">             &lt;&lt; s &lt;&lt; <span class="string">"' in the --help-module option\n"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (vm.count(<span class="string">"num-threads"</span>)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The 'num-threads' options was set to "</span></span><br><span class="line">         &lt;&lt; vm[<span class="string">"num-threads"</span>].as&lt;<span class="keyword">int</span>&gt;() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码可以参见文件<code>example/option_groups.cpp</code>。</p><h3 id="Custom-Validators"><a href="#Custom-Validators" class="headerlink" title="Custom Validators"></a>Custom Validators</h3><p>默认情况下，将字符串转换为C++类型时是借助<code>iostream</code>实现的。这有时不太适宜。该库允许用户为特定类型自定义转换过程。为了实现这个目的，用户需要定义合适的<code>validate</code>的重载函数。</p><p>首先，定义个简单的类：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">magic_number</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    magic_number(<span class="keyword">int</span> n) : n(n) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>之后，重载函数<code>validate</code>：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validate</span><span class="params">(boost::any&amp; v</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; values,</span></span></span><br><span class="line"><span class="function"><span class="params">              magic_number* target_type,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> regex <span class="title">r</span><span class="params">(<span class="string">"\\d\\d\\d-(\\d\\d\\d)"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> boost::program_options;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure no previous assignment to 'a' was made.</span></span><br><span class="line">    validators::check_first_occurrence(v);</span><br><span class="line">    <span class="comment">// Extract the first string from 'values'.</span></span><br><span class="line">    <span class="comment">// If there is more than one string,</span></span><br><span class="line">    <span class="comment">// it's an error, and exception will be thrown.</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span>&amp; s = validators::get_single_string(values);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do regex match and convert the interesting part to int.</span></span><br><span class="line">    smatch match;</span><br><span class="line">    <span class="keyword">if</span> (regex_match(s, match, r)) &#123;</span><br><span class="line">        v = any(magic_number(lexical_cast&lt;<span class="keyword">int</span>&gt;(match[<span class="number">1</span>])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        thrown validation_error(validation_error::invalid_option_value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上述函数<code>validate</code>有四个参数。第一个参数是存储该值的变量，在上例中该值要么为空要么就是类型为<code>magic_number</code>的实例；第二个参数是在下一个选项中查找到的字符串等；剩余两个参数是为了满足一些编译器的模板特异化以及<strong>partial function template ordering</strong>。</p><p>该函数首先保证我们对同一个选项只处理一次；之后检查了传入的第一个字符串；接着使用库<code>Boost.Regex</code>来匹配该值，并将该值存在变量<code>v</code>中。</p><p>上述完整的例子可以参见文件<code>example/regex.cpp</code>。</p><h3 id="Unicode-Support"><a href="#Unicode-Support" class="headerlink" title="Unicode Support"></a>Unicode Support</h3><p>为了让该库支持字符集<code>Unicode</code>，你需要：</p><ul><li>对字符集Unicode的输入应当使用适用于Unicode的解析器</li><li>对必要的选项提供Unicode支持</li></ul><p>大部分的解析器都有Unicode版本。例如函数<code>parse_command_line</code>有个<code>wchar_t</code>类型的重载版本。</p><p>即便部分解析器是适用于Unicode的，你也不必对所有的选项的定义都进行修改。例如，对于为<code>integer</code>的选项就不必进行什么修改。为了实现Unicode，你可能需要定义一些适用于Unicode的选项。他们与通常的选项的不同点在于：他们解析类型为<code>wstring</code>的输入，并使用宽字符流进行解析。创建一个适用于Unicode的选项很简单：只需要用函数<code>wvalue</code>替换原先的<code>value</code>。</p><p>当ASCII解析器解析ASCII的选项或者Unicode解析器解析Unicode的选项时，数据根本不会发生改变。但如果两者不匹配时会发生什么呢？该库将自动转换，将Unicode转化为本地的8位编码。举例来说，如果命令行是ASCII，但是选项定义为<code>wstring</code>类型，则ASCII输入将被自动转换为Unicode。</p><p>为了实现上述的转换，该库使用了<code>codecvt&lt;wchar_t, char&gt;</code>（the library uses the codecvt&lt;wchar_t, char&gt; locale facet from the global locale.）如果你想使用本地的8位编码（而不是7位的ASCII子集），你的应用最前面应当有如下代码：<code>locale::global(locale(&quot;&quot;));</code>，这样就可以根据用户选择的进行转换。</p><p>至于如何检验自己使用的C++实现是否支持本地化，可以参见Boost官方文档。</p><h3 id="Allowing-Unknown-Options"><a href="#Allowing-Unknown-Options" class="headerlink" title="Allowing Unknown Options"></a>Allowing Unknown Options</h3><p>通常情况下，程序没有识别出option的名称时将抛出异常。但有时，我们的应用可能只是用库<code>program_options</code>来处理一部分的命令时，或者你只处理一部分选项而将另一部分传给其他程序处理等。<br>应对上述情形时，你可以使用<code>basic_command_line_parser</code>来解析并如下调用：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parsed_options parsed = command_line_parser(argc, argv)</span><br><span class="line">                        .options(desc)</span><br><span class="line">                        .allow_unregistered().run();</span><br></pre></td></tr></table></figure><p></p><p>对于每一个看起来像选项但又没有确定名字的，都会被创建一个类型为<code>basic_option</code>的实例，并添加到<code>parsed</code>。该实例的字段<code>string_key</code>与<code>value</code>将被设置为该标识符按照已有的句法解析的结果，字段<code>unregistered</code>的值将为<code>true</code>，字段<code>original_tokens</code>将被设置为命令行中的原有字段。<br>如果你想将这些未识别出来的选项收集起来传给其他程序处理，则可以使用函数<code>collect_unrecognized</code>。这个函数将手机所有没被识别的选项的标识符（也可以包含<strong>positional options</strong>）。假设你只处理一部分选项，根本不处理positional options，你可以如下调用该函数：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; to_pass_further = collect_unrecognized(parsed.options, include_positional);</span><br></pre></td></tr></table></figure><p></p><h2 id="Design-Discussion"><a href="#Design-Discussion" class="headerlink" title="Design Discussion"></a>Design Discussion</h2><p>这节将讨论一些设计问题。</p><h3 id="Unicode-Support-1"><a href="#Unicode-Support-1" class="headerlink" title="Unicode Support"></a>Unicode Support</h3><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.boost.org/doc/libs/1_63_0/doc/html/program_options.html" target="_blank" rel="noopener">Boost.Program_options - Boost.org</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> boost </category>
            
        </categories>
        
        
        <tags>
            
            <tag> boost </tag>
            
            <tag> program options </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0122] - Best Time to Buy and Sell Stock II]]></title>
      <url>http://www.wrran.com/blog/2017/02/21/acm/leetcode/0122-best-time-to-buy-and-sell-stock-ii/</url>
      <content type="html"><![CDATA[<blockquote><p>已知一个股票的价格随时间变化的数列，交易的唯一限制是在买进之前必须卖出。求最大的收益。<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/?tab=Description" target="_blank" rel="noopener">Best Time to Buy and Sell Stock II</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>使用贪心的想法，只要下一天的价格比今天的价格高，就购入并卖出赚取差价。<br>可以通过证明该算法的贪心性质和重叠子结构，来验证算法的正确性。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为数组的长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = prices.size();</span><br><span class="line">        <span class="keyword">if</span>(sz == <span class="number">0</span> || sz == <span class="number">1</span>)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> profit = <span class="number">0</span>, delta = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz<span class="number">-1</span> ;++i) &#123;</span><br><span class="line">            delta = prices[i+<span class="number">1</span>] - prices[i];</span><br><span class="line">            <span class="keyword">if</span>(delta&gt;<span class="number">0</span>) profit += delta;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[283] - Move Zeroes]]></title>
      <url>http://www.wrran.com/blog/2017/02/21/acm/leetcode/0283-move-zeros/</url>
      <content type="html"><![CDATA[<blockquote><p>将一组数中的零移到末尾<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/move-zeroes/?tab=Description" target="_blank" rel="noopener">Move Zeroes</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>大致想法是遍历数组，然后将非零数字往前挪，具体的操作可以参见代码。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为数组的长度</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sz = nums.size();</span><br><span class="line">        <span class="keyword">int</span> zeroIndex = <span class="number">0</span>, nonZeroIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(nonZeroIndex &lt; sz) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[nonZeroIndex] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nonZeroIndex == zeroIndex) ++zeroIndex;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    nums[zeroIndex++] = nums[nonZeroIndex]; nums[nonZeroIndex] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ++nonZeroIndex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0226] - Invert Binary Tree]]></title>
      <url>http://www.wrran.com/blog/2017/02/21/acm/leetcode/0226-invert-binary-tree/</url>
      <content type="html"><![CDATA[<blockquote><p>将一个二叉树反转<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/invert-binary-tree/?tab=Description" target="_blank" rel="noopener">Invert Binary Tree</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>递归的思想：反转二叉树就是将二叉树的左右子树颠倒，同时左右子树也被反转。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为二叉树节点总数</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        TreeNode *left = <span class="literal">NULL</span>;</span><br><span class="line">        TreeNode *right = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) left = invertTree(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) right = invertTree(root-&gt;right);</span><br><span class="line">        root-&gt;left = right;</span><br><span class="line">        root-&gt;right = left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0258] - Add Digits]]></title>
      <url>http://www.wrran.com/blog/2017/02/20/acm/leetcode/0258-add-digits/</url>
      <content type="html"><![CDATA[<blockquote><p>一个非负整数，将每位的数字累加，直到只有一位数字为止。求最后的这个数字是啥<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/add-digits/?tab=Description" target="_blank" rel="noopener">Add Digits</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>=c=<br>维基百科，数学的力量<br><a href="https://en.wikipedia.org/wiki/Digital_root" target="_blank" rel="noopener">Digital root</a></p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度： $O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(num<span class="number">-1</span>)%<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0104] - Maximum Depth of Binary Tree]]></title>
      <url>http://www.wrran.com/blog/2017/02/20/acm/leetcode/0104-maximum-depth-of-binary-tree/</url>
      <content type="html"><![CDATA[<blockquote><p>求一个二叉树的树深<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/?tab=Description" target="_blank" rel="noopener">Maximum Depth of Binary Tree</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>递归的思路，一个二叉树的树深就是它子树的最大树深加一。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为树中的字典数目。并且该复杂度是串行搜索节点时的情形。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = maxDepth(root-&gt;left), r = maxDepth(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> l&gt;r? l+<span class="number">1</span>:r+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阅读笔记 - 代码之外的生存指南]]></title>
      <url>http://www.wrran.com/blog/2017/02/19/people-say/170219-02/</url>
      <content type="html"><![CDATA[<blockquote><p>该篇为作者阅读《软技能》的笔记<br>我们偷懒看看他的笔记就好<br>(●’◡’●)</p></blockquote><a id="more"></a><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://ginobefunny.com/post/soft_skills/#more" target="_blank" rel="noopener">代码之外的生存指南</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[136] - Single Number]]></title>
      <url>http://www.wrran.com/blog/2017/02/19/acm/leetcode/0136-single-number/</url>
      <content type="html"><![CDATA[<blockquote><p>一组数中除了一个数出现一次，其他都出现了两次。求这个数<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/single-number/?tab=Description" target="_blank" rel="noopener">Single Number</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>该题可以利用异或运算的性质，即%A ^ A = 0%。所以，我们对该序列中的所有数都进行异或运算，最后剩下的就是那个只出现一次的数字。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$，$n$为数组的长度<br>空间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> retVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> sz = nums.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i != sz ; ++i) &#123;</span><br><span class="line">            retVal ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0292] - Nim Game]]></title>
      <url>http://www.wrran.com/blog/2017/02/19/acm/leetcode/0292-nim-game/</url>
      <content type="html"><![CDATA[<blockquote><p>从一堆石子中取1/2/3个，取到最后一个的为胜者<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/nim-game/?tab=Description" target="_blank" rel="noopener">Nim Game</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>本题的思路较为简单，罗列简单情形下的具体操作，然后归纳总结。<br>石头数为1时，我们取1个石头，则我们胜利；<br>石头数为2时，我们取2个石头，则我们胜利；<br>石头数为3时，我们取3个石头，则我们胜利；<br>石头数为4时，我们取1/2/3个石头后，朋友取3/2/1个石头（分别转化为情形3/2/1），则朋友胜利；<br>石头数为5时，我们取1个石头后，朋友必输（转化为情形4），则我们胜利；<br>石头数为6时，我们取2个石头后，朋友必输（转化为情形4），则我们胜利；<br>石头数为7时，我们取3个石头后，朋友必输（转化为情形4），则我们胜利；<br>石头数为8时，我们取1/2/3个石头后，朋友必胜（分别转化为情形7/6/5），则朋友胜利；<br>…</p><p>总结上述过程，我们发现当石头数为4的倍数时，我们无论如何抽取石头，都将转化为朋友胜利的情形。</p><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(1)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n%<span class="number">4</span> != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阅读笔记 - 学习前端只需要三个月]]></title>
      <url>http://www.wrran.com/blog/2017/02/19/people-say/170219-01/</url>
      <content type="html"><![CDATA[<blockquote><p>标题党，但比较了现今比较流行的前端库，也阐述了自己在选用框架时的心得体会等，值得一读。<br>(●’◡’●)</p></blockquote><a id="more"></a><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>锤子定律：又称工具定律，圣诞节收到一把锤子的孩子会发现所有东西都需要敲打。<br>奥斯本效应：颇受欢迎的个人电脑厂商奥斯本，其公司的创新式便携电脑还没有上市，就宣布他们要推出的更高档的机器，而又迟迟无法交货，消费者闻风纷纷停止下单订购现有机种，最后导致奥斯本因收入枯竭而宣布破产。</p><p>另外，该文章比较了<code>jQuery</code>，<code>Backbone.js</code>，<code>Angular</code>，<code>React</code>及<code>Vue.js</code>等框架。推荐未接触其他框架的程序员选用<code>Vue.js</code>。</p><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="https://read.douban.com/reader/column/5945187/chapter/30511309/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">豆瓣阅读 - 学习前端只需要三个月【框架篇】</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[LC[0001] -Two Sum]]></title>
      <url>http://www.wrran.com/blog/2017/02/19/acm/leetcode/0001-two-sum/</url>
      <content type="html"><![CDATA[<blockquote><p>在序列中找到和为特定值的两个元素的索引<br>(●ˇ∀ˇ●)</p></blockquote><a id="more"></a><h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h1><p><a href="https://leetcode.com/problems/two-sum/?tab=Description" target="_blank" rel="noopener">Two Sum</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol><li>先将之排序</li><li>在排序之后的列表中查找符合条件的两个数</li><li>在原列表中找到这两个数的下标</li></ol><h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>时间复杂度：$O(n)$<br>空间复杂度：$O(n)$</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; num, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// 1. 排序</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sorted = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(nums);</span><br><span class="line">        <span class="built_in">std</span>::sort(sorted.begin(), sorted.end());</span><br><span class="line">        <span class="comment">// 2. 查值</span></span><br><span class="line">        <span class="keyword">unsigned</span> low = <span class="number">0</span>, high = sorted.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; sorted[low] + sorted[high] &lt; target) ++low;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; sorted[low] + sorted[high] &gt; target) --high;</span><br><span class="line">            <span class="keyword">if</span> (sorted[low] + sorted[high] == target) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 查索引</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rvec;</span><br><span class="line">        <span class="keyword">int</span> minIndex = <span class="number">-1</span>, maxIndex = <span class="number">-1</span>, sz = nums.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i != sz;++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (minIndex == <span class="number">-1</span> &amp;&amp; nums[i] == sorted[low]) minIndex = i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (maxIndex == <span class="number">-1</span> &amp;&amp; nums[i] == sorted[high]) maxIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. 给出答案</span></span><br><span class="line">        rvec.push_back(minIndex);</span><br><span class="line">        rvec.push_back(maxIndex);</span><br><span class="line">        <span class="keyword">return</span> rvec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> acm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在VS中引用DLL及LIB文件]]></title>
      <url>http://www.wrran.com/blog/2017/02/18/howto/vs-use-dll-lib/</url>
      <content type="html"><![CDATA[<blockquote><p>VS是世界上最好的IDE</p></blockquote><a id="more"></a><h1 id="DLL引用方式"><a href="#DLL引用方式" class="headerlink" title="DLL引用方式"></a>DLL引用方式</h1><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-vs-use-dll-lib/import-dll.gif" alt="DLL引用方式"></p><h1 id="LIB引用方式"><a href="#LIB引用方式" class="headerlink" title="LIB引用方式"></a>LIB引用方式</h1><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-vs-use-dll-lib/import-lib.gif" alt="LIB引用方式"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.cnblogs.com/neopenx/p/5187440.html" target="_blank" rel="noopener">从零开始山寨Caffe·零：必先利其器</a><br><a href="http://blog.csdn.net/xiejiashu/article/details/43992747" target="_blank" rel="noopener">VS添加对DLL的引用</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> vs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[转载 - Excel核心技巧]]></title>
      <url>http://www.wrran.com/blog/2017/01/09/learn/excel-1/</url>
      <content type="html"><![CDATA[<blockquote><p>excel :)</p></blockquote><a id="more"></a><h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><p><a href="http://jingxuan.guokr.com/pick/77734/?from=singlemessage&amp;isappinstalled=0" target="_blank" rel="noopener">1小时掌握20%的Excel核心技巧，轻松应对80%的工作需求</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%AD%A3.gif" alt="自动更正"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E5%85%83%E6%A0%BC%E6%A0%BC%E5%BC%8F%E8%A7%84%E5%88%99.gif" alt="自定义单元格格式规则"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E9%82%AE%E7%AE%B1.gif" alt="快速输入邮箱"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E5%8F%AA%E8%83%BD%E8%BE%93%E5%85%A5%E6%95%B0%E6%8D%AE.gif" alt="只能输入数据"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E9%99%90%E5%88%B6%E9%87%8D%E5%A4%8D%E8%BE%93%E5%85%A5.gif" alt="限制重复输入"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%E8%AE%BE%E7%BD%AE.gif" alt="下拉菜单设置"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E4%BF%9D%E6%8A%A4%E5%B7%A5%E4%BD%9C%E8%A1%A8.gif" alt="保护工作表"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97.gif" alt="自定义序列"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F.gif" alt="多条件排序"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E8%B7%A8%E8%A1%A8%E6%B1%82%E5%92%8C.gif" alt="跨表求和"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E5%90%88%E5%B9%B6%E8%AE%A1%E7%AE%97.gif" alt="合并计算"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/VLOOKUP%E5%87%BD%E6%95%B0%E7%BB%93%E6%9E%84.jpg" alt="VLOOKUP函数结构"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/VLOOKUP%E5%87%BD%E6%95%B0%E7%B2%BE%E7%A1%AE%E6%9F%A5%E6%89%BE.gif" alt="VLOOKUP函数精确查找"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/VLOOKUP%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D-%E5%8C%BA%E9%97%B4.gif" alt="VLOOKUP模糊匹配-区间"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/Match%E5%87%BD%E6%95%B0.gif" alt="MATCH函数"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/INDEX%E5%87%BD%E6%95%B0.gif" alt="INDEX函数"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/INDEX_MATCH%E7%BB%84%E5%90%88.gif" alt="INDEX+MATCH组合"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E9%80%8F%E8%A7%86%E8%A1%A8.gif" alt="插入数据透视表"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E5%A4%9A%E7%A7%8D%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F.gif" alt="多种数值计算方式"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E5%88%9B%E5%BB%BA%E5%88%86%E7%BB%84.gif" alt="创建分组"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-excel-1/%E6%8F%92%E5%85%A5%E5%88%87%E7%89%87%E5%99%A8.gif" alt="插入切片器"></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> office </category>
            
        </categories>
        
        
        <tags>
            
            <tag> excel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Laura Vanderkam - How to gain control of your free time]]></title>
      <url>http://www.wrran.com/blog/2017/01/08/people-say/170108-01/</url>
      <content type="html"><![CDATA[<blockquote><p>There is time.</p></blockquote><a id="more"></a><h1 id="TED"><a href="#TED" class="headerlink" title="TED"></a>TED</h1><p><a href="http://www.ted.com/talks/laura_vanderkam_how_to_gain_control_of_your_free_time" target="_blank" rel="noopener">Laura Vanderkam - How to gain control of your free time @ TED</a></p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><ol><li>在年初从 事业、个人、家庭 三个方面定下3-5个长远的计划</li><li>在每周五下午制定执行计划，也分别是从 事业、个人、家庭三个维度进行，做到3-5个一周冲刺计划</li></ol><p>一周共$24 \times 7 = 168$个小时；每天睡眠$7$小时，共消耗$7 \times 7 = 49$小时；每天早午晚餐各消耗$1$小时，则共消耗$7 \times 3 = 21$小时；还剩下$168 - 49 - 21 = 98$小时。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[howto-eigen3]]></title>
      <url>http://www.wrran.com/blog/2017/01/07/howto/eigen3/</url>
      <content type="html"><![CDATA[<blockquote><p>Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>Eigen is versatile.</li><li>Eigen is fast.</li><li>Eigen is reliable.</li><li>Eigen is elegant.</li><li>Eigen has good compiler support.</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>In order to use Eigen, you just need to download and extract <a href="http://eigen.tuxfamily.org/index.php?title=Main_Page" target="_blank" rel="noopener"><strong>Eigen’s source code</strong></a>. In fact, the header files in the Eigen subdirectory are the only files required to compile programs using Eigen. The header files are the same for all platforms. It is not necessary to use CMake or install anything.</p><h1 id="示例-简单例子"><a href="#示例-简单例子" class="headerlink" title="示例 - 简单例子"></a>示例 - 简单例子</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Eigen/Dense"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Eigen::MatrixXd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">MatrixXd <span class="title">m</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    m(<span class="number">0</span>, <span class="number">0</span>) = <span class="number">3</span>;</span><br><span class="line">    m(<span class="number">1</span>, <span class="number">0</span>) = <span class="number">2.5</span>;</span><br><span class="line">    m(<span class="number">0</span>, <span class="number">1</span>) = <span class="number">-1</span>;</span><br><span class="line">    m(<span class="number">1</span>, <span class="number">1</span>) = m(<span class="number">1</span>, <span class="number">0</span>) + m(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，需要<em>include</em><code>Eigen</code>。运行结果如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  3  -1</span><br><span class="line">2.5 1.5</span><br></pre></td></tr></table></figure><p></p><p>The Eigen header files define many types, but for simple applications it may be enough to use only the <strong>MatrixXd</strong> type. This represents a matrix of arbitrary size (hence the <em>X</em> in MatrixXd), in which every entry is a <em>double</em> (hence the d in MatrixXd). See the quick reference guide for an overview of the different types you can use to represent a matrix.</p><p>The <code>Eigen/Dense</code> header file defines all member functions for the MatrixXd type and related types (see also the <a href="http://eigen.tuxfamily.org/dox/group__QuickRefPage.html#QuickRef_Headers" target="_blank" rel="noopener"><strong>table of header files</strong></a>). All classes and functions defined in this header file (and other Eigen header files) are in the Eigen namespace.</p><h1 id="示例-Matrices-and-vectors"><a href="#示例-Matrices-and-vectors" class="headerlink" title="示例 - Matrices and vectors"></a>示例 - Matrices and vectors</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size set at run time</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MatrixXd m = MatrixXd::Random(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    m = (m + MatrixXd::Constant(<span class="number">3</span>, <span class="number">3</span>, <span class="number">1.2</span>)) * <span class="number">50</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"m = "</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="function">VectorXd <span class="title">v</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    v &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"m * v = "</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; m * v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> howto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> eigen3 </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zhihuer-say-16-12-27]]></title>
      <url>http://www.wrran.com/blog/2016/12/27/people-say/161227-01/</url>
      <content type="html"><![CDATA[<blockquote><p>所以如果你恰好加入了一个古老的软件的项目组，不要对旧的东西产生抵触，就是一个良好的开始。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/24543157" target="_blank" rel="noopener">如何跟老代码友好相处</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[howto-sails-3-middleware]]></title>
      <url>http://www.wrran.com/blog/2016/12/06/howto/sails/3-middleware/</url>
      <content type="html"><![CDATA[<blockquote><p>Sails.js, the web framework of your dreams.</p></blockquote><a id="more"></a><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>在<code>sails.js</code>中，可以将Express/Connect中的中间件运用在sails的应用中。</p><h2 id="HTTP中间件"><a href="#HTTP中间件" class="headerlink" title="HTTP中间件"></a>HTTP中间件</h2><p>sails应用使用<em>可配置的中间件堆栈</em>来处理HTTP请求。每当请求到达时，中间件将被<em>顺序</em>调用。<br><em>注意</em>：默认的中间件堆栈可以参见<a href="http://sailsjs.org/documentation/concepts/middleware/conventional-defaults" target="_blank" rel="noopener">这里</a>，同时中间件调用顺序等也是可以配置的。</p><p>我们可以在<code>config/http.js</code>中配置中间件堆栈及调用顺序等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">  middleware: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define a custom HTTP middleware fn with the key `foobar`:</span></span><br><span class="line">    foobar: <span class="function"><span class="keyword">function</span> (<span class="params">req,res,next</span>) </span>&#123; <span class="comment">/*...*/</span> next(); &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define another couple of custom HTTP middleware fns with keys `passportInit` and `passportSession`</span></span><br><span class="line">    <span class="comment">// (notice that this time we're using an existing middleware library from npm)</span></span><br><span class="line">    passportInit    : <span class="built_in">require</span>(<span class="string">'passport'</span>).initialize(),</span><br><span class="line">    passportSession : <span class="built_in">require</span>(<span class="string">'passport'</span>).session(),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Override the conventional cookie parser:</span></span><br><span class="line">    cookieParser: <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123; <span class="comment">/*...*/</span> next(); &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now configure the order/arrangement of our HTTP middleware</span></span><br><span class="line">    order: [</span><br><span class="line">      <span class="string">'startRequestTimer'</span>,</span><br><span class="line">      <span class="string">'cookieParser'</span>,</span><br><span class="line">      <span class="string">'session'</span>,</span><br><span class="line">      <span class="string">'passportInit'</span>,            <span class="comment">// &lt;==== passport HTTP middleware should run after "session"</span></span><br><span class="line">      <span class="string">'passportSession'</span>,         <span class="comment">// &lt;==== (see https://github.com/jaredhanson/passport#middleware)</span></span><br><span class="line">      <span class="string">'bodyParser'</span>,</span><br><span class="line">      <span class="string">'compress'</span>,</span><br><span class="line">      <span class="string">'foobar'</span>,                  <span class="comment">// &lt;==== we can put this stuff wherever we want</span></span><br><span class="line">      <span class="string">'methodOverride'</span>,</span><br><span class="line">      <span class="string">'poweredBy'</span>,</span><br><span class="line">      <span class="string">'$custom'</span>,</span><br><span class="line">      <span class="string">'router'</span>,</span><br><span class="line">      <span class="string">'www'</span>,</span><br><span class="line">      <span class="string">'favicon'</span>,</span><br><span class="line">      <span class="string">'404'</span>,</span><br><span class="line">      <span class="string">'500'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  customMiddleware: <span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</span><br><span class="line">     <span class="comment">//Intended for other middleware that doesn't follow 'app.use(middleware)' convention</span></span><br><span class="line">     <span class="built_in">require</span>(<span class="string">'other-middleware'</span>).initialize(app);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="sails中的Express路由"><a href="#sails中的Express路由" class="headerlink" title="sails中的Express路由"></a>sails中的Express路由</h2><p>我们可以在<code>config/policies.js</code>中配置安全相关的中间件。你可以直接使用也可以自定义。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> auth = <span class="built_in">require</span>(<span class="string">'http-auth'</span>);</span><br><span class="line"><span class="keyword">var</span> basic = auth.basic(&#123;</span><br><span class="line">  realm: <span class="string">'admin area'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">username, password, onwards</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> onwards(username === <span class="string">'Tina'</span> &amp;&amp; password === <span class="string">'Bullock'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">module</span>.exports.policies = &#123;</span><br><span class="line">  <span class="string">'*'</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  ProductController: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prevent end users from doing CRUD operations on products reserved for admins</span></span><br><span class="line">    <span class="comment">// (uses HTTP basic auth)</span></span><br><span class="line">    <span class="string">'*'</span>: auth.connect(basic),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Everyone can view product pages</span></span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://sailsjs.com/documentation/concepts/middleware" target="_blank" rel="noopener">Middleware - Concepts</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> sails.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sails.js </tag>
            
            <tag> framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Node.js中暴露全局变量]]></title>
      <url>http://www.wrran.com/blog/2016/12/06/learn/js/patch-1-expose-global/</url>
      <content type="html"><![CDATA[<blockquote><p>You will see me.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在<code>node.js</code>中一个文件就是一个模块，如何让模块之间共享变量，从而得到全局变量的一些优势呢？</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>在<a href="https://npm.taobao.org/mirrors/node/latest/docs/api/globals.html#globals_global" target="_blank" rel="noopener">global - node.js v7.2.0 Documentation</a>中提到：</p><blockquote><p><strong>global</strong>: The global namespace object.<br>In browsers, the top-level scope is the global scope. That means that in browsers if you’re in the global scope <code>var something</code> will define a global variable. In Node.js this is different. The top-level scope is not the global scope; <code>var something</code> inside an Node.js module will be local to that module.</p></blockquote><p>通过将对象添加到<code>global</code>上实现暴露变量的目的。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>在<a href="https://github.com/balderdashy/sails/blob/master/lib/app/private/exposeGlobals.js" target="_blank" rel="noopener">exposeGlobals.js - sails.js</a>中有提及如何暴露出变量，给全局访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * exposeGlobals()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Expose certain global variables</span></span><br><span class="line"><span class="comment"> * (if config says so)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @api private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">exposeGlobals</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sails = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Globals explicitly disabled</span></span><br><span class="line">  <span class="keyword">if</span> (sails.config.globals === <span class="literal">false</span>) &#123;</span><br><span class="line">    sails.log.verbose(<span class="string">'No global variables will be exposed.'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sails.log.verbose(<span class="string">'Exposing global variables... (you can customize/disable this by modifying the properties in `sails.config.globals`.  Set it to `false` to disable all globals.)'</span>);</span><br><span class="line"></span><br><span class="line">  sails.config.globals = sails.config.globals || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Provide global access (if allowed in config)</span></span><br><span class="line">  <span class="keyword">if</span> (sails.config.globals._ !== <span class="literal">false</span>) &#123;</span><br><span class="line">    global[<span class="string">'_'</span>] = _;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (sails.config.globals.async !== <span class="literal">false</span>) &#123;</span><br><span class="line">    global[<span class="string">'async'</span>] = <span class="keyword">async</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (sails.config.globals.sails !== <span class="literal">false</span>) &#123;</span><br><span class="line">    global[<span class="string">'sails'</span>] = sails;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `services` hook takes care of globalizing services (if enabled)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `orm` hook takes care of globalizing models and adapters (if enabled)</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">Node.js v7.2.0 Documentation</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
            <tag> global variable </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript中Function相关实验]]></title>
      <url>http://www.wrran.com/blog/2016/12/01/learn/js/do-js-function/</url>
      <content type="html"><![CDATA[<blockquote><p>Just do it.</p></blockquote><a id="more"></a><h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><p><a href="https://lodash.com/docs/4.17.2#bind" target="_blank" rel="noopener">bind - Lo 4.17.2</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">greeting, punctuation</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> greeting + <span class="string">' '</span> + <span class="keyword">this</span>.user + punctuation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;<span class="string">'user'</span> : <span class="string">'fred'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bound = _.bind(greet, object, <span class="string">'hi'</span>);</span><br><span class="line">bound(<span class="string">'!'</span>);</span><br><span class="line"><span class="comment">// =&gt; 'hi fred!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bound with placeholders.</span></span><br><span class="line"><span class="keyword">var</span> bound = _.bind(greet, object, _, <span class="string">'!'</span>);</span><br><span class="line">bound(<span class="string">'hi!'</span>);</span><br><span class="line"><span class="comment">// =&gt; 'hi fred!'</span></span><br></pre></td></tr></table></figure><h1 id="util-inherits"><a href="#util-inherits" class="headerlink" title="util.inherits"></a>util.inherits</h1><p><a href="https://npm.taobao.org/mirrors/node/latest/docs/api/util.html#util_util_inherits_constructor_superconstructor" target="_blank" rel="noopener">util.inherits(constructor, superConstructor)</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyStream</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.inherits(MyStream, EventEmitter);</span><br><span class="line"></span><br><span class="line">MyStream.prototype.write = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'data'</span>, data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stream = <span class="keyword">new</span> MyStream();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stream <span class="keyword">instanceof</span> EventEmitter); <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(MyStream.super_ === EventEmitter); <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">stream.on(<span class="string">'data'</span>, (data) =&gt;  &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Received data: "<span class="subst">$&#123;data&#125;</span>"`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">stream.write(<span class="string">'It works!'</span>); <span class="comment">// =&gt; Received data: "It works!"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name || <span class="string">'parent'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, <span class="string">'child'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.inherits(Child, Parent);</span><br><span class="line"></span><br><span class="line">Child.prototype.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am '</span> + <span class="keyword">this</span>.name, <span class="string">'I have parents'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent();</span><br><span class="line">parent.speak();</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</span><br><span class="line">child.speak();</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn-js-promises]]></title>
      <url>http://www.wrran.com/blog/2016/11/29/learn/js/promises/</url>
      <content type="html"><![CDATA[<blockquote><p>The <code>Promise</code> object is used for asynchronous computations. A Promise represents a value which may be available now, or in the future, or never.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line">util.inhertis(<span class="built_in">Promise</span>, EventEmitter);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">fulfilledHandler, errorHandler, progressHandler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fulfilledHandler === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="comment">// 利用once方法，保证成功回调只执行一次</span></span><br><span class="line">        <span class="keyword">this</span>.once(<span class="string">'success'</span>, fulfilledHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> errorHandler === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="comment">// 利用once方法，保证异常回调只执行一次</span></span><br><span class="line">        <span class="keyword">this</span>.once(<span class="string">'error'</span>, errorHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> progressHandler === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.on(<span class="string">'progress'</span>, progressHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为了完成整个流程，还需要触发这些回调函数 */</span></span><br><span class="line"><span class="keyword">var</span> Deferred = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'unfulfilled'</span>;</span><br><span class="line">    <span class="keyword">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Deferred.prototype.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</span><br><span class="line">    <span class="keyword">this</span>.promise.emit(<span class="string">'success'</span>, obj);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Deferred.prototype.reject = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'failed'</span>;</span><br><span class="line">    <span class="keyword">this</span>.promise.emit(<span class="string">'error'</span>, err);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Deferred.prototype.progress = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.promise.emit(<span class="string">'progress'</span>, data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>下面是一个典型的响应对象的实现，我们用<code>Promise/A</code>来实现该对象。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'BODY:'</span> + chunk);</span><br><span class="line">&#125;);</span><br><span class="line">res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Done</span></span><br><span class="line">&#125;);</span><br><span class="line">res.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>上述代码可以转换为如下简略形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promiseify = <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deferred = <span class="keyword">new</span> Deferred();</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        result += chunk;</span><br><span class="line">        deferred.progress(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        deferred.resolve(result);</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        deferred.reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">promisify(res).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Done</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Error</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'BODY:'</span> + chunk);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/25768396/" target="_blank" rel="noopener">深入浅出nodejs</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promises - MDN</a><br><a href="https://developers.google.com/web/fundamentals/getting-started/primers/promises" target="_blank" rel="noopener">JavaScript Promises: an Introduction</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> promises </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 异常]]></title>
      <url>http://www.wrran.com/blog/2016/11/29/learn/js/8-exception/</url>
      <content type="html"><![CDATA[<blockquote><p>but …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>异常</strong>是当发生了某种异常情况或错误时产生的一个信号。</p><h1 id="throw语句"><a href="#throw语句" class="headerlink" title="throw语句"></a>throw语句</h1><p>抛出异常，就是用信号通知发生了错误或异常状况。在JS中，当产生运行时错误或者程序使用<code>throw</code>语句时就会显示地抛出异常。<br><code>throw</code>语句的语法为<code>throw &#39;express&#39;</code>。<br><code>express</code>的值可以是任意类型，可以抛出一个代表错误码的数字，或者包含可读的错误消息的字符串。当JS解释器抛出异常时多采用<code>Error</code>类型和其子类型。一个Error对象有一个name属性表示错误类型，一个message属性用来存放传递给构造函数的字符串。详情可参见<a href="#js-exception">JS中的异常</a></p><h1 id="多catch从句"><a href="#多catch从句" class="headerlink" title="多catch从句"></a>多catch从句</h1><p>在JS 1.5中，<code>try/catch</code>语句可以使用多<code>catch</code>从句了，在<code>catch</code>从句的参数中加入关键字<code>if</code>以及一个条件判断表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 这里可以抛出多种类型的异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e <span class="keyword">if</span> e <span class="keyword">instanceof</span> <span class="built_in">ReferenceError</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里将处理引用错误</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e <span class="keyword">if</span> e === <span class="string">'quit'</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里处理抛出的字符串是`quit`的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e <span class="keyword">if</span> <span class="keyword">typeof</span> e === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理其他字符串的情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="comment">// 处理余下的异常情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// finally 从句正常执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当产生一个异常时，程序将会尝试依次执行每一条<code>catch</code>从句。<code>catch</code>从句中的命名参数就是这个异常，执行到<code>catch</code>的时候会计算它的条件表达式。如果条件表达式计算结果为<code>true</code>，则判断当前<code>catch</code>从句中的逻辑，同时跳过其他的<code>catch</code>从句。如果<code>catch</code>从句中没有条件表达式，程序就会假设它包含了一个<code>if true</code>的条件，如果它之前的<code>catch</code>从句都没有触发，则这条<code>catch</code>语句一定会被执行。如果所有的<code>catch</code>从句都包含条件，但没有一个条件是<code>true</code>，则程序会向上抛出这个未捕获的异常。</p><p><a id="js-exception"></a></p><h1 id="JS中的异常"><a href="#JS中的异常" class="headerlink" title="JS中的异常"></a>JS中的异常</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">Error</td><td style="text-align:left">一个一般性的异常，属性有<code>message</code>和<code>name</code></td></tr><tr><td style="text-align:center">RangeError</td><td style="text-align:left">当一个数字超过合法的范围时抛出</td></tr><tr><td style="text-align:center">ReferenceError</td><td style="text-align:left">读取不存在的变量时抛出</td></tr><tr><td style="text-align:center">SyntaxError</td><td style="text-align:left">抛出以便通知一个语法错误</td></tr><tr><td style="text-align:center">TypeError</td><td style="text-align:left">当一个值类型错误时抛出</td></tr><tr><td style="text-align:center">URIError</td><td style="text-align:left">URI编码或解码方法出错时抛出</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> exception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中的异常类及继承关系]]></title>
      <url>http://www.wrran.com/blog/2016/11/29/learn/python/exception/</url>
      <content type="html"><![CDATA[<blockquote><p>but …</p></blockquote><a id="more"></a><h1 id="Everyday-Exception"><a href="#Everyday-Exception" class="headerlink" title="Everyday Exception"></a>Everyday Exception</h1><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:left">Note</th><th style="text-align:left">Demo</th></tr></thead><tbody><tr><td style="text-align:center">TypeError</td><td style="text-align:left">参数类型错误</td><td style="text-align:left"><code>import re; re.match(1, 1)</code> 或者 <code>1+&#39;1&#39;</code></td></tr><tr><td style="text-align:center">ValueError</td><td style="text-align:left">参数内容错误</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="Exception-Hierarchy"><a href="#Exception-Hierarchy" class="headerlink" title="Exception Hierarchy"></a>Exception Hierarchy</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +- SystemExit</span><br><span class="line"> +- KeyBoardInterrupt</span><br><span class="line"> +- GeneratorExit</span><br><span class="line"> +- Exception</span><br><span class="line">    +- ArithmeticError</span><br><span class="line">    |  +- FloatingPointError</span><br><span class="line">    |  +- OverflowError</span><br><span class="line">    |  +- ZeroDivisionError</span><br><span class="line">    +- AssertionError</span><br><span class="line">    +- AttributeError</span><br><span class="line">    +- BufferError</span><br><span class="line">    +- EOFError</span><br><span class="line">    +- ImportError</span><br><span class="line">    +- LookupError</span><br><span class="line">    |  +- IndexError</span><br><span class="line">    |  +- KeyError</span><br><span class="line">    +- MemoryError</span><br><span class="line">    +- NameError</span><br><span class="line">    |  +- UnboundLocalError</span><br><span class="line">    +- OSError</span><br><span class="line">    |  +- BlockingIOError</span><br><span class="line">    |  +- ChildProcessError</span><br><span class="line">    |  +- ConnectionError</span><br><span class="line">    |  |  +- BrokenPipeError</span><br><span class="line">    |  |  +- ConnectionAbortedError</span><br><span class="line">    |  |  +- ConnectionRefusedError</span><br><span class="line">    |  |  +- ConnectionResetError</span><br><span class="line">    |  +- FileExistsError</span><br><span class="line">    |  +- FileNotFoundError</span><br><span class="line">    |  +- InterruptedError</span><br><span class="line">    |  +- IsADirectoryError</span><br><span class="line">    |  +- NotADirectoryError</span><br><span class="line">    |  +- PermissionError</span><br><span class="line">    |  +- ProcessLookupError</span><br><span class="line">    |  +- TimeoutError</span><br><span class="line">    +- ReferenceError</span><br><span class="line">    +- RuntimeError</span><br><span class="line">    |  +- NotImplementedError</span><br><span class="line">    |  +- RecursionError</span><br><span class="line">    +- SyntaxError</span><br><span class="line">    |  +- IndentationError</span><br><span class="line">    |     +- TabError</span><br><span class="line">    +- SystemError</span><br><span class="line">    +- StopIteration</span><br><span class="line">    +- StopAsyncIternation</span><br><span class="line">    +- TypeError</span><br><span class="line">    +- ValueError</span><br><span class="line">    |  +- UnicodeError</span><br><span class="line">    |  |  +- UnicodeDecodeError</span><br><span class="line">    |  |  +- UnicodeEncodeError</span><br><span class="line">    |  |  +- UnicodeTranslateError</span><br><span class="line">    +- Warning</span><br><span class="line">    |  +- BytesWarning</span><br><span class="line">    |  +- DeprecationWarning</span><br><span class="line">    |  +- FutureWarning</span><br><span class="line">    |  +- ImportWarning</span><br><span class="line">    |  +- PendingDeprecationWarning</span><br><span class="line">    |  +- RuntimeWarning</span><br><span class="line">    |  +- ResourceWarning</span><br><span class="line">    |  +- SyntaxWarning</span><br><span class="line">    |  +- UserWarning</span><br><span class="line">    |  +- UnicodeWarning</span><br></pre></td></tr></table></figure><h1 id="Base-Classes"><a href="#Base-Classes" class="headerlink" title="Base Classes"></a>Base Classes</h1><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:left">Note</th></tr></thead><tbody><tr><td style="text-align:center">BaseException</td><td style="text-align:left">所有异常的基类</td></tr><tr><td style="text-align:center">Exception</td><td style="text-align:left">常规错误的基类</td></tr><tr><td style="text-align:center">ArithmeticError <a href="//blog/2016/11/29/learn/python/exception/" title="Python中的异常类及继承关系">Python中的异常类及继承关系</a></td><td style="text-align:left">所有数值计算错误的基类</td></tr><tr><td style="text-align:center">BufferError</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">LookupError</td><td style="text-align:left">无效数据查询的基类</td></tr></tbody></table><h1 id="Concrete-Classes"><a href="#Concrete-Classes" class="headerlink" title="Concrete Classes"></a>Concrete Classes</h1><h2 id="ArithmeticError"><a href="#ArithmeticError" class="headerlink" title="ArithmeticError"></a>ArithmeticError</h2><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:left">Note</th></tr></thead><tbody><tr><td style="text-align:center">AssertionError</td><td style="text-align:left">断言语句失败</td></tr><tr><td style="text-align:center">AttributeError</td><td style="text-align:left">对象没有这个属性</td></tr><tr><td style="text-align:center">EOFError</td><td style="text-align:left">无内建输入，达到EOF标记</td></tr><tr><td style="text-align:center">FloatingPointError</td><td style="text-align:left">浮点计算错误</td></tr><tr><td style="text-align:center">GeneratorExit</td><td style="text-align:left">生成器发生异常</td></tr><tr><td style="text-align:center">ImportError</td><td style="text-align:left">导入模块/对象失败</td></tr><tr><td style="text-align:center">IndexError</td><td style="text-align:left">序列中没有此索引</td></tr><tr><td style="text-align:center">KeyError</td><td style="text-align:left">映射缺键</td></tr><tr><td style="text-align:center">KeyBoardInterrupt</td><td style="text-align:left">用户中断执行</td></tr><tr><td style="text-align:center">MemoryError</td><td style="text-align:left">内存溢出错误</td></tr><tr><td style="text-align:center">NameError</td><td style="text-align:left">未声明/初始化对象</td></tr><tr><td style="text-align:center">NotImplementedError</td><td style="text-align:left">尚未实现的方法</td></tr><tr><td style="text-align:center">OSError</td><td style="text-align:left">关于操作系统的错误基类</td></tr><tr><td style="text-align:center">OverflowError</td><td style="text-align:left">上溢错误</td></tr><tr><td style="text-align:center">RecursionError</td><td style="text-align:left">递归错误</td></tr><tr><td style="text-align:center">ReferenceError</td><td style="text-align:left">弱引用访问已经被回收的对象</td></tr><tr><td style="text-align:center">RuntimeError</td><td style="text-align:left">一般运行时错误</td></tr><tr><td style="text-align:center">StopIteration</td><td style="text-align:left">迭代器中已无值</td></tr><tr><td style="text-align:center">StopAsyncIternation</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">SyntaxError</td><td style="text-align:left">python语法错误</td></tr><tr><td style="text-align:center">IndentationError</td><td style="text-align:left">缩进错误</td></tr><tr><td style="text-align:center">TabError</td><td style="text-align:left">Tab和空格混用</td></tr><tr><td style="text-align:center">SystemError</td><td style="text-align:left">一般的解释器系统错误</td></tr><tr><td style="text-align:center">SystemExit</td><td style="text-align:left">解释器请求退出</td></tr><tr><td style="text-align:center">TypeError</td><td style="text-align:left">对类型无效的操作</td></tr><tr><td style="text-align:center">UnboundLocalError</td><td style="text-align:left">访问未初始化的本地变量</td></tr><tr><td style="text-align:center">UnicodeError</td><td style="text-align:left">Unicode相关的错误</td></tr><tr><td style="text-align:center">UnicodeEncodeError</td><td style="text-align:left">Unicode编码时的错误</td></tr><tr><td style="text-align:center">UnicodeDecodeError</td><td style="text-align:left">Unicode解码时的错误</td></tr><tr><td style="text-align:center">UnicodeTranslateError</td><td style="text-align:left">Unicode转换时的错误</td></tr><tr><td style="text-align:center">ValueError</td><td style="text-align:left">传入无效的参数</td></tr><tr><td style="text-align:center">ZeroDivisionError</td><td style="text-align:left">除零或模零</td></tr></tbody></table><p>The following exceptions are kept for compatibility with previous versions; starting from Python 3.3, they are aliases of <code>OSError</code>.</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:left">Note</th></tr></thead><tbody><tr><td style="text-align:center">EnvironmentError</td><td style="text-align:left">操作系统错误的基类</td></tr><tr><td style="text-align:center">IOError</td><td style="text-align:left">输入/输出操作失败</td></tr><tr><td style="text-align:center">WindowsError</td><td style="text-align:left">Windows系统调用失败</td></tr></tbody></table><h1 id="Warnings"><a href="#Warnings" class="headerlink" title="Warnings"></a>Warnings</h1><p>The following exceptions are used as warnings categories.</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:left">Note</th></tr></thead><tbody><tr><td style="text-align:center">Warning</td><td style="text-align:left">警告的基类</td></tr><tr><td style="text-align:center">UserWarning</td><td style="text-align:left">用户生成代码的警告</td></tr><tr><td style="text-align:center">DeprecationWarning</td><td style="text-align:left">关于被弃用的特征的警告</td></tr><tr><td style="text-align:center">PendingDeprecationWarning</td><td style="text-align:left">关于特性将被废弃的警告</td></tr><tr><td style="text-align:center">SyntaxWarning</td><td style="text-align:left">可疑的语法的警告</td></tr><tr><td style="text-align:center">RuntimeWarning</td><td style="text-align:left">可疑的运行时行为警告</td></tr><tr><td style="text-align:center">FutureWarning</td><td style="text-align:left">关于构造将来语义会有改变的警告</td></tr><tr><td style="text-align:center">ImportWarning</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">UnicodeWarning</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">BytesWarning</td><td style="text-align:left">-</td></tr><tr><td style="text-align:center">ResourceWarning</td><td style="text-align:left">-</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://7xuthx.com1.z0.glb.clouddn.com/pdf/learn-python/3.5.2/The%20Python%20Library%20Reference,%20Release%203.5.2.pdf" target="_blank" rel="noopener">The Python Library Reference, Release 3.5.2</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> exception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redis使用手册]]></title>
      <url>http://www.wrran.com/blog/2016/11/28/howto/redis-cookbook/</url>
      <content type="html"><![CDATA[<blockquote><p>REmote DIctionary Server</p></blockquote><a id="more"></a><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="http://www.redis.net.cn/tutorial/3505.html" target="_blank" rel="noopener">Redis 数据类型</a></p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FLUSHDB <span class="comment"># 删除这个DB下的所有数据</span></span><br><span class="line">FLUSHALL <span class="comment"># 删除所有数据</span></span><br><span class="line">SETNX <span class="comment"># SET if Not eXists 不存在就存储</span></span><br></pre></td></tr></table></figure><h1 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:left">链接</th></tr></thead><tbody><tr><td style="text-align:center">SETNX</td><td style="text-align:left"><a href="https://redis.io/commands/setnx" target="_blank" rel="noopener">SETNX key value</a></td></tr></tbody></table><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><p><a href="https://tech.imdada.cn/2017/06/30/daojia-redis/" target="_blank" rel="noopener">Redis在京东到家的订单中的使用</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.yiibai.com/redis/redis_quick_guide.html" target="_blank" rel="noopener">Redis快速入门</a><br><a href="http://www.cnblogs.com/haoxinyue/p/3620648.html" target="_blank" rel="noopener">CentOS 6.5 下安装 Redis 2.8.7</a><br><a href="http://cnodejs.org/topic/5200755c44e76d216a1620df" target="_blank" rel="noopener">nodejs下redis简单操作实例</a><br><a href="http://www.bkjia.com/sjkqy/777618.html" target="_blank" rel="noopener">redis密码设置、访问权限控制等安全设置</a><br><a href="https://my.oschina.net/lujianing/blog/204103" target="_blank" rel="noopener">Windows下安装Redis</a><br><a href="https://github.com/luin/ioredis" target="_blank" rel="noopener">ioredis</a><br><a href="http://www.redis.net.cn/tutorial/3501.html" target="_blank" rel="noopener">Redis教程 - Redis中文网</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb使用手册]]></title>
      <url>http://www.wrran.com/blog/2016/11/28/howto/mongodb-cookbook/</url>
      <content type="html"><![CDATA[<blockquote><p>Building on the Best of Relational with the Innovations of NoSQL</p></blockquote><a id="more"></a><h1 id="常用操作示例"><a href="#常用操作示例" class="headerlink" title="常用操作示例"></a>常用操作示例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient;</span><br><span class="line"><span class="keyword">var</span> DB_CONN_STR = <span class="string">'mongodb://192.168.9.128:27017/DbTest'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Auto</span></span><br><span class="line"><span class="comment">// db.authenticate('username', 'password')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create</span></span><br><span class="line">ertData = <span class="function"><span class="keyword">function</span> (<span class="params">db, callback</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">var</span> collection = db.collection(<span class="string">'user'</span>); <span class="comment">// collection</span></span><br><span class="line">true<span class="keyword">var</span> data = [&#123;</span><br><span class="line">truetruename: <span class="string">'name'</span>,</span><br><span class="line">truetruepassword: <span class="string">'password'</span></span><br><span class="line">true&#125;];</span><br><span class="line">truecollection.insert(data, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (err) &#123;</span><br><span class="line">truetruetrue<span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruecallback(result);</span><br><span class="line">true&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update</span></span><br><span class="line"><span class="keyword">var</span> update = <span class="function"><span class="keyword">function</span> (<span class="params">db, callback</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">var</span> collection = db.collection(<span class="string">'user'</span>); <span class="comment">// collection</span></span><br><span class="line">true<span class="keyword">var</span> where = &#123;<span class="attr">key</span>: <span class="string">'value'</span>&#125;;</span><br><span class="line">true<span class="keyword">var</span> update = &#123;<span class="attr">$set</span>: &#123;<span class="attr">key</span>: <span class="string">'value'</span>&#125;&#125;;</span><br><span class="line">truecollection.update(where, update, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (err) &#123;</span><br><span class="line">truetruetrue<span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruecallback(result);</span><br><span class="line">true&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete</span></span><br><span class="line"><span class="keyword">var</span> delete_ = <span class="function"><span class="keyword">function</span> (<span class="params">db, callback</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">var</span> collection = db.collection(<span class="string">'user'</span>); <span class="comment">// collection</span></span><br><span class="line">true<span class="keyword">var</span> where = &#123;<span class="attr">key</span>: <span class="string">'value'</span>&#125;;</span><br><span class="line">truecollection.remove(where, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (err) &#123;</span><br><span class="line">truetruetrue<span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruecallback(result);</span><br><span class="line">true&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find</span></span><br><span class="line"><span class="keyword">var</span> find = <span class="function"><span class="keyword">function</span> (<span class="params">db, callback</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">var</span> collection = db.collection(<span class="string">'user'</span>); <span class="comment">// collection</span></span><br><span class="line">true<span class="keyword">var</span> where = &#123;<span class="string">'name'</span>: <span class="string">'name'</span>&#125;;</span><br><span class="line">truecollection.find(where).toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (err) &#123;</span><br><span class="line">truetruetrue<span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruecallback(results);</span><br><span class="line">true&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储过程</span></span><br><span class="line"><span class="keyword">var</span> invokeDate = <span class="function"><span class="keyword">function</span> (<span class="params">db, callback</span>) </span>&#123;</span><br><span class="line">truedb.eval(<span class="string">'get_tb_count()'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (err) &#123;</span><br><span class="line">truetruetrue<span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetruecallback(result);</span><br><span class="line">true&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MongoClient.connect(DB_CONN_STR, <span class="function"><span class="keyword">function</span> (<span class="params">err, db</span>) </span>&#123;</span><br><span class="line">true<span class="built_in">console</span>.log(<span class="string">':)'</span>);</span><br><span class="line">trueinsertData(db, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">truetrue<span class="built_in">console</span>.log(result);</span><br><span class="line">truetruedb.close();</span><br><span class="line">true&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.cnblogs.com/kgdxpr/p/3519352.html" target="_blank" rel="noopener">CentOS6.4 安装MongoDB</a><br><a href="http://www.runoob.com/mongodb/mongodb-linux-install.html" target="_blank" rel="noopener">Linux平台安装MongoDB - 菜鸟教程</a><br><a href="http://www.cnblogs.com/zhongweiv/p/node_mongodb.html" target="_blank" rel="noopener">与MongoDB的交互(mongodb/node-mongodb-native)</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[samba使用手册]]></title>
      <url>http://www.wrran.com/blog/2016/11/28/howto/samba-cookbook/</url>
      <content type="html"><![CDATA[<blockquote><p>Dance together.</p></blockquote><a id="more"></a><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.chinaunix.net/uid-23069658-id-3142052.html" target="_blank" rel="noopener">到目前为止，Linux下最完整的Samba服务器配置攻略</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> samba </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python编程规范]]></title>
      <url>http://www.wrran.com/blog/2016/11/27/code-guide/python/</url>
      <content type="html"><![CDATA[<blockquote><p>neat code, happy work</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家都遵从编码规范时，可以让熟悉该规范的人集中于代码的逻辑而非具体的风格上，不仅可以减少bug的可能，还可以有效提高效率。下面介绍<code>Node</code>的编码规范。</p><h1 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><blockquote><p>仅对包和模块使用导入。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> x <span class="comment"># 导入包和模块</span></span><br><span class="line"><span class="keyword">from</span> x <span class="keyword">import</span> <span class="comment"># 其中x是包前缀, y是不带前缀的模块名.</span></span><br><span class="line"><span class="keyword">from</span> x <span class="keyword">import</span> y <span class="keyword">as</span> z <span class="comment"># 如果两个要导入的模块都叫做y或者y太长了.</span></span><br></pre></td></tr></table></figure><p><em>注意</em>：导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><blockquote><p>使用模块的全路径名来导入每个模块</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reference in code with complete name.</span></span><br><span class="line"><span class="keyword">import</span> sound.effects.echo</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reference in code with just module name (preferred).</span></span><br><span class="line"><span class="keyword">from</span> sound.effects <span class="keyword">import</span> echo</span><br></pre></td></tr></table></figure><h2 id="导入格式"><a href="#导入格式" class="headerlink" title="导入格式"></a>导入格式</h2><blockquote><p>每个导入应该独占一行</p></blockquote><p>正确示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, sys</span><br></pre></td></tr></table></figure><p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p><ol><li>标准库导入</li><li>第三方库导入</li><li>应用程序指定导入</li></ol><p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> bar</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> baz</span><br><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> Quux</span><br><span class="line"><span class="keyword">from</span> Foob <span class="keyword">import</span> ar</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p>如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p></blockquote><p>正确示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span><span class="params">(ParentClass)</span>:</span></span><br><span class="line">    <span class="string">"""Explicitly inherits from another class already."""</span></span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>继承自<code>object</code>是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受<a href="https://www.python.org/dev/peps/pep-3000/" target="_blank" rel="noopener">PEP-3000</a>的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括：<br><code>__new__</code>、<code>__init__</code>、<code>__delattr__</code>、<code>__getattribute__</code>、<code>__setattr__</code>、<code>__hash__</code>、<code>__repr__</code>和 <code>__str__</code>。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote><p>即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在<code>+</code>和<code>%</code>之间好好抉择</p></blockquote><h2 id="文件和sockets"><a href="#文件和sockets" class="headerlink" title="文件和sockets"></a>文件和sockets</h2><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><blockquote><p>允许使用异常, 但必须小心</p></blockquote><p>异常必须遵循特定的条件：</p><ol><li>像这样触发异常: <code>raise MyException(&quot;Error message&quot;)</code> 或者 <code>raise MyException</code>. <strong>不要</strong>使用两个参数的形式(<code>raise MyException, &quot;Error message&quot;</code>)或者过时的字符串异常(<code>raise &quot;Error message&quot;</code>).</li><li>模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的<code>Exception</code>类继承. 模块的异常基类应该叫做<em><code>Error</code></em>.</li><li>永远不要使用<code>except:</code>语句来捕获所有异常, 也不要捕获<code>Exception</code>或者<code>StandardError</code>, 除非你打算<strong>重新触发该异常</strong>, 或者你已经在当前线程的最外层(记得还是<em>要打印一条错误消息</em>). 在异常这方面, Python非常宽容,<code>except:</code>真的会捕获包括Python语法错误在内的任何错误. 使用<code>except:</code>很容易隐藏真正的bug.</li><li>尽量减少<code>try/except</code>块中的代码量. <code>try</code>块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, <code>try/except</code>块将隐藏真正的错误.</li><li>使用<code>finally</code>子句来执行那些无论<code>try</code>块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.</li><li>当捕获异常时, 使用<code>as</code>而不要用<code>,</code>. 例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Error</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> error:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><blockquote><p>避免使用全局变量</p></blockquote><p>避免使用全局变量, 用类变量来代替. 但也有一些例外:</p><ol><li>脚本的默认选项.</li><li>模块级常量. 例如:<code>PI = 3.14159</code>. <strong>常量应该全大写, 用下划线连接</strong>.</li><li>有时候用全局变量来缓存值或者作为函数返回值很有用.</li><li>如果需要, 全局变量应该仅在模块内部可用, 并通过<strong>模块级的公共函数</strong>来访问.</li></ol><h2 id="嵌套-局部-内部类或函数"><a href="#嵌套-局部-内部类或函数" class="headerlink" title="嵌套/局部/内部类或函数"></a>嵌套/局部/内部类或函数</h2><blockquote><p>鼓励使用嵌套/本地/内部类或函数</p></blockquote><p>类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的；但注意嵌套类或局部类的示例<strong>不能序列化</strong>。</p><h2 id="列表推导-List-Comprehensions"><a href="#列表推导-List-Comprehensions" class="headerlink" title="列表推导(List Comprehensions)"></a>列表推导(List Comprehensions)</h2><blockquote><p>可以在简单情况下使用</p></blockquote><p>适用于简单情况. 每个部分应该单独置于一行: <em>映射表达式</em>, <em><code>for</code>语句</em>, <em>过滤器表达式</em>. 禁止多重<code>for</code>语句或过滤器表达式. 复杂情况下还是使用循环.<br>正确示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> x * y &gt; <span class="number">10</span>:</span><br><span class="line">            result.append((x, y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> x != y:</span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> y != z:</span><br><span class="line">                    <span class="keyword">yield</span> (x, y, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((x, complicated_transform(x))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> long_generator_function(parameter)</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">squares = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">eat(jelly_bean <span class="keyword">for</span> jelly_bean <span class="keyword">in</span> jelly_beans</span><br><span class="line">    <span class="keyword">if</span> jelly_bean.color == <span class="string">'black'</span>)</span><br></pre></td></tr></table></figure><p></p><p>错误示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> x * y &gt; <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((x, y, z)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> x != y</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> xrange(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> y != z)</span><br></pre></td></tr></table></figure><p></p><h2 id="默认迭代器和操作符"><a href="#默认迭代器和操作符" class="headerlink" title="默认迭代器和操作符"></a>默认迭代器和操作符</h2><blockquote><p>如果类型支持, 就使用默认迭代器和操作符. 比如列表, 字典及文件等.</p></blockquote><p>如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了<strong>迭代器方法</strong>. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将_不能_修改容器.<br>正确示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> adict: ...</span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> adict: ...</span><br><span class="line"><span class="keyword">if</span> obj <span class="keyword">in</span> alist: ...</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> afile: ...</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dict.iteritems(): ...</span><br></pre></td></tr></table></figure><p></p><p>错误示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> adict.keys(): ...</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> adict.has_key(key): ...</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> afile.readlines(): ...</span><br></pre></td></tr></table></figure><p></p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><blockquote><p>按需使用生成器.</p></blockquote><p>所谓<strong>生成器函数</strong>，就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.<br>鼓励使用. 注意在生成器函数的文档字符串中使用<code>Yields:</code>而不是<code>Returns:</code>.（参见<a href="#comment">注释部分</a>）</p><h2 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h2><blockquote><p>适用于单行函数</p></blockquote><p>与语句相反, <code>lambda</code>在一个表达式中定义匿名函数. 常用于为<code>map()</code>和<code>filter()</code>之类的高阶函数定义回调函数或者操作符.但应当注意到：比本地函数更难阅读和调试. 没有函数名意味着堆栈跟踪更难理解. 由于lambda函数通常只包含一个表达式, 因此其表达能力有限.<br>所以，我们应当在如下情形应用<code>lambda</code>: 适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.<br>对于常见的操作符，例如乘法操作符，使用<code>operator</code>模块中的函数以代替lambda函数. 例如, 推荐使用<code>operator.mul</code>, 而不是<code>lambda x, y: x * y</code>.</p><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><blockquote><p>适用于单行函数</p></blockquote><p>条件表达式是对于<code>if</code>语句的一种更为简短的句法规则. 例如:<code>x = 1 if cond else 2</code>，可见这些语句更难阅读，如果表达式很长，将难于定位条件。</p><h2 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h2><blockquote><p>适用于大部分情况.</p></blockquote><p>我们可以在函数参数列表的最后指定变量的值, 例如,<code>def foo(a, b = 0):</code>. 如果调用foo时只带一个参数, 则b被设为0. 如果带两个参数, 则b的值等于第二个参数.<br>但默认参数只在<strong>模块加载时求值一次</strong>. 如果参数是列表或字典之类的可变类型, 这可能会导致问题. 如果函数修改了对象(例如向列表追加项), 默认值就被修改了.<br>因此我们鼓励使用, 不过<em>不要在函数或方法定义中使用可变对象作为默认值</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=None)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">             b = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=[])</span>:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=time.time<span class="params">()</span>)</span>:</span>  <span class="comment"># The time the module was loaded???</span></span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=FLAGS.my_thing)</span>:</span>  <span class="comment"># sys.argv has not yet been parsed...</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties)"></a>属性(properties)</h2><blockquote><p>访问和设置数据成员时, 你通常会使用简单, 轻量级的访问和设置函数. 建议用属性（properties）来代替它们.</p></blockquote><h2 id="True-False的求值"><a href="#True-False的求值" class="headerlink" title="True/False的求值"></a>True/False的求值</h2><h2 id="过时的语言特性"><a href="#过时的语言特性" class="headerlink" title="过时的语言特性"></a>过时的语言特性</h2><h2 id="词法作用域-Lexical-Scoping"><a href="#词法作用域-Lexical-Scoping" class="headerlink" title="词法作用域(Lexical Scoping)"></a>词法作用域(Lexical Scoping)</h2><h2 id="函数与方法装饰器"><a href="#函数与方法装饰器" class="headerlink" title="函数与方法装饰器"></a>函数与方法装饰器</h2><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h2 id="威力过大的特性"><a href="#威力过大的特性" class="headerlink" title="威力过大的特性"></a>威力过大的特性</h2><h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><blockquote><p>即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.</p></blockquote><p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查 if <strong>name</strong> == ‘<strong>main</strong>‘ , 这样当模块被导入时主程序就不会被执行.<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.</p><h1 id="风格规范"><a href="#风格规范" class="headerlink" title="风格规范"></a>风格规范</h1><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><blockquote><p>不要在行尾加分号，也不要用分号将两条命令放在同一行。</p></blockquote><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><blockquote><p>宁缺勿滥地使用括号。</p></blockquote><p>除非是用于实现<a href="#line-length">行连接</a>，否则不要在返回语句或条件语句中使用括号，不过在元组两边使用括号是可以的：<br>下面是正确示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> foo:</span><br><span class="line">    bar()</span><br><span class="line"><span class="keyword">while</span> x:</span><br><span class="line">    x = bar()</span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">and</span> y:</span><br><span class="line">    bar()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">   bar()</span><br><span class="line"><span class="keyword">return</span> foo</span><br><span class="line"><span class="keyword">for</span> (x, y) <span class="keyword">in</span> dict.items(): ...</span><br></pre></td></tr></table></figure><p></p><p>下面是错误示例：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (x):</span><br><span class="line">    bar()</span><br><span class="line">if not(x):</span><br><span class="line">    bar()</span><br><span class="line">return (foo)</span><br></pre></td></tr></table></figure><p></p><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><blockquote><p>按照标准的排版来使用标点两边的空格</p></blockquote><ol><li><p>括号内不要有空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确示例</span></span><br><span class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;, [])</span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line">spam( ham[ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span>&#125;, [ ])</span><br></pre></td></tr></table></figure></li><li><p>不要在<code>,</code>, <code>;</code>, <code>:</code>前面加空格, 但应该在它们后面加(除了在行尾)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确示例</span></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">print</span> x, y</span><br><span class="line">x, y = y, x</span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span> :</span><br><span class="line">    <span class="keyword">print</span> x , y</span><br><span class="line">x , y = y , x</span><br></pre></td></tr></table></figure></li><li><p>参数列表, 索引或切片的左括号前不应加空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确示例</span></span><br><span class="line">spam(<span class="number">1</span>)</span><br><span class="line">dict[<span class="string">'key'</span>] = list[index]</span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line">spam (<span class="number">1</span>)</span><br><span class="line">dict [<span class="string">'key'</span>] = list [index]</span><br></pre></td></tr></table></figure></li><li><p>在二元操作符两边都加上一个空格, 比如赋值(<code>=</code>), 比较(<code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>!=</code>, <code>&lt;&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>), 布尔(<code>and</code>, <code>or</code>, <code>not</code>). 至于<strong>算术操作符</strong>两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确示例</span></span><br><span class="line">x == <span class="number">1</span></span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line">x&lt;<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>当<code>=</code>用于指示关键字参数或默认参数值时, 不要在其两侧使用空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r=real, i=imag)</span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, image = <span class="number">0.0</span>)</span>:</span> <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure></li><li><p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于<code>:</code>, <code>#</code>, <code>=</code>等):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确示例</span></span><br><span class="line">foo = <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">long_name = <span class="number">2</span>  <span class="comment"># comment that should not be aligned</span></span><br><span class="line"></span><br><span class="line">dictionary = &#123;</span><br><span class="line">    <span class="string">"foo"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line">foo       = <span class="number">1000</span>  <span class="comment"># comment</span></span><br><span class="line">long_name = <span class="number">2</span>     <span class="comment"># comment that should not be aligned</span></span><br><span class="line"></span><br><span class="line">dictionary = &#123;</span><br><span class="line">    <span class="string">"foo"</span>      : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"long_name"</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><blockquote><p>用4个空格来缩进代码</p></blockquote><p>绝对不要用<code>Tab</code>，也不要<code>Tab</code>和空格混用。对于行连接的情况，你应该要么垂直对齐换行的元素, 或者使用四个空格的悬挂式缩进(这时第一行不应该有参数):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Aligned with opening delimiter</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">                        var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Aligned with opening delimiter in a dictionary</span></span><br><span class="line">foo = &#123;</span><br><span class="line">    long_dictionary_key: value1 +</span><br><span class="line">                        value2,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4-space hanging indent; nothing on first line</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">    var_one, var_two, var_three,</span><br><span class="line">    var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4-space hanging indent in a dictionary</span></span><br><span class="line">foo = &#123;</span><br><span class="line">    long_dictionary_key:</span><br><span class="line">        long_dictionary_value,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而不应该是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Stuff on first line forbidden</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2-space hanging indent forbidden</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">  var_one, var_two, var_three,</span><br><span class="line">  var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># No hanging indent in a dictionary</span></span><br><span class="line">foo = &#123;</span><br><span class="line">          long_dictionary_key:</span><br><span class="line">              long_dictionary_value,</span><br><span class="line">              ...</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><blockquote><p>顶级定义之间空<strong>两行</strong>，方法定义之间空<strong>一行</strong></p></blockquote><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><blockquote><p>通常每个语句应该独占一行</p></blockquote><p>不过, 如果测试结果与测试语句在一行放得下, 你也可以将它们放在同一行. 如果是if语句, 只有在没有else时才能这样做. 特别地, 绝不要对 try/except 这样做, 因为try和except不能放在同一行.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Yes:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: bar(foo)</span><br><span class="line"></span><br><span class="line">No:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> foo: bar(foo)</span><br><span class="line">  <span class="keyword">else</span>:   baz(foo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:               bar(foo)</span><br><span class="line">  <span class="keyword">except</span> ValueError: baz(foo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      bar(foo)</span><br><span class="line">  <span class="keyword">except</span> ValueError: baz(foo)</span><br></pre></td></tr></table></figure><p><a id="line-length"></a></p><h2 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h2><blockquote><p>每行不超过80个字符。</p></blockquote><p>例外有：</p><ol><li>长的导入模块语句</li><li>注释中的URL</li></ol><p>不要使用反斜杠连接行。<br>Python中会将<a href="https://docs.python.org/2/reference/lexical_analysis.html#implicit-line-joining" target="_blank" rel="noopener">圆括号、中括号和花括号中的行</a>隐式连接起来，我们可以利用这个特点，如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo_bar(self, width, height, color=<span class="string">'black'</span>, design=<span class="literal">None</span>, x=<span class="string">'foo'</span>,</span><br><span class="line">             emphasis=<span class="literal">None</span>, highlight=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (width == <span class="number">0</span> <span class="keyword">and</span> height == <span class="number">0</span> <span class="keyword">and</span></span><br><span class="line">    color == <span class="string">'red'</span> <span class="keyword">and</span> emphasis == <span class="string">'strong'</span>):</span><br></pre></td></tr></table></figure><p></p><p>如果一个文本字符串在一行放不下，可以使用圆括号来实现隐式行连接：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="string">'This will build a very long long '</span></span><br><span class="line">     <span class="string">'long long long long long long string'</span>)</span><br></pre></td></tr></table></figure><p></p><p>在注释中，如果有必要，可以将长的URL放在一行中：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># See details at</span></span><br><span class="line"><span class="comment"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure><p></p><p>下面则是错误示例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># See details at</span></span><br><span class="line"><span class="comment"># http://www.example.com/us/developer/documentation/api/content/\</span></span><br><span class="line"><span class="comment"># v2.0/csv_file_name_extension_full_specification.html</span></span><br></pre></td></tr></table></figure><p></p><h2 id="Shebang"><a href="#Shebang" class="headerlink" title="Shebang"></a>Shebang</h2><p><a id="comment"></a></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>确保对<strong>模块</strong>, <strong>函数</strong>, <strong>方法</strong>和<strong>行内注释</strong>使用正确的风格</p></blockquote><h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h3><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h3 id="函数和方法"><a href="#函数和方法" class="headerlink" title="函数和方法"></a>函数和方法</h3><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><h3 id="块注释和行注释"><a href="#块注释和行注释" class="headerlink" title="块注释和行注释"></a>块注释和行注释</h3><h3 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h3><blockquote><p>为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.</p></blockquote><p>TODO注释应该在所有开头处包含”TODO”字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO(kl@gmail.com): Use a "*" here for string repetition.</span></span><br><span class="line"><span class="comment"># TODO(Zeke) Change this to use relations.</span></span><br></pre></td></tr></table></figure><p>如果你的TODO是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).</p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><blockquote><p>在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性.<br>(译者注: 重视封装的面向对象程序员看到这个可能会很反感, 因为他们一直被教育: 所有成员变量都必须是私有的! 其实, 那真的是有点麻烦啊. 试着去接受Pythonic哲学吧)</p></blockquote><p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 get_foo() 和 set_foo() 这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.</p><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><blockquote><p>module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</p></blockquote><p>应该避免的名称</p><pre><code>单字符名称, 除了计数器和迭代器.
包/模块名中的连字符(-)
双下划线开头并结尾的名称(Python保留, 例如__init__)
</code></pre><p>命名约定</p><pre><code>所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.
用单下划线(_)开头表示模块变量或函数是protected的(使用import * from时不会包含).
用双下划线(__)开头的实例变量或方法表示类内私有.
将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.
对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.
</code></pre><p>Python之父Guido推荐的规范<br>Type Public Internal<br>Modules lower_with_under _lower_with_under<br>Packages lower_with_under<br>Classes CapWords _CapWords<br>Exceptions CapWords<br>Functions lower_with_under() _lower_with_under()<br>Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER<br>Global/Class Variables lower_with_under _lower_with_under<br>Instance Variables lower_with_under _lower_with_under (protected) or <strong>lower_with_under (private)<br>Method Names lower_with_under() _lower_with_under() (protected) or </strong>lower_with_under() (private)<br>Function/Method Parameters lower_with_under<br>Local Variables lower_with_under</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://google.github.io/styleguide/pyguide.html" target="_blank" rel="noopener">Google Python Style Guide</a><br><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/" target="_blank" rel="noopener">谷歌Python风格规范 - 中文翻译</a></p>]]></content>
      
        <categories>
            
            <category> code guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Conda常用指令]]></title>
      <url>http://www.wrran.com/blog/2016/11/22/cheatsheet/reference/conda/</url>
      <content type="html"><![CDATA[<blockquote><p>What is Env and Pkg?<br>I don’t care. :)</p></blockquote><a id="more"></a><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-conda/conda-cheatsheet-1.PNG" alt title="conda-cheatsheet-1"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/howto-conda/conda-cheatsheet-2.PNG" alt title="conda-cheatsheet-2"></p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>可参阅博文<a href="http://wrran.com/blog/2016/11/22/howto-conda/" target="_blank" rel="noopener">Conda使用教程</a>。<br><a href="https://zhuanlan.zhihu.com/p/22678445" target="_blank" rel="noopener">使用conda管理python环境</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> reference </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> conda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Conda使用教程]]></title>
      <url>http://www.wrran.com/blog/2016/11/22/howto/conda/</url>
      <content type="html"><![CDATA[<blockquote><p>妈妈再也不用担心我丢三落四</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>You know that a package manager helps you find and install packages. But if you need a package that requires a different version of Python, there is no need to switch to a different environment manager, because conda is both a package manager and an environment manager. With just a few commands, you can set up a totally separate environment to run that different version of Python, and yet continue to run your usual version of Python in your normal environment.<br>Anytime you wish to see the full documentation for any command, type the command followed by <code>--help</code>. For example, to learn about rhe conda update command:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p></p></blockquote><p>遵从官方文档的指示，我将按照<a href="http://conda.pydata.org/docs/test-drive.html" target="_blank" rel="noopener">Conda Test Drive</a>熟悉下Conda常用的命令。但在这之前，需要安装conda，可以参见<a href="http://conda.pydata.org/docs/install/quick.html" target="_blank" rel="noopener">Quick Install</a>。</p><h1 id="MileStones"><a href="#MileStones" class="headerlink" title="MileStones"></a>MileStones</h1><ol><li><a href="#managing-conda">USING CONDA</a>：检查是否安装好conda，并确认版本号</li><li><a href="#manageing-environment">MANAGING ENIVRONMENTS</a>：创建、检查、备份自己所处的环境</li><li><a href="#manageing-python">MANAGING PYTHON</a>：管理Python的版本</li><li><a href="#managing-packages">MANAGING PACKAGES</a>：列出、安装和搜索包</li><li><a href="#removing-etc">REMOVING PACKAGES, ENVIRONMENT, OR CONDA</a>：卸载、移除包或环境或conda</li></ol><p><a id="managing-conda"></a></p><h2 id="Managing-Conda"><a href="#Managing-Conda" class="headerlink" title="Managing Conda"></a>Managing Conda</h2><p><code>Conda</code>既是<strong>包管理器</strong>又是<strong>环境管理器</strong>，可以处理包的查找与安装问题，又可以解决Python的版本管理问题。</p><ol><li><p>验证conda已经安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version <span class="comment"># conda 4.2.9</span></span><br></pre></td></tr></table></figure></li><li><p>升级conda</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda <span class="comment"># conda : 4.2.9-py27_0 -&gt; 4.2.12-py27_0</span></span><br></pre></td></tr></table></figure></li></ol><p><a id="managing-environment"></a></p><h2 id="Managing-Environment"><a href="#Managing-Environment" class="headerlink" title="Managing Environment"></a>Managing Environment</h2><p>我们将创建一个环境，并在之间来回切换。</p><ol><li><p>创建环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name snowflakes biopython</span><br></pre></td></tr></table></figure><blockquote><p>This will create a new environment named <code>snowflakes</code> with the program <code>Biopython</code>.</p></blockquote><p>上述是官网说的，我觉得是创建了一个安装有包<code>Biopython</code>的新环境<code>snowflakes</code>。</p><p><em>注意</em>：上述指令未指定环境安装的目录，将默认安装在<code>conda</code>安装目录的<code>envs</code>文件夹下；同时，上述指令未指定Python的版本，<code>conda</code>将默认使用你下载安装conda时的Python版本。</p></li><li><p>激活新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux, OS X</span></span><br><span class="line"><span class="comment"># source activate snowflakes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">activate snowflakes</span><br></pre></td></tr></table></figure></li><li><p>再创建一个环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name bunnies python=3 astroid babel</span><br></pre></td></tr></table></figure><p>上述指令将创建一个名为<code>bunnies</code>的新环境，使用Python 3，并安装了包<code>astroid</code>和<code>babel</code>。</p></li><li><p>列出所有环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure></li><li><p>查看当前环境<br><code>conda</code>在执行指令<code>conda info --envs</code>时，会用<code>*</code>将当前环境标记出来；同时在命令行中，也会用<code>()</code>或者<code>[]</code>将当前环境框选出来。</p></li><li><p>切换环境<br>其实就是激活/关闭当前环境，指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活</span></span><br><span class="line"><span class="comment"># Linux, OS X</span></span><br><span class="line"><span class="comment"># source activate bunnies</span></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">activate bunnies</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="comment"># Linux, OS X</span></span><br><span class="line"><span class="comment"># source deactivate</span></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure></li><li><p>拷贝当前环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name flowers --<span class="built_in">clone</span> snowflakes</span><br></pre></td></tr></table></figure><p>上述指令将创建一个与<code>snowflakes</code>相同的环境，名为<code>flowers</code>。</p></li><li><p>删除环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name flowers --all</span><br></pre></td></tr></table></figure><p>上述指令将删除环境<code>flowers</code>。</p></li></ol><p><a id="managing-python"></a></p><h2 id="Managing-Python"><a href="#Managing-Python" class="headerlink" title="Managing Python"></a>Managing Python</h2><p><code>Conda</code>将Python视为包，从而我们可以通过与包管理相同的方式来管理不同版本的Python。</p><ol><li><p>检查Python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search --full-name python</span><br></pre></td></tr></table></figure></li><li><p>安装不同版本的Python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name snakes python=3</span><br></pre></td></tr></table></figure></li><li><p>查看添加的环境的Python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux, OS X</span></span><br><span class="line"><span class="comment"># source activate snakes</span></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">activate snakes</span><br><span class="line">python --version</span><br></pre></td></tr></table></figure></li></ol><p><a id="managing-packages"></a></p><h2 id="Managing-Packages"><a href="#Managing-Packages" class="headerlink" title="Managing Packages"></a>Managing Packages</h2><ol><li><p>查看当前安装的包及版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure></li><li><p>查看可从conda中安装的包<br>参见<a href="http://docs.continuum.io/anaconda/pkg-docs.html" target="_blank" rel="noopener">pkg-docs</a></p></li><li><p>搜索某个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search beautifulsoup4</span><br></pre></td></tr></table></figure><p>如果有结果，则说明可以安装。</p></li><li><p>安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --name bunnies beautifulsoup4</span><br></pre></td></tr></table></figure><p><em>注意</em>：如果省略了<code>--name bunnies</code>，将会将<code>beautifulsoup4</code>安装在当前环境下。</p></li><li><p>从Anaconda.org上安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --channel https://conda.anaconda.org/pandas bottleneck</span><br></pre></td></tr></table></figure></li><li><p>使用<code>pip</code>安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install see</span><br></pre></td></tr></table></figure></li></ol><p><a id="removing-etc"></a></p><h2 id="Removing-packages-environment-or-conda"><a href="#Removing-packages-environment-or-conda" class="headerlink" title="Removing packages, environment, or conda"></a>Removing packages, environment, or conda</h2><p>现在是时候清理一波被折腾的环境了。</p><ol><li><p>卸载包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name bunnies iopro</span><br></pre></td></tr></table></figure></li><li><p>移除环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name snakes --all</span><br></pre></td></tr></table></figure></li><li><p>卸载conda</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux, OS X</span></span><br><span class="line"><span class="comment"># rm -rf ~/anaconda</span></span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line"><span class="comment"># rm -rf ~/miniconda</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>官方提供的Cheatsheet，可以从<a href="http://conda.pydata.org/docs/using/cheatsheet.html" target="_blank" rel="noopener">conda-cheatsheet</a>下载。也可以参见博文<a href="http://wrran.com/blog/2016/11/22/cheatsheet-conda/" target="_blank" rel="noopener">cheatsheet-conda</a>。</p><p>使用conda原有的镜像很慢，可以尝试使用如下指令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda config --append channels <span class="string">'https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/'</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><p></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://conda.pydata.org/docs/using/index.html" target="_blank" rel="noopener">Conda 官方文档</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">Anaconda 镜像使用帮助</a><br><a href="http://www.cnblogs.com/wybert/p/6011766.html" target="_blank" rel="noopener">更改conda安装源镜像</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> conda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 函数调用]]></title>
      <url>http://www.wrran.com/blog/2016/11/13/learn/js/7-3-function-call/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JS中函数定义时函数体的代码并不会执行，只有调用该函数时，它们才能执行。有以下4种方式来调用JS函数：</p><ul><li>作为函数</li><li>作为方法</li><li>作为构造函数</li><li>通过<code>call()</code>和<code>apply()</code>方法间接调用</li></ul><p>在介绍四种调用方式前，先介绍下JS中的调用表达式。</p><h1 id="调用表达式"><a href="#调用表达式" class="headerlink" title="调用表达式"></a>调用表达式</h1><p>JS中的调用表达式（invocation expression）是一种调用（或执行）函数或方法的语法表示。它以一个函数表达式开始，这个函数表达式指代了要调用的函数。函数表达式后跟随一对圆括号，括号内是一个以逗号分隔开的实参列表，参数可以是0个也可以是多个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">Math</span>.max(x + <span class="number">1</span>, y, z);</span><br><span class="line">a.sort();</span><br></pre></td></tr></table></figure><p>当对调用表达式进行求值时，首先计算函数表达式，然后计算实参表达式，得到一组参数值。如果函数表达式的值不是一个可以调用的对象，则抛出一个类型错误的异常。之后，实参的值被依次赋给形参，这些形参是定义函数时指定的，接下来开始执行函数体。如果函数使用<code>return</code>语句返回一个返回值，那么这个返回值就是整个调用表达式的值。否则，调用表达式的值就是<code>undefined</code>。</p><p>任何一个调用表达式都包含一对圆括号和左圆括号之前的表达式。如果这个表达式是一个<strong>属性访问表达式</strong>，即该函数是一个对象的属性或者数组中的一个元素，那么这个调用被称作“方法调用”（method invocation）。在方法调用中，执行函数体的时候，作为属性访问主体的对象和数组便是器调用方法内<strong><code>this</code>的指向</strong>。并不是方法调用的调用表达式通常使用全局对象作为<code>this</code>关键字的值。不过在ES5中的严格格式模式下，<code>this</code>将指向<code>undefined</code>而非全局对象。</p><h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><p>一个调用表达式由多个函数表达式组成，每个函数表达式都是由一个函数对象和左圆括号、参数列表和右圆括号组成，实参列表是由逗号分隔的零个或者多个实参表达式组成。如果函数表达式是一个属性访问表达式，即该函数是一个对象的属性或者数组中的一个元素，那么它就是一个方法调用表达式。对函数调用的参数和返回值的处理，和上文描述一致，这里不再赘述。</p><p>下面是一些函数调用的实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printprops(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> total = distance(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>) + distance(<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> probability = factorial(<span class="number">5</span>) / factorial(<span class="number">13</span>);</span><br></pre></td></tr></table></figure><p>在ES5的严格模式下，以函数形式调用的函数通常不使用<code>this</code>关键字。不过，<code>this</code>可以用来判断当前是否是严格模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义并调用一个函数来确定当前脚本运行时是否为严格模式</span></span><br><span class="line"><span class="keyword">var</span> strict = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> !<span class="keyword">this</span>; &#125;());</span><br></pre></td></tr></table></figure><h1 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h1><p>方法就是保存在一个对象的属性（或者数组）中的JS函数。<br>假设有对象<code>o</code>，其有一个方法<code>f</code>，调用它时只需要<code>o.f(x, y)</code>。可以看出该调用表达式的函数表达式本身是一个属性访问表达式，这意味着该函数被当作一个方法，而不是一个普通函数来调用。对方法调用的参数和返回值的处理，和上文描述一致，这里不再赘述。</p><p>方法调用和函数调用的区别主要在于<strong>上下文</strong>。属性访问表达式由两部分组成：一个对象和属性名称。在像这样的方法调用表达式里，对象<code>o</code>成为调用上下文，函数体可以使用关键字<code>this</code>来引用该对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculator = &#123;</span><br><span class="line">    operand1: <span class="number">1</span>,</span><br><span class="line">    operand2: <span class="number">1</span>,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// `this`指代当前对象</span></span><br><span class="line">        <span class="keyword">this</span>.result = <span class="keyword">this</span>.operand1 + <span class="keyword">this</span>.operand2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">calculator.add();</span><br><span class="line">calculator.result</span><br></pre></td></tr></table></figure><p>方法和<code>this</code>关键字是面向对象编程范式的核心。<strong>任何函数只要作为方法调用实际上都会传入一个隐式的实参</strong>。这个实参是一个对象，指向调用这个方法的母体。<br>需要注意的是，<code>this</code>是一个关键字，不是变量也不是属性名，JS的语法不允许对<code>this</code>赋值。和变量不同，关键字u<code>this</code>没有作用域的限制，嵌套的函数不会从调用它的函数中继承<code>this</code>。如果嵌套函数作为方法调用，其<code>this</code>的值不是全局对象（非严格模式下）就是<code>undefined</code>（严格模式下）。很多人误以为调用嵌套函数时<code>this</code>会指向调用外层函数的上下文。如果你想访问这个外部函数的<code>this</code>值，需要将<code>this</code>的值保存在一个变量里，这个变量和内部函数都同在一个作用域内。通常使用变量<code>self</code>来保存<code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    m: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">// 将`this`的值保存至一个变量中</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === o); <span class="comment">// =&gt; true</span></span><br><span class="line">        f();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span> === o); <span class="comment">// =&gt; false</span></span><br><span class="line">            <span class="built_in">console</span>.log(self === o); <span class="comment">// =&gt; true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h1><p>如果函数或者方法调用之前带有关键字<code>new</code>，它就构成构造函数调用。<strong>构造函数调用和普通的函数调用以及方法调用在实参处理、调用上下文和返回值方面都有很大不同。</strong></p><p>如果构造函数在圆括号内包含一组实参列表，则将先计算这些实参表达式，然后传入函数内，这与函数调用和方法调用是一致的。但如果构造函数没有形参，JS构造函数调用的语法是<strong>允许忽略实参列表和圆括号的</strong>。所以，下面这两行代码是等价的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br></pre></td></tr></table></figure><p>构造函数调用创建一个新的空对象，这个对象继承自构造函数的<code>prototype</code>属性。构造函数试图初始化这个新创建的对象，并将这个对象用做其<strong>调用上下文</strong>，因此构造函数可以使用<code>this</code>关键字来引用这个新创建的对象。注意，尽管有时构造函数调用看起来像一个方法调用，如<code>new o.m()</code>，它依然会使用这个新对象作为调用上下文，即此时上下文仍旧不是<code>o</code>。</p><p>构造函数通常不会使用关键字<code>return</code>，它们通常初始化新对象，当构造函数的函数体执行完毕时，它会显式返回。在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值。然而如果构造函数显式地使用<code>return</code>语句返回一个对象，那么调用表达式的值就是这个对象。如果构造函数使用<code>return</code>语句但没有指定返回值，或者返回一个原始值，那么这个返回值将被忽略，同时使用这个新对象作为调用结果。</p><h1 id="间接调用"><a href="#间接调用" class="headerlink" title="间接调用"></a>间接调用</h1><p>JS中的函数也是对象，包含了两种可以用来间接调用的方法：<code>call()</code>和<code>apply()</code>。两个方法都允许显式指定调用所需的<code>this</code>值，即任何函数可以作为任何对象的方法来调用，哪怕这个函数不是那个对象的方法。两个方法都可以指定调用的实参。<code>call()</code>使用它自有的实参列表作为函数的实参，<code>apply()</code>方法则要求以数组的形式传入参数。<br>详情可参阅<a href="http://wrran.com/blog/2016/11/12/learn-js-7-8-function-attribute-etc/" target="_blank" rel="noopener">JavaScript查缺补漏 - 函数属性</a></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="方法链"><a href="#方法链" class="headerlink" title="方法链"></a>方法链</h2><p>当方法的返回值是一个对象，这个对象还可以再调用它的方法。这种方法调用序列中（通常称为“链”或者“级联”）每次的调用结果都是另外一个表达式的组成部分。比如，在jQuery库中，可以看到如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.header'</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.id; &#125;).get().sort();</span><br></pre></td></tr></table></figure><p><strong>当方法不需要返回值时，最好直接返回<code>this</code></strong>。如果在设计的API中一直采用这种方式，就可以进行“链式调用”风格的编程。<br>但不要将方法的链式调用和构造函数的链式调用混为一谈。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 函数式编程]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/7-9-function-application/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在JS中可以像操作对象一样操作函数，故而可以在JS中应用函数式编程技术。</p><h1 id="使用函数处理数组"><a href="#使用函数处理数组" class="headerlink" title="使用函数处理数组"></a>使用函数处理数组</h1><p>假设有一个数组，数组元素是数字，我们想要计算这些元素的平均值和标准差。若使用非函数式编程风格的话，代码是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 计算均值</span></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;data.length; i++) total += data[i];</span><br><span class="line"><span class="keyword">var</span> mean = total / data.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算标准差</span></span><br><span class="line">total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> deviation = data[i] - mean;</span><br><span class="line">    total += deviation * deviation;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stddev = <span class="built_in">Math</span>.sqrt(total / (data.length<span class="number">-1</span>));</span><br></pre></td></tr></table></figure><p>而对应的函数式编程，就会变得简洁如斯：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义两个简单的函数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x+y; &#125;</span><br><span class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将这些函数和数组方法配合使用计算出平均数和标准差</span></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> mean = data.reduce(sum) /  data.length;</span><br><span class="line"><span class="keyword">var</span> deviation = data.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x-mean; &#125;);</span><br><span class="line"><span class="keyword">var</span> stddev = <span class="built_in">Math</span>.sqrt(deviation.map(square).reduce(sum) / (data.length<span class="number">-1</span>));</span><br></pre></td></tr></table></figure><p>在ES3中，我们可以如下模拟<code>map()</code>和<code>reduce()</code>函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于每个数组元素调用函数`f()`，并返回一个结果数组</span></span><br><span class="line"><span class="comment">// 如果Array.prototype.map定义了的话，就使用该方法</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="built_in">Array</span>.prototype.map</span><br><span class="line">          ? <span class="function"><span class="keyword">function</span>(<span class="params">a, f</span>) </span>&#123; <span class="keyword">return</span> a.map(f); &#125;</span><br><span class="line">          : <span class="function"><span class="keyword">function</span>(<span class="params">a, f</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> results = [];</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=a.length; i&lt;len; i++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (i <span class="keyword">in</span> a) results[i] = f.call(<span class="literal">null</span>, a[i], i, a);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> results;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果函数`f()`和可选的初始值将数组`a`减至一个值</span></span><br><span class="line"><span class="comment">// 如果`Array.prototype.reduce`存在的话，就使用这个方法</span></span><br><span class="line"><span class="keyword">var</span> reduce = <span class="built_in">Array</span>.prototype.reduce</span><br><span class="line">             ? <span class="function"><span class="keyword">function</span>(<span class="params">a, f, initial</span>) </span>&#123;</span><br><span class="line">                 <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                     <span class="keyword">return</span> a.reduce(f, initial);</span><br><span class="line">                     <span class="keyword">else</span> <span class="keyword">return</span> a.reduce(f);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             : <span class="function"><span class="keyword">function</span>(<span class="params">a, f, initial</span>) </span>&#123;</span><br><span class="line">                 <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">                 <span class="keyword">var</span> length = a.length;</span><br><span class="line">                 <span class="keyword">var</span> accumulator;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 以特定的初始值开始，否则第一个值取自`a`</span></span><br><span class="line">                 <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) accumulator = initial;</span><br><span class="line">                 <span class="keyword">else</span> &#123; <span class="comment">// 找到数组中第一个已定义的索引</span></span><br><span class="line">                    <span class="keyword">if</span> (len === <span class="number">0</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">                    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i <span class="keyword">in</span> a) &#123;</span><br><span class="line">                            accumulator = a[i++];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i == len) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 对于数组中剩下的元素依次调用函数`f()`</span></span><br><span class="line">                 <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i <span class="keyword">in</span> a) </span><br><span class="line">                        accumulator = f.call(<span class="literal">undefined</span>, accumulator, a[i], i, a);</span><br><span class="line">                    i++;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="keyword">return</span> accumulator;</span><br><span class="line">             &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用实例</span></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x+y; &#125;</span><br><span class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;</span><br><span class="line"><span class="keyword">var</span> mean = reduce(data, sum) / data.length; <span class="comment">// !here</span></span><br><span class="line"><span class="keyword">var</span> deviation = map(data, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x-mean; &#125;);</span><br><span class="line"><span class="keyword">var</span> stddev = <span class="built_in">Math</span>.sqrt(reduce(map(deviation, square), sum)) / (data.length<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p><strong>高阶函数</strong>就是操作函数的函数，它接收一个或多个函数作为参数，并返回一个新的函数。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该函数返回一个新的函数</span></span><br><span class="line"><span class="comment">// 这个函数将它的实参传入`f()`</span></span><br><span class="line"><span class="comment">// 并返回`f`的返回值的逻辑非</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">not</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> !result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> even = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="comment">// 判断`a`是否为偶数的函数</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> odd = not(even);</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>].every(odd);</span><br></pre></td></tr></table></figure><p>下面再介绍函数<code>mapper</code>，这个函数接收一个函数作为参数，并返回一个新参数，新的参数将一个数组映射到另一个使用这个函数的数组上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所返回的函数的参数应当是一个实参数组</span></span><br><span class="line"><span class="comment">// 并对每一个数组元素执行函数f()</span></span><br><span class="line"><span class="comment">// 并返回所有计算结果组成的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapper</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> map(a, f); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> increment = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x+<span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">var</span> incrementer = mapper(increment);</span><br><span class="line">incrementer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// =&gt; [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>更常用的例子是，它接收两个函数<code>f()</code>和<code>g()</code>，并返回一个新的函数用以计算<code>f(g())</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个新的可以计算`f(g(...))`的函数</span></span><br><span class="line"><span class="comment">// 返回的函数`h()`将它所有的实参传入`g()`</span></span><br><span class="line"><span class="comment">// 然后将`g()`的返回值传入`f()`</span></span><br><span class="line"><span class="comment">// 调用`f()`和`g()`时的`this`值和调用`h()`时的`this`是同一个`this`</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.call(<span class="keyword">this</span>, g.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x+y; &#125;</span><br><span class="line"><span class="keyword">var</span> squareofsum = compose(square, sum);</span><br><span class="line">squareofsum(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// =&gt; 25</span></span><br></pre></td></tr></table></figure><h1 id="不完全函数"><a href="#不完全函数" class="headerlink" title="不完全函数"></a>不完全函数</h1><p>函数<code>f()</code>的<code>bind()</code>方法返回一个新函数，给新函数传入特定的上下文和一组指定的参数，然后调用函数<code>f()</code>。我们说它把函数绑定至对象并传入一部分参数。<code>bind()</code>方法只是将实参放在（完整实参列表的）左侧，也就是说传入<code>bind()</code>的实参都是放在传入原始函数的实参列表开始的位置，但有时我们期望将传入<code>bind()</code>的实参放在（完整实参列表的）右侧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个工具函数间类数组对象转换为真正的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array</span>(<span class="params">a, n</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(a, n || <span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的实参传递至左侧</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partialLeft</span>(<span class="params">f <span class="regexp">/*, ...*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>; <span class="comment">// 保存外部的实参数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = array(args, <span class="number">1</span>);               <span class="comment">// 开始处理外部的第一个args</span></span><br><span class="line">        a = a.concat(array(<span class="built_in">arguments</span>));       <span class="comment">// 然后增加所有的内部实参</span></span><br><span class="line">        <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, a);              <span class="comment">// 然后基于这个实参列表调用f()</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的实参传递至右侧</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partialRight</span>(<span class="params">f <span class="regexp">/*, ...*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = array(<span class="built_in">arguments</span>); <span class="comment">// 从内部参数开始</span></span><br><span class="line">        a = a.concat(array(args, <span class="number">1</span>)); <span class="comment">// 然后从外部第一个args开始添加</span></span><br><span class="line">        <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, a);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的实参被用作模板</span></span><br><span class="line"><span class="comment">// 实参列表中的undefined值都被填充</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial</span>(<span class="params">f <span class="regexp">/*, ...*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = array(args, <span class="number">1</span>); <span class="comment">// 从外部args开始</span></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历args，从内部实参填充undefined值</span></span><br><span class="line">        <span class="keyword">for</span> (; i&lt;a.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (a[i] === <span class="literal">undefined</span>) a[i] = <span class="built_in">arguments</span>[j++];</span><br><span class="line">        <span class="comment">// 将剩下的内部实参都追加进去</span></span><br><span class="line">        a = a.concat(array(<span class="built_in">arguments</span>, j));</span><br><span class="line">        <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, a);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数带有三个实参</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x, y, z</span>) </span>&#123; <span class="keyword">return</span> x * (y - z); &#125;</span><br><span class="line">partialLeft(f, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 绑定第一个实参 2 * (3 - 4) =&gt; -2</span></span><br><span class="line">partialRight(f, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 绑定最后一个实参 3 * (4 - 2) =&gt; 6</span></span><br><span class="line">partial(f, <span class="literal">undefined</span>, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 绑定中间的实参 3 * (2 - 4) =&gt; -6</span></span><br></pre></td></tr></table></figure><p>我们也可以使用不完全调用的组合来重新组织求平均数和标准差的代码，这种编程风格是非常纯粹的函数式编程，也很难懂：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x+y; &#125;</span><br><span class="line"><span class="keyword">var</span> product = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x*y; &#125;</span><br><span class="line"><span class="keyword">var</span> neg = partial(product, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">var</span> square = partial(<span class="built_in">Math</span>.pow, <span class="literal">undefined</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> sqrt = partial(<span class="built_in">Math</span>.pow, <span class="literal">undefined</span>, <span class="number">.5</span>);</span><br><span class="line"><span class="keyword">var</span> reciprocal = partial(<span class="built_in">Math</span>.pow, <span class="literal">undefined</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在计算均值和标准差，所有的函数调用都不带运算符</span></span><br><span class="line"><span class="keyword">var</span> mean = product(reduce(data, sum), reciprocal(data.length));</span><br><span class="line"><span class="keyword">var</span> stddev = sqrt(product(reduce(map(data,</span><br><span class="line">                                     compose(square,</span><br><span class="line">                                             partial(sum, neg(mean)))),</span><br><span class="line">                                sum),</span><br><span class="line">                         reciprocal(sum(data.length, <span class="number">-1</span>))));</span><br></pre></td></tr></table></figure><h1 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算阶乘，并将结果缓存至函数的属性中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFinite</span>(n) &amp;&amp; n&gt;<span class="number">0</span> &amp;&amp; n == <span class="built_in">Math</span>.round(n)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(n <span class="keyword">in</span> factorial)) &#123; <span class="comment">// 如果没有缓存结果，计算结果并缓存之</span></span><br><span class="line">            factorial[n] = n * factorial(n<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> factorial[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line">factorial[<span class="number">1</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>上例中，我们定义了函数<code>factorial</code>，它将计算结果缓存起来。在函数式编程中，这种缓存技巧被称为<strong>记忆</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回f()的带有记忆功能的版本</span></span><br><span class="line"><span class="comment">// 只有当f()的实参的字符串表示都不相同时它才会工作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memorize</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;; <span class="comment">// 将值保存在闭包内</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将实参转换为字符串形式，并将其用作缓存的键</span></span><br><span class="line">        <span class="keyword">var</span> key = <span class="built_in">arguments</span>.length + <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> cache) <span class="keyword">return</span> cache[key];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> cache[key] = f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>memorize()</code>函数创建一个新的对象，这个对象被当作缓存并赋值给一个局部变量，因此对于返回的函数来说它是私有的。所返回的函数将它的实参数组转换成字符串，并将字符串用作缓存对象的属性名。如果在缓存中存在这个值，则直接返回它；否则，就调用既定的函数对实参进行计算，将计算结果缓存起来并返回：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gcd</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) t=b, b=a, a=t;</span><br><span class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>) t=b, b=a%b, a=t;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gcdmemo = memorize(gcd);</span><br><span class="line">gcdmemo(<span class="number">85</span>, <span class="number">187</span>); <span class="comment">// =&gt; 17</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，当我们实现一个递归函数时，往往需要实现记忆功能</span></span><br><span class="line"><span class="keyword">var</span> factorial = memorize(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> (n &lt;= <span class="number">1</span>) ? <span class="number">1</span> : n * factorial(n<span class="number">-1</span>);</span><br><span class="line">                         &#125;);</span><br><span class="line">factorial(<span class="number">5</span>); <span class="comment">// =&gt; 120</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 函数属性]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/7-8-function-attribute-etc/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>函数是JS中特殊的对象，它们也有自己的属性和方法。</p><h1 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h1><p>在函数体中，<code>arguments.length</code>表示传入函数的实参个数；而函数本身的<code>length</code>属性则不同。它是一个只读属性，它代表了<strong>函数形参</strong>的数量，即在函数定义时给出的形参个数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该函数使用了callee，故不能在严格模式下工作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> actual = <span class="built_in">arguments</span>.length;</span><br><span class="line">    <span class="keyword">var</span> expected = <span class="built_in">arguments</span>.callee.length;</span><br><span class="line">    <span class="keyword">if</span> (actual !== expected)</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'Expected '</span> + expected + <span class="string">'args; got '</span> + actual);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check(<span class="string">''</span>);</span><br><span class="line">check(<span class="string">''</span>, <span class="string">''</span>); <span class="comment">// =&gt; Error</span></span><br></pre></td></tr></table></figure><h1 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h1><p>每个函数都包含一个<code>prototype</code>属性，这个属性是指向一个对象的引用，被称为原型对象。每一个函数都包含不同的原型对象。当将函数用作构造函数时，新创建的对象会从原型上继承属性。</p><p><a id="special_method"></a></p><h1 id="call-方法和apply-方法"><a href="#call-方法和apply-方法" class="headerlink" title="call()方法和apply()方法"></a>call()方法和apply()方法</h1><p>我们可以通过<code>call</code>和<code>apply</code>来间接调用函数。<br><code>call</code>和<code>apply</code>的第一个参数是要调用函数的母对象，它是调用上下文，在函数体内通过<code>this</code>来获得对它的引用。要想将方法<code>f</code>应用到对象<code>o</code>上，可以如此操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f.call(o);</span><br><span class="line">f.apply(o);</span><br></pre></td></tr></table></figure><p>上述代码与下代码的功能类似：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o.m = f;</span><br><span class="line">o.m();</span><br><span class="line"><span class="keyword">delete</span> o.m;</span><br></pre></td></tr></table></figure><p>在ES5的严格模式下，<code>call()</code>和<code>apply()</code>的第一个参数都会变成<code>this</code>的值，不论传入的实参是原始值还是<code>null</code>或者<code>undefined</code>。在ES3和非严格模式下，传入的<code>null</code>和<code>undefined</code>会被全局对象代替，而其他原始值会被相应的包装对象所替代。</p><p>对于<code>call()</code>来说，第一个调用上下文实参之后的所有实参就是要传入给待调用函数的实参，如<code>f.call(o, 1, 2);</code>。<br>对于<code>apply()</code>来说，与之类似，但传入实参应当放入到一个数组中，如<code>f.apply(o, [1, 2])</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将对象`o`中名为m()的方法替换为另一种方法</span></span><br><span class="line"><span class="comment">// 可以在调用原始的方法之前和之后记录日志消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trace</span>(<span class="params">o, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> original = o[m];</span><br><span class="line">    o[m] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">'Entering: '</span>, m);</span><br><span class="line">        <span class="keyword">var</span> result = original.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">'Exiting: '</span>, m);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h1><p><code>bind()</code>是ES5中新增的方法，该方法的作用是将函数绑定至某个对象。当在函数<code>f()</code>上调用<code>bind()</code>方法并传入一个对象<code>o</code>作为对象，这个方法将返回一个新的函数。以函数方式调用新的函数将会把原始函数<code>f()</code>当作<code>o</code>的方法来调用。传入新函数的实参也将会传入到原始函数中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x + y; &#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> g = f.bind(o);</span><br><span class="line">g(<span class="number">2</span>); <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><p>在ES3中可以如下模拟<code>bind()</code>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">f, o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f.bind) <span class="keyword">return</span> f.bind(o);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.apply(o, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5中的<code>bind()</code>方法不仅仅是将函数绑定至一个对象，他/她还附带了一些其他应用：除了第一个实参外，传入<code>bind()</code>的实参也会绑定至<code>this</code>，这种技巧被称为<strong>“柯里化”</strong>（currying）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line"><span class="comment">// 创建一个类似sum的新函数，但this的值绑定至null</span></span><br><span class="line"><span class="comment">// 并且第一个参数绑定至1，这个新的函数形参数量相当于为一</span></span><br><span class="line"><span class="keyword">var</span> succ = sum.bind(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">succ(<span class="number">2</span>); <span class="comment">// 1 + 2 =&gt; 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y, z</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x + y + z; &#125;;</span><br><span class="line"><span class="keyword">var</span> g = f.bind(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>); <span class="comment">// 绑定 this 和 y</span></span><br><span class="line">g(<span class="number">3</span>) <span class="comment">// 1 + 2 + 3=&gt; 6</span></span><br></pre></td></tr></table></figure><p>我们在ES3中也可以模拟上述方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">o <span class="regexp">/*, args */</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将this和arguments的值保存至变量中</span></span><br><span class="line">        <span class="comment">// 以便在后面嵌套的函数</span></span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> boundArgs = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bind()方法的返回值是一个函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 创建一个实参列表，将传入bind()的第二个及后续的实参都传入到这个函数中</span></span><br><span class="line">            <span class="keyword">var</span> args = [];</span><br><span class="line">            <span class="keyword">var</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; boundArgs.length; i++) args.push(boundArgs[i]);</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) args.push(<span class="built_in">arguments</span>[i]); <span class="comment">// ???</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 现在将self作为o的方法来调用，传入这些实参</span></span><br><span class="line">            <span class="keyword">return</span> self.apply(o, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但ES5中定义的<code>bind()</code>方法也有一些特性是上述ES3无法模拟的。首先，真正的<code>bind()</code>方法返回一个函数对象，这个函数对象的<code>length</code>属性是绑定函数的形参个数减去绑定绑定实参的个数；再者ES5的<code>bind()</code>方法可以顺带用作构造函数。如果<code>bind()</code>返回的函数用作构造函数，将忽略传入<code>bind()</code>的<code>this</code>，原始函数就会以构造函数的形式调用。由<code>bind()</code>方法所返回的函数并不包含<code>prototype</code>属性（普通函数固有的<code>prototype</code>属性是不能删除的），并且将这些绑定的函数用作构造函数时所创建的对象从原始的未绑定的构造函数中继承<code>prototype</code>。同样，在使用<code>instanceof</code>运算符时，绑定构造函数和未绑定构造函数并无两样。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'s'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">s.log = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'v'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">v.log = s.log.bind(v);</span><br><span class="line"></span><br><span class="line">s.log() <span class="comment">// =&gt; s</span></span><br><span class="line">v.log() <span class="comment">// =&gt; v</span></span><br></pre></td></tr></table></figure><h1 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h1><p>ES规范规定函数的<code>toString()</code>返回一个字符串，这个字符串和函数声明语句的语法相关。但实际上，大多数JS实现都会返回函数的完整源码；内置函数往往会返回一个<code>[native code]</code>的字符串作为函数体。</p><h1 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function()构造函数"></a>Function()构造函数</h1><p>我们可以通过<code>Function()</code>构造函数来定义函数，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'return x*y;'</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="comment">// var f = function(x, y) &#123; return x*y; &#125;</span></span><br></pre></td></tr></table></figure><p><code>Function()</code>构造函数可以传入任意数量的字符串实参，最后一个实参表示函数体；它可以包含任意的JS语句，每两条语句之间用分号分隔。传入构造函数的其他所有的实参字符串是指定函数的形参名字的字符串。如果定义的函数不含任何参数，只须给构造函数简单地传入一个字符串，即函数体就可以了。</p><p>注意，<code>Function()</code>构造函数创建的是一个匿名函数，并没有实际的参数被传入来代表函数名。</p><p>关于<code>Function()</code>构造函数有几点需要特别注意：</p><ul><li><code>Function()</code>构造函数允许在JS在运行时动态地创建并编译函数</li><li>每次调用<code>Function()</code>构造函数都会解析函数体，并创建新的函数对象。如果在一个循环或者多次调用的函数中执行这个构造函数，执行效率会收到影响；相比而言，循环中的嵌套函数和函数定义表达式则不会每次执行时都重新编译。</li><li><code>Function()</code>构造函数所创建的函数并不是使用词法作用域，相反，函数体代码的编译总是会在全局作用域下执行，如下所示：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constructFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">'local'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'return scope;'</span>); <span class="comment">// 无法捕捉局部作用域</span></span><br><span class="line">&#125;</span><br><span class="line">constructFunction()(); <span class="comment">// =&gt; global</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="可调用的对象"><a href="#可调用的对象" class="headerlink" title="可调用的对象"></a>可调用的对象</h1><p><strong>可调用的对象</strong>是一个对象，可以在函数调用表达式中调用这个对象。所有的函数都是可以调用的，但并非所有的可调用对象都是函数。<br>比较常见的可调用对象是<code>RegExp</code>对象，可以直接调用<code>RegExp</code>对象，这比调用它的<code>exec()</code>方法更快捷一些。但代买中最好不要对可调用的<code>RegExp</code>对象有太多依赖，这恶搞特性可能在不久就会被废弃。<br>如果想检测一个对象是否是真正的函数对象（并具有函数方法），可以使用如下代码来检测：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Function]'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 函数与闭包]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/7-7-function-closure/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JS采用词法作用域，即函数的执行依赖于变量作用域，<strong>这个作用域是在函数定义时决定的，而不是函数调用时决定的</strong>。为了实现这种词法作用域，JS函数对象的内部状态不仅包括函数的代码逻辑，还必须引用当前的作用域链。函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性被称为<strong>闭包</strong>。</p><p>从技术角度说，所有JS函数都是闭包：它们都是对象，它们都关联到作用域链上。定义大多数函数时的作用域链在调用函数时依然有效，当调用函数时闭包所指向的作用域链和定义函数时的作用域链不是同一作用域链时，事情就变得有点奇妙了。特别是一个函数嵌套了另一个函数时，外部函数将嵌套的函数对象作为返回值返回时往往发生了你不知道的事。</p><h1 id="词法作用域规则"><a href="#词法作用域规则" class="headerlink" title="词法作用域规则"></a>词法作用域规则</h1><p>理解闭包需要理解嵌套函数的词法作用域规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">'local scope'</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> scope; &#125;</span><br><span class="line">    <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope(); <span class="comment">// =&gt; local scope</span></span><br></pre></td></tr></table></figure><p>上面的代码比较容易理解，那么下面这段的结果会是什么呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">'global scope'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">'local scope'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> scope; &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()(); <span class="comment">// =&gt; ???</span></span><br></pre></td></tr></table></figure><p>此时，就需要JS的词法作用域了：JS函数的执行用到了作用域链，这个作用域链是<strong>函数定义的时候创建的</strong>。嵌套的函数<code>f()</code>定义在这个作用域里，其中的变量<code>scope</code><strong>一定是局部变量</strong>，不管何时何地执行函数<code>f()</code>，这种绑定在执行<code>f()</code>时依然有效。所以上面代码的返回结果是<code>local scope</code>，而不是<code>global scope</code>。</p><p>就是说，<strong>闭包可以捕捉到局部变量和参数，并一直保存下来</strong>，看起来像这些变量绑定到了在其中定义它们的外部函数。</p><h1 id="变量私有化"><a href="#变量私有化" class="headerlink" title="变量私有化"></a>变量私有化</h1><p>闭包可以将局部变量变成<strong>私有状态</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化函数对象的计数器属性</span></span><br><span class="line"><span class="comment">// 由于函数声明被提前了，因此这里是可以在函数声明之前给它的成员赋值的</span></span><br><span class="line">uniqueInteger.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次调用这个函数都会返回一个不同的整数</span></span><br><span class="line"><span class="comment">// 它使用一个属性来记住下一次将要返回的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueInteger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uniqueInteger.counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中<code>uniqueInteger</code>希望每次都返回一个不同的整数，但却将<code>uniqueInteger.count</code>暴露出来，再来看看这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueInteger = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> counter = <span class="number">0</span>; <span class="comment">// 匿名函数的私有状态</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> counter++; &#125;</span><br><span class="line">                    &#125;());</span><br></pre></td></tr></table></figure><p>上述代码中，将一个函数的返回值赋值给了变量<code>uniqueInteger</code>。嵌套函数是可以访问作用域内的变量的，并且可以访问外部函数中定义的<code>counter</code>变量。当外部函数返回之后，其他代码都无法再访问<code>counter</code>变量，只有内部的函数才能访问到它，如此便实现了变量私有化。</p><p>像<code>counter</code>一样的私有变量不是只能被用在一个单独的闭包中，在同一个外部函数内定义的多个嵌套函数都可以访问到它，这多个嵌套函数都共享一个作用域链：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> n++; &#125;,</span><br><span class="line">        reset: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; n = <span class="number">0</span>;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = counter();</span><br><span class="line"><span class="keyword">var</span> d = counter();</span><br><span class="line">c.count(); <span class="comment">// =&gt; 0</span></span><br><span class="line">d.count(); <span class="comment">// =&gt; 0</span></span><br><span class="line">c.reset(); <span class="comment">// reset() 和 count() 方法共享状态</span></span><br><span class="line">c.count(); <span class="comment">// =&gt; 0</span></span><br><span class="line">d.count(); <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure><p>我们再看看闭包与存取器属性一起使用的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> count() &#123; <span class="keyword">return</span> n++; &#125;</span><br><span class="line">        <span class="keyword">set</span> count(m) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m &gt;= n) n = m;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'count can only be set to a larger value'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = counter(<span class="number">1000</span>);</span><br><span class="line">c.count <span class="comment">// =&gt; 1000</span></span><br><span class="line">c.count <span class="comment">// =&gt; 1001</span></span><br><span class="line">c.count = <span class="number">2000</span>;</span><br><span class="line">c.count <span class="comment">// =&gt; 2000</span></span><br><span class="line">c,count = <span class="number">2000</span>;  <span class="comment">// =&gt; Error</span></span><br></pre></td></tr></table></figure><p>注意，上述的<code>counter</code>并没有声明局部变量，而只是使用参数<code>n</code>来保存私有状态，属性存取器方法可以访问<code>n</code>。</p><p>现在再来一个使用闭包技术来共享私有状态的通用做法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法给对象`o`增加属性存储器方法</span></span><br><span class="line"><span class="comment">// 方法名称为get&lt;name&gt;和set&lt;name&gt;</span></span><br><span class="line"><span class="comment">// 如果提供了判定函数，setter方法就会用它来检测参数合法性，然后在存储它</span></span><br><span class="line"><span class="comment">// 如果判断函数返回false，setter方法将抛出一个异常</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPrivateProperty</span>(<span class="params">o, name, predicate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value; <span class="comment">// 这是一个属性值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `getter`方法简单地将其返回</span></span><br><span class="line">    o[<span class="string">'get'</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">    o[<span class="string">'set'</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate &amp;&amp; !predicate(v))</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'set'</span> + name + <span class="string">': invalid value '</span> + v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            value = v;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">addPrivateProperty(o, <span class="string">'Name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> x == <span class="string">'string'</span>; &#125;);</span><br><span class="line"></span><br><span class="line">o.setName(<span class="string">'Frank'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(o.getName());</span><br><span class="line">o.setName(o); <span class="comment">// =&gt; Error</span></span><br></pre></td></tr></table></figure><p>上述函数<code>addPrivateProperty</code>的特殊之处在于<code>getter</code>和<code>setter</code>函数所操作的属性值并操作的属性值并没有存储在对象<code>o</code>中，相反这些值都是存储在函数中的局部变量中。<code>getter</code>和<code>setter</code>方法同样是局部函数，</p><h1 id="闭包间共享变量"><a href="#闭包间共享变量" class="headerlink" title="闭包间共享变量"></a>闭包间共享变量</h1><p>但我们<strong>在一个作用域中定义多个闭包时，这些闭包将共享同样的私有变量或变量</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// right_constfun.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constfun</span>(<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> v; &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个数组用来存储常数函数</span></span><br><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span> ; i++) funcs[i] = constfun(i);</span><br><span class="line"></span><br><span class="line">funcs[<span class="number">5</span>](); <span class="comment">// =&gt; 5</span></span><br></pre></td></tr></table></figure><p>上面代码是用来定义一个返回常数的函数，当我们书写出下列代码时就会出现一些微妙的bug了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constfuncs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> funcs = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        funcs[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> i; &#125;;</span><br><span class="line">    <span class="keyword">return</span> funcs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcs = constfuncs();</span><br><span class="line">funcs[<span class="number">5</span>](); <span class="comment">// =&gt; 10</span></span><br></pre></td></tr></table></figure><p><strong>关联到闭包的作用域链是“活动的”</strong>。嵌套的函数不会将作用域内的私有成员赋值一份，也不会对所绑定的变量生成静态快照。</p><p>同时，<code>this</code>是JS的关键字，而不是变量。每一个函数调用都包含一个<code>this</code>值，如果闭包在外部函数里是无法访问<code>this</code>的，除非我们将<code>this</code>存储到一个变量上。与之类似的有<code>arguments</code>：<code>arguments</code>并不是一个关键字，但在每次调用函数时都会自动声明它，由于闭包具有自己所绑定的<code>arguments</code>，因此闭包内无法直接访问外部函数的参数数组，除非外部函数将参数数组保存到另外一个变量中。</p><p><em>注意</em>：严格说，闭包中是可以使用<code>this</code>的，但这个<code>this</code>和当初定义函数时的<code>this</code>不是同一个，即便是同一个<code>this</code>，<code>this</code>的值是虽则调用栈的变化而变化的，而在闭包里的逻辑说取到的<code>this</code>的值也是不确定的。所以为了避免这个诡异恶心的错误，还是避免在闭包中使用<code>this</code>吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> outerArguments = <span class="built_in">arguments</span>;</span><br></pre></td></tr></table></figure><h1 id="实现闭包"><a href="#实现闭包" class="headerlink" title="实现闭包"></a>实现闭包</h1><p>我们将作用域链描述为一个对象列表，而不是绑定的栈。每次调用JS函数时，都会为之创建一个新的对象用来保存局部变量，把这个对象添加至作用域链中。当函数返回时，就从作用域链中将这个绑定变量的对象删除。<em>如果不存在嵌套的函数，也没有其他引用指向这个绑定对象，它就会被当作垃圾回收掉。</em>如果定义了嵌套的函数，每个嵌套的函数都各自对应了一个作用域链，并且这个作用域链指向一个变量绑定对象。但如果这些嵌套的函数对象在外部对象中保存下来，那么它们也就会和所指向的变量绑定对象一样当作垃圾回收掉。但是如果这个函数定义了嵌套的函数，并将它作为返回值返回或者存储在某处的属性中，这时就会有一个外部引用指向这个嵌套的函数，它就不会被当作垃圾回收，并且它所指向的变量绑定对象也不会被当作垃圾回收。</p><p>所以我们要注意闭包的使用，防止出现<strong>循环引用</strong>，避免内存泄漏。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 作为命名空间的函数]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/7-6-function-asnamespace/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在JS中是无法声明只在一个代码块内可见的变量的，因此我们可以定义一个函数作为临时的命名空间，从而避免全局命名空间。我们先介绍下JS中的命名空间，即作用域。</p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>一个变量的作用域就是程序源代码中定义这个变量的区域。</p><h2 id="函数作用域和声明提前"><a href="#函数作用域和声明提前" class="headerlink" title="函数作用域和声明提前"></a>函数作用域和声明提前</h2><p>在类C语言中，花括号内的每一块代码都具有各自的作用域，称为<strong>块级作用域</strong>。但在JS中没有块级作用域。取而代之，JS使用了<strong>函数作用域</strong>：变量在声明它们的函数体以及这个函数体嵌套的任意函数体内都是有定义的。<br>JS的函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。这个特性被非正式地称为<strong>声明提前</strong>（hoisting），即所有JS函数里声明的所有变量（但不涉及赋值）都被“提前”至函数体的顶部。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example one =&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = o;  <span class="comment">// i 在整个函数体内均有定义</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> o === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> j = o;  <span class="comment">// j在函数体内都有定义，不仅限于该代码块内</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;<span class="number">10</span>; ++k) &#123; <span class="comment">// k在函数体内都有定义，不仅限于该循环块内</span></span><br><span class="line">            <span class="built_in">console</span>.log(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(k); <span class="comment">// k已经定义 =&gt; 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(j); <span class="comment">// j已经定义，但可能未初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example two =&gt;</span></span><br><span class="line"><span class="keyword">var</span> scope = <span class="string">'global'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(scope); <span class="comment">// =&gt; undefined</span></span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">'local'</span>; <span class="comment">// 变量在这里赋值，但变量本身在函数体内任何地方都是有定义的</span></span><br><span class="line">    <span class="built_in">console</span>.log(scope); <span class="comment">// =&gt; local</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于函数作用域的特性，局部变量在整个函数体内始终都是有定义的，即在函数体内局部变量隐藏了同名全局变量。虽然如此，只有在程序执行到<code>var</code>语句声明局部变量时，局部变量才被真正地赋值。因此上例中的<code>example two</code>等价于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope;</span><br><span class="line">    <span class="built_in">console</span>.log(scope); <span class="comment">// =&gt; undefined</span></span><br><span class="line">    scope = <span class="string">'local'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(scope); <span class="comment">// =&gt; local</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多详情可以参阅<a href="http://wrran.com/blog/2016/11/11/learn-js-1-hoisting/" target="_blank" rel="noopener">JavaScript查缺补漏 - 变量提升</a>。</p><h2 id="作为属性的变量"><a href="#作为属性的变量" class="headerlink" title="作为属性的变量"></a>作为属性的变量</h2><p>当声明一个JS全局变量时，实际上是定义了全局对象的一个属性；当使用<code>var</code>声明一个变量时，创建的这个变量是不可配置的，即无法通过<code>delete</code>运算符删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非严格模式下</span></span><br><span class="line"><span class="keyword">var</span> truevar = <span class="number">1</span>; <span class="comment">// 不可删除</span></span><br><span class="line">fakevar = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">this</span>.fakevar2 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">delete</span> truevar; <span class="comment">// =&gt; false: 变量并没有被删除</span></span><br><span class="line"><span class="keyword">delete</span> fakevar; <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>.fakevar2;</span><br></pre></td></tr></table></figure><p><strong>JS全局变量是全局对象的属性</strong>，这是ES规范强制规定的。对于局部变量则没有该规定。但我们可以将局部变量当作跟函数调用相关的某个对象的属性，在ES3中被称为<strong>“调用对象”</strong>，在ES5中被称为<strong>“声明上下文对象”</strong>。JS允许使用<code>this</code>来引用全局变量，但没有办法可以引用局部变量中存放的对象。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>JS是基于词法作用域的语言：通过阅读包含变量定义在内的代码就可以得知变量的作用域。全局变量在程序中始终都有定义，局部变量在声明它的函数体以及其所嵌套的函数内始终是有定义的。<br>每一个JS代码（全局代码或函数）都有一个与之相关联的作用域链（scope chain）。这个作用域链是一个对象列表或者链表，这组对象定义了这段代码“作用域中”的变量。当JS需要查找变量<code>x</code>时（变量解析），它会从链中的第一个对象开始查找，如果这个对象有一个名为<code>x</code>的属性，则会直接使用这个属性的值；如果第二个对象没有，则查找下一个对象，以此类推。如果作用域链上没有任何一个对象含有属性<code>x</code>，则认为这段代码上不存在变量<code>x</code>，并最终抛出一个引用（ReferenceError）错误。</p><p>在JS的最顶层代码（即不包含在任何函数定义内的代码）中，作用域由一个全局对象组成。在不包含嵌套的函数体内，作用域上有两个对象，第一个是定义函数参数与局部变量的对象，第二个就是全局对象。在一个嵌套的函数内，作用域链上至少有三个对象。</p><p>当定义一个函数时，它实际上保存一个作用域链；当调用这个函数时，它创建一个新的对象来存储它的局部变量，并将这个对象添加至保存的那个作用域链上，同时创建一个新的更长的表示作用调用作用域的链。对于嵌套函数而言，在每次调用外部函数时，内部函数又将被重新定义一遍。因为每次调用外部函数时，作用域链都不相同。内部函数在每次定义时都有微妙的差别，即在每次调用外部函数时，内部函数的代码都是相同的，而且关联这段代码的作用域链也不相同。</p><p>理解作用域链将对闭包的概念有所帮助。</p><h1 id="匿名函数作为命名空间"><a href="#匿名函数作为命名空间" class="headerlink" title="匿名函数作为命名空间"></a>匿名函数作为命名空间</h1><p>为了避免全局变量带来的混乱，可以将一段代码的作用域限制在某个函数范围。这样全局变量就变成了函数内的局部变量，然后执行这个函数，就可以达到在全局作用域下执行代码的目的了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mymodule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 模块代码</span></span><br><span class="line">&#125;</span><br><span class="line">mymodule(); <span class="comment">// 调用方法，进行相关操作</span></span><br></pre></td></tr></table></figure><p>也有更简洁的写法，即直接定义一个匿名函数，并直接调用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更简洁的写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 匿名函数</span></span><br><span class="line">    <span class="comment">// 模块代码</span></span><br><span class="line">&#125;()); <span class="comment">// 结束函数</span></span><br></pre></td></tr></table></figure><p>上面是一种惯用法，其中关键字<code>function</code>后面的左圆括号是必需的，它让JS解释器将这段代码解析成函数定义表达式，而不是函数声明语句。</p><p>下面返回一个<code>extend()</code>代码根据是否出现一个IE bug，来决定返回不同版本的函数。同时，该匿名函数命名空间也隐藏了一组属性名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> extend = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 将这个函数的返回值赋值给extend</span></span><br><span class="line">    <span class="comment">// 在修复它之间，检查是否存在bug</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> &#123;<span class="attr">toString</span>: <span class="literal">null</span>&#125;) &#123;</span><br><span class="line">        <span class="comment">// 如果代码执行到这里，则for/in循环会正确工作并返回</span></span><br><span class="line">        <span class="comment">// 一个简单版本的extend()函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (vai i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">var</span> source = <span class="built_in">arguments</span>[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> source) o[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果代码执行到这里，说明for/in循环不会枚举测试对象的toString属性</span></span><br><span class="line">    <span class="comment">// 因此返回另一个版本的extend()属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patched_extend</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> source = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="comment">// 复制所有的可枚举属性</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> source) o[prop] = source[prop];</span><br><span class="line">            <span class="comment">// 测试特殊属性</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; protoprops.length; j++) &#123;</span><br><span class="line">                prop = protoprops[j];</span><br><span class="line">                <span class="keyword">if</span> (source.hasOwnProperty(prop)) o[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个列表列出需要检查的特殊属性</span></span><br><span class="line">    <span class="comment">// 至于 patched_extend 为何可以引用该变量</span></span><br><span class="line">    <span class="comment">// 需要参阅 闭包 的相关知识</span></span><br><span class="line">    <span class="keyword">var</span> protoprops = [<span class="string">'toString'</span>, <span class="string">'valueOf'</span>, <span class="string">'constructor'</span>, <span class="string">'hasOwnProperty'</span>, </span><br><span class="line">                      <span class="string">'isPrototypeOf'</span>, <span class="string">'propertyIsEnumerable'</span>, <span class="string">'toLocaleString'</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 作为值的函数]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/7-5-function-asvalue/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在JS中函数也可以当作值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;</span><br></pre></td></tr></table></figure><p>这个定义创建一个新的函数对象，并将其赋值给变量<code>square</code>。函数的名字实际上是看不见的，<code>square</code>仅仅是变量的名字，这个变量指代函数对象；函数还可以赋值给其他的变量，并照常使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = square;</span><br><span class="line">square(<span class="number">4</span>); <span class="comment">// =&gt; 16</span></span><br><span class="line">s(<span class="number">4</span>); <span class="comment">// =&gt; 16</span></span><br></pre></td></tr></table></figure><p>当函数被赋值给对象的属性时，我们称它们为方法。函数也可以不带名字，直接赋值给数组元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;, <span class="number">20</span>];</span><br><span class="line">a[<span class="number">0</span>](a[<span class="number">1</span>]); <span class="comment">// =&gt; 400</span></span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一些简单的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x+y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substract</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x-y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x*y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x/y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上述函数传入，并调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">operate</span>(<span class="params">operator, operand1, operand2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> operator(operand1, operand2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; (2+3) + (4*5)</span></span><br><span class="line"><span class="keyword">var</span> i = operate(add, operate(add, <span class="number">2</span>, <span class="number">3</span>), operate(multiply, <span class="number">4</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><h1 id="自定义函数属性"><a href="#自定义函数属性" class="headerlink" title="自定义函数属性"></a>自定义函数属性</h1><p>JS中的函数并不是原始值，而是一种特殊的对象，即是说函数可以拥有属性。当函数需要一个“静态”变量时，就可以给函数定义属性，而不是定义全局变量；另外函数也可以使用自身的属性来缓存结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化函数对象的计数器属性</span></span><br><span class="line"><span class="comment">// 由于函数声明被提前了，因此这里是可以在函数声明之前给它的成员赋值的</span></span><br><span class="line">uniqueInteger.count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次调用这个函数都会返回一个不同的整数</span></span><br><span class="line"><span class="comment">// 它使用一个属性来记住下一次将要返回的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueInteger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uniqueInteger.counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算阶乘，并将结果缓存至函数的属性中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFinite</span>(n) &amp;&amp; n&gt;<span class="number">0</span> &amp;&amp; n == <span class="built_in">Math</span>.round(n)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(n <span class="keyword">in</span> factorial)) &#123; <span class="comment">// 如果没有缓存结果，计算结果并缓存之</span></span><br><span class="line">            factorial[n] = n * factorial(n<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> factorial[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line">factorial[<span class="number">1</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 函数的参数]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/7-4-function-params-arguments/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JS中的函数定义并未指定函数形参的类型，函数调用也未对传入的实参值做任何类型检查；JS函数调用甚至不检查传入的实参个数。本博文将讨论当调用函数时的实参个数和声明的形参个数不匹配时出现的状态，同样说明了如何显式测试函数实参的类型，以避免非法的实参传入函数。</p><h1 id="可选形参"><a href="#可选形参" class="headerlink" title="可选形参"></a>可选形参</h1><p>当调用函数时传入的实参比函数声明时指定的形参个数要少时，剩下的形参都将设置为<code>undefined</code>值。因此在调用函数时形参是否可选以及是否可以省略应当保持较好的适应性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将对象o中可枚举的属性名追加至数组a中，并返回这个数组a</span></span><br><span class="line"><span class="comment">// 如果省略a，则创建一个新数组并返回这个新数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPropertyNames</span>(<span class="params">o, <span class="regexp">/* optional */</span> a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="literal">undefined</span>) a = []; <span class="comment">// =&gt; a = a || [];</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> o) a.push(property);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注意</em>：当用这种可选实参来实现函数时，需要将可选实参放在实参列表的最后。</p><h1 id="可变长的实参列表"><a href="#可变长的实参列表" class="headerlink" title="可变长的实参列表"></a>可变长的实参列表</h1><p>当调用函数传入的实参个数超过函数定义的形参个数时，没有办法直接获得未命名值的引用。<strong>参数对象</strong>可以解决这个问题。在函数体内，标识符<code>arguments</code>是指向实参对象的引用，实参对象是一个类数组对象，可以通过数字下标来访问传入函数的实参值，而不用非要通过名字来得到实参。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 首先，验证传入实参的个数是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length !== <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'function f called with '</span> + <span class="built_in">arguments</span>.length + </span><br><span class="line">                        <span class="string">'arguments, but it expects 3 arguments.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 再执行函数的其他逻辑 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注意</em>：通常不必像这样检查实参个数，大多数情况下JS的默认行为是可以满足的：<strong>省略的实参都将是<code>undefined</code>，多出的实参会被自动省略</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以操作任意数量的实参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params"><span class="regexp">/* ... */</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="built_in">Number</span>.NEGATIVE_INFINITY;</span><br><span class="line">    <span class="comment">// 遍历实参，查找并记住最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; ++i)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] &gt; max) max = <span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数对象<code>arguments</code>最适合的应用场景是在这样一类函数中，这类函数包含固定个数的命名和必需参数，以及随后个数补丁的可选实参。另外，<code>arguments</code>只是类数组对象，并不是正真的数组。<br><code>arguments</code>包含一个非同寻常的特性。在非严格模式下，当一个函数包含若干形参，参数对象的数组元素是函数形参所对应实参的别名，参数对象中以数字索引，并且<strong>形参名称可以认为是相同变量的不同命名</strong>。通过实参名字来修改实参值的话，通过<code>arguments[]</code>数组可以获取到更改后的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x); <span class="comment">// =&gt; null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也验证了实参对象不是一个普通的数组，否则第二条<code>console.log(x)</code>输出结果不会是<code>null</code>。</p><p>在ES5中，参数对象的这一特性被溢出。在非严格模式下，函数里的<code>arguments</code>仅仅是一个标识符；而在严格模式下，它变成了保留字，故此严格模式下的函数无法使用<code>arguments</code>作为形参名或者局部变量名，也不能对<code>arguments</code>赋值。</p><p>除了数组元素外，参数对象还定义了<code>callee</code>和<code>callee</code>属性。在ES5的严格模式下，对这两个属性的读写操作都会产生一个类型错误；而在非严格模式下，ES标准规定<code>callee</code>属性指代<strong>当前正在执行的函数</strong>，<code>caller</code>则是发多数环境都实现的非标准属性，它用来指代<strong>正在执行这个函数的函数</strong>。通过<code>caller</code>属性可以访问调用栈。<code>callee</code>属性在某些时候也很有用，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="built_in">arguments</span>.callee(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="将对象属性用作实参"><a href="#将对象属性用作实参" class="headerlink" title="将对象属性用作实参"></a>将对象属性用作实参</h1><p>当函数的形参个数过多时，参数的顺序就成为了一个负担。我们可以通过名/值对的形式来传入参数，这样就使得参数的顺序无关紧要了。为了实现这种风格的方法调用，定义函数时，传入的实参都写入到一个单独的对象之中，在调用时传入一个对象，对象中的名/值对是真正需要的实参数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将原始数组的length元素复制至目标数组</span></span><br><span class="line"><span class="comment">// 参数有点多，记住不容易</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arraycopy</span>(<span class="params"><span class="regexp">/* array */</span> from, <span class="regexp">/* index */</span> from_start,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="regexp">/* array */</span> to, <span class="regexp">/* index */</span> to_start,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="regexp">/* integer */</span> length</span>)</span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">/* 函数体 */</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不必再记住参数顺序</span></span><br><span class="line"><span class="comment">// 同时也设定了部分参数的默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">easycopy</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    arraycopy(args.from,</span><br><span class="line">              args.from_start || <span class="number">0</span>,</span><br><span class="line">              args.to,</span><br><span class="line">              args.to_start || <span class="number">0</span>,</span><br><span class="line">              args.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line">easycopy(&#123; <span class="attr">from</span>: a, <span class="attr">to</span>: b, <span class="attr">length</span>: <span class="number">4</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="实参类型"><a href="#实参类型" class="headerlink" title="实参类型"></a>实参类型</h1><p>JS作为一种弱类型语言，在函数调用时并没有对传入的实参进行类型检查，这可能导致一些错误。<br>我们可以通过如下方式来规避这一风险：</p><ul><li>在函数前进行详尽的类型检查，这有点因噎废食</li><li>使用规范的方法，生成一些标注类型的注释文档</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 函数定义]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/7-2-function-create/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>函数使用<code>function</code>关键字来定义，它可以用在函数定义表达式或函数声明语句中。</p><h1 id="函数定义表达式"><a href="#函数定义表达式" class="headerlink" title="函数定义表达式"></a>函数定义表达式</h1><p>函数定义表达式定义一个JS函数。表达式的值是这个新定义的函数。可以类比成“函数直接量”。一个典型的函数定义表达式包含关键字<code>function</code>，跟随其后的是一对圆括号，括号内是一个以逗号分隔的列表，列表内还有0个或者多个标识符（参数名），然后再跟随一个由花括号包裹起来的JS代码（函数体）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;</span><br></pre></td></tr></table></figure><p>函数定义表达式同样可以包含函数的名字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(square.name); <span class="comment">// =&gt; square</span></span><br><span class="line">square = <span class="function"><span class="keyword">function</span> <span class="title">funname</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x*x; &#125;</span><br><span class="line"><span class="built_in">console</span>.log(square.name); <span class="comment">// =&gt; funname</span></span><br></pre></td></tr></table></figure><h1 id="函数声明语句"><a href="#函数声明语句" class="headerlink" title="函数声明语句"></a>函数声明语句</h1><p>关键字<code>function</code>用来定义函数。函数定义也可以写成语句的形式，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x+<span class="number">1</span>; &#125; <span class="comment">// 将表达式赋值给一个变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x+<span class="number">1</span>; &#125; <span class="comment">// 含有变量名的语句</span></span><br></pre></td></tr></table></figure><p>函数声明语句的语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcname</span>(<span class="params">[arg1 [, arg2 [..., argn]]]</span>) </span>&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>funcname</code>是要声明的函数的名称的标识符；函数名之后的圆括号中是参数列表，参数之间用逗号分隔。当调用函数时，这些标识符则指代传入函数的实参。函数体是由JS语句组成的，语句的数量不限，且用花括号括起来。</p><p>在定义函数时，并不执行函数体内的语句，它和调用函数时待执行的新函数对象相关联。</p><p>函数声明语句通常出现在JS代码的最顶层，也可以嵌套在其他函数体内。但<strong>在嵌套时，函数声明只能出现在所嵌套函数的顶部</strong>，就是说，函数定义不能出现在<code>if</code>语句，<code>while</code>循环或者其他任何语句中，正是由于函数声明位置的这种限制，ES规范才没有将函数声明归类为真正的语句。有一些JS实现的确允许在出现语句的地方都可以进行函数声明，但是不同的实现在细节处理上可能有很大差别，因此将函数声明放在其他的语句内的做法并不具备<strong>可移植性</strong>。<br>更具体的说，函数声明语句可以出现在全局代码里，或者内嵌在其他函数中，但它们不能出现在循环、条件判断、或者try/catch/finally以及with语句中。此限制仅适用于以语句声明形式定义的函数，函数定义表达式可以出现在JS代码中的任何地方。</p><h1 id="函数声明语句-amp-函数定义表达式的差别"><a href="#函数声明语句-amp-函数定义表达式的差别" class="headerlink" title="函数声明语句 &amp; 函数定义表达式的差别"></a>函数声明语句 &amp; 函数定义表达式的差别</h1><p>尽管函数声明语句和函数定义表达式都包含相同的函数名，但两者并不相同。两种方式都创建了新的函数对象，但<strong>函数声明语句中的函数名是一个变量名</strong>，变量名指向函数对象。和通过<code>var</code>声明变量一样，<strong>函数定义语句中的函数被显式地“提前”到了脚本或者函数的顶部。因此它们在整个脚本和函数内都是可见的</strong>。使用<code>var</code>的话，只有变量声明提前了，而变量的初始化代码仍然在原来的位置。（可参阅<a href="http://wrran.com/blog/2016/11/11/learn-js-1-hoisting/" target="_blank" rel="noopener">JavaScript查缺补漏 - 变量提升</a>）然而使用函数声明语句的话，函数名称和函数体均提前：脚本中的所有函数和函数中所有嵌套的函数都会在当前上下文中其他代码之前声明。也就是说，<strong>可以在声明一个JS函数之前调用它</strong>。<br>和<code>var</code>语句一样，函数声明语句创建的变量也是无法删除的。但这些变量不是只读的，变量值可以重写。</p><p>以表达式方式定义的函数，函数的名称是可选的。<strong>一条函数声明语句实际上声明了一个变量，并把一个函数对象赋值给了它</strong>。相对而言，定义函数表达式时并没有声明一个变量。函数可以命名，这样它才能使用这个名称来指代自己。<strong>如果一个函数定义表达式包含名称，函数的局部作用域将会包含一个绑定到函数对象的名称</strong>，如上文中在函数<code>square</code>的局部作用域中函数被绑定到<code>sss</code>上。通常而言，以表达式方式定义函数时都不需要名称，这会使得定义它们的代码更加紧凑；函数定义表达式特别适合用来定义那些只会用到一次的函数。<br>函数声明语句“被提前”到外部脚本或外部函数作用域的顶部，所以以这种方式声明的函数，可以被在它定义之前出现的代码所调用。不过，以表达式定义的函数就不同了，为了调用一个函数，必须要能引用它。故此以表达式方式定义的函数在定义之前无法被调用。</p><h1 id="函数的组成"><a href="#函数的组成" class="headerlink" title="函数的组成"></a>函数的组成</h1><p>函数定义都从<code>function</code>关键字开始，其后跟随的组成部分有：</p><ul><li>函数名称标识符：函数名称是函数声明语句必需的部分，它的用途就像变量名，新定义的函数对象会赋值给这个变量。对函数定义表达式来说，这个名字是可以选的：如果存在，该名字只存在与函数体中，并指代该函数对象本身。</li><li>一对圆括号：其中包含0个或者多个用逗号分隔开的标识符组成的列表。这些标识符是函数的形参名称，它们就像函数体中的局部变量一样。</li><li>一对花括号：其中包含0条或者多条JS语句。这些语句构成了函数体：一旦调用函数，就会执行这些语句。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> square = <span class="function"><span class="keyword">function</span> <span class="title">sss</span>(<span class="params">x</span>) </span>&#123; <span class="built_in">console</span>.log(sss.name); <span class="keyword">return</span> x*x; &#125;;</span><br><span class="line">square(<span class="number">2</span>); <span class="comment">// =&gt; sss 2</span></span><br></pre></td></tr></table></figure><p><em>注意</em>：当函数体中不包含<code>return</code>语句时，它将只执行函数体中的每条语句，并返回<code>undefined</code>值给调用者。</p><h1 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h1><p>在JS中，函数可以嵌套在其他函数中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hypotenuse</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x; &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(square(a) + square(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要特别注意嵌套函数的变量作用域规则：<strong>它们可以访问嵌套它们（或多重嵌套）的函数的参数和变量</strong>。如上例中，<code>square</code>可以读写到外部函数<code>hypotenuse</code>定义的参数<code>a</code>和参数<code>b</code>。这为闭包提供了可能。</p><h1 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h1><p>在JS中，任意合法的JS标识符都可以用做一个函数的名称。命名时又要考虑到简洁性又要兼顾描述力。<br>函数名通常是动词或以动词为前缀的词组。至于函数名出现了多个词的时候，可以考虑用下划线连接，或者用小驼峰命名方式。另外，以<code>_</code>为前缀的函数名常用来表示内部函数或者私有函数。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - function概述]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/7-1-function-overview/</url>
      <content type="html"><![CDATA[<blockquote><p>When value can do something, you would …</p></blockquote><a id="more"></a><h1 id="函数概述"><a href="#函数概述" class="headerlink" title="函数概述"></a>函数概述</h1><p>函数是一个只需要定义一次，就可以被多次执行或调用的JS代码。本博文将从如下几方面对函数进行介绍：</p><ul><li>函数定义</li><li>函数调用</li><li>函数的实参和形参</li><li>作为值使用的函数</li><li>作为命名空间的函数</li><li>闭包</li><li>函数属性、方法和构造函数</li><li>函数式编程</li></ul><p><em>注意</em>：参数有形参（parameter）和实参（argument）的区别，形参相当于函数中定义的变量，实参是在运行时的函数调用时传入的参数。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 对象的序列化 & 对象方法]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/6-6-object-serialization_general_method/</url>
      <content type="html"><![CDATA[<blockquote><p>Give an object. I will upset you.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>对象序列化是将对象的状态转换为字符串，也可以将字符串还原为对象。<br>另外，所有的JS对象都从<code>Object.prototype</code>继承属性（除了那些不通过原型显式创建的对象）。本博文也将介绍常用的方法</p><h1 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h1><p>ES5提供了内置函数<code>JSON.stringify()</code>和<code>JSON.parse()</code>用来序列化和还原JavaScript对象。这些方法都使用JSON作为数据交换格式。</p><p>JSON的语法是JS语法的子集，它并不能表示JS中的所有值。支持对象、数组、字符串、无穷大数字、true、false和null，并且它们可以序列化和还原。<code>NaN</code>、<code>Infinity</code>和<code>-Infinity</code>序列化的结果都是<code>null</code>，日期对象序列化的结果是<code>ISO</code>格式的日期字符串，但<code>JSON.parse()</code>依然保留它们的字符串形态，而不是还原为原始日期对象。函数、RegExp、Error对象和undefined值不能序列化和还原。<code>JSON.stringify()</code>只能序列化对象可枚举的自有属性。对于一个不能序列化的属性来说，在序列化后的输出字符串中会将这个属性值省略掉。<code>JSON.stringify()</code>和<code>JSON.parse()</code>都可以接收第二个可选参数，通过传入需要序列化或还原的属性列表来定制自定义的序列化或还原操作。</p><h1 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h1><p>下面将对定义在<code>Object.prototype</code>里的对象方法展开讲解。</p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p><code>toString()</code>没有参数，它将返回一个表示调用这个方法的对象值的字符串。在需要将对象转换为字符串的时候，JS都会调用这个方法。</p><h2 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString()"></a>toLocaleString()</h2><p>除了基本的<code>toString()</code>方法之外，对象都包含<code>toLocaleString()</code>方法，这个方法返回一个表示这个对象的本地化字符串。<code>Object</code>中默认的<code>toLocaleString()</code>方法并不做任何本地化自身的操作，只是调用<code>toString()</code>方法并返回对应值。Date和Number类对<code>toLocaleString()</code>方法进行了定制，可以用它对数字、日期和时间进行本地化的转换。Array的<code>toLocaleString()</code>方法与<code>toString()</code>方法类似，唯一的不同是每个数组元素都会调用<code>toLocaleString()</code>方法转换为字符串，而不是调用各自的<code>toString()</code>方法。</p><h2 id="toJSON"><a href="#toJSON" class="headerlink" title="toJSON()"></a>toJSON()</h2><p><code>Object.prototype</code>实际上没有定义<code>toJSON()</code>方法，但对于需要执行序列化的对象来说，<code>JSON.stringify()</code>方法会调用<code>toJSON()</code>方法。如果在待序列化的对象中存在这个方法，则调用它，返回值就是序列化的结果，而不是原始的对象。</p><h2 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h2><p><code>valueOf()</code>方法与<code>toString()</code>有点关联，它是在JS需要将对象转换为某种原始值而非字符串的时候被调用，尤其是转换为数字的时候。如果在需要使用原始值的上下文中使用了对象，JS就会自动调用这种方法。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 对象的三个属性]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/6-5-object-attribute/</url>
      <content type="html"><![CDATA[<blockquote><p>Give an object. I will upset you.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在JS中，每个对象都有与之相关的三个属性：</p><ul><li>原型（prototype）</li><li>类（class）</li><li>可扩展性（extensible attribute）</li></ul><h1 id="原型属性"><a href="#原型属性" class="headerlink" title="原型属性"></a>原型属性</h1><p>对象的原型属性是用来继承属性的。<br>原型属性是在实例对象创建之初就设置好的（可以参阅<a href="http://wrran.com/blog/2016/11/12/learn-js-6-2-object-create/" target="_blank" rel="noopener">JavaScript查缺补漏 - 创建对象</a>）：</p><ul><li>通过对象直接量创建的对象使用<code>Object.prototype</code>作为它们的原型</li><li>通过<code>new</code>创建的对象使用构造函数的<code>prototype</code>属性作为它们的原型</li><li>通过<code>Object.create()</code>创建的对象使用第一个参数（也可以是<code>null</code>）作为它们的原型</li></ul><p>在ES5中，将对象作为参数传入<code>Object.getPrototypeOf()</code>可以查询它的原型；在ES3中，则通过表达式<code>o.constructor.prototype</code>来检测一个对象的原型。通过<code>new</code>表达式创建的对象，通常继承一个<code>constructor</code>属性，这个属性指代创建这个对象的构造函数（但不可靠）。通过对象直接量或者<code>Object.create()</code>创建的对象包含一个名为<code>constructor</code>的属性，这个属性指代构造函数<code>Object()</code>。因此，<strong><code>constructor.prototype</code>才是对象直接量的真正的原型，而通过<code>Object.create()</code>创建的对象则往往不是这样</strong>。</p><p>要想检测一个对象是否是另一个对象的原型（或处于原型链中），可以使用<code>isPrototypeOf()</code>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o = <span class="built_in">Object</span>.create(p);</span><br><span class="line">p.isPrototypeOf(o);  <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.isPrototypeOf(o); <span class="comment">// 间接继承 =&gt; true</span></span><br></pre></td></tr></table></figure><p><em>注意</em>：在某些JS实现中，暴露了一个<code>__proto__</code>的属性，用来直接查询/设置对象的原型。不推荐使用<code>__proto__</code>。</p><h1 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h1><p>对象的类属性是一个字符串，用以表示对象的类型信息。ES5和ES3中都未提供设置这个属性的方法，且只有一种间接的方法可以查询它。</p><p>默认的<code>toString()</code>返回的字符串是<code>[Object classname]</code>。如此我们就可以通过抽取这些字符串中的字符来得出类的信息了。但当对象重写了<code>toString()</code>方法时，可以通过简介调用<code>Function</code>来解决：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以返回传递给它的任意对象的类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classof</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">'Null'</span>;</span><br><span class="line">    <span class="keyword">if</span> (o === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">'Undefined'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但应当注意到，对于自定义的类，<code>classof</code>都将返回<code>Object</code>，所以无法通过类属性来区分对象的类。</p><h1 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h1><p>对象的可扩展性用以表示<strong>是否可以给对象添加新属性</strong>。所有内置对象和自定义对象都是显式可扩展的，宿主对象的可扩展性是由JS引擎定义的。在ES5中，所有的内置对象和自定义对象都是可扩展的，除非将它们转换为不可扩展的。<br>可扩展属性的目的是将对象“锁定”，以避免外界的干扰。对象的可扩展性通常和属性的可配置性和可写性配合使用。</p><p>通过将对象传入到<code>Object.isExtensible()</code>来判断该对象是否可扩展的；如果想将对象转换为不可扩展的，需要调用<code>Object.preventExtensions()</code>，将待转换的对象作为参数传进去。但需要小心：一旦将对象转换为不可扩展的，就无法再将器转换为可扩展的了。同时需要注意<code>preventExtensions()</code>只影响到对象本身的可扩展性，如果给一个不可扩展的对象的原型添加属性，这个不可扩展的对象同样会继承这些新属性。</p><p><code>Object.seal()</code>和<code>Object.preventExtensions()</code>类似，除了能够将对象设置为不可扩展的，还可以将对象的所有自有属性都设置为不可配置的。就是说，不能给这个对象添加新属性，而且它已有的属性也不能配置或者删除，不过它已有的可写属性依然可以设置。对于那些已经封闭（sealed）起来的对象是不能解封的。可以使用<code>Object.isSealed()</code>来检测对象是否封闭。</p><p><code>Object.freeze()</code>则将冻结对象，除了将对象设置为不可扩展的和将其属性设置为不可配置的之外，还可以将它自有的所有数据属性设置为只读（但如果是一个存取器属性，则其<code>setter</code>不受影响，仍旧可以通过给属性赋值调用它们）。使用<code>Object.isFrozen()</code>可以检测对象是否冻结。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 属性杂项]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/6-4-property-miscell/</url>
      <content type="html"><![CDATA[<blockquote><p>Give an object. I will upset you.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本博文介绍JS中对象的属性的检测方法、可枚举性、可读可写性、特性。</p><h1 id="检测属性"><a href="#检测属性" class="headerlink" title="检测属性"></a>检测属性</h1><p>JS对象实质是就是属性的集合，我们可以通过如下方式来检测某个属性是否存在于某个对象中：</p><ul><li><code>in</code>运算符</li><li><code>hasOwnProperty()</code></li><li><code>propertyIsEnumerable()</code></li></ul><h2 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h2><p>in运算符的左侧是属性名（字符串），右侧是对象。如果对象的自有属性或继承属性中包含这个属性则返回<code>true</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="string">'x'</span> <span class="keyword">in</span> o; <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="string">'y'</span> <span class="keyword">in</span> o; <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> o; <span class="comment">// o继承toString的属性 =&gt; true</span></span><br></pre></td></tr></table></figure><p>除了使用<code>in</code>操作符，我们还可以使用<code>!==</code>判断一个属性是否是<code>undefined</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">o.x !== <span class="literal">undefined</span>; <span class="comment">// =&gt; true</span></span><br><span class="line">o.y !== <span class="literal">undefined</span>; <span class="comment">// =&gt; false</span></span><br><span class="line">o.toString !== <span class="literal">undefined</span>; <span class="comment">// o继承toString的属性 =&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h2><p>对象的<code>hasOwnProperty()</code>方法用来检测给定的名字是否是对象的<strong>自有属性</strong>。对于继承属性它将返回<code>false</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">o.hasOwnProperty(<span class="string">'x'</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'y'</span>); <span class="comment">// =&gt; false</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p><em>注意</em>：上述代码中使用<code>!==</code>而不是<code>!=</code>，<code>!==</code>可以区分<code>undefined</code>和<code>null</code>。</p><p>但还有一种场景只能使用<code>in</code>运算符而不能使用<code>!==</code>，<code>in</code>可以<strong>区分不存在的属性和存在但值为<code>undefined</code>的属性</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">o.x !== <span class="literal">undefined</span>; <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="string">'x'</span> <span class="keyword">in</span>  o; <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="propertyIsEnumerable-NaN"><a href="#propertyIsEnumerable-NaN" class="headerlink" title="propertyIsEnumerable"></a>propertyIsEnumerable</h2><p><code>propertyIsEnumerable()</code>是<code>hasOwnProperty()</code>的增强版，只有检测到<strong>自有属性且这个属性的可枚举性为<code>true</code></strong>时，它才返回<code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inherit() 返回了一个继承自原型对象p的属性的新对象</span></span><br><span class="line"><span class="comment">// 这里使用了ECMAScript 5中的Object.create()函数 （如果存在的话）</span></span><br><span class="line"><span class="comment">// 如果不存在Object.create()，则退化使用其他方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">true<span class="keyword">if</span> (<span class="built_in">Object</span>.create) <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);</span><br><span class="line">true<span class="keyword">var</span> t = <span class="keyword">typeof</span> p;</span><br><span class="line">true<span class="keyword">if</span> (t !== <span class="string">'object'</span> &amp;&amp; t !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">true<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 定义一个空构造函数</span></span><br><span class="line">truef.prototype = p; <span class="comment">// 将其原型属性设置为p</span></span><br><span class="line">true<span class="keyword">return</span> <span class="keyword">new</span> f();  <span class="comment">// 使用f()创建p的继承对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = inherit(&#123;<span class="attr">y</span>: <span class="number">2</span>&#125;);</span><br><span class="line">o.x = <span class="number">1</span>;</span><br><span class="line">o.propertyIsEnumerable(<span class="string">'x'</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">'y'</span>); <span class="comment">// y是继承来的 =&gt; false</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.propertyIsEnumerable(<span class="string">'toString'</span>); <span class="comment">// toString 不可枚举 =&gt; false</span></span><br></pre></td></tr></table></figure><h1 id="枚举属性"><a href="#枚举属性" class="headerlink" title="枚举属性"></a>枚举属性</h1><p>在JS中我们可以使用for/in循环遍历对象中所有可枚举的属性（包括自由属性和继承的属性）。<strong>对象继承的内置方法是不可枚举的</strong>，但在代码中给对象添加的属性都是可枚举的（可以通过下文介绍的方式，将其转换为不可枚举的）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">2</span>, <span class="attr">z</span>:<span class="number">3</span>&#125;;</span><br><span class="line">o.propertyIsEnumerable(<span class="string">'toString'</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="keyword">for</span> (p <span class="keyword">in</span> o)</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line"><span class="comment">// =&gt; 输出x、y和z，不会输出toString</span></span><br></pre></td></tr></table></figure><p>在ES5之前，这些新添加的方法是不能定义为不可枚举的。但我们可以通过如下的代码过滤for/in循环中返回的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (p <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!o.hasOwnProperty(p)) <span class="keyword">continue</span>; <span class="comment">// 跳过继承的属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (p <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> o[p] === <span class="string">'function'</span>) <span class="keyword">continue</span>; <span class="comment">// 跳过方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ES5中有两个用以<strong>枚举属性名称</strong>的函数，第一个是<code>Object.keys()</code>，它返回一个数组，这个数组由对象中<strong>可枚举的自有属性的名称</strong>组成；第二个枚举属性的函数是<code>Object.getOwnPropertyNames()</code>，它与<code>Object.keys()</code>类似，只是它返回对象的<strong>所有自有属性的名称</strong>，而不仅仅是可枚举的自有属性。在ES3中因为没有提供任何方法来获取对象的不可枚举属性，故无法实现类似的函数。</p><h1 id="属性getter和setter"><a href="#属性getter和setter" class="headerlink" title="属性getter和setter"></a>属性getter和setter</h1><p>对象属性是由名字、值和一组特性构成的。在ES5中，属性值可以用一个或两个方法代替，这两个方法是<code>getter</code>和<code>setter</code>。由<code>getter</code>和<code>setter</code>定义的属性称作“存取器属性”（accessor property），而将以前只是一个值的称为“数据属性”（data property）。</p><p>当程序查询存取器属性时，JS将会调用<code>getter</code>方法（无参数），这个方法的返回值就是属性存取表达式的值；当程序设置一个存取器属性的值时，JS调用<code>setter</code>方法，将赋值表达式右侧的值当作参数传入<code>setter</code>。从某种意义上讲，这个方法负责设置属性值，可以忽略<code>setter</code>方法的返回值。<br>和数据属性不同，存取器属性不具有可写性。如果属性同时具有<code>getter</code>和<code>setter</code>方法，那么它是一个可读可写的属性；如果只有<code>getter</code>方法，那么它是一个只读属性；如果它只有<code>setter</code>方法，那么它是一个只写属性，读取只写属性总是返回<code>undefined</code>。</p><p>定义存取器属性最简单的方法是使用对象直接量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    data_prop: value, <span class="comment">// 数据属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存取器属性都是成对定义的函数</span></span><br><span class="line">    <span class="comment">// accessor_prop是属性的名称</span></span><br><span class="line">    <span class="keyword">get</span> accessor_prop() &#123; <span class="comment">/* 函数体 */</span>&#125;,</span><br><span class="line">    <span class="keyword">set</span> accessor_prop(value) &#123; <span class="comment">/* 函数体 */</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>存取器属性定义为一个或两个和属性同名的函数，这个函数定义没有使用<code>function</code>关键字，而是使用<code>get</code>或<code>set</code>。同时，也没有使用冒号将属性名和函数体分隔开来，但在函数体的结束有逗号分隔。</p><p>下面是使用存取器属性的示例，用来将直角坐标系转换为极坐标系：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">    <span class="comment">// 数据属性</span></span><br><span class="line">    <span class="comment">// 存储直角坐标系的信息</span></span><br><span class="line">    x: <span class="number">1.0</span>,</span><br><span class="line">    y: <span class="number">1.0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可读可写的存取器属性</span></span><br><span class="line">    <span class="comment">// 存储极坐标系的信息(r)</span></span><br><span class="line">    <span class="keyword">get</span> r() &#123; <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x*<span class="keyword">this</span>.x + <span class="keyword">this</span>.y*<span class="keyword">this</span>.y);&#125;,</span><br><span class="line">    <span class="keyword">set</span> r(value) &#123;</span><br><span class="line">        <span class="keyword">var</span> old = <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x*<span class="keyword">this</span>.x + <span class="keyword">this</span>.y*<span class="keyword">this</span>.y);</span><br><span class="line">        <span class="keyword">var</span> ratio = value/old;</span><br><span class="line">        <span class="keyword">this</span>.x *= ratio;</span><br><span class="line">        <span class="keyword">this</span>.y *= ratio;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只读存取器属性</span></span><br><span class="line">    <span class="comment">// 存储极坐标的信息(theta)</span></span><br><span class="line">    <span class="keyword">get</span> theta() &#123; <span class="keyword">return</span> <span class="built_in">Math</span>.atan2(<span class="keyword">this</span>.y, <span class="keyword">this</span>.x);&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>getter</code>和<code>setter</code>中<code>this</code>关键字的用法，JS把这些函数当作对象的方法来调用，即在函数体中的<code>this</code>指向表示这个点的对象。</p><p>和数据属性一样，存取器属性是<strong>可以继承</strong>的。<br>至于如何给一个已经存在的对象添加一个存取器属性，可参见 节<strong>属性的特性</strong>。</p><h1 id="属性的特性"><a href="#属性的特性" class="headerlink" title="属性的特性"></a>属性的特性</h1><p>在上文提到，属性除了名字和值之外，还有一些标识它们可写、可枚举和可配置的特性。在ES3中无法设置这些特性，所有通过ES3的程序创建的属性都是可写的、可枚举的和可配置的，且无法对这些特性进行修改。在ES5中，你将可以查询并设置这些属性特性。<br>属性特性的作用有：</p><ul><li>可以在给原型对象添加方法之后，将它们设置成不可枚举的，让他们看起来更像内置方法</li><li>可以通过给对象定义不能修改或删除的属性，借此锁定这个对象</li></ul><p>如果我们将存取器属性的<code>getter</code>和<code>setter</code>看成属性的特性，那么我们就可以认为一个属性包含一个名字和4个特性，分别是<strong>值（value）、可写性（writable）、可枚举性（enumerable）和可配置型（configurable）</strong>。</p><p><strong>存取器属性不具有值特性和可写性</strong>，它们的可写性是由<code>setter</code>方法存在与否决定的。因此，存取器属性的4个特性是<strong>可读性（get）、可写性（set）、可枚举性（enumerable）和可配置型（configurable）</strong>。</p><h2 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h2><p>为实现上述属性特性，在ES5中定义了一个名为“属性描述符”（property descriptor）的对象，这个对象代表上述的4个特性。且描述符对象的属性和它们所描述的属性特性是同名的。</p><ul><li>对于数据属性的描述符对象的属性分别是：<code>value</code>、<code>writable</code>、<code>enumerable</code>和<code>configurable</code></li><li>对于存取器属性的描述对象的属性分别是：<code>get</code>、<code>set</code>、<code>enumerable</code>和<code>configurable</code></li></ul><p>其中，<code>writable</code>、<code>enumerable</code>和<code>configurable</code>是布尔类型，<code>get</code>和<code>set</code>是函数值。</p><p>通过调用<code>Object.getOwnPropertyDescriptor()</code>可以获得某个对象特定属性的属性描述符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;, <span class="string">'x'</span>); <span class="comment">// =&gt; &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;<span class="keyword">get</span> x() &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;&#125;, <span class="string">'x'</span>); <span class="comment">// =&gt; &#123;get: function x()&#123;...&#125;, set: undefined, enumerable: true, configurable: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;&#125;, <span class="string">'x'</span>); <span class="comment">// 没有这个属性 =&gt; undefined</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;&#125;, <span class="string">'toString'</span>); <span class="comment">// 继承属性 =&gt; undefined</span></span><br></pre></td></tr></table></figure><p><em>注意</em>：<code>Object.getOwnPropertyDescriptor()</code>只能得到自有属性的描述符。要想获得继承属性的特性，需要遍历原型链。</p><p>要想设置属性特性，或者想让新建属性具有某种特性，可以调用<code>Object.defineProperty()</code>，传入要修改的对象、要创建的或者要修改的属性的名称以及属性描述符对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 添加一个不可枚举的数据属性`x`</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'x'</span>, </span><br><span class="line">                     &#123;</span><br><span class="line">                         value: <span class="number">1</span>,</span><br><span class="line">                         writable: <span class="literal">true</span>,</span><br><span class="line">                         enumerable: <span class="literal">false</span>,</span><br><span class="line">                         configurable: <span class="literal">true</span></span><br><span class="line">                     &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.x); <span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="built_in">Object</span>.keys(o);   <span class="comment">// =&gt; []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在对属性`x`做修改，让它变成只读</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'x'</span>, &#123; <span class="attr">writable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line"></span><br><span class="line">o.x = <span class="number">2</span>; <span class="comment">// =&gt; 操作失败但不报错，在严格模式下抛出类型异常</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.x); <span class="comment">// =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性依然是可以配置的</span></span><br><span class="line"><span class="comment">// 所以通过如下方法对它进行修改</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'x'</span>, &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.x); <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在将`x`从数据属性修改为存取器属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'x'</span>, &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.x); <span class="comment">// =&gt; 0</span></span><br></pre></td></tr></table></figure><p><em>注意</em>：传入<code>Object.defineProperty()</code>的属性描述符对象不必包含所有4个特性，对于新创建的属性来说，默认的特性值为<code>false</code>或<code>undefined</code>。对于修改的已有属性来说，默认的特性值没有做任何修改。并且<strong>这个方法要么修改已有属性要么新建自有属性，但不能修改继承的属性</strong>。</p><p>如果要同时修改或创建多个属性，可以使用<code>Object.defineProperties()</code>，第一个参数为要修改的对象，第二个参数是一个映射表，它包含了要新建或修改的属性的名称，以及它们的属性描述符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Object</span>.defineProperties(&#123;&#125;, &#123;</span><br><span class="line">    x: &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    y: &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    r: &#123;</span><br><span class="line">        <span class="keyword">get</span>: function() &#123; <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x*<span class="keyword">this</span>.x + <span class="keyword">this</span>.y*<span class="keyword">this</span>.y); &#125;,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>对于那些不允许创建或者修改的属性来说，如果用<code>Object.defineProperty</code>和<code>Object.defineProperties</code>对其操作就会抛出类型错误异常。</strong>如，给一个不可扩展的对象新增属性时。具体来说，当违反虾类规则时会抛出错误：</p><ul><li>如果对象是不可扩展的，则可以编辑已有的自有属性，但不能给它们添加新属性</li><li>如果属性是不可配置的，则不能修改它的可配置性和可枚举性</li><li>如果存取器属性是不可配置的，则不能修改其<code>getter</code>和<code>setter</code>方法，也不能将它转成数据属性</li><li>如果数据属性是不可配置的，则不能将它转换为存取器属性</li><li>如果数据属性的不可配置的，则不能将他的可写性从<code>false</code>修改为<code>true</code>，但可以从<code>true</code>修改为<code>false</code></li><li>如果数据属性是不可配置且不可写的，则不能修改它的值；然而可配置但不可写的属性的值可以修改（将它们先标记成可写的，修改值之后改会不可写）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给Object.prototype添加一个不可枚举的extend()方法</span></span><br><span class="line"><span class="comment"> * 这个方法继承调用它的对象，将作为参数传入的对象的属性一一复制</span></span><br><span class="line"><span class="comment"> * 除了值之外，也复制属性的所有特性，除非在目标对象中存在同名的属性</span></span><br><span class="line"><span class="comment"> * 参数对象的所有自有属性（包括不可枚举的属性）也会一一复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">'extend'</span>,</span><br><span class="line">                     &#123;</span><br><span class="line">                         writable: <span class="literal">true</span>,</span><br><span class="line">                         enumerable: <span class="literal">false</span>, <span class="comment">// 将其定义为不可枚举的</span></span><br><span class="line">                         configurable: <span class="literal">true</span>,</span><br><span class="line">                         value: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">                             <span class="comment">// 得到所有的自有属性，包括不可枚举属性</span></span><br><span class="line">                             <span class="keyword">var</span> names = <span class="built_in">Object</span>.getOwnPropertyNames(o);</span><br><span class="line">                             <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; ++i) &#123;</span><br><span class="line">                                 <span class="comment">// 属性已经存在，则跳过</span></span><br><span class="line">                                 <span class="keyword">if</span> (names[i] <span class="keyword">in</span> <span class="keyword">this</span>) <span class="keyword">continue</span>;</span><br><span class="line">                                 <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(o, names[i]);</span><br><span class="line">                                 <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, names[i], desc);</span><br><span class="line">                             &#125;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;);</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>在ES5标准被采纳前，已经有一些非标准方法被用来实现存取器属性的特性了。这些方法一共有4个，所有对象都拥有这些方法：</p><ul><li><code>__lookupGetter__()</code>和<code>__lookupSetter__()</code>用以返回一个命名属性的<code>getter</code>和<code>setter</code>方法</li><li><code>__defineGetter__()</code>和<code>__defineSetter__()</code>用以定义<code>getter</code>和<code>setter</code>方法</li></ul><p>我们也可以注意到，这些方法都是以两条下划线作为前缀、两条下划线作为后缀，以表明它们是非标准方法。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 属性的CRUD]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/6-3-property-crud/</url>
      <content type="html"><![CDATA[<blockquote><p>Give an object. I will upset you.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>该博文主要介绍JS中对象属性的增删改查（CRUD）。</p><h1 id="查"><a href="#查" class="headerlink" title="查"></a>查</h1><p>在JS中可以通过点（<code>.</code>）或方括号（<code>[]</code>）运算符来获取属性的值，运算符的左侧应当是一个<strong>返回对象的表达式</strong>。对于点（<code>.</code>）来说，右侧必须是一个<strong>以属性名称命名的简单标识符</strong>；对于方括号（<code>[]</code>）来说，方括号内必须是一个<strong>计算结果为字符串的表达式</strong>，这个字符串就是属性的名字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> author = book.author;</span><br><span class="line"><span class="keyword">var</span> title = book[<span class="string">'main title'</span>];</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在ES3中，点运算符后的标识符不能是保留字，如<code>o.for</code>或<code>o.class</code>将会报错，对于这种，我们必须使用方括号的形式来访问它，比如<code>o[&#39;for&#39;]</code>或者<code>o[&#39;class&#39;]</code>。在ES5中对此放宽了限制，可以在点运算符之后直接使用保留字。</p><h2 id="与-的差别"><a href="#与-的差别" class="headerlink" title=". 与 [] 的差别"></a>. 与 [] 的差别</h2><p>在某些场合下，通过方括号能实现一些功能，而通过点运算符不能实现。这主要在于字符串可以动态改变；而标识符是静态的，必须写死在程序中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addr = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    addr += customer[<span class="string">'address'</span> + i] + <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="增-amp-改"><a href="#增-amp-改" class="headerlink" title="增 &amp; 改"></a>增 &amp; 改</h1><p>和查询属性值的写法类似，对查找出来的属性进行赋值操作就可以修改相应的属性值，如果对一个不存在的属性进行赋值就相当于增加了这个属性值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">book.edition = <span class="number">6</span>; <span class="comment">// 增 </span></span><br><span class="line">book[<span class="string">'main title'</span>] = <span class="string">'ECMAScript'</span>; <span class="comment">// 改</span></span><br></pre></td></tr></table></figure><h1 id="删"><a href="#删" class="headerlink" title="删"></a>删</h1><p><code>delete</code>运算符可以删除对象的属性，它的操作数应到是一个<strong>属性访问表达式</strong>。实际上，<code>delete</code>只是让该属性不再引用相应的值，而不真的去删除。这可能导致<strong>内存泄露</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> book.author; <span class="comment">// 删除属性author</span></span><br><span class="line"><span class="comment">// 内存泄漏</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    p: &#123;</span><br><span class="line">        x: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a.p;</span><br><span class="line"><span class="keyword">delete</span> a.p;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// =&gt; x: 1</span></span><br></pre></td></tr></table></figure><p><code>delete</code>表达式删除成功或没有任何副作用（如，删除不存在的属性）时，它返回<code>true</code>；如果<code>delete</code>后不是一个属性访问表达式，<code>delete</code>同样返回<code>true</code>。<br><code>delete</code>不能删除那些可配置性（参阅<a href="http://wrran.com/blog/2016/11/12/learn-js-6-5-object-attribute/" target="_blank" rel="noopener">JavaScript查缺补漏 - 对象的三个属性</a>）为<code>false</code>的属性，但是可以删除不可扩展对象的可配置属性。<br>在严格模式（参阅<a href="http://wrran.com/blog/2016/11/11/learn-js-2-use-strict/" target="_blank" rel="noopener">JavaScript查缺补漏 - 严格模式</a>）下，删除一个不可配置属性会报一个类型错误；在非严格模式下，则会返回<code>false</code>。<br>在非严格模式下，删除全局对象的可配置属性时，可以省略对全局对象的引用，直接在<code>delete</code>操作符后跟随要删除的属性名即可；在严格模式下，<code>delete</code>后跟随一个非法的操作数，比如<code>x</code>，则会报一个语法错误，必须要显示指定对象及其属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非严格模式下</span></span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">1</span>; <span class="comment">// =&gt; 没有使用var，创建一个可配置的全局属性</span></span><br><span class="line"><span class="keyword">delete</span> x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 严格模式下</span></span><br><span class="line"><span class="keyword">delete</span> x; <span class="comment">// =&gt; 语法错误</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>.xl <span class="comment">// =&gt; 正常工作</span></span><br></pre></td></tr></table></figure><h1 id="继承对属性的影响"><a href="#继承对属性的影响" class="headerlink" title="继承对属性的影响"></a>继承对属性的影响</h1><p>跟继承扯上关系了，建议大家阅读[JavaScript查缺补漏の女娲补天 - 原型链]()。</p><p>JavaScript对象具有<strong>自有属性</strong>，也有一些属性是从原型对象继承而来的。<br>假设要查询对象<code>o</code>的属性<code>x</code>，如果<code>o</code>中不存在<code>x</code>，那么将会继续在<code>o</code>的原型对象中查询属性<code>x</code>。如果原型对象中也没有<code>x</code>，但这个原型对象也有原型，那么将继续在这个原型对象的原型上执行查询，直到找到<code>x</code>或者查找到一个原型是<code>null</code>的对象为止。<br>假设给对象<code>o</code>的属性<code>x</code>赋值，如果<code>o</code>中已经有属性<code>x</code>（这个属性不是继承来的），那么这个赋值操作只改变这个已有属性<code>x</code>的值。如果<code>o</code>中不存在属性<code>x</code>，那么赋值操作给<code>o</code>添加一个新属性<code>x</code>。如果之前<code>o</code>继承自属性<code>x</code>，那么这个继承的属性就被新创建的同名属性覆盖了。</p><p>属性赋值操作首先检查原型链，以此判断是否允许赋值操作。例如，如果<code>o</code>继承自一个只读属性<code>x</code>，那么赋值操作是不被允许的。如果允许赋值操作，它也总是<strong>在原始对象上创建属性</strong>或<strong>对已有的属性赋值</strong>，而不会去修改原型链。<strong>在JavaScript中，只有在查询属性时才能体会到继承的存在，而设置属性则和继承无关，这个特性让程序员可以有选择地覆盖继承的属性。</strong></p><h1 id="属性访问错误"><a href="#属性访问错误" class="headerlink" title="属性访问错误"></a>属性访问错误</h1><p>在如下情景给对象<code>o</code>设置属性<code>p</code>会失败：</p><ul><li><code>o</code>中的属性<code>p</code>是只读的：不能给只读属性重新赋值（defineProperty()方法中有一个例外，可以对可配置的只读属性重新赋值）。</li><li><code>o</code>中的属性<code>p</code>是继承属性，且它是只读的：不能通过通过自由属性覆盖只读的继承属性。</li><li><code>o</code>中不存在自有属性<code>p</code>：<code>o</code>没有使用<code>setter</code>方法继承属性<code>p</code>，并且<code>o</code>的可扩展性是false。如果<code>o</code>中不存在<code>p</code>，而且没有<code>setter</code>方法可供调用，则<code>p</code>一定会添加至<code>o</code>中。但如果<code>o</code>不是可扩展的，那么在<code>o</code>中不能定义新属性。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 创建对象]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/6-2-object-create/</url>
      <content type="html"><![CDATA[<blockquote><p>Give an object. I will upset you.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本博文主要介绍在JS中创建对象的几种方法：</p><ul><li>对象直接量</li><li>关键字<code>new</code></li><li>ES5中的<code>Object.create()</code></li></ul><h1 id="对象直接量"><a href="#对象直接量" class="headerlink" title="对象直接量"></a>对象直接量</h1><p>对象直接量是由若干名/值对组成的映射表，名/值对中间用冒号分隔，名/值对之间用逗号分隔，整个映射表用花括号括起来。属性名可以是JS标识符也可以是字符串直接量（包括空字符串）。属性的值可以是任意类型的JS表达式，表达式的值就是这个属性的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    <span class="string">'main title'</span>: <span class="string">'JavaScript'</span>,</span><br><span class="line">    <span class="string">'sub-title'</span>: <span class="string">'The Definitive Guide'</span>,</span><br><span class="line">    <span class="string">'for'</span>: <span class="string">'all audiences'</span>,</span><br><span class="line">    author: &#123;</span><br><span class="line">        firstname: <span class="string">'David'</span>,</span><br><span class="line">        lastname: <span class="string">'Flanagan'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象直接量是一个表达式，这个表达式的每次运算都创建并初始化一个新的对象，并且在计算对象直接量的同时，也会计算它的每个属性的值。所以，当我们在一个循环体中使用了对象的直接量时，它将创建很多新对象，且这些对象的属性值可能有所不同。</p><p>注意：</p><ol><li>在ES5中，保留字可以用做<strong>不带引号的属性名</strong>；但对于ES3中，使用保留字必须用引号括起来。</li><li>属性名字中含有空格、连字符时必须用字符串表示</li></ol><h1 id="关键字new"><a href="#关键字new" class="headerlink" title="关键字new"></a>关键字new</h1><p>关键字<code>new</code>后跟随一个函数调用，这个函数应当是一个构造函数（constructor）。构造函数用以初始化一个新创建对象。在JS中，每一个原始类型都包含内置的构造函数，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// =&gt; &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// =&gt; []</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// =&gt; now</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(); <span class="comment">// =&gt; //</span></span><br></pre></td></tr></table></figure><p>对关键字<code>new</code>的深入理解可以参阅[JavaScript查缺补漏の女娲补天 - 原型链]()。</p><h1 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h1><p><em>注意：该部分内容需要对原型（prototype）有所了解，建议大家先参阅[JavaScript查缺补漏の女娲补天 - 原型链]()。</em></p><p>ES5定义了一个名为<code>Object.create()</code>的方法，它创建一个新对象，其中第一个参数是这个对象的原型，<code>Object.create()</code>提供了第二个可选参数，用以对对象的属性进行进一步描述。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object1 = <span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">2</span>&#125;); <span class="comment">// object1继承了属性x和y</span></span><br><span class="line"><span class="keyword">var</span> object2 = <span class="built_in">Object</span>.create(<span class="literal">null</span>); <span class="comment">// object2将不继承任何东西，甚至不包括基本方法，如toString()</span></span><br><span class="line"><span class="keyword">var</span> object3 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype); <span class="comment">// 等价于 var object3 = &#123;&#125;; 或者 var object3 = new Object();</span></span><br></pre></td></tr></table></figure><p>在ES3中，可以使用如下代码来模拟原型继承：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inherit() 返回了一个继承自原型对象p的属性的新对象</span></span><br><span class="line"><span class="comment">// 这里使用了ECMAScript 5中的Object.create()函数 （如果存在的话）</span></span><br><span class="line"><span class="comment">// 如果不存在Object.create()，则退化使用其他方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">true<span class="keyword">if</span> (Objcet.create) <span class="keyword">return</span> Objcet.create(p);</span><br><span class="line">true<span class="keyword">var</span> t = <span class="keyword">typeof</span> p;</span><br><span class="line">true<span class="keyword">if</span> (t !== <span class="string">'object'</span> &amp;&amp; t !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">true<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 定义一个空构造函数</span></span><br><span class="line">truef.prototype = p; <span class="comment">// 将其原型属性设置为p</span></span><br><span class="line">true<span class="keyword">return</span> <span class="keyword">new</span> f();  <span class="comment">// 使用f()创建p的继承对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript 5<br>ES3：ECMAScript 3</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 对象 & 属性 概述]]></title>
      <url>http://www.wrran.com/blog/2016/11/12/learn/js/6-1-object-property-overview/</url>
      <content type="html"><![CDATA[<blockquote><p>Give an object. I will upset you.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这篇博文原本是想记录下JavaScript中<em>属性</em>读写相关的细节，但是<em>属性</em>又跟对象联系在一起，所以干脆就以对象作为本文的主题了。</p><h1 id="对象概述"><a href="#对象概述" class="headerlink" title="对象概述"></a>对象概述</h1><p>对象是JavaScript中的基本数据类型，有点类似字典这种数据结构。但特殊的地方在于，JavaScript对象还可以从一个被称为<strong>原型</strong>的对象那儿继承属性。另外JavaScript中的对象是动态的，可以新增属性也可以删除属性。对象也是可变的，我们是通过<strong>引用而非值</strong>来操作对象。<br>对象最常用的用法是创建、查找、更新、删除（CRUD）以及检测（test）、枚举（enumerate）它的属性。</p><p>我们将JS对象分类三类以示区别：</p><ul><li>内置对象（native object）：是由ES规范定义的对象或类。如，Array、Function、Date和RegExp等。</li><li>宿主对象（host object）：由JS解释器所嵌入的宿主环境定义的。如，Web浏览器定义的对象。</li><li>自定义对象（user-defined object）：由运行中的JS代码创建的对象。</li></ul><p>其中，因为宿主环境定义的方法可以当成普通的JS函数对象，所以<strong>宿主对象也可以当成内置对象</strong>。</p><h1 id="属性概述"><a href="#属性概述" class="headerlink" title="属性概述"></a>属性概述</h1><p>属性包括名字和值。<strong>属性名可以是包含空字符串在内的任意字符串，但对象中不能存在两个同名的属性。</strong>值可以是任意JavaScript中的值，或者（在ES5中）可以是一个<code>getter</code>或者<code>setter</code>函数（或两者都有）。<br>除了名字和值之外，每个属性还有一些与之相关的值，称为“属性特性”（property attribute）：</p><ul><li>可写（writable attribute）：表明是否可以设置该属性的值</li><li>可枚举（enumerable attribute）：表明是否可以通过for/in循环返回该属性</li><li>可配置（configurable attribute）：辨明是否可以删除或修改该属性</li></ul><p>在ES5中，通过代码给对象创建的所有属性都是可写的、可枚举的和可配置的。<br>除了包含属性之外，每个对象还拥有三个相关的对象特性（object attribute）：</p><ul><li>对象的原型（prototype）：指向另外一个对象，本对象的属性继承自它的原型对象</li><li>对象的类（class）：一个标识对象类型的字符串</li><li>对象的扩展标记（extensible flag）：ES5中指明是否可以向该对象添加新属性</li></ul><p>我们将属性划分为如下两类：</p><ul><li>自有属性（own property）：直接在对象中定义的属性</li><li>继承属性（inherited property）：在对象的原型对象中定义的属性</li></ul><h1 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h1><p><a href="http://wrran.com/blog/2016/11/12/learn-js-6-2-object-create/" target="_blank" rel="noopener">JavaScript查缺补漏 - 创建对象</a><br><a href="http://wrran.com/blog/2016/11/12/learn-js-6-3-property-crud/" target="_blank" rel="noopener">JavaScript查缺补漏 - 属性的CRUD</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>JS: JavaScript<br>ES5: ECMAScript5</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> object </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏の女娲补天 - 面向对象技术]]></title>
      <url>http://www.wrran.com/blog/2016/11/11/learn/js/5-object-oriented/</url>
      <content type="html"><![CDATA[<blockquote><p>JavaScript is not Script of Java.</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>话是这么说，但是JavaScript可以通过原型链以及一些技巧实现与Java类似的面向对象机制。下面列出<a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南</a>中的例子以供理解。同时，强烈建议大家先阅读<a href="http://wrran.com/blog/2016/11/11/learn-js-3-prototype/#more" target="_blank" rel="noopener">JavaScript查缺补漏の女娲补天 - 原型链</a>。</p><h1 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h1><p>在Java中类成员可以分为如下几种：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">实例字段</td><td style="text-align:center">基于实例的属性或者变量，用以保存独立对象的状态</td></tr><tr><td style="text-align:center">实例方法</td><td style="text-align:center">类的所有实例所共享的方法，由每个独立的实例调用</td></tr><tr><td style="text-align:center">类字段</td><td style="text-align:center">这些属性或变量是属于类的，而不是属于某一个具体实例</td></tr><tr><td style="text-align:center">类方法</td><td style="text-align:center">这些方法属于类的，而不是属于某个实例</td></tr></tbody></table><p>而在JavaScript中函数也是变量，所以上述的四个分类变为了两类，即<strong>实例属性</strong>和<strong>类属性</strong>。<br>在JavaScript中，这些概念的区分需要三个对象的参与，即构造函数对象、原型对象和实例对象。</p><table><thead><tr><th style="text-align:center">对象</th><th style="text-align:center">映射关系</th></tr></thead><tbody><tr><td style="text-align:center">构造函数对象</td><td style="text-align:center">任何添加到这个构造函数对象中的属性都是<strong>类字段</strong>和<strong>类方法</strong></td></tr><tr><td style="text-align:center">原型对象</td><td style="text-align:center">原型对象的属性被类的所有实例所继承，如果这个属性是函数的话，则成为<strong>实例方法</strong>；如果不是函数，则成为<strong>默认实例属性</strong></td></tr><tr><td style="text-align:center">实例对象</td><td style="text-align:center">定义在实例上的属性，都只是这个实例的属性，所以实例对象上的属性就是<strong>实例属性</strong>和<strong>实例方法</strong></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Complex.js : 定义Complex类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例字段 =&gt;</span></span><br><span class="line"><span class="comment">// 这个构造函数为每个实例定义了实例字段r和i</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Complex</span>(<span class="params">real, imaginary</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (<span class="built_in">isNaN</span>(real) || <span class="built_in">isNaN</span>(imaginary)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>();</span><br><span class="line">true<span class="keyword">this</span>.r = real;</span><br><span class="line">true<span class="keyword">this</span>.i = imaginary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例方法 =&gt;</span></span><br><span class="line"><span class="comment">// 类的实例方法定义为原型对象的函数的属性</span></span><br><span class="line"><span class="comment">// 这里定义的方法可以宝贝所有实例继承，并为他们提供共享的行为</span></span><br><span class="line"><span class="comment">// 需要注意的是，JavaScript的实例方法必须使用关键字this来存取实例的字段</span></span><br><span class="line">Complex.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">return</span> <span class="keyword">new</span> Complex(<span class="keyword">this</span>.r + that.r, <span class="keyword">this</span>.i + that.i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex.prototype.mul = <span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">return</span> <span class="keyword">new</span> Complex(<span class="keyword">this</span>.r * that.r - <span class="keyword">this</span>.i * that.i, <span class="keyword">this</span>.r * that.i + <span class="keyword">this</span>.i * that.r);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负数的模</span></span><br><span class="line">Complex.prototype.mag = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">true<span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.r * <span class="keyword">this</span>.r + <span class="keyword">this</span>.i * <span class="keyword">this</span>.i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex.prototype.neg = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">true<span class="keyword">return</span> <span class="keyword">new</span> Complex(-<span class="keyword">this</span>.r, -<span class="keyword">this</span>.i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">true<span class="keyword">return</span> <span class="string">'&#123;'</span> + <span class="keyword">this</span>.r + <span class="string">','</span> + <span class="keyword">this</span>.i + <span class="string">'&#125;'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex.prototype.equals = <span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">return</span> that != <span class="literal">null</span> &amp;&amp;                   <span class="comment">// 必须有定义且不能是null</span></span><br><span class="line">truethat.constructor === Complex &amp;&amp;          <span class="comment">// 并且必须是Complex的实例</span></span><br><span class="line">true<span class="keyword">this</span>.r === that.r &amp;&amp; <span class="keyword">this</span>.i === that.i;  <span class="comment">// 并且必须包含相同的值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类字段 &amp; 类方法 =&gt;</span></span><br><span class="line"><span class="comment">// 直接定义为构造函数的属性</span></span><br><span class="line"><span class="comment">// 需要注意的是，类的方法通常不使用关键字this</span></span><br><span class="line"><span class="comment">// 它们只针对参数进行操作</span></span><br><span class="line">Complex.ZERO = <span class="keyword">new</span> Complex(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Complex.ONE = <span class="keyword">new</span> Complex(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">Complex.I = <span class="keyword">new</span> Complex(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Complex.parse = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">try</span> &#123;</span><br><span class="line">truetrue<span class="keyword">var</span> m = Complex._format.exec(s); <span class="comment">// 利用正则表达式进行匹配</span></span><br><span class="line">truetrue<span class="keyword">return</span> <span class="keyword">new</span> Complex(<span class="built_in">parseFloat</span>(m[<span class="number">1</span>]), <span class="built_in">parseFloat</span>(m[<span class="number">2</span>]));</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">truetrue<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot parse `'</span> + s + <span class="string">'` as a complex number.'</span>);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类的“私有”字段</span></span><br><span class="line"><span class="comment">// 下划线前缀表明它是类内部使用的，不属于类的公有API部分</span></span><br><span class="line">Complex._format = <span class="regexp">/^\&#123;([^,]+),([^&#125;]+)\&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Complex(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Complex(c.i, c.r); <span class="comment">// 实例属性</span></span><br><span class="line">c.add(d).toString()            <span class="comment">// 实例方法 =&gt; '&#123;5, 5&#125;'</span></span><br><span class="line">Complex.parse(c.toString())    <span class="comment">// 类方法</span></span><br><span class="line">  .add(c.neg())                <span class="comment">// 类方法 &amp; 实例方法</span></span><br><span class="line">  .equals(Complex.ZERO)        <span class="comment">// 类属性</span></span><br></pre></td></tr></table></figure><p>JavaScript中未介绍的可以模拟Java的一些特性：</p><ol><li>对于Java类的实例方法来说，实例字段可以用作局部变量，而不需要使用关键字this来引用他们<br>(其实可以使用with来模拟，但是不推荐)</li><li>Java中使用final声明字段为常量<br>(可以使用闭包中的局部变量来模拟)</li><li>Java中的private字段和方法<br>(常量属性可以在ECMAScript 5中直接实现)</li></ol><p>针对上述说的2、3，在JavaScript中往往通过约定来约束：<br>常量字段 使用全大写命名<br>私有字段 使用<code>_</code>开头</p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>JavaScript中没有提供Set这一数据结构。我们可以如下实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params">argument</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.values = &#123;&#125;; <span class="comment">// 集合数据保存在对象的属性里</span></span><br><span class="line">    <span class="keyword">this</span>.n = <span class="number">0</span>;          <span class="comment">// 集合中的值的个数</span></span><br><span class="line">    <span class="keyword">this</span>.add.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 把所有参数都添加进这个集合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将每个参数都添加至集合中</span></span><br><span class="line"><span class="built_in">Set</span>.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> val = <span class="built_in">arguments</span>[i];                   <span class="comment">// 待添加到集合中的值</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="built_in">Set</span>._v2s(val);                  <span class="comment">// 把它转换为字符串</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.values.hasOwnProperty(str)) &#123;   <span class="comment">// 如果不在集合中，则加入集合中</span></span><br><span class="line">            <span class="keyword">this</span>.values[str] = val;</span><br><span class="line">            <span class="keyword">this</span>.n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;                                  <span class="comment">// 支持链式方式调用</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从集合中删除元素</span></span><br><span class="line"><span class="built_in">Set</span>.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="built_in">Set</span>._v2s(<span class="built_in">arguments</span>[i]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.values.hasOwnProperty(str)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.values[str];</span><br><span class="line">            --<span class="keyword">this</span>.n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果集合包含这个值，则返回true，否则返回false</span></span><br><span class="line"><span class="built_in">Set</span>.prototype.contains = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.values.hasOwnProperty(<span class="built_in">Set</span>._v2s(value));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回集合的大小</span></span><br><span class="line"><span class="built_in">Set</span>.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合中的所有元素，在指定的上下文中调用方法f</span></span><br><span class="line"><span class="built_in">Set</span>.prototype.foreach = <span class="function"><span class="keyword">function</span> (<span class="params">f, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s <span class="keyword">in</span> <span class="keyword">this</span>.values) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.values.hasOwnProperty(s)) &#123;      <span class="comment">// 忽略继承的属性</span></span><br><span class="line">            f.call(context, <span class="keyword">this</span>.values[s]);      <span class="comment">// 调用f，传入value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个内部函数</span></span><br><span class="line"><span class="comment">// 将任意JavaScript值和唯一的字符串对应起来</span></span><br><span class="line"><span class="built_in">Set</span>._v2s = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (val) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">undefined</span>: <span class="keyword">return</span> <span class="string">'u'</span>; <span class="comment">// 特殊的原始值</span></span><br><span class="line">        <span class="keyword">case</span> <span class="literal">null</span>: <span class="keyword">return</span> <span class="string">'n'</span>;      <span class="comment">// 得到一个特殊的代码</span></span><br><span class="line">        <span class="keyword">case</span> <span class="literal">true</span>: <span class="keyword">return</span> <span class="string">'t'</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">false</span>: <span class="keyword">return</span> <span class="string">'f'</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">switch</span> (<span class="keyword">typeof</span> val) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'number'</span>: <span class="keyword">return</span> <span class="string">'#'</span> + val; <span class="comment">// 数字带有 # 前缀</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'string'</span>: <span class="keyword">return</span> <span class="string">'`'</span> + val; <span class="comment">// 字符串带有 ` 前缀</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">'@'</span> + objectId(val); <span class="comment">// 对象和函数带有前缀 @</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对任意对象来说，都会返回一个字符串</span></span><br><span class="line">    <span class="comment">// 针对不同的对象，这个函数会返回不同的字符串</span></span><br><span class="line">    <span class="comment">// 对于同一个对象的多次调用，总是返回相同的字符串</span></span><br><span class="line">    <span class="comment">// 为此，我们将在o中创建一个属性</span></span><br><span class="line">    <span class="comment">// 在ES5中，这个属性是不可枚举且只读的</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">objectId</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> prop = <span class="string">'|**objectid**|'</span>;   <span class="comment">// 私有属性，用以存放id</span></span><br><span class="line">        <span class="keyword">if</span> (!o.hasOwnProperty(prop))</span><br><span class="line">            o[prop] = <span class="built_in">Set</span>._v2s.next++;</span><br><span class="line">        <span class="keyword">return</span> o[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Set</span>._v2s.next = <span class="number">100</span>; <span class="comment">// 设置初始id的值</span></span><br></pre></td></tr></table></figure><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>同样，JavaScript中也没有提供枚举这一常用的数据结构。但本例与集合的例子的差别在于：<strong>下列代码中所提及的<code>enumeration</code> 不是一个构造函数，它是一个工厂方法，每次调用它都会创建并返回一个新的类</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enumeration() 不是一个构造函数，它是一个工厂方法，每次调用它都会创建并返回一个新的类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// inherit() 返回了一个继承自原型对象p的属性的新对象</span></span><br><span class="line"><span class="comment">// 这里使用了ECMAScript 5中的Object.create()函数 （如果存在的话）</span></span><br><span class="line"><span class="comment">// 如果不存在Object.create()，则退化使用其他方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    <span class="keyword">if</span> (Objcet.create) <span class="keyword">return</span> Objcet.create(p);</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;</span><br><span class="line">    <span class="keyword">if</span> (t !== <span class="string">'object'</span> &amp;&amp; t !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 定义一个空构造函数</span></span><br><span class="line">    f.prototype = p; <span class="comment">// 将其原型属性设置为p</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> f();  <span class="comment">// 使用f()创建p的继承对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数创建一个新的枚举类型，实参对象表示类的每个实例的名字和值</span></span><br><span class="line"><span class="comment">// 返回值是一个构造函数，它标识这个新类</span></span><br><span class="line"><span class="comment">// 注意，这个构造函数也会抛出异常：不能使用它来创建该类型的新的实例</span></span><br><span class="line"><span class="comment">// 返回的构造函数包含名/值对的映射表</span></span><br><span class="line"><span class="comment">// 包括由值组成的数组，以及一个foreach()迭代器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enumeration</span>(<span class="params">namesToValues</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个虚拟的构造函数是返回值</span></span><br><span class="line">    <span class="keyword">var</span> enumeration = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">throw</span> <span class="string">'Cannot Instantiate Enumerations'</span>;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举值继承自这个对象</span></span><br><span class="line">    <span class="keyword">var</span> proto = enumeration.prototype = &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: enumeration, // 标识类型</span><br><span class="line">        toString: function () &#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;,</span><br><span class="line">        valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.value; &#125;,</span><br><span class="line">        toJSON: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enumeration.values = []; <span class="comment">// 用以存放枚举对象的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建新类型的实例</span></span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> namesToValues) &#123;</span><br><span class="line">        <span class="keyword">var</span> e = inherit(proto); <span class="comment">// 创建一个代表它的对象</span></span><br><span class="line">        e.name = name;</span><br><span class="line">        e.value = namesToValues[name];</span><br><span class="line">        enumeration[name] = e;      <span class="comment">// 将它设置为构造函数的属性</span></span><br><span class="line">        enumeration.values.push(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来对类的实例进行迭代</span></span><br><span class="line">    enumeration.foreach = <span class="function"><span class="keyword">function</span> (<span class="params">f, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.values.length; ++i)</span><br><span class="line">            f.call(c, <span class="keyword">this</span>.values[i]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enumeration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">var</span> Coin = enumeration(&#123;<span class="attr">Penny</span>: <span class="number">1</span>, <span class="attr">Nickel</span>: <span class="number">5</span>, <span class="attr">Dime</span>: <span class="number">10</span>, <span class="attr">Quarter</span>:<span class="number">25</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> c = Coin.Dime;</span><br><span class="line">c <span class="keyword">instanceof</span> Coin <span class="comment">// =&gt; true</span></span><br><span class="line">c.constructor == Coin <span class="comment">// =&gt; true</span></span><br><span class="line">Coin.Quarter + <span class="number">3</span>*Coin.Nickel <span class="comment">// =&gt; 40</span></span><br><span class="line">Coin.Dime == <span class="number">10</span> <span class="comment">// =&gt; true</span></span><br><span class="line">Coin.Dime &gt; Coin.Nickel <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">String</span>(Coin.Dime) + <span class="string">':'</span> + Coin.Dime <span class="comment">// =&gt; 'Dime:10'</span></span><br></pre></td></tr></table></figure><h2 id="扑克牌"><a href="#扑克牌" class="headerlink" title="扑克牌"></a>扑克牌</h2><p>我们这里用上面创建的枚举类，来创建一副扑克牌：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类 - 牌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Card</span>(<span class="params">suit, rank</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.suit = suit; <span class="comment">// 花色</span></span><br><span class="line">    <span class="keyword">this</span>.rank = rank; <span class="comment">// 点数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用枚举类型定义花色和点数</span></span><br><span class="line">Card.Suit = enumeration(&#123;<span class="attr">Clubs</span>: <span class="number">1</span>, <span class="attr">Diamonds</span>: <span class="number">2</span>, <span class="attr">Hearts</span>: <span class="number">3</span>, <span class="attr">Spades</span>: <span class="number">4</span>&#125;);</span><br><span class="line">Card.Rank = enumeration(&#123;<span class="attr">Two</span>: <span class="number">2</span>, <span class="attr">Three</span>: <span class="number">3</span>, <span class="attr">Four</span>: <span class="number">4</span>, <span class="attr">Five</span>: <span class="number">5</span>, <span class="attr">Six</span>: <span class="number">6</span>,</span><br><span class="line">                         Seven: <span class="number">7</span>, <span class="attr">Eight</span>: <span class="number">8</span>, <span class="attr">Nine</span>: <span class="number">9</span>, <span class="attr">Ten</span>: <span class="number">10</span>,</span><br><span class="line">                         Jack: <span class="number">11</span>, <span class="attr">Queen</span>: <span class="number">12</span>, <span class="attr">King</span>: <span class="number">13</span>, <span class="attr">Ace</span>: <span class="number">14</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义用以描述牌面的文本</span></span><br><span class="line">Card.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.rank.toString() + <span class="string">' of '</span> + <span class="keyword">this</span>.suit.toString();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较扑克牌中两张牌的大小</span></span><br><span class="line">Card.prototype.compareTo = <span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rank &lt; that.rank) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rank &gt; that.rank) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以扑克牌的玩法规则对牌进行排序的函数</span></span><br><span class="line">Card.orderByRank = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以桥牌的玩法规则对牌进行排序的函数</span></span><br><span class="line">Card.orderBySuit = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.suit &lt; b.suit) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.suit &gt; b.suit) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.rank &lt; b.rank) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a.rank &gt; b.rank) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义用以表示一副标准扑克牌的类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Deck</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cards = <span class="keyword">this</span>.cards = [];</span><br><span class="line">    Card.Suit.foreach(<span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">                        Card.Rank.foreach(<span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">                            cards.push(<span class="keyword">new</span> Card(s, r));</span><br><span class="line">                        &#125;)</span><br><span class="line">                     &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 洗牌</span></span><br><span class="line">Deck.prototype.shuffle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历数组中的每个元素，随机找出牌面最小的元素，并阈值交换</span></span><br><span class="line">    <span class="keyword">var</span> deck = <span class="keyword">this</span>.cards;</span><br><span class="line">    <span class="keyword">var</span> len = deck.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = len<span class="number">-1</span>; i&gt;<span class="number">0</span> ; --i) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">var</span> temp = deck[i];</span><br><span class="line">        deck[i] = deck[r];</span><br><span class="line">        deck[r] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发牌</span></span><br><span class="line">Deck.prototype.deal = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cards.length &lt; n) <span class="keyword">throw</span> <span class="string">'Out of cards'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.cards.splice(<span class="keyword">this</span>.cards.length - n, n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一副新扑克牌，洗牌并发牌</span></span><br><span class="line"><span class="keyword">var</span> deck = (<span class="keyword">new</span> Deck()).shuffle();</span><br><span class="line"><span class="keyword">var</span> hand = deck.deal(<span class="number">13</span>).sort(Card.orderBySuit);</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> object oriented </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn-js-4-this]]></title>
      <url>http://www.wrran.com/blog/2016/11/11/learn/js/4-this/</url>
      <content type="html"><![CDATA[<blockquote><p>What is <code>this</code>?</p></blockquote><a id="more"></a><p>参阅[JavaScript查缺补漏 - 函数调用]()</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/" target="_blank" rel="noopener">深入浅出 JavaScript 中的 this</a><br><a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/?cm_mc_uid=08586144823614798042197&amp;cm_mc_sid_50200000=1479804219" target="_blank" rel="noopener">Understanding JavaScript Function Invocation and “this”</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏の女娲补天 - 原型链]]></title>
      <url>http://www.wrran.com/blog/2016/11/11/learn/js/3-prototype/</url>
      <content type="html"><![CDATA[<blockquote><p>I have no time. I just want to finish my job.</p></blockquote><a id="more"></a><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><p>每一个JavaScript对象（除了<code>null</code>）都和另一个对象相关联。“另一个”对象就是我们熟知的原型，每一个对象都从原型那儿继承属性。<br>所有通过<strong>对象直接量</strong>创建的对象都具有同一个原型对象，并可以通过JavaScript代码<code>Object.prototype</code>获得对原型对象的引用。通过<strong>关键字<code>new</code>和构造函数调用创建的对象</strong>的原型就是构造函数的<code>prototype</code>属性的值。所以，同使用<code>{}</code>创建对象一样，通过<code>new Object()</code>创建的对象也继承自<code>Object.prototype</code>。同样，通过<code>new Array()</code>创建的对象的原型就是<code>Array.prototype</code>，通过<code>new Date()</code>创建的对象的原型就是<code>Date.prototype</code>。<br><code>Object.prototype</code>是一个没有原型的对象，它不继承任何属性，其他原型对象都是普通对象，普通对象都具有原型。所有的内置<em>构造函数</em>及大部分自定义的<em>构造函数</em>都具有一个继承自<code>Object.prototype</code>的原型。</p><p>JavaScript对象具有<strong>自有属性</strong>，也有一些属性是从原型对象继承而来的。<br>假设要查询对象<code>o</code>的属性<code>x</code>，如果<code>o</code>中不存在<code>x</code>，那么将会继续在<code>o</code>的原型对象中查询属性<code>x</code>。如果原型对象中也没有<code>x</code>，但这个原型对象也有原型，那么将继续在这个原型对象的原型上执行查询，直到找到<code>x</code>或者查找到一个原型是<code>null</code>的对象为止。<br>假设给对象<code>o</code>的属性<code>x</code>赋值，如果<code>o</code>中已经有属性<code>x</code>（这个属性不是继承来的），那么这个赋值操作只改变这个已有属性<code>x</code>的值。如果<code>o</code>中不存在属性<code>x</code>，那么赋值操作给<code>o</code>添加一个新属性<code>x</code>。如果之前<code>o</code>继承自属性<code>x</code>，那么这个继承的属性就被新创建的同名属性覆盖了。</p><p>属性赋值操作首先检查原型链，以此判断是否允许赋值操作。例如，如果<code>o</code>继承自一个只读属性<code>x</code>，那么赋值操作是不被允许的。如果允许赋值操作，它也总是<strong>在原始对象上创建属性</strong>或<strong>对已有的属性赋值</strong>，而不会去修改原型链。<strong>在JavaScript中，只有在查询属性时才能体会到继承的存在，而设置属性则和继承无关，这个特性让程序员可以有选择地覆盖继承的属性。</strong></p><p>属性赋值要么失败，要么创建一个属性，要么在原始对象中设置属性，但有一个例外，如果<code>o</code>继承自属性<code>x</code>，而这个属性是一个具有<code>setter</code>方法的<code>accessor</code>属性，那么这时将调用<code>setter</code>方法而不是给<code>o</code>创建一个属性<code>x</code>。但同时需要注意的是，<code>setter</code>方法是由对象<code>o</code>调用的，而不是定义这个属性的原型对象调用的。因此如果<code>setter</code>方法定义任意属性，这个操作只是<strong>针对<code>o</code>本身</strong>，并不会修改原型链。</p><p>属性访问并不总是返回或者设置一个值。<br>查询一个不存在的属性并不会报错，如果在对象<code>o</code>自身的属性或继承的属性中军未找到属性<code>x</code>，属性访问表达式<code>o.x</code>返回<code>undefined</code>。但是，如果对象不存在，那么试图查询这个不存在的对象的属性就会报错，<code>null</code>和<code>undefined</code>值都没有属性，因此查询这些值的属性就会报错。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">book.subtitle; <span class="comment">// =&gt; undefined</span></span><br><span class="line">book.subtitle.length; <span class="comment">// =&gt; 报错</span></span><br></pre></td></tr></table></figure><p></p><p>同样，给<code>null</code>和<code>undefined</code>设置属性也会报类型错误，给其他值设置属性也不总是成功，有一些属性是只读的，不能重新赋值，有一些对象不允许新增属性，但是<strong>这些设置属性的失败操作不会报错</strong>。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内置构造函数的原型是只读的</span></span><br><span class="line"><span class="built_in">Object</span>.prototype = <span class="number">0</span>; <span class="comment">// 赋值失败，但没有报错</span></span><br></pre></td></tr></table></figure><p></p><p>这是一个历史遗留问题，该bug在ECMAScript 5的严格模式中已经修复。在<strong>严格模式</strong>中，任何失败的属性设置操作都会抛出一个类型错误异常。</p><p>总结下，在如下情景给对象<code>o</code>设置属性<code>p</code>会失败：</p><ul><li><code>o</code>中的属性<code>p</code>是只读的：不能给只读属性重新赋值（defineProperty()方法中有一个例外，可以对可配置的只读属性重新赋值）。</li><li><code>o</code>中的属性<code>p</code>是继承属性，且它是只读的：不能通过通过自由属性覆盖只读的继承属性。</li><li><code>o</code>中不存在自有属性<code>p</code>：<code>o</code>没有使用<code>setter</code>方法继承属性<code>p</code>，并且<code>o</code>的可扩展性是false。如果<code>o</code>中不存在<code>p</code>，而且没有<code>setter</code>方法可供调用，则<code>p</code>一定会添加至<code>o</code>中。但如果<code>o</code>不是可扩展的，那么在<code>o</code>中不能定义新属性。</li></ul><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>对象创建表达式创建一个对象并调用一个函数（这个函数称作<strong>构造函数</strong>）初始化新对象的属性。对象创建表达式和函数调用表达式非常类似，只是对象创建表达式之前多了一个关键字<code>new</code>。如果一个对象创建表达式不需要传入任何参数给构造函数的话，那么这对空圆括号是可以省略的。<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"><span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Object</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span></span><br></pre></td></tr></table></figure><p></p><p>当计算一个对象创建表达式的值时，和对象初始化表达式通过<code>{}</code>创建对象的做法一样，JavaScript首先创建一个新的空对象，然后，JavaScript通过传入指定的参数并将这个新对象当作<code>this</code>的值来调用一个指定的函数。这个函数可以使用<code>this</code>来初始化这个新创建对象的属性。哪些被当作构造函数的函数<strong>不会返回一个值</strong>，并且这个新创建并被初始化后的对象就是整个对象创建表达式的值。<strong>如果一个构造函数确实确实返回了一个对象值，那么这个对象将作为整个对象创建表达式的值，而新创建的对象就废弃了。</strong></p><p>构成函数主体的JavaScript代码在定义之时并不会执行，只有调用该函数时，他们才会执行。有如下4中方式可以调用JavaScript函数：</p><ul><li>作为函数</li><li>作为方法</li><li>作为构造函数</li><li>通过他们的<code>call()</code>和<code>apply()</code>方法间接调用</li></ul><p>如果函数或者方法调用之前带有关键字<code>new</code>，它就构成<strong>构造函数调用</strong>。构造函数调用和普通的函数调用以及方法调用在<strong>实参处理</strong>、<strong>调用上下文</strong>和<strong>返回值</strong>方面都有不同。<br>如果构造函数调用在圆括号内包含一组实参列表，先计算这些实参表达式，然后传入函数内，这和函数调用和方法调用是一致的。但如果构造函数没有形参，JavaScript构造函数调用的语法是<strong>允许省略实参列表和圆括号</strong>。凡是没有形参的构造函数调用都可以省略圆括号，如下两行代码是等价的：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br></pre></td></tr></table></figure><p></p><p>构造函数调用创建一个新的空对象，这个对象继承自构造函数的<code>prototype</code>属性。构造函数视图初始化这个新创建的对象，并将这个对象用作其调用上下文，因此构造函数可以使用<code>this</code>关键字来引用这个新创建的对象。注意，尽管构造函数看起来像一个方法调用，它依然会使用这个新对象作为调用上下文。<strong>也就是说，在表达式<code>new o.m()</code>中，调用上下文并不是<code>o</code>。</strong><br>构造函数通常不使用<code>return</code>关键字，它们通常初始化新对象，当构造函数的函数体执行完毕，它会显式返回。在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值。然而如果构造函数显式地使用<code>return</code>语句返回一个对象，那么调用表达式的值就是这个对象。如果构造函数使用<code>return</code>语句但没有指定返回值，或者返回了一个原始值，那么这时将会忽略返回值，同时使用这个新对象作为调用结果。</p><h1 id="类和类型"><a href="#类和类型" class="headerlink" title="类和类型"></a>类和类型</h1><p>JavaScript中定义了少量的数据类型：null、undefined、Boolean、Number、String、Function和Object。而我们往往更希望<strong>将类作为类型</strong>来对待。<br>为了实现检测任意对象的类的技术，下面分别介绍：<code>instanceof</code>运算符，<code>constructor</code>属性以及构造函数的名称。但每种技术都不够完美。<br>对于这个问题，有人提出我们应该更加关注对象可以完成什么工作，或者说它包含什么方法而不是对象属于哪个类，这被称为<strong>鸭式辩型</strong>。</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p><code>instanceof</code>是二元操作符，左操作数是待检测其类的对象，右操作数是定义类的构造函数。假设进行了操作<code>o instanceof c</code>，如果<code>o</code>继承自<code>c.prototype</code>，则表达式的值为<code>true</code>。注意这里的继承包括直接继承，也包括间接继承。<br>在JavaScript中，<strong>构造函数作为类的公共标识，但原型是唯一的标识</strong>。<br>我们也可以通过<code>isPrototypeOf</code>方法来检测某个对象的原型链上是否存在某个特定的原型对象，如<code>c.isPrototypeOf(o)</code>。</p><p><code>instanceof</code>和<code>isPrototypeOf</code>都有共同的缺点就是：我们无法通过对象来获得类名，只能检测对象是否属于指定的类名。</p><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>另一中识别对象是否属于某个类的方法是使用<code>constructor</code>属性，如下：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeAndValue</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">''</span>; <span class="comment">// null 和 undefined 没有构造函数</span></span><br><span class="line">    <span class="keyword">switch</span>(x.constructor) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">Number</span>: <span class="keyword">return</span> <span class="string">'Number: '</span> + x;  <span class="comment">// 处理原始类型</span></span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">String</span>: <span class="keyword">return</span> <span class="string">'String: '</span> + x;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">Date</span>: <span class="keyword">return</span> <span class="string">'Date: '</span> + x;      <span class="comment">// 处理内置类型</span></span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">RegExp</span>: <span class="keyword">return</span> <span class="string">'RegExp: '</span> + x;</span><br><span class="line">        <span class="keyword">case</span> Complex: <span class="keyword">return</span> <span class="string">'Complex: '</span> + x; <span class="comment">// 处理自定义类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用<code>constructor</code>检测对象是否属于某个类的不足之处在于，在多个执行上下文的场景中它是无法正常工作的。在这种情况下，每个框架可能都包含独立的构造函数集合，一个框架的Array构造函数与另一个框架Array的构造函数不是同一个构造函数。<br>同时，在JavaScript中也并非所有对象都包含<code>constructor</code>属性。如下代码所示：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">this</span>.name = <span class="string">'o'</span>;&#125;</span><br><span class="line">o.prototype = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> o(); <span class="comment">// c将无constructor属性</span></span><br></pre></td></tr></table></figure><p></p><h2 id="构造函数的名称"><a href="#构造函数的名称" class="headerlink" title="构造函数的名称"></a>构造函数的名称</h2><p>针对<code>constructor</code>出现的问题，我们可以通过判断<strong>构造函数的名称</strong>是否一致作为对象是否属于同一类的判断依据。（部分JavaScript实现中为函数对象提供了一个非标准的属性<code>name</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o === <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">'null'</span>;</span><br><span class="line">    <span class="comment">// NaN和它自身不相等</span></span><br><span class="line">    <span class="keyword">if</span> (o !== o) <span class="keyword">return</span> <span class="string">'nan'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果typeof的值不是'object'，则使用这个值</span></span><br><span class="line">    <span class="comment">// 可以识别出原始值的类型和函数</span></span><br><span class="line">    <span class="keyword">if</span> ((t = <span class="keyword">typeof</span> o) !== <span class="string">'object'</span>) <span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回对象的类名，除非值为"Object"</span></span><br><span class="line">    <span class="comment">// 可以识别出大多数的内置对象</span></span><br><span class="line">    <span class="keyword">if</span> ((c = classof(o)) !== <span class="string">'Object'</span>) <span class="keyword">return</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果对象构造函数的名字存在的话，则返回它</span></span><br><span class="line">    <span class="keyword">if</span> (o.constructor &amp;&amp; <span class="keyword">typeof</span> o.constructor === <span class="string">'function'</span> &amp;&amp;</span><br><span class="line">       (n = o.constructor.getName())) <span class="keyword">return</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他的类型都返回'Object'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Object'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回对象的类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classof</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回函数的名字 （可能是空字符串），不是函数的话返回null</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'name'</span> <span class="keyword">in</span> <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name = <span class="keyword">this</span>.toString().match(<span class="regexp">/function\s*([^(]*)\(/</span>)/)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种解决方案的问题在于：并不是所有对象都具有constructor属性，也并不是所有的函数都有名字。</p><h2 id="鸭式辨型"><a href="#鸭式辨型" class="headerlink" title="鸭式辨型"></a>鸭式辨型</h2><p>对于上述这些问题的解决方法就是：不要去关注“对象的类是什么”，而是关注“对象能做什么”。<br>又回到最初的起点，这种想法与C++中的模板很像。如果说类型是生成式模型，定义操作；那么鸭式辨型就是判别式模型，通过尝试调用操作来得知是否是某个类型。<br>鸭式辨型的实现方法让人感觉太宽松：仅仅是假设输入对象实现了必要的方法，根本没有执行进一步的检查。另一种实现方法是<strong>对输入对象进行检查</strong>。但不是检查它们的类，而是用<strong>适当的名字来检查他们所实现的方法</strong>。这样可以将非法输入尽可能早地拦截在外，并可以给出带有更多提示信息的报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果o实现了除第一个参数之外的参数所表示的方法，则返回true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quacks</span>(<span class="params">o, <span class="regexp">/*, ...*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="built_in">arguments</span>.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> arg = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">typeof</span> arg) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'string'</span>: <span class="comment">// 如果参数是`string`，则直接用名字做检查</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> o[arg] !== <span class="string">'function'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'function'</span>: <span class="comment">// 如果是function，则检查函数的原型对象上的方法</span></span><br><span class="line">                arg = arg.prototype;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'object'</span>: <span class="comment">// 检查匹配的方法</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> m <span class="keyword">in</span> arg) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg[m] !== <span class="string">'function'</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> o[m] !== <span class="string">'function'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述这个<code>quacks</code>方法需要注意到，这里只是通过特定的名称来检测对象是否含有一个或者多个值为函数的属性。但我们无法得知这些函数的细节信息，如函数是干什么的，它需要多少参数，这些参数的类型等。<br>但是，这是鸭式辨型的本质所在，<strong>如果使用鸭式辨型而不是强制的类型检测的方式定义API，那么创建的API应当更具有灵活性，这样才能确保你提供给用户的API更加安全可靠</strong>。<br>另外还有一个细节，<code>quacks</code>无法应用于内置类，原因在于内置类的方法都是不可枚举的。（在ECMAScript 5中可以通过将for/in循环更换为Object.getOwnPropertyNames()来补救）。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>上述这些<a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南</a>所述。其他博文也有关于原型链的精彩解说，我不再赘述，只是将相关笔记罗列在此：</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-js/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%20-%20%E7%AC%94%E8%AE%B01.png" alt title="彻底理解JavaScript中的原型链 - 笔记1"><br>上图中，<code>a</code>为类（构造函数），<code>@a</code>为<code>a</code>的prototype所指对象（或称为原型），<code>*a</code>是类<code>a</code>的实例。<code>*a</code>在一些宿主环境中是通过<code>__proto__</code>与原型相关联的，当查找属性时，先在本实例中查找，找不到则去<code>__proto__</code>中查找，直到找到对应属性或者<code>__proto__</code>为<code>null</code>。</p><h1 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h1><p>[JavaScript查缺补漏の女娲补天 - 面向对象技术](TODO): 介绍了一些使用JavaScript中的原型链的例子，有助于进一步加深理解。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.douban.com/subject/10549733/" target="_blank" rel="noopener">JavaScript权威指南(第六版)</a><br><a href="http://blog.csdn.net/ljl157011/article/details/19677059" target="_blank" rel="noopener">彻底理解JavaScript中的原型链</a><br><a href="http://www.cnblogs.com/TomXu/archive/2012/01/05/2305453.html" target="_blank" rel="noopener">深入理解JavaScript系列（5）：强大的原型和原型链</a><br><a href="http://www.108js.com/article/article1/10201.html?id=1092" target="_blank" rel="noopener">JS原型与原型链终极详解</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 严格模式]]></title>
      <url>http://www.wrran.com/blog/2016/11/11/learn/js/2-use-strict/</url>
      <content type="html"><![CDATA[<blockquote><p>coding hardly, debug easily</p></blockquote><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><code>&quot;use strict&quot;</code> 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。<code>&quot;use strict&quot;</code> 的目的是指定代码在严格条件下执行。<br><strong>严格模式下你不能使用未声明的变量。</strong></p><p>具体来说，严格模式下将有如下限制：</p><ol><li>不允许使用未声明的变量</li><li>不允许删除变量或对象</li><li>不允许删除函数</li><li>不允许变量重名</li><li>不允许使用八进制</li><li>不允许使用转义字符</li><li>不允许对只读属性赋值</li><li>不允许对一个使用<code>getter</code>方法读取的属性进行赋值</li><li>不允许删除一个不允许删除的属性</li><li>变量名不能使用<code>&quot;eval&quot;</code>字符串</li><li>变量名不能使用<code>&quot;arguments&quot;</code>字符串</li><li><p>不允许使用以下这种语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">Math</span>) &#123;x= cos(<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure></li><li><p>由于一些安全原因，在作用域<code>eval()</code>创建的变量不能被调用</p></li><li>禁止<code>this</code>关键字指向全局对象</li></ol><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>严格模式下还禁止使用如下这些保留字：</p><ul><li>implements</li><li>interface</li><li>let</li><li>package</li><li>private</li><li>protected</li><li>public</li><li>static</li><li>yield</li></ul><p>同时，<code>&#39;use strict&#39;</code>只允许出现在脚本或者方法的开头。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.runoob.com/js/js-strict.html" target="_blank" rel="noopener">JavaScript严格模式 - 菜鸟教程</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript查缺补漏 - 变量提升]]></title>
      <url>http://www.wrran.com/blog/2016/11/11/learn/js/1-hoisting/</url>
      <content type="html"><![CDATA[<blockquote><p>You don’t know what I did.</p></blockquote><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>在JavaScript 中，函数及变量的声明都将被提升到函数的最顶部，变量可以在使用后声明，也就是变量可以先使用再声明。<br>所以，下面的代码样例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// =&gt; 5</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// =&gt; 5</span></span><br></pre></td></tr></table></figure><p>但<strong>变量初始化</strong>不会被提升，即：<br>下面的代码样例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x + <span class="string">' '</span> + y); <span class="comment">// =&gt; 5 7</span></span><br></pre></td></tr></table></figure><p>而下面的代码样例输出却是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x + <span class="string">' '</span> + y); <span class="comment">// =&gt; 5 undefined</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>对于变量提升的例外情况可能导致的bug，我们可以使用以下两种方案来解决：</p><ol><li>在每个作用域开始前声明所有变量</li><li>使用JavaScript的严格模式（<code>strict mode</code>）</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.runoob.com/js/js-hoisting.html" target="_blank" rel="noopener">JavaScript变量提升 - 菜鸟教程</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zhihuer-say-16.11.2]]></title>
      <url>http://www.wrran.com/blog/2016/11/02/people-say/161102-01/</url>
      <content type="html"><![CDATA[<blockquote><p>请努力地变强吧，成为强者，然后给他们温柔</p></blockquote><p><a href="http://daily.zhihu.com/story/8829116" target="_blank" rel="noopener">小事 · 只能原谅，然后变强</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[buggix-f1-to-tp]]></title>
      <url>http://www.wrran.com/blog/2016/10/30/bugfix/f1-to-tp/</url>
      <content type="html"><![CDATA[<blockquote><p>I will count.</p></blockquote><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>设$TP$为模型判断为正例实际也为正例的样例数目，$TN$为模型判断为负例切实际也为负例的样例数目，$FP$为模型判断为正例实际为负例的样例数目，$FN$为模型判断为负例切实际也为正例的样例数目。<br>并且定义准确率<br>$$P=\frac{TP}{TP+FP}$$<br>召回率<br>$$R=\frac{TP}{TP+FN}$$<br>则，<br>$$F1 = \frac{2\times P\times R}{P+R}$$<br>现在假定$TN$和$FN$为$0$，求$TP$。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>$$F1 = \frac{2\times P\times R}{P+R}$$<br>$$ = \frac{2\times \frac{TP^2}{(TP+FP)(TP+FN)}}{TP \times \frac{(2TP+FP+FN)}{(TP+FP)(TP+FN)}}$$<br>$$ = \frac{2 \times TP}{(2TP+FP+FN)}$$<br>又因为$FN=0$，所以：<br>$$ TP = \frac{F1 \times N}{2 - F1}$$</p>]]></content>
      
        <categories>
            
            <category> bugfix </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Sails 常用指令]]></title>
      <url>http://www.wrran.com/blog/2016/10/26/cheatsheet/dev/sails/</url>
      <content type="html"><![CDATA[<blockquote><p>You need me.</p></blockquote><a id="more"></a><h1 id="Sails常用指令"><a href="#Sails常用指令" class="headerlink" title="Sails常用指令"></a>Sails常用指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建sails项目</span></span><br><span class="line">sails new sails-model</span><br><span class="line"><span class="comment"># 新建User的API，包括新建User Model和User Controller</span></span><br><span class="line">sails generate api user</span><br><span class="line"><span class="comment"># 新建Activity的Model</span></span><br><span class="line">sails generate model Activity</span><br><span class="line"><span class="comment"># 新建Activity的Controller</span></span><br><span class="line">sails generate controller &lt;controller name&gt; [action names separated by spaces...]</span><br></pre></td></tr></table></figure><h1 id="Shortcut-Routes"><a href="#Shortcut-Routes" class="headerlink" title="Shortcut Routes"></a>Shortcut Routes</h1><p>通过URL直接进行CRUD操作，方便开发。以User为例：</p><ul><li>C: <code>/user/create?name=joe</code></li><li>R: <code>/user/0</code></li><li>U: <code>/user/update/0?name=mike</code></li><li>D: <code>null</code></li></ul>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> dev </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> sails.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript注解]]></title>
      <url>http://www.wrran.com/blog/2016/10/18/howto/jsdoc/</url>
      <content type="html"><![CDATA[<blockquote><p>know what you are doing</p></blockquote><a id="more"></a><p>JavaScript是弱类型语言，这特性导致我们在编写程序时往往语义不清，限制不强。通过注解的方式在IDE等工具的帮助下可以缓解这问题。</p><h1 id="注解规范"><a href="#注解规范" class="headerlink" title="注解规范"></a>注解规范</h1><p>该部分注解需要配置<a href="http://usejsdoc.org/" target="_blank" rel="noopener">JSDoc</a>，每个注解的具体含义可以参见<a href="http://shouce.jb51.net/jsdoc/index.html" target="_blank" rel="noopener">JSDoc - 中文文档</a></p><h2 id="文件注解"><a href="#文件注解" class="headerlink" title="文件注解"></a>文件注解</h2><p>在<code>node</code>中，大部分为将定义为模块，但是会出现部分配置文件，此时可以参考如下注解：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file 该文件的主要用途</span></span><br><span class="line"><span class="comment"> * @author 作者姓名 &lt;作者邮箱&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><h2 id="模块注解"><a href="#模块注解" class="headerlink" title="模块注解"></a>模块注解</h2><p>在<code>node</code>中，文件即模块，在创建每一个模块时，就需要遵从该部分注解的格式，如下：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @module 模块名</span></span><br><span class="line"><span class="comment"> * @desc 描述该模块的主要用途</span></span><br><span class="line"><span class="comment"> * @version 该模块的版本号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author 作者姓名 &lt;作者邮箱&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><h2 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h2><p>JavaScript是弱类型语言，但当我们对变量的类型提出一定要求时，可以如下注解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @type &#123;(string|Array.&lt;string&gt;)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="comment">/** @type &#123;number&#125; */</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><code>JSDoc 3</code>中的<a href="http://shouce.jb51.net/jsdoc/tags-type.html" target="_blank" rel="noopener">@type</a>提供了多个定义类型的方法，常用的有：</p><ol><li>直接指定类型名称，如 <code>{Boolean}</code></li><li>指定为某个类型，但可能为空，如：<code>{?Number}</code></li><li>指定为某个类型，当一定不为空，如：<code>{!Number}</code></li><li>指定多个类型名，意为类型为其中之一，如<code>{Boolean|Number}</code></li><li>数组类型，如：<code>{Array.}</code>或者指出元素类型的<code>{string[]}</code></li><li>对象类型，如：<code>{Object.}</code>或者指出对象结构的<code>{a: number, b: string, c}</code>（具有属性a,b,c且a为数字，b为字符串，c为任何类型的对象类型）</li></ol><h2 id="方法注解"><a href="#方法注解" class="headerlink" title="方法注解"></a>方法注解</h2><p>一般方法应当如下注解，注意这不包括参数中含有回调函数的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述方法的主要用途</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; requiredStringParameter - this is a required parameter, you should give me :)</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; [defaultValueParam=666] - this is a parameter with default value</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; [optionalNumberParam] - this is an optional parameter, you give me if you need</span></span><br><span class="line"><span class="comment"> * @returns &#123;string|number&#125; - type of the result may be string or number.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someThing</span>(<span class="params">requiredStringParameter, defaultValueParam, optionalNumberParam</span>) </span>&#123;</span><br><span class="line">  defaultValueParam = (defaultValueParam === <span class="literal">undefined</span> ? <span class="number">666</span> : defaultValueParam); </span><br><span class="line">  <span class="keyword">if</span> (optionalNumberParam) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"this a demo"</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种特别的参数类型，接受可变数量的方法，注解如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 累加并输出和</span></span><br><span class="line"><span class="comment"> * @param &#123;...number&#125; num - 数字数组</span></span><br><span class="line"><span class="comment"> * @returns &#123;number&#125; tot - 参数总和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">var</span> tot = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">    tot += nums[i];</span><br><span class="line">  <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回调函数注解"><a href="#回调函数注解" class="headerlink" title="回调函数注解"></a>回调函数注解</h2><p>这部分需要了解<a href="http://shouce.jb51.net/jsdoc/about-namepaths.html" target="_blank" rel="noopener">JSDoc 3的名称路径</a>。<br>根据回调函数是实例方法（instance method），静态方法（static method)，内部方法（inner method）的不同，在注解的方式上也会有细微的不同。先看看回调函数为内部方法的注解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @class */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Requester</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @callback Requester~requestCallback</span></span><br><span class="line"><span class="comment">     * @param &#123;number&#125; responseCode</span></span><br><span class="line"><span class="comment">     * @param &#123;message&#125; responseMessage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">requestCallback</span>(<span class="params">responseCode, responseMessage</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * send a Requester</span></span><br><span class="line"><span class="comment"> * @param &#123;Requester~requestCallback&#125; cb - The callback that handles the response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Requester.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面这个则是回调函数为全局函数时的注解实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @class */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Requester</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * send a Requester</span></span><br><span class="line"><span class="comment"> * @param &#123;requestCallback&#125; cb - The callback that handles the response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Requester.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @callback requestCallback</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; responseCode</span></span><br><span class="line"><span class="comment"> * @param &#123;message&#125; responseMessage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestCallback</span>(<span class="params">responseCode, responseMessage</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>同理，可以得到回调函数为静态方法的注解方式，此处从略。</p><h2 id="变量注解"><a href="#变量注解" class="headerlink" title="变量注解"></a>变量注解</h2><p>在<code>JSDoc 3</code>中描述变量的注解丰富，但是鉴于根据Javascipt的语法，我们常常可以知道变量的作用域等信息。故此处仅针对部分特殊的变量做出注解要求。</p><h3 id="常量注解"><a href="#常量注解" class="headerlink" title="常量注解"></a>常量注解</h3><p>在JavaScript没有真正的常量，但当我们在逻辑上需要常量时，可以如下注解：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RGB下的颜色常量 - 红色</span></span><br><span class="line"><span class="comment"> * @const</span></span><br><span class="line"><span class="comment"> * @default 0xFF0000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> RED = <span class="number">0xFF0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 项目根路径</span></span><br><span class="line"><span class="comment"> * @const</span></span><br><span class="line"><span class="comment"> * @default</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> ROOT = <span class="string">'/path/to/root'</span>;</span><br></pre></td></tr></table></figure><p></p><h3 id="枚举注解"><a href="#枚举注解" class="headerlink" title="枚举注解"></a>枚举注解</h3><p>枚举多用来描述一些静态属性值的集合，应当如下注解：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enum for tri-state values.</span></span><br><span class="line"><span class="comment"> * @readonly</span></span><br><span class="line"><span class="comment"> * @enum &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> triState = &#123;</span><br><span class="line">    <span class="comment">/** The true value */</span></span><br><span class="line">    TRUE: <span class="number">1</span>,</span><br><span class="line">    FALSE: <span class="number">-1</span>,</span><br><span class="line">    <span class="comment">/** @type &#123;boolean&#125; */</span></span><br><span class="line">    MAYBE: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p><a href="http://wrran.com/blog/2016/10/18/code-guide-javascript/#more" target="_blank" rel="noopener">JavaScript编程规范</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jsdoc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript编程规范]]></title>
      <url>http://www.wrran.com/blog/2016/10/18/code-guide/javascript/</url>
      <content type="html"><![CDATA[<blockquote><p>neat code, happy work</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家都遵从编码规范时，可以让熟悉该规范的人集中于代码的逻辑而非具体的风格上，不仅可以减少bug的可能，还可以有效提高效率。下面介绍<code>Node</code>的编码规范。</p><h1 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h1><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>使用<code>var</code>声明变量，同时每一行只声明一个变量。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">var</span> fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork;</span><br><span class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误示例</span></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>)</span><br><span class="line">  , fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork</span><br><span class="line">  , net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line">  , EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br></pre></td></tr></table></figure><p></p><h2 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h2><p>在比较操作中，尽量使用<code>===</code>代替<code>==</code>，另外当判断假值时，应当省略<code>===</code>或者<code>==</code>。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'0'</span> === <span class="string">'0'</span>) &#123;</span><br><span class="line">    <span class="comment">// code goes here ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">    <span class="comment">// code goes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>尽量使用<code>{}</code>/<code>[]</code>来代替<code>new Object()</code>/<code>new Array()</code>，尽量不要使用<code>string</code>/<code>bool</code>/<code>number</code>对象类型，即尽量不要使用<code>new String()</code>/<code>new Boolean()</code>/<code>new Number()</code>。</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li>避免使用<code>with</code></li><li>谨慎使用<code>eval()</code></li></ol><h2 id="数组和对象"><a href="#数组和对象" class="headerlink" title="数组和对象"></a>数组和对象</h2><ol><li>字面量格式<br>创建对象或者数组时，注意在结尾用逗号分隔。如果分行，一行只放一个元素。</li><li><code>for in</code>循环<br>只针对对象使用，不对数组使用。</li><li>不要把数组当做对象使用</li></ol><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>使用2个空格作为缩进，而不是tab缩进。</p><h1 id="符号使用"><a href="#符号使用" class="headerlink" title="符号使用"></a>符号使用</h1><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>在<strong>操作符</strong>前后都加上空格；另外在<strong>小括号</strong>前后也加上空格。<br>下面是正确示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span> + baz;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// code goes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是错误示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo=<span class="string">'bar'</span>+baz;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// code goes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单双引号"><a href="#单双引号" class="headerlink" title="单双引号"></a>单双引号</h2><p>在<code>node</code>中尽量使用<strong>单引号</strong>；在<code>JSON</code>中要求所有字符串都使用双引号，内容中出现双引号时需要转义。</p><h2 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h2><p>一般情况下，大括号无需另起一行。<br>下面是正确示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// code goes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是错误示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// code goes here ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2><p>逗号用于元素声明的分割或是元素的分割，如果逗号不在行结尾时，后面需要加一个逗号；且逗号不允许出现在行首。<br>下面是正确示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'hello'</span>, bar = <span class="string">'world'</span>; <span class="comment">// 但注意变量声明时不应在同一行</span></span><br><span class="line"><span class="keyword">var</span> hello = &#123;</span><br><span class="line">  foo: <span class="string">'hello'</span>,</span><br><span class="line">  bar: <span class="string">'world'</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> world = [<span class="string">'hello'</span>, <span class="string">'world'</span>];</span><br></pre></td></tr></table></figure><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>在表达式结尾务必添加分号。</p><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><ol><li><strong>变量</strong><br>采用小驼峰式命名，即除了第一个单词的首字母不大写外，每个单词的首字母都大写，词与词之间没有任何符号，如：<code>adminUser</code>。</li><li><strong>方法</strong><br>采用小驼峰式命名。</li><li><strong>类</strong><br>采用大驼峰式命名，即所有单词的首字母都大写，如：<code>var User = function() {}</code>。</li><li><strong>常量</strong><br>所有单词的所有字母都大写，并用下划线分割，如：<code>PINK_COLOR</code>。</li><li><strong>文件</strong><br>文件命名时，使用下划线连接单词，如<code>child_process.js</code></li></ol><h1 id="NodeJS相关"><a href="#NodeJS相关" class="headerlink" title="NodeJS相关"></a>NodeJS相关</h1><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ol><li>异步回调函数的第一个参数应该是错误指示</li><li>在异步方法中一旦有回调函数传入，一定要执行它，且只执行一次</li></ol><h2 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h2><p>使用<code>node</code>推荐的方法，如下：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Socket</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  stream.Stream.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.inherits(Socket, stream.Stream); <span class="comment">// &lt;= Here</span></span><br></pre></td></tr></table></figure><p></p><h2 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h2><p>所有供外部调用的方法或变量均需要挂载在<code>exports</code>变量上，当需要将一个文件当做一个类导出时，需要通过如下的方式挂载：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = Class;</span><br></pre></td></tr></table></figure><p></p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p><a href="http://wrran.com/blog/2016/10/18/doc-javascript/#more" target="_blank" rel="noopener">JavaScript注解</a><br><a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="noopener">JSdoc模范项目 - MongoDB</a></p>]]></content>
      
        <categories>
            
            <category> code guide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bugfix-mysql-1022]]></title>
      <url>http://www.wrran.com/blog/2016/10/17/bugfix/mysql-1022/</url>
      <content type="html"><![CDATA[<blockquote><p>bugfix :)</p></blockquote><a id="more"></a><h1 id="错误重现"><a href="#错误重现" class="headerlink" title="错误重现"></a>错误重现</h1><p>在MySQL中运行如下语句：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line">true<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">trueemail <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">truecreateAt datetime,</span><br><span class="line">trueprimary <span class="keyword">key</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">engine</span>=<span class="keyword">innodb</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 活动表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> activity (</span><br><span class="line">true<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">trueuser_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">true<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">truecreateAt datetime,</span><br><span class="line">trueprimary <span class="keyword">key</span> (<span class="string">`id`</span>),</span><br><span class="line">true<span class="keyword">constraint</span> <span class="string">`user_id`</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (<span class="string">`user_id`</span>) <span class="keyword">references</span> <span class="string">`user`</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 活动发布表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> activity_publish (</span><br><span class="line">true<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">trueuser_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">trueactivity_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">truecreateAt datetime <span class="literal">null</span>,</span><br><span class="line">truestatus_audit <span class="built_in">int</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'活动发布需要审核，该位置用来记录审核状态'</span>,</span><br><span class="line">trueprimary <span class="keyword">key</span> (<span class="string">`id`</span>),</span><br><span class="line">true<span class="keyword">constraint</span> <span class="string">`user_id`</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (<span class="string">`user_id`</span>) <span class="keyword">references</span> <span class="string">`user`</span> (<span class="string">`id`</span>),</span><br><span class="line">true<span class="keyword">constraint</span> <span class="string">`activity_id`</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (<span class="string">`activity_id`</span>) <span class="keyword">references</span> <span class="string">`activity`</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p></p><p>MySQL报错信息为：<code>1022 - Can&#39;t write; duplicate key in table &#39;activity_publish&#39;</code>。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>更换限制名称，如下：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> activity_publish (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">    user_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    activity_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    createAt datetime <span class="literal">null</span>,</span><br><span class="line">    status_audit <span class="built_in">int</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'活动发布需要审核，该位置用来记录审核状态'</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">constraint</span> <span class="string">`ref_user_id`</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (<span class="string">`user_id`</span>) <span class="keyword">references</span> <span class="string">`user`</span> (<span class="string">`id`</span>), <span class="comment">-- HERE</span></span><br><span class="line">    <span class="keyword">constraint</span> <span class="string">`ref_activity_id`</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (<span class="string">`activity_id`</span>) <span class="keyword">references</span> <span class="string">`activity`</span> (<span class="string">`id`</span>) <span class="comment">-- HERE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://stackoverflow.com/questions/18056786/error-1022-cant-write-duplicate-key-in-table" target="_blank" rel="noopener">Error 1022 - Can’t write; duplicate key in table - StackOverflow</a></p>]]></content>
      
        <categories>
            
            <category> bugfix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习《机器阅读理解任务综述》 - 算法篇]]></title>
      <url>http://www.wrran.com/blog/2016/10/16/learn/ml-summarization-of-machine-reading-comprehension-1/</url>
      <content type="html"><![CDATA[<blockquote><p>I want to understand you …</p></blockquote><a id="more"></a><h1 id="机器阅读理解任务综述"><a href="#机器阅读理解任务综述" class="headerlink" title="机器阅读理解任务综述"></a>机器阅读理解任务综述</h1><p>本博文主要是学习林鸿宇等的《机器阅读理解任务综述》过程中的整理。<br>相比较于传统的自然语言处理任务，机器阅读理解任务涉及到词法、句法、语法、语义和语用等多方面的信息，需要综合运用文本的表示、分析、理解、推理等自然语言处理与理解技术。</p><p>形式化地说，解决阅读理解问题可以表示为寻求$P(A|Q, C)$的最优解的过程，其中$A$表示候选答案，$Q$表示问题本身，$C$表示给定的文档（表示文档时，更倾向于使用符号$D$）或者上下文信息。<br>要让机器能够完成阅读理解任务，我们必须解决3个重要的问题：</p><ol><li><em>表示问题</em>：我们该如何将自然语言转化为计算机可读的表示形式，并且能够从这种表示中得到完成阅读理解任务所需的信息。</li><li><em>检索问题</em>：由于阅读理解的上下文较为宽泛，因此如何从大规模的上下文信息中检索出与问题以及答案相关的部分是一个重要的问题。检索结果的质量将直接决定了阅读理解任务回答的质量。</li><li><em>答案生成问题</em>：如何根据问题以及检索得到的相关上下文，选择或生成所需要的答案。</li></ol><p>当前提出的解决该问题的方案，多是把阅读理解问题当成一个匹配问题或者打分问题来解决的。对于给定的$(D, Q, A)$三元组，其中$D$代表文档，$Q$代表问题，$A$代表答案，有如下三种解决思路：</p><ol><li>将每个$(Q, A)$对通过某些启发式规则合并成一个<em>hypothesis</em>，然后计算<em>hypothesis</em>与$D$的匹配情况</li><li>综合考虑$D$与$Q$，然后计算与$(D, Q)$对最匹配的$A$</li><li>计算$A$在$D$下的具体表示，然后与$Q$做匹配</li></ol><p>在当下的任务中，每个问题的候选答案的个数总是<strong>有限的</strong>。因此总的来说，该问题被转化为一个为$(D, Q, A)$三元组打分的排序问题。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>针对机器阅读理解问题，现在有如下三种方案：</p><ol><li>基于传统<strong>特征工程</strong>的方法</li><li>基于神经网络的方法，这种方法以<strong>Memory Network</strong>为基本结构</li><li>基于深层次的语义信息的<strong>图匹配算法</strong>，尤其适用于与事件有关的阅读理解问答</li></ol><h2 id="基于传统特征工程的方法"><a href="#基于传统特征工程的方法" class="headerlink" title="基于传统特征工程的方法"></a>基于传统特征工程的方法</h2><p>该算法的核心在于<strong>选取不同的特征</strong>，然后基于选取的特征构造并学习一个三元打分函数$f(a, q, d)$，将得分最高的候选答案$a$作为问题$q$在文档$d$中的答案。较为常用的打分函数有线性模型和对数模型。</p><p>当前被证明有效的<strong>浅层特征</strong>主要包括如下几类：</p><ol><li>与答案本身相关：考察答案$A$在原文$D$中是否出现、出现的频率等信息</li><li>答案与问题在原文中的关联：例如，考察答案$A$与问题$Q$中的词语在原文$D$中的距离，答案$A$与问题$Q$在原文$D$中的窗口序列的n-gram匹配度、答案$A$中的实体与问题$Q$中的实体的共现问题等。</li><li>依存语法：该方法一般通过启发式规则将问题$Q$与答案$A$结合，然后抽取出依存关系对，同时对原文$D$进行依存句法分析，然后考察问题/答案对$Q/A$的依存句法与原文的依存句法的匹配情况。</li><li>语篇关系：考察与问题$Q$相关的多个句子在原文$D$中的语篇关系。如一个以why开头的问句，则这个问题的多个相关句子在原文中可能存在因果关系。</li></ol><p>除了上述浅层的特征之外，还有一些较为<strong>深层次的语义特征</strong>被引入到该问题的解决方案中，包括：</p><ol><li>语义框架匹配：考察答案/问题$A/Q$与文章$D$当中的句子的语义框架匹配程度。</li><li>Word Embedding：使用了两种基于<em>word embedding</em>的方法，包括有<em>BOW</em>以及<em>基于依存树结构的匹配方法</em>。</li></ol><p>基于传统特征工程的方法的问题在于</p><ol><li>由于大多数传统特征是基于离散的串匹配的，因此在解决表达的<strong>多样性问题</strong>上显得较为困难</li><li>由于大多数特征工程的方法都是基于窗口匹配的，因此很难处理多个句子之间的<strong>长距离依赖问题</strong>。虽然近来有学者提出基于多种不同层次窗口的模型可以缓解该问题，但由于窗口或n-gram并不是一个最有效的语义单元，存在<strong>语义缺失</strong>（缺少部分使语义完整的词）或者<strong>噪音</strong>（引入与主体语义无关的词）等问题。</li></ol><h2 id="Memory-Network"><a href="#Memory-Network" class="headerlink" title="Memory Network"></a>Memory Network</h2><p>在神经网络中，各种语义单元被表示为<em>连续的语义空间上的向量</em>，可以有效的解决<em>语义稀疏性</em>以及<em>复述</em>的问题。<br>在这个方向中，最具代表的是由Weston等人提出的Memory Network，其包括如下几个部分：</p><ol><li>输入特征映射：将输入层（文本序列）转化到特征空间之中，类似于<code>embedding</code></li><li>泛化层：根据新的输入，来更新旧的、已有的记忆</li><li>输出特征层：根据现时的记忆，输出一个或多个特征向量作为反馈</li><li>反馈层：将输出的特征空间的向量转换为现实空间中的反馈信息，如一个词。</li></ol><p>具体的说，Weston等人提出的是：</p><ol><li>输入特征映射：以句子作为基本的输入单元，使用句子的BOW表示作为句子表示</li><li>泛化层：直接将输入层的输入信号存储下来</li><li>输出特征层：查找与当前输入最匹配的k个记忆向量作为输出的反馈。具体地，当$K=1$时，该模型首先输出一个特征向量，满足<br>$$o_1=O_1(x, m)=argmax_{i=1…n}s_o(x, m_i)$$<br>即找出与当前输入最相似的从前记忆，其中$s_o$是一个打分函数，原文中使用的是<em>bilinear</em>的打分函数，有<br>$$s(x, y)=\phi_x(x)^TU^TU\phi_y(y)$$<br>其中是$\phi$将输入映射到特征向量（即句子映射到其BOW表示）的函数，则$U$可以理解为一个隐含空间中的<code>embedding</code>矩阵。<br>该相似度函数本质上度量的是<strong>$x$与$y$中所有词的内积距离之和</strong>，是一种<code>matching</code>函数。<br>在查找完第一个相关记忆之后，我们在给定第一个记忆的基础上，获取第二个最相似记忆，即<br>$$o_2=O_2(x, m)=argmax_{i=1…N}s_o([x, m_1], m_i)$$<br>在得到全部的输出特征之后，我们可以根据所检索到的相关记忆以及输入信息得到最终的反馈。</li><li>反馈层：如果反馈需要的是一个词的话，我们可以做出如下定义：<br>$$r=argmax_{x\in W}s_r([x, m_1, m2], w)$$</li></ol><p>该模型可以很好的用于<em>QA问题</em>，只需要将文档的<em>BOW</em>作为记忆层，将<em>Question</em>作为最新的输入，然后通过该网络匹配原文中最相关的句子之后，即可得到相应的输出。<br>由于该模型保留了每一个输入语义单元（句子或者片段）的信息，因此在输出特征层可以很好的处理<strong>长距离依赖问题</strong>。同时由于在输出特征层使用了多层的结构，该模型可以处理<strong>多句之间的推理问题</strong>。</p><p>但这个模型的中有$argmax$操作的存在，导致Weston等的模型必须使用是<strong>完全有监督</strong>的算法进行，即在训练的过程中不仅仅需要标注每个问题的答案，还需要标注有答案匹配的关键句子。对此，Subhaatear等人提出了一种端到端的模型，主要是正对原模型的<strong>输出层</strong>进行了修改，将原本的因匹配机制换成了<strong>一种基于attention的软匹配机制</strong>。<br>对于第$k$次匹配中的输入向量，其与每个记忆向量的匹配得分按照如下方式算出：<br>$$p_i=softmax(u_k^Tm_i)$$<br>之后，根据<code>attention</code>的匹配结果，我们得到第$k$次匹配的输出结果：<br>$$o_k=\sum p_iAm_i$$<br>其中，$A$是记忆层到输出层的<code>embedding</code>参数矩阵。<br>之后，我们根据第$k$轮的输出结果，我们更新第$k+1$轮的输出信息<br>$$u_{k+1}=u_k+o_k$$</p><p>Memory Network在阅读理解中被证明是一种有效方法，它将表示、检索、答案生成，由离散的空间转换到了连续的语义空间之中，从而可以有效的处理复述以及传统的<code>one-hot</code>词表示的数据稀疏问题。但如何在该框架下学习到更好的语义表示、如何更好的检索相关句子、如何更好的依据相关问题以及问题的生成答案都是需要我们努力的地方。</p><h2 id="基于深层次语义的图匹配方法"><a href="#基于深层次语义的图匹配方法" class="headerlink" title="基于深层次语义的图匹配方法"></a>基于深层次语义的图匹配方法</h2><p>对于魔蝎<strong>需要引入外部知识</strong>进行更深层次的推理、几乎无法通过相似度匹配的阅读理解问题来说，我们就需要参考下<em>易于深层次语义的图匹配方法</em>的想法了。<br>Berant等人提出了一种图匹配算法，该方法：</p><ol><li>首先通过类似于语义角色标注的方法，将整篇文章转化成一个图结构</li><li>然后将问题与答案组合（称为查询），也转化为一个图结构</li><li>最后考虑文章的图结构与查询的图结构之间的匹配度</li></ol><p>具体的，Berant等人针对<code>Biological Processes</code>问题，如下解决：</p><ol><li>文章生成图结构：使用一种<em>扩展的语义角色标注</em>的方法。具体地，鉴于生化过程的核心是<strong>动词</strong>，因此文档使用了以动词（trigger）为核心来构造图。<br>作者将该语义图内的边分为两种：<strong>动词 - 参数</strong>以及<strong>动词 - 动词</strong>连边。针对动词 - 动词连边，又将动作A和动作B分为三种可能的关系：<code>cause</code>、<code>enable</code>和<code>prevent</code>，分别表示A是导致B的直接原因（即A发生后B立即发生）、A是B的发生条件（但B不一定紧随A发生）以及A阻止了B的发生。在动词 - 参数连边上，由于性质类似，沿用了语义角色标注中的相关标记。除此之外，文章还定义了一些启发式的约束条件，来保证全文标记的<em>一致性</em>。<br>最后，文章使用了一个<code>ILP</code>算法来求解每篇文章的图结构。</li><li>问题/答案生成图结构：首先将一个问题/答案对组合转化成一个三元组，这个三元组中包含有一个源节点、目标节点以及一个由关系的正则表达式组成的边的组合。正则表达式是由问句的类型(直接导致、阻止、以及默认关系)根据规则而产生的，实际上就是指在文章图中可以接受的边的组合。这种转化是基于某些简单的启发式规则完成的。</li><li>图匹配：在那之后，只需要将问题/答案三元组中的源节点与目标节点映射到文章中，并且检查文章图中两个节点之间是否存在满足正则表达式的边即可。这样，该阅读理解问题被转化成了一个图匹配问题。</li></ol><p>该方法的<strong>优点</strong>在于：由于引入了更深层次的语义结构，该方法能够捕捉到更深层次的语义信息，从而获得了更好的理解能力。同样，也是由于这种语义结构的定义是与问题高度相关的，并且结构的定义十分依赖于人工干预，导致这种方法成为一种领域相关的方法，应用的范围有较大限制。</p><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>[TODO]: 下次再看</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://mp.weixin.qq.com/s?__biz=MzAwMjM4NDU4MA==&amp;mid=2649191077&amp;idx=1&amp;sn=47ed5e2bdfca8aeb8092d47122036794&amp;chksm=82d8e50eb5af6c184d9d0f30cfe65bc820f4887d7b1420cc2dde5b492fef41a3fc75f817d01c&amp;mpshare=1&amp;scene=1&amp;srcid=1013bpGjKaWT9f6r4BPPu26x#rd" target="_blank" rel="noopener">机器阅读理解任务综述</a></p><h1 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h1><p>综述里面一长串参考文献中，你要看的有：<br>[TODO]</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> machine learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> machine learning </tag>
            
            <tag> machine reading comprehension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sails.js学习笔记 - 路由]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/howto/sails/2-routers/</url>
      <content type="html"><![CDATA[<blockquote><p>Sails.js, the web framework of your dreams.</p></blockquote><a id="more"></a><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><blockquote><p><strong>Routes</strong> are rules that tell Sails what to do when faced with an incoming request. There are two main types of routes in Sails: <em>custom</em> (or “explicit”) and <em>automatic</em> (or “implicit”).</p></blockquote><p>Sails.js提供了两种形式的路由，一是<code>custom</code>，一是<code>automatic</code>。</p><h2 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h2><p>[TODO]</p><h2 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h2><p>Sails默认为我们制订了一些路由的映射规则。如果一个URL没法匹配任何自定义的路由，此时默认路由就会做出反应。</p><h3 id="Blueprint-routes"><a href="#Blueprint-routes" class="headerlink" title="Blueprint routes"></a>Blueprint routes</h3><blockquote><p><em>Blueprints</em> are Sails’ way of quickly generating API routes and actions based on your application design.</p></blockquote><p>该路由为<code>controllers</code>和<code>models</code>提供了全方面的REST的API，方便测试。</p><p><strong><code>blueprint API</code></strong>由两部分组成：<code>blueprint routes</code>和<code>blueprint actions</code>，它为我们提供了默认的<em>RESTful JSON API</em>。举例来说，当我们创建了一个<code>User.js</code>的模型与<code>UserController.js</code>的控制器之后，我们就可以通过<code>/user/create?name=jce</code>来创建一个<em>User</em>，通过<code>/user</code>来查询应用中已有的用户，并且这些行为都是可以配置的。</p><h4 id="Blueprint-Routes"><a href="#Blueprint-Routes" class="headerlink" title="Blueprint Routes"></a>Blueprint Routes</h4><p>当Sails应用正式运行（lift），并且开启<code>blueprint</code>功能后，应用就会被默认绑定一些路由。默认情况下，<em>blueprint routes</em>会指向各自对应的<em>blueprint action</em>，并且它们都是高度可定制的。<br>在sails中，blueprint routes有三种：</p><ol><li>RESTful routes: 这种情况下，URL的路径是<code>/:modelIdentity</code>或者<code>/:modelIdentity/:id</code>的形式。至于CRUD的操作，则是通过HTTP的方法决定的。例如：<code>POST /user</code>将新建一个User，<code>DELETE /user/123</code>将删除主键为123的User。在生产环境下，RESTful routes 应当被<code>policies</code>限制，防止一些未授权的操作，破坏系统状态。</li><li>Shortcut routes: 这与RESTful routes不同指出在于，CRUD动作是在路径中指出的。如，<code>/user/create?name=joe</code>用来创建用户，<code>/user/update/1?name=mike</code>用来更新主键为1的用户信息，同时这些路由的HTTP请求方式都是GET。在生产环境下，Shortcut routes应当被禁止。</li><li>Action routes: 这些是为你<code>Controller</code>的自定义<em>action</em>生成路由。如，你创建了一个<code>FooController.js</code>的Controller，它有一个<code>bar</code>方法，那么只要你的blueprint action routes是开启的，<code>/foo/bar</code>这个路由就会自动创建。与上述两种类型的路由不同，action routes不要求有对应的model层。</li></ol><p>至于blueprint routes的配置，可以参见<a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.blueprints.html" target="_blank" rel="noopener">blueprints subsection of the configuration references</a>。</p><h4 id="Blueprint-Actions"><a href="#Blueprint-Actions" class="headerlink" title="Blueprint Actions"></a>Blueprint Actions</h4><p>注意，不要把<code>blueprint actions</code>与上述的<code>blueprint action routes</code>混淆。<br>blueprint actions为你的某些满足条件的controller提供默认支持。这些controller的要求就是要有相同的model，如<code>ParrotController</code>需要一个名为<code>Parrot</code>的Model。更具体的说，如果你创建了一个满足条件的UserController（即需要有名为<code>User</code>的model），你的UserController默认就将有<code>find</code>、<code>create</code>、<code>update</code>、<code>destroy</code>、<code>populate</code>、<code>add</code>和<code>remove</code>方法了。<br>默认情况下，<code>blueprint RESTful routes</code>与<code>blueprint shortcut routes</code>就是绑定到对应的这些方法上的。我们可以通过覆写（override）特定Controller的方法来<em>改变</em>特定方法的行为，如覆写<code>ParrotController.find</code>方法。同时，如果你想改变应用中<em>所有</em>Controller的blueprint action，只需要在特定的位置创建对应的方法就好，例如：<code>api/blueprints/create.js</code>。</p><p>现在（2016年10月17日），Sails提供如下blueprint actions：</p><ul><li><a href="http://sailsjs.org/documentation/reference/blueprint-api/Find" target="_blank" rel="noopener">find</a></li><li><a href="http://sailsjs.org/documentation/reference/blueprint-api/FindOne" target="_blank" rel="noopener">findOne</a></li><li><a href="http://sailsjs.org/documentation/reference/blueprint-api/create" target="_blank" rel="noopener">create</a></li><li><a href="http://sailsjs.org/documentation/reference/blueprint-api/Update" target="_blank" rel="noopener">update</a></li><li><a href="http://sailsjs.org/documentation/reference/blueprint-api/Destroy" target="_blank" rel="noopener">destroy</a></li><li><a href="http://sailsjs.org/documentation/reference/blueprint-api/Populate" target="_blank" rel="noopener">populate</a></li><li><a href="http://sailsjs.org/documentation/reference/blueprint-api/Add" target="_blank" rel="noopener">add</a></li><li><a href="http://sailsjs.org/documentation/reference/blueprint-api/Remove" target="_blank" rel="noopener">remove</a></li></ul><p>关于如何启用/禁用以及覆写blueprint action，可以参见<a href="http://sailsjs.org/documentation/reference/blueprint-api" target="_blank" rel="noopener">Blueprint API reference</a>。</p><h3 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h3><p>为图片、JS文件、样式表等提供路由。</p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>如果被打开，则会提供一个<strong><code>/csrfToken</code></strong>的路由，用来支持CSRF。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://sailsjs.org/documentation/concepts/routes" target="_blank" rel="noopener">Routes - Concepts</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> sails.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sails.js </tag>
            
            <tag> framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sails.js学习笔记 - App架构]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/howto/sails/1-structure/</url>
      <content type="html"><![CDATA[<blockquote><p>Sails.js, the web framework of your dreams.</p></blockquote><a id="more"></a><h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><ul><li><code>api</code><br>目录下是你要构建应用的核心所在，常说的MVC的设计结构就体现在这里<ul><li><code>api/controllers</code>：控制层，该层是Http请求的入口。Sails官方建议该层只处理请求的转发和页面的渲染，具体的逻辑实现应该交给Service层。</li><li><code>api/models</code>：模型层，在Sails中，对于Model采用的是充血模型，除了可以在模型中定于属性之外，还可以定义包含逻辑处理的函数。在Sails中，所有Model都可以全局性访问。</li><li><code>api/policies</code>：过滤层，该层在Controller层之前对Http请求做处理，在这一层中，可以定于一些规则来过滤Http请求，比如身份认证什么的。</li><li><code>api/responses</code>：http响应的方法都放这里，例如服务器错误、请求错误、404错误等，定义在responses文件夹里面的方法，都会赋值到controller层的req对象中。</li><li><code>api/services</code>：服务层，该层包含逻辑处理的方法，在Sails中，所有Service都可以全局性访问。</li></ul></li><li><code>views</code><br>视图层，存放视图模版文件的地方，Sails默认是提供ejs模版引擎的，如果你愿意，你可以换成jade、handlebars或者任何你喜欢的模版引擎。</li><li><code>assets</code><br>资源文件夹，在Sails启动的时候，会启动某一个Grunt任务，把assets文件 夹里的内容或压缩或编译或复制到根目录下的.tmp目录，这是前端可以直接通过路由访问的资源，HTML、JS、CSS以及图片等静态资源都放在这里了。</li><li><code>config</code><br>配置文件夹，在Sails启动的时候，会加载该文件夹里的文件，并赋值在全局对象sails.config中，所以能够在任何一个地方都能用到。在用Sails开发，会经常跟这个文件夹里的文件打交道，从config的构成很容易知道Sails都提供哪方面的功能。</li><li><code>tasks</code><br>Sails自带的项目自动化工具是Grunt，而Grunt的配置和任务注册都放在这个文件夹里了。这里已经提供了通常会用到的CSS编译、JS压缩、文件合并，更改检测等等任务，当然如果没有自己需要的，还能扩展。</li><li><code>app.js</code><br>Sails的启动文件，无论是$ sails lift命令或者$ npm start命令都会运行该文件。</li><li><code>Gruntfile.js</code></li><li>其他，如<code>README.md</code>，<code>node_modules</code>，<code>package.json</code></li></ul><h1 id="测试相关的规范"><a href="#测试相关的规范" class="headerlink" title="测试相关的规范"></a>测试相关的规范</h1><p>sails使用mocha进行单元测试，在新建的sails项目中，没有创建单元测试的文件夹，需要自己动手构建单元测试的目录，官方建议的目录为：</p><ul><li><code>test</code><ul><li><code>unit</code><ul><li><code>controllers</code><br>UsersController.test.js</li><li><code>models</code><br>Users.test.js</li><li>…</li></ul></li><li><code>fixtures</code></li><li>…</li><li>bootstrap.test.js</li><li>mocha.opts</li></ul></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://cnodejs.org/topic/553c7b4a1a6e36a27780ee65" target="_blank" rel="noopener">为什么使用sails？</a><br><a href="http://sailsjs.org/documentation/anatomy/my-app" target="_blank" rel="noopener">Anatomy of a Sails App - myApp</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> sails.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sails.js </tag>
            
            <tag> framework </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MathJax - 常用符号与字体]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/cheatsheet/reference/mathjax/</url>
      <content type="html"><![CDATA[<blockquote><p>Beautiful math in all browsers</p></blockquote><a id="more"></a><p>本博文主要给出<code>MathJax</code>常用的数学符号，以备查阅。</p><h1 id="常用代码段"><a href="#常用代码段" class="headerlink" title="常用代码段"></a>常用代码段</h1><p>描述函数$$\mathrm{pred}$$:<br><code>\mathrm{pred}:\mathbb{N}\rightarrow\mathbb{N}</code></p><p>描述证明过程:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;align&#125;</span><br><span class="line">\mathrm&#123;pred&#125;(x) &amp;=x-1\\</span><br><span class="line">&amp;=x-\mathrm&#123;S&#125;(\mathrm&#123;Z&#125;(x))\\</span><br><span class="line">&amp;=\mathrm&#123;sub&#125;(x, \mathrm&#123;S&#125;(\mathrm&#123;Z&#125;(x)))\\</span><br><span class="line">&amp;=\mathrm&#123;sub&#125;(\mathrm&#123;P&#125;_1^1(x), \mathrm&#123;S&#125;(\mathrm&#123;Z&#125;(x)))\\</span><br><span class="line">&amp;=\mathrm&#123;Comp&#125;_1^2[\mathrm&#123;sub&#125;;\mathrm&#123;P&#125;_1^1, \mathrm&#123;S&#125;\circ\mathrm&#123;Z&#125;](x)</span><br><span class="line">\end&#123;align&#125;</span><br></pre></td></tr></table></figure><p></p><p>描述分段函数：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\mathrm&#123;pred&#125;(x)=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">0, &amp;\text&#123;if&#125;\ x=0,\\</span><br><span class="line">x-1,&amp;\text&#123;if&#125;\ x&gt;0.</span><br><span class="line">\end&#123;cases&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="数学模式重音符"><a href="#数学模式重音符" class="headerlink" title="数学模式重音符"></a>数学模式重音符</h1><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\hat{a}$</td><td style="text-align:center"><code>$\hat{a}$</code></td></tr><tr><td style="text-align:center">$\check{a}$</td><td style="text-align:center"><code>$\check{a}$</code></td></tr><tr><td style="text-align:center">$\tilde{a}$</td><td style="text-align:center"><code>$\tilde{a}$</code></td></tr><tr><td style="text-align:center">$\acute{a}$</td><td style="text-align:center"><code>$\acute{a}$</code></td></tr><tr><td style="text-align:center">$\grave{a}$</td><td style="text-align:center"><code>$\grave{a}$</code></td></tr><tr><td style="text-align:center">$\dot{a}$</td><td style="text-align:center"><code>$\dot{a}$</code></td></tr><tr><td style="text-align:center">$\ddot{a}$</td><td style="text-align:center"><code>$\ddot{a}$</code></td></tr><tr><td style="text-align:center">$\breve{a}$</td><td style="text-align:center"><code>$\breve{a}$</code></td></tr><tr><td style="text-align:center">$\bar{a}$</td><td style="text-align:center"><code>$\bar{a}$</code></td></tr><tr><td style="text-align:center">$\vec{a}$</td><td style="text-align:center"><code>$\vec{a}$</code></td></tr><tr><td style="text-align:center">$\widehat{A}$</td><td style="text-align:center"><code>$\widehat{A}$</code></td></tr><tr><td style="text-align:center">$\widetilde{A}$</td><td style="text-align:center"><code>$\widetilde{A}$</code></td></tr></tbody></table><h1 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h1><table><thead><tr><th style="text-align:center">小写</th><th style="text-align:center">大写</th><th style="text-align:center">小写代码</th></tr></thead><tbody><tr><td style="text-align:center">$\alpha$</td><td style="text-align:center">$\Alpha$</td><td style="text-align:center"><code>$\alpha$</code></td></tr><tr><td style="text-align:center">$\beta$</td><td style="text-align:center">$\Beta$</td><td style="text-align:center"><code>$\beta$</code></td></tr><tr><td style="text-align:center">$\gamma$</td><td style="text-align:center">$\Gamma$</td><td style="text-align:center"><code>$\gamma$</code></td></tr><tr><td style="text-align:center">$\delta$</td><td style="text-align:center">$\Delta$</td><td style="text-align:center"><code>$\delta$</code></td></tr><tr><td style="text-align:center">$\epsilon$</td><td style="text-align:center">$\Epsilon$</td><td style="text-align:center"><code>$\epsilon$</code></td></tr><tr><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">$\Varepsilon$</td><td style="text-align:center"><code>$\varepsilon$</code></td></tr><tr><td style="text-align:center">$\zeta$</td><td style="text-align:center">$\Zeta$</td><td style="text-align:center"><code>$\zeta$</code></td></tr><tr><td style="text-align:center">$\eta$</td><td style="text-align:center">$\Eta$</td><td style="text-align:center"><code>$\eta$</code></td></tr><tr><td style="text-align:center">$\theta$</td><td style="text-align:center">$\Theta$</td><td style="text-align:center"><code>$\theta$</code></td></tr><tr><td style="text-align:center">$\vartheta$</td><td style="text-align:center">$\Vartheta$</td><td style="text-align:center"><code>$\vartheta$</code></td></tr><tr><td style="text-align:center">$\iota$</td><td style="text-align:center">$\Iota$</td><td style="text-align:center"><code>$\iota$</code></td></tr><tr><td style="text-align:center">$\lambda$</td><td style="text-align:center">$\Lambda$</td><td style="text-align:center"><code>$\lambda$</code></td></tr><tr><td style="text-align:center">$\mu$</td><td style="text-align:center">$\Mu$</td><td style="text-align:center"><code>$\mu$</code></td></tr><tr><td style="text-align:center">$\nu$</td><td style="text-align:center">$\Nu$</td><td style="text-align:center"><code>$\nu$</code></td></tr><tr><td style="text-align:center">$\xi$</td><td style="text-align:center">$\Xi$</td><td style="text-align:center"><code>$\xi$</code></td></tr><tr><td style="text-align:center">$o$</td><td style="text-align:center">$O$</td><td style="text-align:center"><code>$o$</code></td></tr><tr><td style="text-align:center">$\pi$</td><td style="text-align:center">$\Pi$</td><td style="text-align:center"><code>$\pi$</code></td></tr><tr><td style="text-align:center">$\varpi$</td><td style="text-align:center">$\Varpi$</td><td style="text-align:center"><code>$\varpi$</code></td></tr><tr><td style="text-align:center">$\rho$</td><td style="text-align:center">$\Rho$</td><td style="text-align:center"><code>$\rho$</code></td></tr><tr><td style="text-align:center">$\varrho$</td><td style="text-align:center">$\Varrho$</td><td style="text-align:center"><code>$\varrho$</code></td></tr><tr><td style="text-align:center">$\sigma$</td><td style="text-align:center">$\Sigma$</td><td style="text-align:center"><code>$\sigma$</code></td></tr><tr><td style="text-align:center">$\varsigma$</td><td style="text-align:center">$\Varsigma$</td><td style="text-align:center"><code>$\varsigma$</code></td></tr><tr><td style="text-align:center">$\tau$</td><td style="text-align:center">$\Tau$</td><td style="text-align:center"><code>$\tau$</code></td></tr><tr><td style="text-align:center">$\upsilon$</td><td style="text-align:center">$\Upsilon$</td><td style="text-align:center"><code>$\upsilon$</code></td></tr><tr><td style="text-align:center">$\phi$</td><td style="text-align:center">$\Phi$</td><td style="text-align:center"><code>$\phi$</code></td></tr><tr><td style="text-align:center">$\varphi$</td><td style="text-align:center">$\Varphi$</td><td style="text-align:center"><code>$\varphi$</code></td></tr><tr><td style="text-align:center">$\chi$</td><td style="text-align:center">$\Chi$</td><td style="text-align:center"><code>$\chi$</code></td></tr><tr><td style="text-align:center">$\psi$</td><td style="text-align:center">$\Psi$</td><td style="text-align:center"><code>$\psi$</code></td></tr><tr><td style="text-align:center">$\omega$</td><td style="text-align:center">$\Omega$</td><td style="text-align:center"><code>$\omega$</code></td></tr></tbody></table><p><em>Notes</em>：大写字母的代码只需要将小写代码的<strong>首字母</strong>变为大写就好，如上表所示，并非所有希腊字母都有大写格式。</p><h1 id="二元关系符"><a href="#二元关系符" class="headerlink" title="二元关系符"></a>二元关系符</h1><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$&lt;$</td><td style="text-align:center"><code>$&lt;$</code></td></tr><tr><td style="text-align:center">$&gt;$</td><td style="text-align:center"><code>$&gt;$</code></td></tr><tr><td style="text-align:center">$=$</td><td style="text-align:center"><code>$=$</code></td></tr><tr><td style="text-align:center">$\le$</td><td style="text-align:center"><code>$\le$</code></td></tr><tr><td style="text-align:center">$\ge$</td><td style="text-align:center"><code>$\ge$</code></td></tr><tr><td style="text-align:center">$\equiv$</td><td style="text-align:center"><code>$\equiv$</code></td></tr><tr><td style="text-align:center">$\ll$</td><td style="text-align:center"><code>$\ll$</code></td></tr><tr><td style="text-align:center">$\gg$</td><td style="text-align:center"><code>$\gg$</code></td></tr><tr><td style="text-align:center">$\doteq$</td><td style="text-align:center"><code>$\doteq$</code></td></tr><tr><td style="text-align:center">$\prec$</td><td style="text-align:center"><code>$\prec$</code></td></tr><tr><td style="text-align:center">$\succ$</td><td style="text-align:center"><code>$\succ$</code></td></tr><tr><td style="text-align:center">$\sim$</td><td style="text-align:center"><code>$\sim$</code></td></tr><tr><td style="text-align:center">$\preceq$</td><td style="text-align:center"><code>$\preceq$</code></td></tr><tr><td style="text-align:center">$\succeq$</td><td style="text-align:center"><code>$\succeq$</code></td></tr><tr><td style="text-align:center">$\simeq$</td><td style="text-align:center"><code>$\simeq$</code></td></tr><tr><td style="text-align:center">$\subset$</td><td style="text-align:center"><code>$\subset$</code></td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center"><code>$\supset$</code></td></tr><tr><td style="text-align:center">$\approx$</td><td style="text-align:center"><code>$\approx$</code></td></tr><tr><td style="text-align:center">$\subseteq$</td><td style="text-align:center"><code>$\subseteq$</code></td></tr><tr><td style="text-align:center">$\supseteq$</td><td style="text-align:center"><code>$\supseteq$</code></td></tr><tr><td style="text-align:center">$\cong$</td><td style="text-align:center"><code>$\cong$</code></td></tr><tr><td style="text-align:center">$\sqsubset$</td><td style="text-align:center"><code>$\sqsubset$</code></td></tr><tr><td style="text-align:center">$\sqsupset$</td><td style="text-align:center"><code>$\sqsupset$</code></td></tr><tr><td style="text-align:center">$\Join$</td><td style="text-align:center"><code>$\Join$</code></td></tr><tr><td style="text-align:center">$\sqsubseteq$</td><td style="text-align:center"><code>$\sqsubseteq$</code></td></tr><tr><td style="text-align:center">$\sqsupseteq$</td><td style="text-align:center"><code>$\sqsupseteq$</code></td></tr><tr><td style="text-align:center">$\bowtie$</td><td style="text-align:center"><code>$\bowtie$</code></td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center"><code>$\in$</code></td></tr><tr><td style="text-align:center">$\ni$</td><td style="text-align:center"><code>$\ni$</code></td></tr><tr><td style="text-align:center">$\propto$</td><td style="text-align:center"><code>$\propto$</code></td></tr><tr><td style="text-align:center">$\vdash$</td><td style="text-align:center"><code>$\vdash$</code></td></tr><tr><td style="text-align:center">$\dashv$</td><td style="text-align:center"><code>$\dashv$</code></td></tr><tr><td style="text-align:center">$\models$</td><td style="text-align:center"><code>$\models$</code></td></tr><tr><td style="text-align:center">$\mid$</td><td style="text-align:center"><code>$\mid$</code></td></tr><tr><td style="text-align:center">$\parallel$</td><td style="text-align:center"><code>$\parallel$</code></td></tr><tr><td style="text-align:center">$\perp$</td><td style="text-align:center"><code>$\perp$</code></td></tr><tr><td style="text-align:center">$\smile$</td><td style="text-align:center"><code>$\smile$</code></td></tr><tr><td style="text-align:center">$\frown$</td><td style="text-align:center"><code>$\frown$</code></td></tr><tr><td style="text-align:center">$\asymp$</td><td style="text-align:center"><code>$\asymp$</code></td></tr><tr><td style="text-align:center">$:$</td><td style="text-align:center"><code>`$:$</code></td></tr><tr><td style="text-align:center">$\notin$</td><td style="text-align:center"><code>$\notin$</code></td></tr><tr><td style="text-align:center">$\ne$</td><td style="text-align:center"><code>$\ne$</code></td></tr></tbody></table><p><em>Notes</em>: 可以在上述代码前面加上<code>\not</code>来得到其否定形式。</p><h1 id="二元运算符"><a href="#二元运算符" class="headerlink" title="二元运算符"></a>二元运算符</h1><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$+$</td><td style="text-align:center"><code>$+$</code></td></tr><tr><td style="text-align:center">$-$</td><td style="text-align:center"><code>$-$</code></td></tr><tr><td style="text-align:center">$\pm$</td><td style="text-align:center"><code>$\pm$</code></td></tr><tr><td style="text-align:center">$\mp$</td><td style="text-align:center"><code>$\mp$</code></td></tr><tr><td style="text-align:center">$\cdot$</td><td style="text-align:center"><code>$\cdot$</code></td></tr><tr><td style="text-align:center">$\div$</td><td style="text-align:center"><code>$\div$</code></td></tr><tr><td style="text-align:center">$\times$</td><td style="text-align:center"><code>$\times$</code></td></tr><tr><td style="text-align:center">$\cup$</td><td style="text-align:center"><code>$\cup$</code></td></tr><tr><td style="text-align:center">$\cap$</td><td style="text-align:center"><code>$\cap$</code></td></tr><tr><td style="text-align:center">$\sqcup$</td><td style="text-align:center"><code>$\sqcup$</code></td></tr><tr><td style="text-align:center">$\sqcap$</td><td style="text-align:center"><code>$\sqcap$</code></td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center"><code>$\vee$</code></td></tr><tr><td style="text-align:center">$\wedge$</td><td style="text-align:center"><code>$\wedge$</code></td></tr><tr><td style="text-align:center">$\oplus$</td><td style="text-align:center"><code>$\oplus$</code></td></tr><tr><td style="text-align:center">$\ominus$</td><td style="text-align:center"><code>$\ominus$</code></td></tr><tr><td style="text-align:center">$\odot$</td><td style="text-align:center"><code>$\odot$</code></td></tr><tr><td style="text-align:center">$\otimes$</td><td style="text-align:center"><code>$\otimes$</code></td></tr><tr><td style="text-align:center">$\oslash$</td><td style="text-align:center"><code>$\oslash$</code></td></tr><tr><td style="text-align:center">$\bigcirc$</td><td style="text-align:center"><code>$\bigcirc$</code></td></tr><tr><td style="text-align:center">$\star$</td><td style="text-align:center"><code>$\star$</code></td></tr><tr><td style="text-align:center">$\ast$</td><td style="text-align:center"><code>$\ast$</code></td></tr><tr><td style="text-align:center">$\circ$</td><td style="text-align:center"><code>$\circ$</code></td></tr><tr><td style="text-align:center">$\bullet$</td><td style="text-align:center"><code>$\bullet$</code></td></tr><tr><td style="text-align:center">$\diamond$</td><td style="text-align:center"><code>$\diamond$</code></td></tr><tr><td style="text-align:center">$\uplus$</td><td style="text-align:center"><code>$\uplus$</code></td></tr><tr><td style="text-align:center">$\amalg$</td><td style="text-align:center"><code>$\amalg$</code></td></tr><tr><td style="text-align:center">$\dagger$</td><td style="text-align:center"><code>$\dagger$</code></td></tr><tr><td style="text-align:center">$\ddagger$</td><td style="text-align:center"><code>$\ddagger$</code></td></tr><tr><td style="text-align:center">$\wr$</td><td style="text-align:center"><code>$\wr$</code></td></tr><tr><td style="text-align:center">$\triangleleft$</td><td style="text-align:center"><code>$\triangleleft$</code></td></tr><tr><td style="text-align:center">$\triangleright$</td><td style="text-align:center"><code>$\triangleright$</code></td></tr><tr><td style="text-align:center">$\bigtriangleup$</td><td style="text-align:center"><code>$\bigtriangleup$</code></td></tr><tr><td style="text-align:center">$\bigtriangledown$</td><td style="text-align:center"><code>$\bigtriangledown$</code></td></tr><tr><td style="text-align:center">$\lhd$</td><td style="text-align:center"><code>$\lhd$</code></td></tr><tr><td style="text-align:center">$\rhd$</td><td style="text-align:center"><code>$\rhd$</code></td></tr><tr><td style="text-align:center">$\unlhd$</td><td style="text-align:center"><code>$\unlhd$</code></td></tr><tr><td style="text-align:center">$\unrhd$</td><td style="text-align:center"><code>$\unrhd$</code></td></tr></tbody></table><h1 id="大尺寸运算符"><a href="#大尺寸运算符" class="headerlink" title="大尺寸运算符"></a>大尺寸运算符</h1><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\sum$</td><td style="text-align:center"><code>$\sum$</code></td></tr><tr><td style="text-align:center">$\prod$</td><td style="text-align:center"><code>$\prod$</code></td></tr><tr><td style="text-align:center">$\coprod$</td><td style="text-align:center"><code>$\coprod$</code></td></tr><tr><td style="text-align:center">$\int$</td><td style="text-align:center"><code>$\int$</code></td></tr><tr><td style="text-align:center">$\oint$</td><td style="text-align:center"><code>$\oint$</code></td></tr><tr><td style="text-align:center">$\bigcup$</td><td style="text-align:center"><code>$\bigcup$</code></td></tr><tr><td style="text-align:center">$\bigvee$</td><td style="text-align:center"><code>$\bigvee$</code></td></tr><tr><td style="text-align:center">$\bigwedge$</td><td style="text-align:center"><code>$\bigwedge$</code></td></tr><tr><td style="text-align:center">$\bigoplus$</td><td style="text-align:center"><code>$\bigoplus$</code></td></tr><tr><td style="text-align:center">$\bigotimes$</td><td style="text-align:center"><code>$\bigotimes$</code></td></tr><tr><td style="text-align:center">$\bigcap$</td><td style="text-align:center"><code>$\bigcap$</code></td></tr><tr><td style="text-align:center">$\bigsqcup$</td><td style="text-align:center"><code>$\bigsqcup$</code></td></tr><tr><td style="text-align:center">$\bigodot$</td><td style="text-align:center"><code>$\bigodot$</code></td></tr><tr><td style="text-align:center">$\biguplus$</td><td style="text-align:center"><code>$\biguplus$</code></td></tr></tbody></table><h1 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h1><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\leftarrow$</td><td style="text-align:center"><code>$\leftarrow$</code></td></tr><tr><td style="text-align:center">$\rightarrow$</td><td style="text-align:center"><code>$\rightarrow$</code></td></tr><tr><td style="text-align:center">$\leftrightarrow$</td><td style="text-align:center"><code>$\leftrightarrow$</code></td></tr><tr><td style="text-align:center">$\uparrow$</td><td style="text-align:center"><code>$\uparrow$</code></td></tr><tr><td style="text-align:center">$\downarrow$</td><td style="text-align:center"><code>$\downarrow$</code></td></tr><tr><td style="text-align:center">$\updownarrow$</td><td style="text-align:center"><code>$\updownarrow$</code></td></tr><tr><td style="text-align:center">$\nearrow$</td><td style="text-align:center"><code>$\nearrow$</code></td></tr><tr><td style="text-align:center">$\searrow$</td><td style="text-align:center"><code>$\searrow$</code></td></tr><tr><td style="text-align:center">$\swarrow$</td><td style="text-align:center"><code>$\swarrow$</code></td></tr><tr><td style="text-align:center">$\nwarrow$</td><td style="text-align:center"><code>$\nwarrow$</code></td></tr><tr><td style="text-align:center">$\mapsto$</td><td style="text-align:center"><code>$\mapsto$</code></td></tr><tr><td style="text-align:center">$\hookleftarrow$</td><td style="text-align:center"><code>$\hookleftarrow$</code></td></tr><tr><td style="text-align:center">$\hookrightarrow$</td><td style="text-align:center"><code>$\hookrightarrow$</code></td></tr><tr><td style="text-align:center">$\leftharpoonup$</td><td style="text-align:center"><code>$\leftharpoonup$</code></td></tr><tr><td style="text-align:center">$\rightharpoonup$</td><td style="text-align:center"><code>$\rightharpoonup$</code></td></tr><tr><td style="text-align:center">$\leftharpoondown$</td><td style="text-align:center"><code>$\leftharpoondown$</code></td></tr><tr><td style="text-align:center">$\rightharpoondown$</td><td style="text-align:center"><code>$\rightharpoondown$</code></td></tr><tr><td style="text-align:center">$\rightleftharpoons$</td><td style="text-align:center"><code>$\rightleftharpoons$</code></td></tr><tr><td style="text-align:center">$\leadsto$</td><td style="text-align:center"><code>$\leadsto$</code></td></tr><tr><td style="text-align:center">$\longleftarrow$</td><td style="text-align:center"><code>$\longleftarrow$</code></td></tr><tr><td style="text-align:center">$\longrightarrow$</td><td style="text-align:center"><code>$\longrightarrow$</code></td></tr><tr><td style="text-align:center">$\longmapsto$</td><td style="text-align:center"><code>$\longmapsto$</code></td></tr><tr><td style="text-align:center">$\longleftrightarrow$</td><td style="text-align:center"><code>$\longleftrightarrow$</code></td></tr><tr><td style="text-align:center">$\Longleftarrow$</td><td style="text-align:center"><code>$\Longleftarrow$</code></td></tr><tr><td style="text-align:center">$\Longrightarrow$</td><td style="text-align:center"><code>$\Longrightarrow$</code></td></tr><tr><td style="text-align:center">$\Longleftrightarrow$</td><td style="text-align:center"><code>$\Longleftrightarrow$</code></td></tr><tr><td style="text-align:center">$\Leftarrow$</td><td style="text-align:center"><code>$\Leftarrow$</code></td></tr><tr><td style="text-align:center">$\Uparrow$</td><td style="text-align:center"><code>$\Uparrow$</code></td></tr><tr><td style="text-align:center">$\Rightarrow$</td><td style="text-align:center"><code>$\Rightarrow$</code></td></tr><tr><td style="text-align:center">$\Downarrow$</td><td style="text-align:center"><code>$\Downarrow$</code></td></tr><tr><td style="text-align:center">$\Leftrightarrow$</td><td style="text-align:center"><code>$\Leftrightarrow$</code></td></tr><tr><td style="text-align:center">$\Updownarrow$</td><td style="text-align:center"><code>$\Updownarrow$</code></td></tr><tr><td style="text-align:center">$\iff$</td><td style="text-align:center"><code>$\iff$</code></td></tr></tbody></table><h1 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h1><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$($</td><td style="text-align:center"><code>$($</code></td></tr><tr><td style="text-align:center">$)$</td><td style="text-align:center"><code>$)$</code></td></tr><tr><td style="text-align:center">$[$</td><td style="text-align:center"><code>$\[$</code></td></tr><tr><td style="text-align:center">$]$</td><td style="text-align:center"><code>$\]$</code></td></tr><tr><td style="text-align:center">$\langle$</td><td style="text-align:center"><code>$\langle$</code></td></tr><tr><td style="text-align:center">$\rangle$</td><td style="text-align:center"><code>$\rangle$</code></td></tr><tr><td style="text-align:center">$\lfloor$</td><td style="text-align:center"><code>$\lfloor$</code></td></tr><tr><td style="text-align:center">$\rfloor$</td><td style="text-align:center"><code>$\rfloor$</code></td></tr><tr><td style="text-align:center">$\lceil$</td><td style="text-align:center"><code>$\lceil$</code></td></tr><tr><td style="text-align:center">$\rceil$</td><td style="text-align:center"><code>$\rceil$</code></td></tr><tr><td style="text-align:center">$/$</td><td style="text-align:center"><code>$/$</code></td></tr><tr><td style="text-align:center">$\backslash$</td><td style="text-align:center"><code>$\backslash$</code></td></tr><tr><td style="text-align:center">$\vert$</td><td style="text-align:center"><code>$\vert$</code></td></tr><tr><td style="text-align:center">$\Vert$</td><td style="text-align:center"><code>$\Vert$</code></td></tr></tbody></table><h1 id="大尺寸定界符"><a href="#大尺寸定界符" class="headerlink" title="大尺寸定界符"></a>大尺寸定界符</h1><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\lgroup$</td><td style="text-align:center"><code>$\lgroup$</code></td></tr><tr><td style="text-align:center">$\rgroup$</td><td style="text-align:center"><code>$\rgroup$</code></td></tr><tr><td style="text-align:center">$\lmoustache$</td><td style="text-align:center"><code>$\lmoustache$</code></td></tr><tr><td style="text-align:center">$\rmoustache$</td><td style="text-align:center"><code>$\rmoustache$</code></td></tr><tr><td style="text-align:center">$\arrowvert$</td><td style="text-align:center"><code>$\arrowvert$</code></td></tr><tr><td style="text-align:center">$\Arrowvert$</td><td style="text-align:center"><code>$\Arrowvert$</code></td></tr><tr><td style="text-align:center">$\bracevert$</td><td style="text-align:center"><code>$\bracevert$</code></td></tr></tbody></table><h1 id="其他符号"><a href="#其他符号" class="headerlink" title="其他符号"></a>其他符号</h1><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\dots$</td><td style="text-align:center"><code>$\dots$</code></td></tr><tr><td style="text-align:center">$\cdots$</td><td style="text-align:center"><code>$\cdots$</code></td></tr><tr><td style="text-align:center">$\vdots$</td><td style="text-align:center"><code>$\vdots$</code></td></tr><tr><td style="text-align:center">$\ddots$</td><td style="text-align:center"><code>$\ddots$</code></td></tr><tr><td style="text-align:center">$\hbar$</td><td style="text-align:center"><code>$\hbar$</code></td></tr><tr><td style="text-align:center">$\imath$</td><td style="text-align:center"><code>$\imath$</code></td></tr><tr><td style="text-align:center">$\jmath$</td><td style="text-align:center"><code>$\jmath$</code></td></tr><tr><td style="text-align:center">$\ell$</td><td style="text-align:center"><code>$\ell$</code></td></tr><tr><td style="text-align:center">$\Re$</td><td style="text-align:center"><code>$\Re$</code></td></tr><tr><td style="text-align:center">$\Im$</td><td style="text-align:center"><code>$\Im$</code></td></tr><tr><td style="text-align:center">$\aleph$</td><td style="text-align:center"><code>$\aleph$</code></td></tr><tr><td style="text-align:center">$\wp$</td><td style="text-align:center"><code>$\wp$</code></td></tr><tr><td style="text-align:center">$\forall$</td><td style="text-align:center"><code>$\forall$</code></td></tr><tr><td style="text-align:center">$\exists$</td><td style="text-align:center"><code>$\exists$</code></td></tr><tr><td style="text-align:center">$\mho$</td><td style="text-align:center"><code>$\mho$</code></td></tr><tr><td style="text-align:center">$\partial$</td><td style="text-align:center"><code>$\partial$</code></td></tr><tr><td style="text-align:center">$’$</td><td style="text-align:center"><code>$&#39;$</code></td></tr><tr><td style="text-align:center">$\prime$</td><td style="text-align:center"><code>$\prime$</code></td></tr><tr><td style="text-align:center">$\emptyset$</td><td style="text-align:center"><code>$\emptyset$</code></td></tr><tr><td style="text-align:center">$\infty$</td><td style="text-align:center"><code>$\infty$</code></td></tr><tr><td style="text-align:center">$\nabla$</td><td style="text-align:center"><code>$\nabla$</code></td></tr><tr><td style="text-align:center">$\triangle$</td><td style="text-align:center"><code>$\triangle$</code></td></tr><tr><td style="text-align:center">$\Box$</td><td style="text-align:center"><code>$\Box$</code></td></tr><tr><td style="text-align:center">$\Diamond$</td><td style="text-align:center"><code>$\Diamond$</code></td></tr><tr><td style="text-align:center">$\bot$</td><td style="text-align:center"><code>$\bot$</code></td></tr><tr><td style="text-align:center">$\top$</td><td style="text-align:center"><code>$\top$</code></td></tr><tr><td style="text-align:center">$\angle$</td><td style="text-align:center"><code>$\angle$</code></td></tr><tr><td style="text-align:center">$\surd$</td><td style="text-align:center"><code>$\surd$</code></td></tr><tr><td style="text-align:center">$\diamondsuit$</td><td style="text-align:center"><code>$\diamondsuit$</code></td></tr><tr><td style="text-align:center">$\heartsuit$</td><td style="text-align:center"><code>$\heartsuit$</code></td></tr><tr><td style="text-align:center">$\clubsuit$</td><td style="text-align:center"><code>$\clubsuit$</code></td></tr><tr><td style="text-align:center">$\spadesuit$</td><td style="text-align:center"><code>$\spadesuit$</code></td></tr><tr><td style="text-align:center">$\neg$</td><td style="text-align:center"><code>$\neg$</code></td></tr><tr><td style="text-align:center">$\flat$</td><td style="text-align:center"><code>$\flat$</code></td></tr><tr><td style="text-align:center">$\natural$</td><td style="text-align:center"><code>$\natural$</code></td></tr><tr><td style="text-align:center">$\sharp$</td><td style="text-align:center"><code>$\sharp$</code></td></tr></tbody></table><h1 id="数学字体"><a href="#数学字体" class="headerlink" title="数学字体"></a>数学字体</h1><table><thead><tr><th style="text-align:center">字体</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">$\mathbb{ABCD}$</td><td style="text-align:center"><code>$\mathbb{ABCD}$</code></td></tr><tr><td style="text-align:center">$\mathbf{ABCD}$</td><td style="text-align:center"><code>$\mathbf{ABCD}$</code></td></tr><tr><td style="text-align:center">$\mathtt{ABCD}$</td><td style="text-align:center"><code>$\mathtt{ABCD}$</code></td></tr><tr><td style="text-align:center">$\mathrm{ABCD}$</td><td style="text-align:center"><code>$\mathrm{ABCD}$</code></td></tr><tr><td style="text-align:center">$\mathsf{ABCD}$</td><td style="text-align:center"><code>$\mathsf{ABCD}$</code></td></tr><tr><td style="text-align:center">$\mathcal{ABCD}$</td><td style="text-align:center"><code>$\mathcal{ABCD}$</code></td></tr><tr><td style="text-align:center">$\mathscr{ABCD}$</td><td style="text-align:center"><code>$\mathscr{ABCD}$</code></td></tr><tr><td style="text-align:center">$\mathfrak{ABCD}$</td><td style="text-align:center"><code>$\mathfrak{ABCD}$</code></td></tr></tbody></table><h1 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h1><p>$$<br>\begin{align}<br>\sqrt{37} &amp; = \sqrt{\frac{73^2-1}{12^2}} \<br>&amp; = \sqrt{\frac{73^2}{12^2}\cdot\frac{73^2-1}{73^2}} \<br>&amp; = \sqrt{\frac{73^2}{12^2}}\sqrt{\frac{73^2-1}{73^2}} \<br>&amp; = \frac{73}{12}\sqrt{1 - \frac{1}{73^2}} \<br>&amp; \approx \frac{73}{12}\left(1 - \frac{1}{2\cdot73^2}\right)<br>\end{align}<br>$$<br>上式对应的代码如下：<br><code>\begin{align}</code><br><code>\sqrt{37} &amp; = \sqrt{\frac{73^2-1}{12^2}} \\</code><br><code>&amp; = \sqrt{\frac{73^2}{12^2}\cdot\frac{73^2-1}{73^2}} \\</code><br><code>&amp; = \sqrt{\frac{73^2}{12^2}}\sqrt{\frac{73^2-1}{73^2}} \\</code><br><code>&amp; = \frac{73}{12}\sqrt{1 - \frac{1}{73^2}} \\</code><br><code>&amp; \approx \frac{73}{12}\left(1 - \frac{1}{2\cdot73^2}\right)</code><br><code>\end{align}</code></p><p>分段函数的写法：<br>$$<br>\mathrm{f}(n)=<br>\begin{cases}<br>n/2 &amp; \text{if $n$ is even}\<br>3n+1 &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$<br>上式对应的代码如下：<br><code>\mathrm{f}(n)=</code><br><code>\begin{cases}</code><br><code>n/2 &amp; \text{if $n$ is even}\\</code><br><code>3n+1 &amp; \text{if $n$ is odd}</code><br><code>\end{cases}</code></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>向量，我们常用字体为<code>\mathbf</code>，比如说：$\mathbf{x}$<br>函数，我们常用字体为<code>\mathrm</code>，比如说：$\mathrm{x}$<br>空集的符号为$\emptyset$，<code>\emptyset</code><br>求极限的符号为$\lim$，<code>\lim</code><br>无穷的符号为$\infty$，<code>\infty</code><br>$\nabla$, <code>\nabla</code><br>$\partial$, <code>\partial</code><br>$\ell$，<code>\ell</code><br>$\underset{1\le i\le N}{\mathrm{argmax}}$，<code>\underset{1\le i\le N}{\mathrm{argmax}}</code><br>$\max$, <code>max</code><br>$\ln$, <code>\ln</code></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://7xuthx.com1.z0.glb.clouddn.com/pdf/referemce-mathjax/%E4%B8%80%E4%BB%BD%E4%B8%8D%E5%A4%AA%E7%AE%80%E7%9F%AD%E7%9A%84LATEX%E4%BB%8B%E7%BB%8D.pdf" target="_blank" rel="noopener">一份不太简短的LATEX介绍</a><br><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax Basic Tutorial and Quick reference</a><br><a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/" target="_blank" rel="noopener">Mathjax与LaTex公式简介</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> reference </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> latex </tag>
            
            <tag> mathjax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo主题定制]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/howto/custom-blog-theme/</url>
      <content type="html"><![CDATA[<blockquote><p>人靠衣装马靠鞍</p></blockquote><a id="more"></a><p>NexT对数学公式的支持让我不得不折腾 :(</p><h1 id="Hexo工作流程"><a href="#Hexo工作流程" class="headerlink" title="Hexo工作流程"></a>Hexo工作流程</h1><p>Hexo的流程有：</p><ol><li>使用<code>hexo init</code>来生成基本文件，做一些基本的配置，如安装模块、配置主题等</li><li>使用<code>hexo new page/post</code>来生成文章或页面的Markdown文件</li><li>使用<code>hexo g</code>生成文件，hexo会根据主题中的模板，来生成对应的html文件，编译CSS文件，复制其他的静态文件</li><li>使用<code>hexo d</code>来部署，一般是借助一些部署模块完成</li></ol><p>可见，主题的作用主要是发挥在hexo生成文件时，提供对应的模板和资源。</p><h1 id="主题制作"><a href="#主题制作" class="headerlink" title="主题制作"></a>主题制作</h1><h2 id="主题的基本结构"><a href="#主题的基本结构" class="headerlink" title="主题的基本结构"></a>主题的基本结构</h2><p>Hexo对主题的基本要求：</p><ul><li>首页<code>index</code></li><li>存档页<code>archive</code></li><li>标签文章列表页<code>tag</code></li><li>分类文章列表页<code>category</code></li><li>文章详情页<code>post</code></li><li>页面详情页<code>page</code></li></ul><h2 id="显示数学公式"><a href="#显示数学公式" class="headerlink" title="显示数学公式"></a>显示数学公式</h2><p>为了在博文中使用数学公式，可以修改文件<code>themes\next\_config.yml</code>的片段为：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure><p></p><p>止步于此，我的目的在于修复MathJax无法正常显示的bug。至于这个bug，可以参看<a href="http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">如何处理Hexo和MathJax的兼容问题</a>。<br>简单来说，数学公式无法正常显示是因为<code>MathJax</code>与<code>Markdown渲染引擎</code>冲突，解决方式是：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save <span class="comment"># 卸载默认的Markdown渲染引擎</span></span><br><span class="line">npm install hexo-renderer-kramed --save <span class="comment"># 该渲染引擎对MathJax支持进行了改进</span></span><br></pre></td></tr></table></figure><p></p><p>使用之后，成功解决了数学公式显示不正常的问题，但又导致另外一个问题：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">bal bal bal</span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>原先使用上述方式将图片置中的方法，出现错误，里面的Markdown没有被正确解析。<br>解决思路有：</p><ol><li>找到更改Markdown渲染器之后，两者的差别，然后针对性修改</li><li>找到渲染<code>img</code>的代码，将其默认设为居中（这符合我的需求）</li><li>修改<code>img</code>的CSS代码，这需要找到主题中用到的CSS样式表</li></ol><p>上述方法中，第3中对框架无侵入性，且修改起来易上手。于是找到对应的CSS代码（本博文使用的是<code>NexT</code>主题），修改<code>themes &gt; next &gt; source &gt; css &gt; _custom &gt; custom.styl</code>，添加如下语句：<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="添加支持商"><a href="#添加支持商" class="headerlink" title="添加支持商"></a>添加支持商</h2><p>为了在页面上页脚部位显示<code>Coding Pages</code>，在文件<code>themes &gt; next &gt; layout &gt; _partials &gt; footer.swig</code>合适位置添加如下语句：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;powered-by&quot;&gt; Hosted by &lt;a href=&quot;https://pages.coding.me&quot; style=&quot;font-weight: bold&quot;&gt;Coding Pages&lt;/a&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="NexT主题修复"><a href="#NexT主题修复" class="headerlink" title="NexT主题修复"></a>NexT主题修复</h2><p>在Next v5.1.2中，统计数字的样式前面没有<code>|</code>，通过修改<code>themes &gt; next &gt; layout &gt; _macro &gt; post.swig</code>，在其第203行附近，添加如下语句：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br></pre></td></tr></table></figure><p></p><p>之后该文件大致为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.post_wordcount.wordcount or theme.post_wordcount.min2read %&#125;</span><br><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">  &lt;div class=&quot;post-wordcount&quot;&gt;</span><br><span class="line">  &#123;% other code %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>$a^b$<br>$a_1^b$<br>$$a_{1+2}^{b+c}$$<br>$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$<br>$$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$$</p><h2 id="显示PlantUML"><a href="#显示PlantUML" class="headerlink" title="显示PlantUML"></a>显示PlantUML</h2><p>需要安装的插件<a href="https://github.com/wafer-li/hexo-filter-plantuml" target="_blank" rel="noopener">plantuml</a>。</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3aSaZDIm7o0G00"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://chensd.com/2016-06/hexo-theme-guide.html" target="_blank" rel="noopener">Hexo 主题制作指南 - 不可能不确定</a><br><a href="http://www.cnblogs.com/cocowool/archive/2013/03/09/2952003.html" target="_blank" rel="noopener">Yeoman学习与时间笔记</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a><br><a href="http://www.5941740.cn/2016/02/19/gulp-minify-blog/" target="_blank" rel="noopener">使用gulp精简hexo博客代码</a><br><a href="http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">如何处理Hexo和MathJax的兼容问题</a><br><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax Basic Tutorial and Quick reference</a><br><a href="http://notes.iissnan.com/" target="_blank" rel="noopener">NexT作者博客</a><br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-ecl-plantuml/index.html" target="_blank" rel="noopener">PlantUML——应用于 Eclipse 的简单快速的UML编辑软件</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[YAML 学习笔记]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/learn/yaml/</url>
      <content type="html"><![CDATA[<blockquote><p>YAML: YAML Ain’t Markup Language.</p></blockquote><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>基本语法规则如下：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用tab键，只允许使用空格</li><li>缩进的空格数量不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code>开启行注释</li></ul><p>YAML支持的数据结构有三种：</p><ul><li>对象：键值对的集合</li><li>数组：一组按次序排列的值</li><li>标量（scalars）：单个的、不可再分的值</li></ul><p>下面我们主要参考<code>YAML.pdf</code>第二章的内容展开。</p><h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><p>YAML的块集合（block collections）用缩进表示作用域，每一个实体都单独一行。块数组（block sequence）用<code>-</code>标识每一个实体，块映射（mapping）用<code>:</code>来标识每一个键值对。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-yaml/preview-block-collection-examples.png" alt="Block Collections"></p><p>YAML也有流格式（flow style）。此时就需要用特殊的字符来标识作用域了。在<code>flow style</code>格式下，流数组（flow sequence）中每个元素之间要用<code>,</code>分隔，之外需要用<code>[</code>/<code>]</code>来声明序列的范围；流映射（flow mapping）则使用<code>{</code>/<code>}</code>来标识范围。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-yaml/preview-flow-collection-examples.png" alt="Flow Collections"></p><h1 id="Structures"><a href="#Structures" class="headerlink" title="Structures"></a>Structures</h1><p>YAML使用<code>---</code>来指示文档中某一指令的开始，用<code>...</code>来指示文档中某一指令的结束。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-yaml/preview-structures-doc-examples.png" alt="Document Structures"></p><p>文档中的指代标记，如下规定，<code>&amp;</code>用来声明并标识某个实体，用<code>*</code>来指代该实体：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-yaml/preview-structures-objref-examples.png" alt="Document Object Ref"></p><p>[TODO]: <code>?</code></p><h1 id="Scalars"><a href="#Scalars" class="headerlink" title="Scalars"></a>Scalars</h1><p>多行字符串时，使用<code>|</code>将保留换行符，<code>&gt;</code>将把换行符置换为空格，除非它后面跟着一个空行或者缩进更多的行。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-yaml/preview-scalars-newline-examples.png" alt="newline"></p><p>单引号和双引号都可以使用，双引号不会对特殊字符转义，之外字符串中所有的换行符都会默认被换为空格。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-yaml/preview-scalars-flow-string-examples.png" alt="newline in flow-string"></p><h1 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h1><p>YAML中默认支持如下几种类型的数据：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-yaml/preview-tags.png" alt="tags"></p><p>YAML中使用<code>!!</code>来进行强制转换：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-yaml/preview-explicit-tags.png" alt="explicit tags"></p><h1 id="Full-Length-Example"><a href="#Full-Length-Example" class="headerlink" title="Full Length Example"></a>Full Length Example</h1><p>这两个例子都来自<code>YAML.pdf</code>中，第一个例子是一个关于发票的，第二个则是关于一个日志文件的。<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="bullet">--</span> <span class="string">!&lt;tag:clarkevans.com,2002:invoice&gt;</span></span><br><span class="line"><span class="attr">invoice:</span> <span class="number">34843</span></span><br><span class="line"><span class="string">date</span>   <span class="string">:</span> <span class="number">2001</span><span class="bullet">-01</span><span class="bullet">-23</span></span><br><span class="line"><span class="attr">bill-to:</span> <span class="meta">&amp;id001</span></span><br><span class="line">    <span class="string">given</span>  <span class="string">:</span> <span class="string">Chris</span></span><br><span class="line">    <span class="string">family</span> <span class="string">:</span> <span class="string">Dumars</span></span><br><span class="line"><span class="attr">    address:</span></span><br><span class="line"><span class="attr">        lines:</span> <span class="string">|</span></span><br><span class="line"><span class="string">           458 Walkman Dr.</span></span><br><span class="line"><span class="string">           Suite #292</span></span><br><span class="line"><span class="string">        city    : Royal Oak</span></span><br><span class="line"><span class="string">        state   : MI</span></span><br><span class="line"><span class="string">        postal  : 48046</span></span><br><span class="line"><span class="string"></span><span class="attr">ship-to:</span> <span class="meta">*id001</span></span><br><span class="line"><span class="attr">product:</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">sku</span>        <span class="string">:</span> <span class="string">BL394D</span></span><br><span class="line">     <span class="string">quantity</span>   <span class="string">:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">     description:</span> <span class="string">Basketball</span></span><br><span class="line">     <span class="string">price</span>      <span class="string">:</span> <span class="number">450.00</span></span><br><span class="line"><span class="bullet">   -</span> <span class="string">sku</span>        <span class="string">:</span> <span class="string">BL4438H</span></span><br><span class="line">     <span class="string">quantity</span>   <span class="string">:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">     description:</span> <span class="string">Super</span> <span class="string">Hoop</span></span><br><span class="line">     <span class="string">price</span>      <span class="string">:</span> <span class="number">2392.00</span></span><br><span class="line"><span class="string">tax</span>  <span class="string">:</span> <span class="number">251.42</span></span><br><span class="line"><span class="attr">total:</span> <span class="number">4443.52</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">    <span class="string">Late</span> <span class="string">afternoon</span> <span class="string">is</span> <span class="string">best.</span></span><br><span class="line">    <span class="string">Backup</span> <span class="string">contact</span> <span class="string">is</span> <span class="string">Nancy.</span></span><br><span class="line">    <span class="string">Billsmer</span> <span class="string">@</span> <span class="number">338</span><span class="bullet">-4338.</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Time:</span> <span class="number">2001</span><span class="bullet">-11</span><span class="bullet">-23</span> <span class="number">15</span><span class="string">:01:42</span> <span class="bullet">-5</span></span><br><span class="line"><span class="attr">User:</span> <span class="string">ed</span></span><br><span class="line"><span class="attr">Warning:</span></span><br><span class="line">   <span class="string">This</span> <span class="string">is</span> <span class="string">an</span> <span class="string">error</span> <span class="string">message</span></span><br><span class="line">   <span class="string">for</span> <span class="string">the</span> <span class="string">log</span> <span class="string">file</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Time:</span> <span class="number">2001</span><span class="bullet">-11</span><span class="bullet">-23</span> <span class="number">15</span><span class="string">:02:31</span> <span class="bullet">-5</span></span><br><span class="line"><span class="attr">User:</span> <span class="string">ed</span></span><br><span class="line"><span class="attr">Warning:</span></span><br><span class="line">   <span class="string">A</span> <span class="string">slightly</span> <span class="string">different</span> <span class="string">error</span></span><br><span class="line">   <span class="string">message.</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Date:</span> <span class="number">2001</span><span class="bullet">-11</span><span class="bullet">-23</span> <span class="number">15</span><span class="string">:03:17</span> <span class="bullet">-5</span></span><br><span class="line"><span class="attr">User:</span> <span class="string">ed</span></span><br><span class="line"><span class="attr">Fatal:</span></span><br><span class="line">   <span class="string">Unknown</span> <span class="string">variable</span> <span class="string">"bar"</span></span><br><span class="line"><span class="attr">Stack:</span></span><br><span class="line"><span class="attr">   - file:</span> <span class="string">TopClass.py</span></span><br><span class="line"><span class="attr">     line:</span> <span class="number">23</span></span><br><span class="line"><span class="attr">     code:</span> <span class="string">|</span></span><br><span class="line"><span class="string">       x = MoreObject("345\n")</span></span><br><span class="line"><span class="string"></span><span class="attr">   - file:</span> <span class="string">MoreClass.py</span></span><br><span class="line"><span class="attr">     line:</span> <span class="number">58</span></span><br><span class="line"><span class="attr">     code:</span> <span class="string">|-</span></span><br><span class="line">       <span class="string">foo</span> <span class="string">=</span> <span class="string">bar</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html?f=tt" target="_blank" rel="noopener">YAML 语言教程 - 阮一峰的网络日志</a><br><a href="http://www.yaml.org/" target="_blank" rel="noopener">YAML Ain’t Markup Language - 官方文档</a><br><a href="http://yaml.org/spec/1.2/spec.pdf" target="_blank" rel="noopener">YAML.pdf</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
        </categories>
        
        
        <tags>
            
            <tag> yaml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven实战]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/howto/maven-1-instruction/</url>
      <content type="html"><![CDATA[<blockquote><p>maven, an expert on sth</p></blockquote><a id="more"></a><h1 id="何为Maven？"><a href="#何为Maven？" class="headerlink" title="何为Maven？"></a>何为Maven？</h1><p>Maven主要服务于Java平台的<em>项目构建</em>、<em>依赖管理</em>和<em>项目信息管理</em>。</p><p>注：构建是指日常编码过程中，编译、运行单元测试、生成文档、打包和部署等活动。</p><h1 id="Maven的特点"><a href="#Maven的特点" class="headerlink" title="Maven的特点"></a>Maven的特点</h1><p>Maven，作为一个强大的构建工具，有以下几个特点：</p><ol><li>跨平台：无论在Windows，还是在Linux或者Mac上，都可以使用相同的指令来完成同样的任务。</li><li>最大化消除构建的重复：Maven分析了大量Java项目构建过程中重复出现的、必要的活动，并将其规范化、标准化，同时也提供了实现常用构建功能的Maven插件，满足了我们日常中常见的构建任务。</li><li>标准化构建过程：这一点是两面的，一是意味着我们需要熟悉Maven的构建过程，这增加了我们的学习成本；二则意味着我们一旦学会之后，放之四海而皆准。</li></ol><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>Maven还是<strong>依赖管理工具</strong>和<strong>项目信息管理工具</strong>，提供了中央仓库，帮我们管理构件。<br>在Maven中会涉及到如下几个名词：</p><ul><li>坐标系统：这是Maven用来解决Java项目中包的<em>版本不一致</em>、<em>版本冲突</em>、<em>依赖冗余</em>等问题的基础。</li><li>项目信息管理：这部分提供了一个描述项目信息的标准化列表，如项目着眼解决的问题、项目的开发人员等。</li><li>中央仓库：这里是Maven为全世界Java开发师提供的免费“仓库”，在这里可以找到几乎所有流行的开源类库。</li></ul><p>另外，Maven中还体现了一种软件开发过程管理的方法论，即“<strong>约定优于配置（Convention Over Configuration）</strong>”，例如，Maven对Java项目的项目目录结构、测试用例命名方式等都有既定的规则。</p><h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p><a href="https://book.douban.com/subject/5345682/" target="_blank" rel="noopener">Maven实战</a><br>这本书是我学习Maven的主要参考资料，内容详实全面，Maven的原理、使用方法和高级应用以及必不可少的实战都有涉及。另外，作者也是Maven在国内的早期布道者。力荐</p><h1 id="后注"><a href="#后注" class="headerlink" title="后注"></a>后注</h1><p>因为实践中越来越少接触maven，所以就没有继续更新该系列博文。有兴趣的同学可以访问如下资源：</p><p><a href="http://blog.csdn.net/v123411739/article/details/49492401" target="_blank" rel="noopener">maven较完整教程</a><br><a href="http://blog.csdn.net/jiuqiyuliang/article/details/45390313" target="_blank" rel="noopener">项目管理和构建 - maven下载/安装和配置（二）</a><br><a href="http://blog.csdn.net/u013549463/article/details/50742376" target="_blank" rel="noopener">Maven的安装/配置及使用入门</a></p>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git学习记录 - 2]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/learn/git/git-2/</url>
      <content type="html"><![CDATA[<blockquote><p>Git <code>--local-branching-on-the-cheap</code></p></blockquote><a id="more"></a><h1 id="CH2-Git基础"><a href="#CH2-Git基础" class="headerlink" title="CH2 - Git基础"></a>CH2 - Git基础</h1><p>该博文将介绍几个最基础、最常用的Git命令，包括：</p><ul><li><a href="#ch2-point-1">如何初始化一个新的代码仓库</a></li><li><a href="#ch2-point-2">如何配置，如如何让Git忽略某些文件</a></li><li><a href="#ch2-point-3">如何开始或停止跟踪某些文件</a></li><li><a href="#ch2-point-3">暂存或提交某些更新</a></li><li><a href="#ch2-point-4">如何查看修改的部分</a></li><li><a href="#ch2-point-5">如何删除和回滚操作</a></li><li><a href="#ch2-point-6">如何浏览项目的更新历史</a></li><li><a href="#ch2-point-7">如何从远程仓库拉取或者推送数据</a></li><li><a href="#ch2-point-8">如何使用Git中的标签系统</a></li></ul><p><a id="ch2-point-1"></a></p><h2 id="如何初始化一个新的代码仓库"><a href="#如何初始化一个新的代码仓库" class="headerlink" title="如何初始化一个新的代码仓库"></a>如何初始化一个新的代码仓库</h2><p>Git中创建项目仓库有两种方式：</p><ol><li>在本地的目录下创建一个新的仓库</li><li>在已有的Git仓库中克隆出一个新的仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment"># (1)</span></span><br><span class="line">git add *.c</span><br><span class="line">git add README</span><br><span class="line">git commit -m <span class="string">"inital project version"</span></span><br></pre></td></tr></table></figure><p>上述命令(1)就完成了实际的初始化工作，它会在本地文件夹下创建一个<code>.git</code>文件夹，这是git实现跟踪的文件支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/schacon/grit.git</span><br></pre></td></tr></table></figure><p>上述操作是去拉取Git代码仓库的Grit，它会在本地创建一个命名为<code>grit</code>的目录，其中也会包含一个<code>.git</code>的文件夹，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。另外，如果你想在克隆的时候自定义要新建的项目名称，可以如下操作：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/schacon/grit.git mygrit</span><br></pre></td></tr></table></figure><p></p><p>git在拉取仓库时不仅支持<code>git://</code>协议，还支持<code>http(s)://</code>、<code>user@server:/path.git</code>表示的SSH协议。</p><p><a id="ch2-point-2"></a></p><h2 id="如何配置仓库"><a href="#如何配置仓库" class="headerlink" title="如何配置仓库"></a>如何配置仓库</h2><p>建议先阅读<em><a href="ch2-point-3">如何开始或停止跟踪某些文件</a></em>，再阅读该部分。<br>我们总会有些文件无需纳入Git的管理，又不希望它们出现在未跟踪文件的列表中，此时就需要告诉Git忽略些文件了。我们可以创建一个名为在仓库的根目录下<strong><code>.gitignore</code></strong>，列出要忽略的文件模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># filename: .gitignore</span><br><span class="line">*.[oa] # 忽略以`.o`或`.a`结尾的文件</span><br><span class="line">*~     # 忽略所有以`~`结尾的文件</span><br></pre></td></tr></table></figure><p>具体来说，<code>.gitignore</code>的格式规范如下：</p><ul><li>所有空行或者以注释符<code>#</code>开头的行都会被Git忽略</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式最后跟反斜杠（/）说明要忽略的是目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反</li></ul><p>其中提到的<code>glob</code>模式，简单介绍下：星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</p><p><a id="ch2-point-3"></a></p><h2 id="如何开始或停止跟踪某些文件"><a href="#如何开始或停止跟踪某些文件" class="headerlink" title="如何开始或停止跟踪某些文件"></a>如何开始或停止跟踪某些文件</h2><p>在Git仓库中的文件有两种状态：</p><ol><li>已跟踪 (untracked)</li><li>未跟踪 (tacked)</li></ol><p>其中，<strong>已跟踪</strong>又可以细分为：</p><ol><li>未修改 (unmodified)</li><li>已修改 (modified)</li><li>已暂存 (staged)</li></ol><p>详细的说，各个状态转移的可能如下：<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/learn-git/file-status-lifecycle.png" alt="File Status Lifecycle"><br>图1. 文件状态的生命周期</p><p>涉及到的指令与工作流是这样子的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 查看工作区的文件情况</span></span><br><span class="line">vim README <span class="comment"># 新建README（linux），此时README是untracked</span></span><br><span class="line">git add README <span class="comment"># README的状态现在是tracked中的 staged</span></span><br><span class="line">git commit -m <span class="string">"add README to history"</span> <span class="comment"># README的状态是 unmodified</span></span><br><span class="line">vim README <span class="comment"># 此处修改REAMDE，REAMDE的状态是 modified</span></span><br><span class="line">git add README</span><br><span class="line">git commit -m <span class="string">"modify README"</span> <span class="comment"># 将 `暂存区域的文件` 提交上去</span></span><br></pre></td></tr></table></figure><p>Git比较蠢，当你在Git仓库中<strong>重命名</strong>了某个文件，需要一定的指令来告诉它你都做了什么：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv file_from file_to</span><br></pre></td></tr></table></figure><p></p><p><a id="ch2-point-4"></a></p><h2 id="如何查看修改的部分"><a href="#如何查看修改的部分" class="headerlink" title="如何查看修改的部分"></a>如何查看修改的部分</h2><p>上面说到的<code>git status</code>只能简单的提供修改了哪些文件的信息，当我们想去看看具体被修改的是哪些部分时，就可以使用这部分的内容了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接着上个例子</span></span><br><span class="line"><span class="comment"># ..</span></span><br><span class="line">vim README <span class="comment"># 修改README</span></span><br><span class="line"><span class="comment"># 此命令比较的是`工作目录中当前文件`和`暂存区域快照`之间的差异</span></span><br><span class="line"><span class="comment"># 也就是`git add .`之后还没有被暂存起来的变化内容 </span></span><br><span class="line">git diff</span><br><span class="line"><span class="comment"># 此命令可以查看`以及暂存起来的文件`和`上次提交时的快照`之间的差异</span></span><br><span class="line">git diff --cached <span class="comment"># 也可以用 `git diff --staged`</span></span><br></pre></td></tr></table></figure><p><a id="ch2-point-5"></a></p><h2 id="如何删除和回滚操作"><a href="#如何删除和回滚操作" class="headerlink" title="如何删除和回滚操作"></a>如何删除和回滚操作</h2><p>要从Git中移除某个文件，就必须要从已跟踪文件清淡中移除（确切的说，是从暂存区域溢出）。<br>具体来说，移除文件有如下几种情形：<br><strong>删除仓库以及文件系统中的文件</strong><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm toDeleteFilename <span class="comment"># 从 文件系统 中删除文件 toDeleteFilename</span></span><br><span class="line">git rm toDeleteFilename <span class="comment"># 从 仓库 中删除文件 toDeleteFilename</span></span><br></pre></td></tr></table></figure><p></p><p>但是上述操作必须是在修改文件<code>toDeleteFilename</code>后没有提交到暂存区域的情况，如果真的提交到暂存区域就该这样：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim toDeleteFilename <span class="comment"># 修改 toDeleteFilename</span></span><br><span class="line">git add toDeleteFilename</span><br><span class="line">rm toDeleteFilename</span><br><span class="line">git rm -f toDeleteFilename <span class="comment"># -f 参数， --force</span></span><br></pre></td></tr></table></figure><p></p><p>之外，也往往会出现不小心将文件加入到<em>跟踪文件列表</em>的情况，此时只想 <strong>删除暂存区域的文件，而不删除文件系统的文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached REAMDE</span><br><span class="line">git rm --cached <span class="built_in">log</span>/\*.<span class="built_in">log</span> <span class="comment"># 参数可以是文件名或者目录名或者`glob`模式</span></span><br></pre></td></tr></table></figure><p><em>Notes</em>: 注意上述中注意到星号 * 之前的反斜杠 \，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开（译注：实际上不加反斜杠也可以运行，只不过按照 shell 扩展的话，<strong>仅仅删除指定目录下的文件而不会递归匹配</strong>）。</p><p>当我们想撤销刚才所做的某些操作时，就要借助如下的一些命令了。但一定要小心，<strong>有些撤销操作是不可逆的</strong>。</p><p><strong>修改最后一次提交</strong><br>有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用<code>--amend</code>选项重新提交：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend <span class="comment"># 该命令使用当前暂存区域的快照提交</span></span><br></pre></td></tr></table></figure><p></p><p><strong>取消暂存域中的文件</strong><br>有两个修改过的文件，我们想要分开提交，但不小心用 git add . 全加到了暂存区域。该如何撤消暂存其中的一个文件呢？<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git reset HEAD toUnstagedFilename <span class="comment"># 取消对toUnstagedFilename的暂存</span></span><br></pre></td></tr></table></figure><p></p><p><strong>取消对文件的修改</strong><br>如果觉得刚才对某些文件的修改完全没有必要，该如何取消修改，回到之前的状态（也就是修改之前的版本）呢？<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- toBackFilename <span class="comment"># toBackFilename就是那个没有必要修改的文件</span></span><br></pre></td></tr></table></figure><p></p><p><a id="ch2-point-6"></a></p><h2 id="如何浏览项目的更新历史"><a href="#如何浏览项目的更新历史" class="headerlink" title="如何浏览项目的更新历史"></a>如何浏览项目的更新历史</h2><p>在提交若干更新之后，又或者克隆了某个项目后，想回顾下提交历史，可以使用<code>git log</code>命令查看。<br><strong>默认不用任何参数</strong>的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。看到了吗，每次更新都有一个 SHA-1 校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。<br><code>git log</code>有许多选项可以帮助搜索感兴趣的提交，如：</p><ul><li><code>-p</code>选项会展开显示每次提交的内容差异</li><li><code>-2</code>会显示最近的两次更新，这是 <code>-&lt;n&gt;</code> 选项的写法，其中的<em>n</em>可以是任何自然数，表示仅显示最近的若干条提交</li><li><code>--stat</code>则仅仅显示简要的增改行数统计</li><li><code>--pretty</code>可以指定使用完全不同于默认格式的方式展示提交历史，如<code>--pretty=oneline</code>，<code>--pretty=short</code>，<code>--pretty=full</code>, <code>--pretty=fuller</code>，<code>--pretty=format: &quot;%h - %an, %ar : %s&quot;</code></li><li><code>--graph</code>显示ASCII图形表示的分支合并历史</li><li><code>--since</code>和<code>--after</code>，仅显示指定时间之后的提交，如<code>git log --since=2.weeks</code>列出最近两周内的提交</li><li><code>--author</code> 仅显示指定作者相关的提交。</li><li><code>--committer</code> 仅显示指定提交者相关的提交。</li></ul><p><em>Notes</em>: <code>format</code>中常用的格式占位符及其代表的意义</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>%H</code></td><td style="text-align:center">提交对象的完整哈希字符串</td></tr><tr><td style="text-align:center"><code>%h</code></td><td style="text-align:center">提交对象的简短哈希字符串</td></tr><tr><td style="text-align:center"><code>%T</code></td><td style="text-align:center">树对象（tree）的完整哈希字串</td></tr><tr><td style="text-align:center"><code>%t</code></td><td style="text-align:center">树对象的简短哈希字串</td></tr><tr><td style="text-align:center"><code>%P</code></td><td style="text-align:center">父对象（parent）的完整哈希字串</td></tr><tr><td style="text-align:center"><code>%p</code></td><td style="text-align:center">父对象的简短哈希字串</td></tr><tr><td style="text-align:center"><code>%an</code></td><td style="text-align:center">作者（author）的名字</td></tr><tr><td style="text-align:center"><code>%ae</code></td><td style="text-align:center">作者的电子邮件地址</td></tr><tr><td style="text-align:center"><code>%ad</code></td><td style="text-align:center">作者修订日期（可以用 -date= 选项定制格式）</td></tr><tr><td style="text-align:center"><code>%ar</code></td><td style="text-align:center">作者修订日期，按多久以前的方式显示</td></tr><tr><td style="text-align:center"><code>%cn</code></td><td style="text-align:center">提交者(committer)的名字</td></tr><tr><td style="text-align:center"><code>%ce</code></td><td style="text-align:center">提交者的电子邮件地址</td></tr><tr><td style="text-align:center"><code>%cd</code></td><td style="text-align:center">提交日期</td></tr><tr><td style="text-align:center"><code>%cr</code></td><td style="text-align:center">提交日期，按多久以前的方式显示</td></tr><tr><td style="text-align:center"><code>%s</code></td><td style="text-align:center">提交说明</td></tr></tbody></table><p><em>Notes</em>: 还记得廖老师的别名配置嘛<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><p></p><p><a id="ch2-point-7"></a></p><h2 id="如何从远程仓库拉取或者推送数据"><a href="#如何从远程仓库拉取或者推送数据" class="headerlink" title="如何从远程仓库拉取或者推送数据"></a>如何从远程仓库拉取或者推送数据</h2><p>远程仓库是指托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。管理远程仓库的工作，包括添加远程库，移除废弃的远程库，管理各式远程库分支，定义是否跟踪这些分支，等等。本节我们将详细讨论远程库的管理和使用。</p><h3 id="查看当前的远程仓库"><a href="#查看当前的远程仓库" class="headerlink" title="查看当前的远程仓库"></a>查看当前的远程仓库</h3><p>要查看当前配置有哪些远程仓库，可以用<code>git remote</code>命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为<code>origin</code>的远程库，Git默认使用这个名字来标识你所克隆的原始仓库，也可以加上<code>-v</code>选项，显示对应的克隆地址。</p><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行<code>git remote add [shortname] [url]</code>，这样操作之后<code>[shortname]</code>就可以指代对应的仓库地址了。</p><h3 id="从远程仓库中抓取数据"><a href="#从远程仓库中抓取数据" class="headerlink" title="从远程仓库中抓取数据"></a>从远程仓库中抓取数据</h3><p>拉取的命令是：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote-name]</span><br></pre></td></tr></table></figure><p></p><p>此命令会到远程仓库中拉取所有你本地仓库中还没有的数据，但<em><code>fetch</code>命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支</em>，只有当你确实准备好了，才能手工合并。<br>如果设置了某个分支用于<em>跟踪</em>某个远端仓库的分支，可以使用<code>git pull</code>命令自动抓取数据下来，然后将远端分支<em>自动合并</em>到本地仓库中当前分支。实际上，默认情况下<code>git clone</code>命令本质上就是自动创建了本地的master分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行<code>git pull</code>，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。</p><h3 id="推送数据到远程仓库"><a href="#推送数据到远程仓库" class="headerlink" title="推送数据到远程仓库"></a>推送数据到远程仓库</h3><p>项目进行到一个阶段，要同别人分享目前的成果，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单：<code>git push [remote-name] [branch-name]</code>。如果要把本地的 master 分支推送到 origin 服务器上（再次说明下，克隆操作会自动使用默认的 master 和 origin 名字），可以运行下面的命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p></p><p>只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。</p><h3 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h3><p>我们可以通过命令<code>git remote show [remote-name]</code>查看某个远程仓库的详细信息，随着使用Git的深入，<code>git remote show</code>可能会给出如下信息：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br><span class="line">* remote origin</span><br><span class="line">URL: git@github.com:defunkt/github.git</span><br><span class="line">Remote branch merged with `git pull` <span class="keyword">while</span> on branch issues</span><br><span class="line">issues</span><br><span class="line">Remote branch merged with `git pull` <span class="keyword">while</span> on branch master</span><br><span class="line">master</span><br><span class="line">New remote branches (next fetch will store <span class="keyword">in</span> remote/origin)</span><br><span class="line">caching</span><br><span class="line">Stable tracking branches (use `git remote prune`)</span><br><span class="line">libwalker</span><br><span class="line">walker2</span><br><span class="line">Tracked remote branches</span><br><span class="line">ack</span><br><span class="line">apiv2</span><br><span class="line">dashboard2</span><br><span class="line">issues</span><br><span class="line">master</span><br><span class="line">postgres</span><br><span class="line">Local branch pushed with `git push`</span><br><span class="line">master:master</span><br></pre></td></tr></table></figure><p></p><p>它告诉我们，运行<code>git push</code>时缺省推送的分支是什么（最后两行）。它还显示了有哪些远端分支还没有同步到本地（第六行的 caching 分支），哪些已同步到本地的远端分支在远端服务器上已被删除（Stale tracking branches 下面的两个分支），以及运行<code>git pull</code>时将自动合并哪些分支（前四行中列出的 issues 和 master 分支）。</p><h3 id="远程仓库的删除和重命名"><a href="#远程仓库的删除和重命名" class="headerlink" title="远程仓库的删除和重命名"></a>远程仓库的删除和重命名</h3><p>我们可以使用<code>git remote rename</code>命令修改某个远程仓库在本地的简称，如：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename pb paul <span class="comment"># pb =&gt; paul</span></span><br></pre></td></tr></table></figure><p></p><p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行<code>git remote rm</code>命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm pual</span><br></pre></td></tr></table></figure><p></p><p><a id="ch2-point-8"></a></p><h2 id="如何使用Git中的标签系统"><a href="#如何使用Git中的标签系统" class="headerlink" title="如何使用Git中的标签系统"></a>如何使用Git中的标签系统</h2><p>在Git中我们可以对某个时间点上的版本打上标签。</p><h3 id="显示已有的列表"><a href="#显示已有的列表" class="headerlink" title="显示已有的列表"></a>显示已有的列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line">git tag -l <span class="string">'v1.4.2.*'</span> <span class="comment"># 用特定的搜素模式列出符合条件的标签</span></span><br></pre></td></tr></table></figure><p>显示的标签按<em>字母的顺序</em>排列，并不表示重要程度的轻重。</p><h3 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h3><p>Git 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p><h3 id="含有附注的标签"><a href="#含有附注的标签" class="headerlink" title="含有附注的标签"></a>含有附注的标签</h3><p>创建一个含附注类型的标签非常简单，用 <code>-a</code>（annotated）指定标签名字即可：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.4 -m <span class="string">"my version 1.4"</span> <span class="comment"># -m 指定了对应的标签说明</span></span><br></pre></td></tr></table></figure><p></p><p>可以使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象。</p><h3 id="签署标签"><a href="#签署标签" class="headerlink" title="签署标签"></a>签署标签</h3><p>如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的<code>-a</code>改为<code>-s</code>（取 signed 的首字母）即可：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s v1.4 -m <span class="string">"my signed 1.4 tag"</span></span><br></pre></td></tr></table></figure><p></p><h3 id="轻量级标签"><a href="#轻量级标签" class="headerlink" title="轻量级标签"></a>轻量级标签</h3><p>轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。要创建这样的标签，一个<code>-a</code>，<code>-s</code>或<code>-m</code>选项都不用，直接给出标签名字即可：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.4-lw</span><br></pre></td></tr></table></figure><p></p><h3 id="验证标签"><a href="#验证标签" class="headerlink" title="验证标签"></a>验证标签</h3><p>可以使用<code>git tag -v [tag-name]</code>（取 verify 的首字母）的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在<strong><code>keyring</code></strong>中，才能验证：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -v v1.4</span><br></pre></td></tr></table></figure><p></p><h3 id="后期加注标签"><a href="#后期加注标签" class="headerlink" title="后期加注标签"></a>后期加注标签</h3><p>我们忘了在提交某些代码后为此项目打上版本号，没关系，现在也能做。只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.2 fceb02</span><br></pre></td></tr></table></figure><p></p><h3 id="分享标签"><a href="#分享标签" class="headerlink" title="分享标签"></a>分享标签</h3><p>默认情况下，<code>git push</code>并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行<code>git push origin [tagname]</code>即可：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.5</span><br><span class="line">git push origin --tags <span class="comment"># 一次推送所有本地新增的标签上去</span></span><br></pre></td></tr></table></figure><p></p><hr><h1 id="Git指令"><a href="#Git指令" class="headerlink" title="Git指令"></a>Git指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加上 -a 参数后，Git会自动把所有已经跟踪购的文件暂存起来一并提交</span></span><br><span class="line">git commit -a -m <span class="string">"to do it will skip git add"</span></span><br></pre></td></tr></table></figure><hr><h1 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h1><p><a href="http://wrran.com/blog/2016/05/30/learn-git-1" target="_blank" rel="noopener">Git学习记录 - 1</a><br><a href="http://git.oschina.net/progit/2-Git-%E5%9F%BA%E7%A1%80.html#2.7-%E6%8A%80%E5%B7%A7%E5%92%8C%E7%AA%8D%E9%97%A8" target="_blank" rel="noopener">Pro Git 中的 技巧与窍门</a></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[温故Hexo]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/review/hexo/</url>
      <content type="html"><![CDATA[<blockquote><p>夜长梦多</p></blockquote><a id="more"></a><p>时隔四个月，再用<code>hexo</code>来写博客，然后发现自己已经忘记了hexo常用的指令了。不得不再滚回去温故下。</p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo <span class="comment"># 创建一个文件夹</span></span><br><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install --save hexo</span><br><span class="line"><span class="comment"># 下面安装hexo的插件，建议都安装</span></span><br><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>博主使用的主题是<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT</a>，可以按照如下方式进行配置<a href="http://theme-next.iissnan.com/getting-started.html#installation" target="_blank" rel="noopener">安装NexT</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入站点目录下</span></span><br><span class="line"><span class="comment"># 使用git checkout出NexT主题的代码</span></span><br><span class="line"><span class="built_in">cd</span> your-hexo-site</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>并注意要修改<strong>站点配置文件</strong>中的<code>theme</code>字段，并将之更改为<code>next</code>。</p><h2 id="博文相关"><a href="#博文相关" class="headerlink" title="博文相关"></a>博文相关</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout=post] <span class="string">"postname"</span> <span class="comment"># 新建博文</span></span><br><span class="line">hexo server  <span class="comment"># 运行本地服务器</span></span><br><span class="line">hexo generate <span class="comment"># 生成静态站点文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到git</span></span><br><span class="line"><span class="comment"># 需要之前配置`_config.yml`</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>上面这些指令已经够我日常使用了，有疑惑的小伙伴可以留言给我 :)</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p><a href="http://www.ezlippi.com//blog/2016/02/jekyll-to-hexo.html" target="_blank" rel="noopener">Jekyll迁移到Hexo搭建个人博客</a><br><a href="http://sunwhut.com/2015/10/30/buildBlog/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">如何利用GitHub Pages和Hexo快速搭建个人博客</a><br><a href="http://www.tuicool.com/articles/AfQnQjy/" target="_blank" rel="noopener">Hexo你的博客</a><br><a href="http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">Hexo常见问题解决方案</a></p><h2 id="Hexo-NexT配置"><a href="#Hexo-NexT配置" class="headerlink" title="Hexo-NexT配置"></a>Hexo-NexT配置</h2><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">官网插件列表</a><br><a href="https://github.com/unhealthy/hexo-all-minifier" target="_blank" rel="noopener">Hexo-all-minifier</a><br><a href="https://github.com/zthxxx/hexo-directory-category" target="_blank" rel="noopener">hexo-directory-category</a><br><a href="https://github.com/hexojs/hexo-filter-auto-spacing" target="_blank" rel="noopener">hexo-filter-auto-spacing</a><br><a href="https://github.com/LouisBarranqueiro/hexo-footnotes" target="_blank" rel="noopener">hexo-footnotes</a><br><a href="https://github.com/wayou/hexo-image-caption" target="_blank" rel="noopener">hexo-image-caption</a><br><a href="https://github.com/fletchto99/hexo-sliding-spoiler" target="_blank" rel="noopener">hexo-sliding-spoiler</a><br><a href="https://github.com/superalsrk/hexo-pdf/" target="_blank" rel="noopener">hexo-pdf</a><br><a href="https://github.com/bubkoo/hexo-filter-flowchart" target="_blank" rel="noopener">hexo-filter-flowchart</a><br><a href="https://github.com/bubkoo/hexo-filter-sequence" target="_blank" rel="noopener">hexo-filter-sequence</a><br><a href="https://github.com/wafer-li/hexo-filter-plantuml" target="_blank" rel="noopener">hexo-filter-plantuml</a><br><a href="https://link.zhihu.com/?target=https%3A//github.com/grzhan/hexo-tag-aplayer" target="_blank" rel="noopener">音乐播放器插件</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/" target="_blank" rel="noopener">使用gulp精简Hexo博客代码</a><br><a href="http://sunwhut.com/2015/10/30/buildBlog/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">图床设置</a><br><a href="http://blog.163.com/pei_hua100/blog/static/8056975920096271643839/" target="_blank" rel="noopener">favicon.ico的作用</a><br><a href="http://www.cnfeat.com/blog/2014/05/10/how-to-build-a-blog/" target="_blank" rel="noopener">如何搭建一个独立博客——简明 GitHub Pages与 jekyll 教程</a><br><a href="http://guochenglai.com/2016/09/26/baidu-crow-github-page/" target="_blank" rel="noopener">百度无法爬取Github Pages静态网站解决方案</a><br><a href="https://coding.net/u/coding/p/Coding-Feedback/topic/337715" target="_blank" rel="noopener">Coding Pages 等待跳转页面说明</a><br><a href="http://www.jianshu.com/p/702a7aec4d00" target="_blank" rel="noopener">Hexo搭建博客系列：（五）Hexo添加不蒜子和LeanCloud统计无标题文章</a></p>]]></content>
      
        <categories>
            
            <category> review </category>
            
        </categories>
        
        
        <tags>
            
            <tag> review </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World from HEXO]]></title>
      <url>http://www.wrran.com/blog/2016/10/15/howto/hexo/</url>
      <content type="html"><![CDATA[<blockquote><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>!</p></blockquote><a id="more"></a><p>This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [Server - hexo](https://hexo.io/docs/server.html)</span></span><br><span class="line"><span class="comment"># npm install hexo-server --save</span></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p><a href="https://github.com/iissnan/hexo-theme-next/issues/1282#issuecomment-262879239" target="_blank" rel="noopener">next修改展示：改了很多，用了许多插件，写了11篇博文详细讲解</a></p>]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[那些人]]></title>
      <url>http://www.wrran.com/blog/2016/07/10/people-say/them/</url>
      <content type="html"><![CDATA[<blockquote><p>少年，你又害怕什么呢</p></blockquote><a id="more"></a><p><code>2016-7-10</code></p><blockquote><p>我现在哪里？<br>我拿着听筒扬起脸，飞快地环视电话亭四周。我现在哪里？我不知道这里是哪里，全然摸不着头脑。这里究竟是哪里？目力所及，无不是不知走去哪里的无数男男女女。我从哪里也不是的场所的正中，不断呼唤着绿子。<br>@村上春树 IN 挪威的森林</p></blockquote><p><code>2016-6-21</code></p><blockquote><p>既然当初选择了安逸懒惰，那就好好承受今天所遭遇的平庸艰难；若是心中仍有不甘，那就从现在起发奋图强。有时候世界就是这么公平。<br>@<a href="http://www.zhihu.com/question/41799510?f3fb8ead20=b4a7ecd8c7caf4df02f5161465b6052a" target="_blank" rel="noopener">鬼木知</a></p></blockquote><p><code>2016-6-7</code><br><a href="http://daily.zhihu.com/story/8401607?utm_campaign=in_app_share&amp;utm_medium=Android&amp;utm_source=com.teambition.teambition.teambition.activity.AddTaskActivity" target="_blank" rel="noopener">拳王阿里</a></p><blockquote><p>他又帅，嘴又碎<br>@张佳玮</p></blockquote><p><code>2016-6-6</code><br><a href="http://forwell.me/about/" target="_blank" rel="noopener">唐波</a></p><p><code>2016-6-5</code><br><a href="http://daily.zhihu.com/story/8392224?utm_campaign=in_app_share&amp;utm_medium=Android&amp;utm_source=com.tencent.mobileqq.activity.qfileJumpActivity" target="_blank" rel="noopener">学习英语给你带来了多大改变？</a></p><p><code>2016-6-4</code><br><a href="http://daily.zhihu.com/story/8392481?utm_campaign=in_app_share&amp;utm_medium=Android&amp;utm_source=QQ" target="_blank" rel="noopener">这位老戏骨，即使你记不住他的名字，你也一定见过他</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java Patch#1]]></title>
      <url>http://www.wrran.com/blog/2016/07/09/learn/java/patch-1/</url>
      <content type="html"><![CDATA[<blockquote><p>PATCH ╰(￣▽￣)╭</p></blockquote><a id="more"></a><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>使用<code>static</code>有两方面需求：</p><ol><li>只想为某个特定域分配单一存储空间，而不去考虑究竟要创建多少对象</li><li>希望某个方法不与包含它的类的任何对象关联在一起</li></ol><p>以上两点可以通过使用<code>static</code>关键字，形成静态域或静态方法解决。<br>引用静态域或者静态方法可以有两种用法，一是通过对象来定位，二是直接通过类名直接引用。但是两者相比较，<strong>后者为最佳实践</strong>，这样不仅突出引用的是静态域或者静态方法，还为编译器进行优化提供了更好的机会。</p><h2 id="注释和嵌入式文档"><a href="#注释和嵌入式文档" class="headerlink" title="注释和嵌入式文档"></a>注释和嵌入式文档</h2><p>代码文档撰写可以使用工具<code>javadoc</code>。javadoc提取代码中的注释，并结合相关毗邻的类名或方法名等；输出一个HTML文件。此外也可以通过编写<code>doclets</code>的javadoc处理器来定制输出文档的这个过程，可以参见<a href="http://docs.oracle.com/javase/8/docs/technotes/guides/javadoc/doclet/overview.html" target="_blank" rel="noopener">这里</a>。关于<code>javadoc</code>的官方文档<a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html" target="_blank" rel="noopener">戳这里</a>。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>所有<code>javadoc</code>命令都只能在<code>/**</code>注释中出现，注释结束于<code>*/</code>。使用javadoc的方式有两种：嵌入式HTML和“文档标签”。<code>独立文档标签</code>是一些以<code>@</code>字符开头的命令，且要置于注释行的最前面；而<code>行内文档标签</code>则可以出现在javadoc注释中的任何地方，它们也是以<code>@</code>字符开头，但要括在花括号内。<code>javadoc</code>根据注释的位置分为类注释、域注释和方法注释。<br>注意，javadoc只能为<code>public</code>和<code>protected</code>成员进行文档注释，<code>private</code>和包内可访问成员的注释会被忽略掉，所以输出结果中看不到他们（不过可以使用<code>-private</code>进行标记，以便把<code>private</code>成员的注释包括在内）。</p><h3 id="嵌入式HTML"><a href="#嵌入式HTML" class="headerlink" title="嵌入式HTML"></a>嵌入式HTML</h3><p>因为javadoc通过生成HTML的方式格式化注释的，因此我们可以在注释中使用部分HTML标签手动格式化注释。所有类型的注释文档都支持嵌入式HTML。比如这样：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;System.out.println(new Date())&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><p>注意，在文档注释中，位于每一行开头的星号和前导空格都会被javadoc丢弃，并且javadoc会插入自己的标题（这也意味着不要在嵌入式HTML中使用标题标签，如<code>&lt;h1&gt;</code>等）。</p><h3 id="文档标签"><a href="#文档标签" class="headerlink" title="文档标签"></a>文档标签</h3><p>完整的文档标签可以参考<a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDBEFIF" target="_blank" rel="noopener">官方文档</a>，下面简单介绍一些常用的文档标签。</p><h4 id="see"><a href="#see" class="headerlink" title="@see"></a>@see</h4><p><code>@see</code>允许用户引用其他类的文档，javadoc会在其生成的HTML文件中，通过<code>@see</code>标签链接到其他文档。格式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> classname</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> fully-qualified-classname</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> fully-qualified-classname#method-name</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><p>上述每种格式都会在生成的文档中加入一个具有超链接的”See Also”条目，但javadoc不会帮你检查所提供的超链接的有效性。</p><h4 id="link-package-class-member-label"><a href="#link-package-class-member-label" class="headerlink" title="{@link package.class#member label}"></a>{@link package.class#member label}</h4><p>该标签与<code>@see</code>类似，但是它只用于行内，且是用”label”作为超链接文本而不是用”See Also”。</p><h4 id="docRoot"><a href="#docRoot" class="headerlink" title="{@docRoot}"></a>{@docRoot}</h4><p>该标签产生到文档根目录的相对路径，用于文档树页面的显式超链接。</p><h4 id="inheritDoc"><a href="#inheritDoc" class="headerlink" title="{@inheritDoc}"></a>{@inheritDoc}</h4><p>该标签产生从当前这个类的最直接的基类中继承相关文档到当前的文档注释中。</p><h4 id="version"><a href="#version" class="headerlink" title="@version"></a>@version</h4><p>该标签的格式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> version-information</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><p>其中，<code>version-information</code>可以是任何你认为适合包含在版本说明中的重要信息。如果javadoc命令行中使用了<code>-version</code>，那么就可以从生成的HTML文档中特别提取出版本信息。</p><h4 id="author"><a href="#author" class="headerlink" title="@author"></a>@author</h4><p>该标签格式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> author-information</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><p>其中，<code>author-information</code>可以是作者的姓名、电子邮件等其他适宜信息。如果javadoc命令行中使用了<code>-author</code>，则就可以从生成的HTML文档中特别提取作者信息。<br>注意，该标签可多次使用，但是必须连续放置。全部作者信息会合并到同一个段落，置于生成的HTML中。</p><h4 id="since"><a href="#since" class="headerlink" title="@since"></a>@since</h4><p>该标签允许你指定程序代码最早使用的版本，可以在HTML java文档中看到它被用来指定所用的JDK版本的情况。</p><h4 id="param"><a href="#param" class="headerlink" title="@param"></a>@param</h4><p>该标签用于方法的注释文档中，格式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameter-name description</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><p>其中，<code>parameter-name</code>是方法的参数列表中的标识符，<code>description</code>是可延续数行的文本，终止于新的文档标签出现之前，可以使用任意多这样的标签。</p><h4 id="return"><a href="#return" class="headerlink" title="@return"></a>@return</h4><p>该标签用于方法的注释文档中，格式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> description</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><p>其中，<code>description</code>用来描述返回值的含义，可以延续数行。</p><h4 id="throws"><a href="#throws" class="headerlink" title="@throws"></a>@throws</h4><p>该标签格式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> fully-qualified-classname description</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p></p><p>其中，<code>fully-qualified-classname</code>给出一个异常类的无歧义的名词，而该异常类在别处定义，<code>description</code>则应当描述该类型的异常为何会在该方法中出现。</p><h4 id="deprecated"><a href="#deprecated" class="headerlink" title="@deprecated"></a>@deprecated</h4><p>该标签用于之处一些旧特性已有改进的新特性所取代，建议用户不要再使用这些旧特性，因为在不久的将来可能被删除。<br>在Java SE5中，javadoc标签<code>@deprecated</code>已经被注解<code>@Deprecated</code>所替代。</p><h2 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h2><p>在Java中唯一用到逗号操作符的地方就是for循环的控制表达式，在控制表达式的初始化和步进控制部分，可以使用一系列由逗号分隔的语句，而这些语句将会被顺序地、独立执行。通过使用逗号操作符，可以在for语句内定义多个变量，但是它们必须具有相同的类型。</p><h2 id="构造与清理"><a href="#构造与清理" class="headerlink" title="构造与清理"></a>构造与清理</h2><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>通常写<code>this</code>时，都是指这个对象或者当前对象，而且它本身表示对当前对象的引用。在构造器中，如果为<code>this</code>添加了参数列表时，将产生一个对符合此参数列表的某个构造器的明确调用。所以，可以这样在构造函数中调用其他构造函数：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> memeber1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> memeber2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">(<span class="keyword">int</span> m1, <span class="keyword">int</span> m2)</span> </span>&#123;</span><br><span class="line">        memeber1 = m1;</span><br><span class="line">        memeber2 = m2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">0</span>,<span class="number">0</span>); <span class="comment">// Call MyClass(int, int)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注意，尽管可以用<code>this</code>调用一个构造器，但却不能调用两个；另外，必须将构造器调用置于最起始处，否则编译器将会报错。</p><p>在这儿顺便一体静态方法与其他方法的差别：<code>static</code>方法中没有<code>this</code>这个参数。</p><h3 id="构造顺序"><a href="#构造顺序" class="headerlink" title="构造顺序"></a>构造顺序</h3><p>无法阻止自动初始化的进行，它将在构造器被调用前发生。<br>在类的内部变量定义的先后顺序决定了初始化的顺序。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    A(<span class="keyword">int</span> m) &#123; System.out..println(<span class="string">"A("</span> + m + <span class="string">")"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    A a1 = <span class="keyword">new</span> A(<span class="number">1</span>);</span><br><span class="line">    B() &#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">        a3 = <span class="keyword">new</span> A(<span class="number">33</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    A a2 = <span class="keyword">new</span> A(<span class="number">2</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    A a3 = <span class="keyword">new</span> A(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果一个域是静态的基本类型域，且也没有对它进行初始化，那么他就会获得基本类型的标准初值；如果是一个对象引用，则它的默认初始化值就是null。静态初始化只有在必要的时刻才会进行，即第一次该类型被创建或者第一次访问静态数据时，它们才会被初始化。<br>总结下对象的创建过程，假设有一个名为A的类：</p><ol><li>即使没有显式地使用<code>static</code>关键字，构造器实际上也是一个静态方法。因此当首次创建类型为A的对象时，或者A的静态方法/静态域首次被访问时，java解释器必须查找类路径，以定位A.class文件。</li><li>然后载入A.class文件，这会创建一个Class对象，有关静态初始化的所有动作都会执行。因此静态初始化只在Class对象首次加载时进行一次。</li><li>当用new A()创建对象时，首先将在堆上为A对象分配足够的存储空间。</li><li>这块存储空间会被清零，这就自动将对象A中的所有基本类型数据设置成默认值，而引用类型则设置为null。</li><li>执行所有出现于字段定义处的初始化动作。</li><li>执行构造器。</li></ol><h4 id="显示静态初始化与非静态实例初始化"><a href="#显示静态初始化与非静态实例初始化" class="headerlink" title="显示静态初始化与非静态实例初始化"></a>显示静态初始化与非静态实例初始化</h4><p>Java允许将多个静态初始化动作组织成一个特殊的静态子句，也称为静态块。例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">// 静态块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>与其他静态初始化动作一样，这段代码仅执行一次：当首次生成该类的一个对象时，或者首次访问属于那个类的静态数据成员时。<br>同样，Java中也有被称为实例初始化的类似语法，用来初始化每一个对象的非静态变量。例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    A(<span class="keyword">int</span> i) &#123; System.out.println(<span class="string">"A("</span> + i + <span class="string">")"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    A a1;</span><br><span class="line">    A a2;</span><br><span class="line">    <span class="comment">// 实例初始化</span></span><br><span class="line">    &#123;</span><br><span class="line">        a1 = <span class="keyword">new</span> A(<span class="number">1</span>);</span><br><span class="line">        a2 = <span class="keyword">new</span> A(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">":)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>实例初始化可以保证无论调用了哪个显式构造器，某些操作都会发生。</p><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>在java中垃圾回收器只释放那些经由new分配的内存，所以当对象获得了某些不是由“new”得到的内存时，需要使用其他方法进行释放。<br>java允许在类中定义一个名为<code>finalize()</code>的方法，它的工作原理：一旦垃圾回收器准备好释放对象占用的存储空间，将首先调用其<code>finalize()</code>方法，并且在下一次垃圾回收器动作发生时，才会真正回收对象占用的内存。因为对于垃圾回收有关的任何行为来说（尤其是<code>finalize()</code>方法），它们必须同内存及其回收有关。但另一方面finalize()方法不必关心对象中其他对象的内存释放问题，而应当关注<strong>通过某种创建对象方式之外的方式为对象分配了空间</strong>的情景。这种情景主要发生在使用了“本地方法”（指在java代码中调用了非java代码的方法），如使用C中的malloc分配了存储空间，其实就需要在finalize()中用本地方法free()释放这部分内存了。<br>注意将java中的垃圾回收机制与C++中的析构函数相区别：</p><ol><li>对象可能不被垃圾回收</li><li>垃圾回收并不等于析构</li><li>垃圾回收只与内存有关‘</li></ol><p>我们应当避免使用finalize方法。</p><blockquote><p>finalize无法预料，常常是危险的，总之是多余的。</p></blockquote><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p><code>final</code>关键字意为“无法改变”，常常出于两方面考虑，一是设计，二是效率。final可以更精确的分为三种情形：数据、方法和类。</p><h3 id="final数据"><a href="#final数据" class="headerlink" title="final数据"></a>final数据</h3><p>数据的恒定不变可以分为两类：</p><ol><li>编译时期便确定的，即<strong>编译器常量</strong></li><li>运行时被初始化的值，但之后不再改变</li></ol><p>在Java中编译器常量需要是用final和static共同修饰的基本数据类型，而后者只需用final进行修饰即可。例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_ONE = <span class="number">1</span>; <span class="comment">// Can be compile-time constants</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i = rand.nextInt(<span class="number">20</span>); <span class="comment">// Cannot be compile-time constants, just runtime constants </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>空白final</strong><br>空白final是指被声明为final但又未给定初值的域，另一方面final域必须在使用前被初始化，即必须在域定义处或者每个构造器中用表达式对final进行赋值。这样的语法设计让我们可以做到根据对象而有所不同，却又保持其恒定不变的特性，提供了一定的灵活性，例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// initialized final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> j; <span class="comment">// blank final</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> B b; <span class="comment">// blank final reference</span></span><br><span class="line">    A() &#123;</span><br><span class="line">        j = <span class="number">1</span>; <span class="comment">// initialize blank final</span></span><br><span class="line">        b = <span class="keyword">new</span> B(); <span class="comment">// initialize blank final reference</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>final参数</strong><br>Java允许在参数列表中以声明的方式将参数指明为final，这将导致方法内部只能读取数据而无法修改数据。</p><h3 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h3><p>使用final方法常常出于两方面考虑：一是想将方法锁定，以防任何继承类修改它的含义；第二个原因是出于效率的考虑，但当前这渐渐不再是理由。<br>同时注意类中所有的private方法都隐式地被指定为final，无法覆写。</p><h3 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h3><p>当将某个类的整体定义为final时，就表明了<strong>不可以继承该类</strong>。这也暗示final类中的方法是禁止重写的，它们都隐式的被指定为final。</p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS选择器]]></title>
      <url>http://www.wrran.com/blog/2016/07/06/cheatsheet/reference/css-selector/</url>
      <content type="html"><![CDATA[<blockquote><p>I will find you.</p></blockquote><a id="more"></a><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:left">例子</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">*</td><td style="text-align:left">选择所有元素</td></tr><tr><td style="text-align:center">#id</td><td style="text-align:left">#firstname</td><td style="text-align:left">选择<code>id=&#39;firstname&#39;</code>的所有元素</td></tr><tr><td style="text-align:center">.class</td><td style="text-align:left">.intro</td><td style="text-align:left">选择<code>class=&#39;intro&#39;</code>的所有元素</td></tr><tr><td style="text-align:center">element</td><td style="text-align:left">p</td><td style="text-align:left">选择所有<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">element,element</td><td style="text-align:left">div,p</td><td style="text-align:left">选择所有<code>&lt;div&gt;</code>元素和所有<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">element element</td><td style="text-align:left">div p</td><td style="text-align:left">选择<code>&lt;div&gt;</code>元素内部的所有<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">element&gt;element</td><td style="text-align:left">div&gt;p</td><td style="text-align:left">选择父元素为<code>&lt;div&gt;</code>元素的所有<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">element+element</td><td style="text-align:left">div+p</td><td style="text-align:left">选择紧跟在<code>&lt;div&gt;</code>元素之后的所有<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">element~element</td><td style="text-align:left">p~ul</td><td style="text-align:left">选择前面有<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">[attribute]</td><td style="text-align:left">[target]</td><td style="text-align:left">选择带有<code>target</code>属性的所有元素</td></tr><tr><td style="text-align:center">[attribute=value]</td><td style="text-align:left">[target=_blank]</td><td style="text-align:left">选择<code>target=&quot;_blank&quot;</code>的所有元素</td></tr><tr><td style="text-align:center">[attribute~=value]</td><td style="text-align:left">[tite~=flower]</td><td style="text-align:left">选择<code>title</code>属性包含单词”flower”的所有元素</td></tr><tr><td style="text-align:center">见<a href="#note">备注</a></td><td style="text-align:left">见<a href="#note">备注</a></td><td style="text-align:left">选择<code>lang</code>属性值以”en”开头的所有元素</td></tr><tr><td style="text-align:center">[attribute^=value]</td><td style="text-align:left">a[src^=”https”]</td><td style="text-align:left">选择其<code>src</code>属性以”http”开头的每个<code>&lt;a&gt;</code>元素</td></tr><tr><td style="text-align:center">[attribute$=value]</td><td style="text-align:left">a[src$=”.pdf”]</td><td style="text-align:left">选择其<code>src</code>属性以”.pdf”结尾的每个<code>&lt;a&gt;</code>元素</td></tr><tr><td style="text-align:center">[attribute*=value]</td><td style="text-align:left">a[src*=”abc”]</td><td style="text-align:left">选择其<code>src</code>属性中包含”abc”子串的每个<code>&lt;a&gt;</code>元素</td></tr><tr><td style="text-align:center">:link</td><td style="text-align:left">a:link</td><td style="text-align:left">选择所有未被访问的链接</td></tr><tr><td style="text-align:center">:visited</td><td style="text-align:left">a:visited</td><td style="text-align:left">选择所有已被访问的链接</td></tr><tr><td style="text-align:center">:active</td><td style="text-align:left">a:active</td><td style="text-align:left">选择活动链接</td></tr><tr><td style="text-align:center">:hover</td><td style="text-align:left">a:hover</td><td style="text-align:left">选择鼠标指针位于其上的链接</td></tr><tr><td style="text-align:center">:focus</td><td style="text-align:left">input:focus</td><td style="text-align:left">选择获得焦点的 input 元素</td></tr><tr><td style="text-align:center">:first-letter</td><td style="text-align:left">p:first-letter</td><td style="text-align:left">选择每个<code>&lt;p&gt;</code>元素的首字母</td></tr><tr><td style="text-align:center">:first-line</td><td style="text-align:left">p:first-line</td><td style="text-align:left">选择每个<code>&lt;p&gt;</code>元素的首字母</td></tr><tr><td style="text-align:center">:first-child</td><td style="text-align:left">p:first-child</td><td style="text-align:left">选择属于父元素的第一个子元素的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:before</td><td style="text-align:left">p:before</td><td style="text-align:left">在每个<code>&lt;p&gt;</code>元素的内容之前插入内容</td></tr><tr><td style="text-align:center">:after</td><td style="text-align:left">p:after</td><td style="text-align:left">在每个<code>&lt;p&gt;</code>元素的内容之后插入内容</td></tr><tr><td style="text-align:center">:lang(language)</td><td style="text-align:left">p:lang(it)</td><td style="text-align:left">选择带有以”it”开头的<code>lang</code>属性值的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:first-of-type</td><td style="text-align:left">p:first-of-type</td><td style="text-align:left">选择属于其父元素的首个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:last-of-type</td><td style="text-align:left">p:last-of-type</td><td style="text-align:left">选择属于其父元素的最后<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:only-of-type</td><td style="text-align:left">p:only-of-type</td><td style="text-align:left">选择属于其父元素唯一的<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:only-child</td><td style="text-align:left">p:only-child</td><td style="text-align:left">选择属于其父元素的唯一子元素的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:nth-child(n)</td><td style="text-align:left">p:nth-child(2)</td><td style="text-align:left">选择属于其父元素的第二个子元素的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:nth-last-child(n)</td><td style="text-align:left">p:nth-last-child(2)</td><td style="text-align:left">同上，从最后一个子元素开始计数</td></tr><tr><td style="text-align:center">:nth-of-type(n)</td><td style="text-align:left">p:nth-of-type(2)</td><td style="text-align:left">选择属于其父元素第二个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:nth-last-of-type(n)</td><td style="text-align:left">p:nth-last-of-type(2)</td><td style="text-align:left">同上，但是从最后一个子元素开始计数</td></tr><tr><td style="text-align:center">:last-child</td><td style="text-align:left">p:last-child</td><td style="text-align:left">选择属于其父元素最后一个子元素每个<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:center">:root</td><td style="text-align:left">:root</td><td style="text-align:left">选择文档的根元素</td></tr><tr><td style="text-align:center">:empty</td><td style="text-align:left">p:empty</td><td style="text-align:left">选择没有子元素的每个<code>&lt;p&gt;</code>元素(包括文本节点)</td></tr><tr><td style="text-align:center">:target</td><td style="text-align:left">#news:target</td><td style="text-align:left">选择当前活动的<code>#news</code>元素</td></tr><tr><td style="text-align:center">:enabled</td><td style="text-align:left">input:enabled</td><td style="text-align:left">选择每个启用的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:center">:disabled</td><td style="text-align:left">input:disabled</td><td style="text-align:left">选择每个禁用的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:center">:checked</td><td style="text-align:left">input:checked</td><td style="text-align:left">选择每个被选中的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:center">:not(selector)</td><td style="text-align:left">:not(p)</td><td style="text-align:left">选择非<code>&lt;p&gt;</code>元素的每个元素</td></tr><tr><td style="text-align:center">::selection</td><td style="text-align:left">::selection</td><td style="text-align:left">选择被用户选取的元素部分</td></tr></tbody></table><p><a id="note"></a>我是备注：选择器为[attribute|=value]，例子为[lang|=en]</p><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><p><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">W3School - CSS选择器参考手册</a></p>]]></content>
      
        <categories>
            
            <category> cheatsheet </category>
            
            <category> reference </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cheatsheet </tag>
            
            <tag> css-selector </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[影评]]></title>
      <url>http://www.wrran.com/blog/2016/06/21/people-say/movies/movies/</url>
      <content type="html"><![CDATA[<blockquote><p>词穷 (。・・)ノ</p></blockquote><a id="more"></a><h2 id="2016-6-21"><a href="#2016-6-21" class="headerlink" title="2016-6-21"></a><code>2016-6-21</code></h2><p><a href="http://daily.zhihu.com/story/8397450?utm_campaign=in_app_share&amp;utm_medium=Android&amp;utm_source=com.teambition.teambition.teambition.activity.AddTaskActivity" target="_blank" rel="noopener">善良的女孩和懵懂的男孩，别想多，只是友情而已</a></p><h2 id="2016-6-18"><a href="#2016-6-18" class="headerlink" title="2016-6-18"></a><code>2016-6-18</code></h2><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/movies/image/%E8%8A%B1%E6%A0%B7%E5%B9%B4%E5%8D%8E.jpg" alt="花样年华"></p><blockquote><p>那是一种难堪的相对。<br>她一直羞低着头，<br>给他一个接近的机会。<br>他没有勇气接近，<br>她掉转身，走了。</p></blockquote><h2 id="2016-6-15"><a href="#2016-6-15" class="headerlink" title="2016-6-15"></a><code>2016-6-15</code></h2><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/movies/image/%E5%91%8A%E7%99%BD.jpg" alt="告白"></p><blockquote><p>从今开始是你重生的 第一步</p></blockquote><h2 id="2016-6-7"><a href="#2016-6-7" class="headerlink" title="2016-6-7"></a><code>2016-6-7</code></h2><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/movies/image/%E7%A5%9E%E5%A5%88%E5%B7%9D%E5%86%B2%E6%B5%AA%E5%9B%BE.jpg" alt="神奈川冲浪图" title="神奈川冲浪图"><br><a href="http://daily.zhihu.com/story/8402083?utm_campaign=in_app_share&amp;utm_medium=Android&amp;utm_source=com.teambition.teambition.teambition.activity.AddTaskActivity" target="_blank" rel="noopener">百日红 - 你一定见过这幅画，却不一定知道它背后的那些故事</a></p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
        <tags>
            
            <tag> movies </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python UnitTest使用教程]]></title>
      <url>http://www.wrran.com/blog/2016/06/14/howto/python/unittest/</url>
      <content type="html"><![CDATA[<blockquote><p>吾日三省</p></blockquote><a id="more"></a><p>何止于三!<br>BUG都在哪儿 &gt;~&lt;</p><h2 id="我简单说几句"><a href="#我简单说几句" class="headerlink" title="我简单说几句"></a>我简单说几句</h2><ul><li>测试环境：<br><code>Python 2.7.11 :: Anaconda 4.0.0 (64-bit)</code></li><li>官方文档<br><a href="https://docs.python.org/2.6/library/unittest.html" title="unittest - Unit testing framework" target="_blank" rel="noopener">unittest - Unit testing framework</a></li><li><a href="https://blog.jetbrains.com/pycharm/2013/07/testing-your-python-code-with-pycharm/" target="_blank" rel="noopener">Testing your Python code with PyCharm</a></li></ul><p>本教程主要按照上述官方文档展开。</p><h2 id="unittest介绍"><a href="#unittest介绍" class="headerlink" title="unittest介绍"></a>unittest介绍</h2><blockquote><p><code>unittest</code> supports test automation, sharing of setup and shutdown code for tests, aggregation of tests into collections, and independence of the tests from the reporting framework.</p></blockquote><p><code>unittest</code>是<code>JUnit</code>的python版本，内嵌在Python中。<br>跟<code>JUnit</code>一样，<code>unittest</code>涉及四个概念：</p><ol><li><code>test fixture</code>： <code>test case</code>的脚手架，用来构建(set up)测试的环境或者在测试之后做些回收资源等拆除(tear down)测试环境。</li><li><code>test case</code>：测试用例，执行具体测试任务的实体。</li><li><code>test suite</code>：把一些<code>test case</code>和/或<code>test suite</code>打包，方便测试的执行。</li><li><code>test runner</code>：用来运行测试用例并输出统计信息。</li></ol><p>概念是概念，耍起来的是<code>unittest</code>中的一个个类：<br><code>test case</code>:</p><ol><li>TestCase：类如其名，用来新建<code>test case</code></li><li>FunctionTestCase: 用来将遗留的测试代码，集成到<code>unittest</code>测试框架中</li></ol><p>具体到脚手架(test fixture)，它是针对测试用例而言，不同的测试用例对应的脚手架(test fixture)创建方式是不同的。<br><code>test fixtures</code>(Using TestCase)</p><ul><li>setUp(): 环境搭建放在这儿</li><li>tearDown(): 收尾工作放在这儿</li></ul><p>需要注意的是TestCase每次只跑一个测试方法，因而脚手架(test fixture)的创建与拆除会在<strong>每次测试</strong>时都进行。</p><p><code>test suite</code>:</p><ul><li>TestSuite： suite =&gt; 套件。是的没错，这是测试的套件。当suite执行时，包含在它里面的测试用例及测试套件都会被执行。</li></ul><p><code>test runner</code>:</p><ul><li>TextTestRunner: 默认的测试执行者，顺便提下文档中的两个类：<blockquote><p>A test runner is an object that provides a single method, <strong>run()</strong>, which accepts a <em>TestCase</em> or <em>TestSuite</em> object as a parameter, and returns a result object. The class <em>TestResult</em> is provided for use as the result object.</p></blockquote></li></ul><h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2><p>下面是一个完整的<code>unittest</code>实例脚本，测试随机数<code>random</code>的一些特性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSequenceFunctions</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'set up'</span></span><br><span class="line">        self.seq = range(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'tear down'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_shuffle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># make sure the shuffled sequence does not lose any elements</span></span><br><span class="line">        random.shuffle(self.seq)</span><br><span class="line">        self.seq.sort()</span><br><span class="line">        self.assertEqual(self.seq, range(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_choice</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = random.choice(self.seq)</span><br><span class="line">        self.assertTrue(element <span class="keyword">in</span> self.seq)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_sample</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertRaises(ValueError, random.sample, self.seq, <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> random.sample(self.seq, <span class="number">5</span>):</span><br><span class="line">            self.assertTrue(element <span class="keyword">in</span> self.seq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>代码中需要注意的有：</p><ol><li>概念上的测试用例(test case)对应的是TestSequenceFunctions中的test_shuffle()/test_choice()/test_sample()</li><li>测试用例(test case)对应的方法名称都以<code>test</code>开始</li><li>执行检查的方法是<strong>assert</strong>系列方法，具体来说是：<ul><li><strong>assertEqual()</strong>检查是否为期待值</li><li><strong>assert_()</strong>检查条件</li><li><strong>assertRaises()</strong>检查异常是否如期发生</li></ul></li><li><strong>setUp()</strong>会在每个测试用例(test case)执行前执行，<strong>tearDown()</strong>会在每个测试用例(test case)执行后执行</li></ol><p>运行上面脚本，记得是在command line中直接运行上述脚本，输出如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 3 tests <span class="keyword">in</span> 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p></p><blockquote><p>你可能好奇为啥输出不一样 :)<br># 因为我注释了一些代码</p></blockquote><p>除了<code>unittest.main()</code>之外，还有其他一些能够更加精细地控制输出，也不需要在command line中执行的方法。比如说吧，将上述代码中的最后两行换成：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)</span><br><span class="line">unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(suite)</span><br></pre></td></tr></table></figure><p></p><p>输出就变成了酱紫：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test_choice (__main__.TestSequenceFunctions) ... ok</span><br><span class="line">test_sample (__main__.TestSequenceFunctions) ... ok</span><br><span class="line">test_shuffle (__main__.TestSequenceFunctions) ... ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 3 tests <span class="keyword">in</span> 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p></p><blockquote><p>def setUp(self): self.seq = range(10)<br>def tearDown(self): pass</p></blockquote><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li><blockquote><p>The testing code of a TestCase instance should be entirely <strong>self contained</strong>, such that it can be run either in isolation or in arbitrary combination with any number of other test cases.</p></blockquote></li><li><blockquote><p><strong>Failures</strong> are caused by incorrect results - a 5 where you expected a 6.<br><strong>Errors</strong> are caused by incorrect code - e.g., a TypeError caused by an incorrect function call.</p></blockquote></li></ul>]]></content>
      
        <categories>
            
            <category> howto </category>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> unit test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络复习]]></title>
      <url>http://www.wrran.com/blog/2016/06/09/review/network/</url>
      <content type="html"><![CDATA[<blockquote><p>我是</p></blockquote><a id="more"></a><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><h4 id="TCP的主要特性"><a href="#TCP的主要特性" class="headerlink" title="TCP的主要特性"></a>TCP的主要特性</h4><ol><li>面向连接的传输协议</li><li>仅支持单播传输</li><li>提供可靠的交付服务</li><li>传输单位为数据段</li><li>仅一种 TPDU(传输层协议数据单元) 格式</li><li>支持全双工传输</li><li>TCP连接是基于字节流，而非报文流</li><li>每次发送的TCP数据段大小和数据段数是可变的</li></ol><h4 id="TCP的数据段格式"><a href="#TCP的数据段格式" class="headerlink" title="TCP的数据段格式"></a>TCP的数据段格式</h4><p>决定TCP数据段大小的两个因素：</p><ol><li>每个TCP数据段的大小必须符合IP数据包的65515字节的有效载荷大小限制要求</li><li>每个网络都有一个MTU值，因此每个TCP数据段都必须符合MTU的限制要求</li></ol><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/TCP%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE.png" alt="TCP数据段格式" title="TCP数据段格式"></p><table><thead><tr><th style="text-align:center">字段名称</th><th style="text-align:left">字段含义</th><th style="text-align:center">字段位数</th></tr></thead><tbody><tr><td style="text-align:center">源端口</td><td style="text-align:left">呼叫方的TCP端口号</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">目的端口</td><td style="text-align:left">被叫方的TCP端口号</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">序号</td><td style="text-align:left">TCP数据段中的“数据”部分的第一个字节的编号</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">确认号</td><td style="text-align:left">期望接收到对方下一个数据段中“数据”部分的第一个字节序号</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">数据偏移</td><td style="text-align:left">数据段中“数据”部分起始处距离TCP数据段起始处的偏移量，单位为4字节</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">保留</td><td style="text-align:left">为将来应用保留，现在全为0</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">URG</td><td style="text-align:left">Urgent Point，指出当前数据段中是否有紧急数据</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">ACK</td><td style="text-align:left">Acknowledgement，指示TCP数据段中的“确认号”字段是否有效</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">PSH</td><td style="text-align:left">Push，指示是否需要立即把收到的该数据段提交给应用进程</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">RST</td><td style="text-align:left">Reset，用于重置、释放原有的传输连接，然后重建一个新的传输连接</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">SYN</td><td style="text-align:left">Synchronization，硬来在传输连接建立时同步传输连接序号</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">FIN</td><td style="text-align:left">Final，用于释放一个传输连接</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">窗口大小</td><td style="text-align:left">指示发送此TCP数据段的主机上用来存储传入数据段的窗口大小，即发送者当前还可以接收的最大字节数</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">校验和</td><td style="text-align:left">指对“数据段头”、“数据”和“伪头部”的校验和，“伪头部”包括源主机、目的主机的32位IP地址、TCP版本号、TCP数据段长度</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">紧急指针</td><td style="text-align:left">指明了紧急数据的末尾在数据段中的位置</td><td style="text-align:center">16</td></tr><tr><td style="text-align:center">可选项</td><td style="text-align:left">可选，长度可变，包括窗口缩放选项，MSS选项，SACK选项，时间戳等</td><td style="text-align:center">0个或多个32位</td></tr><tr><td style="text-align:center">数据</td><td style="text-align:left">TCP数据段的有效载荷部分</td><td style="text-align:center">视网络情况而定</td></tr></tbody></table><p>TCP/IP网络中，区分不同应用程序进程间的网络通信和连接时主要有以下3个参数：通信的目的IP地址、使用的传输层协议(TCP或UDP)和使用的端口号。<br>Socket完全位于应用层，虽然带啊哦用了传输层的端口。<br>Socket的原语有：<code>SOCKET</code>，<code>BIND</code>，<code>LISTEN</code>，<code>ACCEPT</code>，<code>CONNECT</code>，<code>SEND</code>，<code>RECV</code>，<code>CLOSE</code></p><h4 id="TCP端口"><a href="#TCP端口" class="headerlink" title="TCP端口"></a>TCP端口</h4><p>端口共有$2^{16}$个(0~65535)，分为保留端口(0~1023)、动态分配端口、注册端口。</p><h4 id="TCP连接的状态转移"><a href="#TCP连接的状态转移" class="headerlink" title="TCP连接的状态转移"></a>TCP连接的状态转移</h4><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/TCP%E4%BC%A0%E8%BE%93%E8%BF%9E%E6%8E%A5%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E8%BD%AC%E7%A7%BB%E6%B5%81%E7%A8%8B.png" alt="TCP传输连接有限状态机转移流程" title="TCP传输连接有限状态机转移流程"></p><h4 id="TCP传输连接的建立"><a href="#TCP传输连接的建立" class="headerlink" title="TCP传输连接的建立"></a>TCP传输连接的建立</h4><h5 id="单方主动连接的TCP连接建立过程"><a href="#单方主动连接的TCP连接建立过程" class="headerlink" title="单方主动连接的TCP连接建立过程"></a>单方主动连接的TCP连接建立过程</h5><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/TCP%E4%BC%A0%E8%BE%93%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B.png" alt="TCP传输连接建立的三次握手过程" title="TCP传输连接建立的三次握手过程"></p><p>三次握手是连接两端正确同步的充分必要条件，因为TCP建立在不可靠的分组传输服务之上，报文可能丢失、延迟、重复和乱序，因此协议必须使用超时和重传机制。如果重传的连接请求和原先的连接请求在连接正在建立时到达，或者当一个连接已经建立、使用和结束之后，某个延迟的连接请求才能到达，就会出现问题。采用三次握手协议可以解决上述问题。如客户端发送的ACK数据段就是为了避免因网络延迟而导致的重复连接，因为这时客户端通过检查ACK数据段中的确认号就可得知该连接请求是否已失效。</p><h5 id="双方同时主动连接的TCP连接建立过程"><a href="#双方同时主动连接的TCP连接建立过程" class="headerlink" title="双方同时主动连接的TCP连接建立过程"></a>双方同时主动连接的TCP连接建立过程</h5><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/%E5%90%8C%E6%97%B6%E5%8F%91%E8%B5%B7%E8%BF%9E%E6%8E%A5%E7%9A%84TCP%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B%E8%BF%87%E7%A8%8B.png" alt="同时发起连接的TCP连接建立过程" title="同时发起连接的TCP连接建立过程"></p><h4 id="TCP传输连接的释放"><a href="#TCP传输连接的释放" class="headerlink" title="TCP传输连接的释放"></a>TCP传输连接的释放</h4><p>TCP传输连接释放过程需要四次握手过程，这是由TCP的<strong>半关闭特性</strong>造成的，因为一个TCP连接是全双工的，每个方向必须单独进行关闭。</p><h5 id="单方主动关闭的TCP连接释放过程"><a href="#单方主动关闭的TCP连接释放过程" class="headerlink" title="单方主动关闭的TCP连接释放过程"></a>单方主动关闭的TCP连接释放过程</h5><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/TCP%E4%BC%A0%E8%BE%93%E8%BF%9E%E6%8E%A5%E9%87%8A%E6%94%BE%E7%9A%84%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B.png" alt="TCP传输连接释放的四次握手过程" title="TCP传输连接释放的四次握手过程"></p><h5 id="双方主动关闭的TCP连接释放过程"><a href="#双方主动关闭的TCP连接释放过程" class="headerlink" title="双方主动关闭的TCP连接释放过程"></a>双方主动关闭的TCP连接释放过程</h5><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/%E5%90%8C%E6%97%B6%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%ADTCP%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%B5%81%E7%A8%8B.png" alt="同时主动关闭TCP连接的流程" title="同时主动关闭TCP连接的流程"></p><h3 id="TCP的可靠传输"><a href="#TCP的可靠传输" class="headerlink" title="TCP的可靠传输"></a>TCP的可靠传输</h3><p>在TCP可靠传输方面，主要采用以下4个机制：</p><ol><li>字节编号机制</li><li>数据段确认机制</li><li>超时重传机制</li><li>选择性确认机制</li></ol><h4 id="TCP的数据段确认机制"><a href="#TCP的数据段确认机制" class="headerlink" title="TCP的数据段确认机制"></a>TCP的数据段确认机制</h4><p>涉及的概念有：</p><ol><li>数据段</li><li>序号</li><li>窗口大小</li><li>确认号</li><li>ACK</li></ol><p>涉及的特性有：</p><ol><li>TCP可一次连续发送多个数据段</li><li>仅对连续接收的数据段进行确认</li><li>不连续序号的数据将先缓存</li></ol><h4 id="TCP的超时重传机制"><a href="#TCP的超时重传机制" class="headerlink" title="TCP的超时重传机制"></a>TCP的超时重传机制</h4><p>主要问题集中在超时重传计时器(RTT)及超时重发的时间间隔(RTO)的计算上<br>RTT的值多为一个数据段往返发送端和接收端的时间总和；</p><ol><li>SRTT的计算<br>$SRTT=\alpha SRTT + (1-\alpha) RTT, 0 \le \alpha &lt; 1$</li><li>RTO的计算<br>$RTTD = \alpha RTTD + (1-\alpha) \times (SRTT-RTT)$<br>$RTO = SRTT + 4\times RTTD$<br>对于重传的数据段，就不采用其往返时间作为计算$SRTT$和$RTO$的样本，这样得出的加权$SRTT$和$RTO$会比较准确。</li></ol><h4 id="TCP的选择性确认机制"><a href="#TCP的选择性确认机制" class="headerlink" title="TCP的选择性确认机制"></a>TCP的选择性确认机制</h4><p>目的：避免重传接收方已经接收的不连续的数据段<br>实现是在TCP数据段中的可选项添加对应的SACK字段(SYN数据段与其他数据段)</p><h3 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h3><p><code>流量控制</code>是基于通信双方的数据发送和接收速率匹配方面考虑的，其最终目的就是不要让数据发送得太快，以便接收端能够来得及接收，是一个链路两端的点对点行为；<code>拥塞控制</code>则是基于网络中各段链路的带宽和中间设备数据处理能力方面而考虑的，不要使网络中出现数据传输阻塞，也就是不要让发送端发送的数据大于接收端数据处理能力，是一个端到端的行为。</p><h4 id="TCP的流量控制简介"><a href="#TCP的流量控制简介" class="headerlink" title="TCP的流量控制简介"></a>TCP的流量控制简介</h4><p>TCP的流量控制是采用滑动窗口协议进行的。</p><ol><li><p>正常情况下的滑动窗口流量控制机制</p></li><li><p>存在数据丢失情况下的流量控制<br>如果在数据传输过程中有一个或多个数据段丢失，则发送端接收不到对这些数据段的确认数据段，此时可以通过<code>超时重传</code>来解决。<br>如果某个时间，对端发送的数据段显示“窗口大小”为0，而之后对端发送的数据又丢失了，此时需要通过TCP的<code>持续计数器</code>来解决。</p></li></ol><h4 id="基于传输效率的考虑"><a href="#基于传输效率的考虑" class="headerlink" title="基于传输效率的考虑"></a>基于传输效率的考虑</h4><p>目的：解决TCP有效载荷很小时效率过低的情况<br>解决方案：<a href="http://baike.baidu.com/link?url=BcXwmFFqms5zSUsCt7MaHWnGHD2V5el-7Gi7pxt2zBHzel4XeoqCz53d4sW8xLIGDJLkP999XgH4GS3XvwI-Cq" title="Nagle算法 - 百度百科" target="_blank" rel="noopener"><code>Nagle</code>算法</a>和<a href="http://www.cnblogs.com/zhaoyl/archive/2012/09/20/2695799.html" title="Clark算法" target="_blank" rel="noopener"><code>Clark</code>算法</a></p><h3 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h3><p>TCP的拥塞控制主要是依靠TCP连接双方商定的协议来减少数据的发送而实现的。</p><h4 id="TCP拥塞控制简介"><a href="#TCP拥塞控制简介" class="headerlink" title="TCP拥塞控制简介"></a>TCP拥塞控制简介</h4><p>当网络中各个部分输入的流量大于输出的流量时就会出现网络阻塞。具体而言，网络上发生拥塞的原因是多方面的，而且网络结构越复杂，发生拥塞的原因就越复杂。如TCP连接的整个链路中有结点设备的缓存空间太小、数据转发能力太低、某段链路带宽太小、对端数据接收能力低等。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/%E5%AE%9E%E9%99%85%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E5%90%9E%E5%90%90%E9%87%8F%E4%B8%8E%E8%BE%93%E5%85%A5%E8%B4%9F%E8%8D%B7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="实际情况下的吞吐量与输入负荷之间的关系" title="实际情况下的吞吐量与输入负荷之间的关系"></p><h4 id="TCP拥塞控制方案"><a href="#TCP拥塞控制方案" class="headerlink" title="TCP拥塞控制方案"></a>TCP拥塞控制方案</h4><p>发生网络拥塞的一个最明显的特征就是出现了数据的丢失。<br>现假设数据是单方面发送的，另一方只传送确认数据段，而且假设接收端的窗口足够大，发送端的窗口大小由网络拥塞程度决定。</p><p><strong>慢启动</strong>的基本思想：在TCP连接正式传输数据时，每次可发送的数据大小是逐渐增大的，也就是先发送一些小字节数的试探性数据，在收到这些数据段的确认后，再慢慢增加发送的数据量，直到达到了某个原先设定的极限值为止。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/%E2%80%9C%E6%85%A2%E5%90%AF%E5%8A%A8%E2%80%9D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88TCP%E6%95%B0%E6%8D%AE%E5%8F%91%E9%80%81%E7%A4%BA%E4%BE%8B.png" alt="“慢启动”解决方案TCP数据发送示例" title="“慢启动”解决方案TCP数据发送示例"></p><p><strong>拥塞避免</strong>的基本思想：在拥塞窗口(Congestion Window, CWND)值第二次达到慢启动阈值(Slow Start Threshold, SSTHRESH)时，让拥塞窗口大小没经过一个RTT(一个数据段往返接收端和发送端所需的时间)时间值仅加一，使其以线性方式慢慢增大。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/%E2%80%9C%E6%85%A2%E5%90%AF%E5%8A%A8%E2%80%9D%E4%B8%8E%E2%80%9C%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D%E2%80%9D%E6%96%B9%E6%A1%88%E6%95%B0%E6%8D%AE%E5%8F%91%E9%80%81%E5%AE%9E%E4%BE%8B.png" alt="“慢启动”与“拥塞避免”方案数据发送实例" title="“慢启动”与“拥塞避免”方案数据发送实例"></p><p><strong>快速重传</strong>的基本思想：当接收端收到一个不是按序到达的数据段时，TCP实体迅速发送一个重复ACK数据段，而不用等到有数据需要发送时顺带发出确认；在重复收到三个重复ACK数据段后，即认为对应“确认号”字段的数据段已经丢失，TCP不等重传定时器超时就重传看来已经丢失的数据段。<br><strong>快速恢复</strong>的基本思想：在收到第三个重复ACK数据段时，把当前拥塞窗口(CWND)值设为当前慢启动阈值(SSTHRESH)的一半，以减轻网络负荷，然后执行拥塞避免算法，慢慢增大CWND。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/%E2%80%9C%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0%E2%80%9D%E6%96%B9%E6%A1%88%E6%95%B0%E6%8D%AE%E9%87%8D%E4%BC%A0%E7%A4%BA%E4%BE%8B.png" alt="“快速重传”方案数据重传示例" title="“快速重传”方案数据重传示例"></p><p>除此之外，还有随机早期检测(Random Early Detection, RED)这种避免拥塞的方式。<br>可以参考如下资料：</p><ul><li><a href="http://blog.csdn.net/dog250/article/details/5303536" target="_blank" rel="noopener">随机早期检测RED–两个门限防抖动</a></li><li><a href="http://www.cnki.net/KCMS/detail/detail.aspx?QueryID=2&amp;CurRec=4&amp;recid=&amp;filename=DZJC200808020&amp;dbname=CJFD2008&amp;dbcode=CJFQ&amp;pr=&amp;urlid=&amp;yx=&amp;v=MjIxOTBab0Z5L2tVYi9BSVRmQmJiRzRIdG5NcDQ5SFpJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSTCtmWmU=" target="_blank" rel="noopener">随机早期检测RED及其改进算法的研究</a></li></ul><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-network/RED%E4%B8%A4%E4%B8%AA%E9%97%A8%E9%99%90%E4%B8%8E%E4%B8%A2%E5%8C%85%E6%A6%82%E5%BF%B5%E5%85%B3%E7%B3%BB%E5%9B%BE.PNG" alt="RED两个门限与丢包概念关系图"></p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>TCP采用的是面向连接的分组报文传输方式，而UDP采用的是无连接的数据报传输方式。<br>UDP具有以下几个方面的明显特性：</p><ol><li>无连接性</li><li>不可靠性</li><li>以报文为边界</li><li>无流量控制和拥塞控制功能</li><li>支持各种交互通信方式</li></ol><p>UDP数据报包括：</p><ol><li>源端口：标识源主机上使用的UDP端口。仅当需要目的主机返回应答时才有意义，故为可选项。</li><li>目的端口：标识目的主机上使用的UDP端口。</li><li>长度：指示UDP数据报长度，理论上UDP数据报数据部分的长度可以达到65535-20（最小IP报头）-8（UDP）=65507字节。</li><li>校验和：校验部分包括整个UDP头部、数据部分及伪头部（即不是数据中的真实数据，也不用来传输，仅用来做校验和）。其中伪头部包括源IP地址、目的IP地址、保留字、协议码、UDP长度。</li></ol><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/UDP%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F.png" alt="UDP数据报格式" title="UDP数据报格式"></p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h3><p>TCP/IP体系结构中的应用层解决了TCP/IP网络应用存在的共性问题，包括与网络应用相关的支撑协议和应用服务两大部分。<br>网络应用软件之间最常用、最重要的交互模型时C/S(Client/Server)模型。一般来说，服务器需要时刻守候各种应用服务，客户端向服务端发出对应的应用会话请求；服务器程序通常较为复杂，对主机的硬件资源及软件资源都有一定要求，而客户端程序功能则较为简单，通常不需要特殊的硬件和高级的网络操作系统。<br>C/S模型不但很好地解决了互联网应用程序之间的同步问题(何时开始通信、何时发送数据、何时接收数据等)，而且C/S模型的这种非对等相互作用的特点很好的适应了互联网资源分配不均的客观事实。<br>在互联网络中，客户发起请求是完全随机的，可能出现多个请求同时到达服务器的情况，因此服务器必须具备处理多个并发请求的能力：</p><ol><li>迭代服务器(iterative server)<br>服务器程序中包含一个请求队列，客户请求达到后首先进入队列中等待，服务器按照先进先出的原则对这些客户端请求一个一个地做出响应，即服务器只有处理完一个请求后才会处理下一个请求。</li><li>并发服务器(concurrent server)<br>并发处理器是一个守护进程，在没有请求达到时处于等待状态，一旦客户端请求到达，服务器立即为之创建一个子进程，然后返回等待状态，由子进程响应请求。当下一个请求到达时，服务器再为之创建一个子进程。其中，并发服务器称作主服务器，子进程称作从服务器。</li></ol><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-network/image/%E5%B9%B6%E5%8F%91%28Concurrent%29%E4%B8%8E%E5%B9%B6%E8%A1%8C%28Parallel%29%E7%9A%84%E5%8C%BA%E5%88%AB.PNG" alt="并发(Concurrent)与并行(Parallel)的区别" title="并发(Concurrent)与并行(Parallel)的区别"></p>]]></content>
      
        <categories>
            
            <category> review </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[大数据复习]]></title>
      <url>http://www.wrran.com/blog/2016/06/07/review/bigdata/</url>
      <content type="html"><![CDATA[<blockquote><p>学习，让我更快乐 ;)</p></blockquote><a id="more"></a><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="大数据的定义"><a href="#大数据的定义" class="headerlink" title="大数据的定义"></a>大数据的定义</h3><p>[IMPORTANT]</p><blockquote><p><code>大数据</code>是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。<br>BY <strong>Gartner</strong></p></blockquote><blockquote><p><code>Big data</code> is a term for data sets that are so large or complex that traditional data processing applications are inadequate. Challenges include analysis, capture, data curation, search, sharing, storage, transfer, visualization, querying, updating and information privacy. The term often refers simply to the use of predictive analytics or certain other advanced methods to extract value from data, and seldom to a particular size of data set. Accuracy in big data may lead to more confident decision making, and better decisions can result in greater operational efficiency, cost reduction and reduced risk.<br>BY <a href="https://en.wikipedia.org/wiki/Big_data" target="_blank" rel="noopener"><strong>Wiki</strong></a></p></blockquote><p><code>bit</code> =&gt; <code>byte</code> =&gt; <code>KB</code> =&gt; <code>MB</code> =&gt; <code>GB</code> =&gt; <code>TB</code> =&gt; <code>PB</code> =&gt; <code>EB</code> =&gt; <code>ZB</code> =&gt; <code>YB</code></p><p>大数据不仅仅是数据的“大量化”，而是包含“快速化”、“多样化”和“价值化”等多重属性。<br>[IMPORTANT]<br>大数据的特点，<code>4&quot;V&quot;s</code>：</p><ul><li>Volume</li><li>Velocity</li><li>Variety</li><li>Value</li></ul><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%844V.png" alt="大数据处理的4V" title="大数据处理的4V"><br></center><p><em>注意</em>：上图中的<code>Velocity</code>并不准确，流数据、实时数据、非实时数据应当归为<code>Variety</code>中。<code>Velocity</code>偏重指数据的产生速度快、对数据处理速度的要求高。</p><h3 id="大数据相关技术"><a href="#大数据相关技术" class="headerlink" title="大数据相关技术"></a>大数据相关技术</h3><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F.png" alt="大数据的生态系统" title="大数据的生态系统"><br></center><p>分析技术</p><ul><li>数据处理：自然语言处理技术</li><li>统计和分析：A/B test；top N排行榜；地域占比；文本情感分析</li><li>数据挖掘：关联规则分析；分类；聚类</li><li>模型预测：预测模型；机器学习；建模仿真</li></ul><p>大数据技术</p><ul><li>数据采集：ETL工具</li><li>数据存取：关系数据库；NoSQL；SQL等</li><li>基础架构支持：云存储；分布式文本系统等</li><li>计算结果展现：云计算；标签云；关系图等</li></ul><p>存储</p><ul><li>问题<br>结构化数据：海量数据的查询、统计、更新等操作效率低<br>非结构化数据：图片、视频、word、pdf、ppt等文件存储；不利于检索、查询和存储<br>半结构化数据：转换为结构化存储或者按照非结构化存储</li><li>解决方案<br>在<strong>CAP理论</strong>指导下数据库技术适当退化：NoSQL技术，如HDFS，HBase， MongoDB等</li></ul><p>计算</p><ul><li>问题<br>因结构变化为导致计算模式变更；需求模式变化带来的计算碰到瓶颈(???)</li><li>解决方案<br><em>MapReduce技术</em>或<em>流计算</em>，如Hadoop，twitter的storm和yohoo!的S4</li></ul><p>[IMPORTANT]<br>补充：</p><blockquote><p>In theoretical computer science, the CAP theorem, also named Brewer’s theorem after computer scientist Eric Brewer, states that it is impossible for a distributed computer system to simultaneously provide all three of the following guarantees:</p><ul><li>Consistency (all nodes see the same data at the same time)</li><li>Availability (every request receives a response about whether it succeeded or failed)</li><li>Partition tolerance (the system continues to operate despite arbitrary partitioning due to network failures)<br>BY <a href="https://en.wikipedia.org/wiki/CAP_theorem" target="_blank" rel="noopener"><strong>Wiki</strong></a></li></ul></blockquote><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/CAP%E7%90%86%E8%AE%BA.png" alt="CAP理论" title="CAP理论"><br></center><h2 id="大数据与云计算"><a href="#大数据与云计算" class="headerlink" title="大数据与云计算"></a>大数据与云计算</h2><p>云计算与大数据的关系：<br>云计算为大数据资源、大数据挖掘提供技术设施（软硬科学技术）；大数据处理技术为云计算建设和运作提供决策</p><h3 id="云计算的定义："><a href="#云计算的定义：" class="headerlink" title="云计算的定义："></a>云计算的定义：</h3><blockquote><p><code>Cloud computing</code>, also known as on-the-line computing, is a kind of Internet-based computing that provides shared processing resources and data to computers and other devices on demand.<br>BY <a href="https://en.wikipedia.org/wiki/Cloud_computing" target="_blank" rel="noopener"><strong>Wiki</strong></a></p></blockquote><p>老师说</p><blockquote><p>[概念性定义] 云计算本身不是计算，也不是单纯的技术，而是基于资源隐藏理念的虚拟化方法</p></blockquote><blockquote><p>[广义的定义] IT基础设施、资源、需求性服务的交付使用模式</p></blockquote><blockquote><p>[狭义的定义] 云计算是一种通过Internet以服务的方式提供动态可伸缩的虚拟化的资源的计算模式</p></blockquote><p><code>云计算</code>是分布式计算、并行计算、效用计算、网络存储、虚拟化、负载均衡等传统计算机和网络计算发展融合的产物。</p><p>综上，大概也许可以这样回答<strong>云计算是什么</strong>了：</p><blockquote><p>云计算是一种通过Internet以服务的方式提供动态可伸缩的虚拟化的资源的计算模式，它是分布式计算、并行计算、效用计算、网络存储、虚拟化、负载均衡等传统计算机和网络计算发展融合的产物。进一步来说，云计算不是计算，也不但只是技术，而是基于资源隐藏理念的虚拟化方法。</p></blockquote><h3 id="云计算的服务模型"><a href="#云计算的服务模型" class="headerlink" title="云计算的服务模型"></a>云计算的服务模型</h3><p>[IMPORTANT]<br>从底层到顶层分别为如下服务：</p><ul><li>IaaS, Infrastructure as a Service：将硬件设备等基础资源封装成服务供用户使用。最通用。应用有Amazon EC2/S3</li><li>PaaS, Platform as a Service：对资源的抽象层次更进一步，提供用户应用程序运行环境。</li><li>SaaS, Software as a Service：针对性更强，它将某些特定应用软件功能封装成服务。最专用。应用有Salesforce online CRM</li></ul><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9E%8B.png" alt="云计算的服务模型" title="云计算的服务模型"><br></center><p><code>IaaS</code>，通过互联网获取计算机基础设施方面的服务，如计算机、存储空间、网络连接等，用户在此基础上部署和运行各种软件，包括操作系统和应用程序。<br><code>PaaS</code>，将软件研发的平台作为一种服务放在网上。平台包括操作系统、编程语言环境、数据库和Web服务器，用户在此平台上部署和运行自己的应用，用户不能管理和控制底层的基础设施，只能控制自己部署的应用。<br><code>SaaS</code>，通过网络提供软件的模式，用户无须购买软件，而是向提供商租用基于Web的软件，来管理企业经营活动。云提供商在云端安装和运行应用软件，云用户通过云客户端使用软件，但不能管理应用软件运行的基础设施和平台，只能做有限的应用程序设置。</p><h3 id="云计算的特征"><a href="#云计算的特征" class="headerlink" title="云计算的特征"></a>云计算的特征</h3><p>云计算的特征可以从如下五个方面概括：</p><ul><li>设施资源 虚拟化、共享化</li><li>资源配置 动态化、扩展化</li><li>需求服务 智能化、自助化</li><li>用户使用 便捷化、高效化</li><li>项目使用 可计化、优质化</li></ul><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9E%8B.png" alt="云计算的特征" title="云计算的特征"><br></center><h3 id="云计算的价值与挑战"><a href="#云计算的价值与挑战" class="headerlink" title="云计算的价值与挑战"></a>云计算的价值与挑战</h3><p>价值有：</p><ol><li>提高生产效率，降低成本、节省能源、可持续化发展的有效手段</li><li>改变IT现状的应用模式</li><li>带动传统产业的升级改造转型，调整产业经济结构</li><li>促进商业、产业、事业模式发展变化</li></ol><p>挑战有：</p><ul><li>技术方面：虚拟技术、安全技术、资源管理、开放式技术</li><li>社会文化：对虚拟设施的理解、对安全信息的重视、对共享资源的保护、规范标准化理念</li></ul><h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><h4 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h4><p>[IMPORTANT]<br>Google云计算平台技术架构：</p><ul><li>文件存储，Google Distributed File System, GFS</li><li>并行数据处理，MapReduce</li><li>分布式锁，Chubby</li><li>非结构化数据库，BigTable</li></ul><p>[IMPORTANT]<br>GFS系统构架</p><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/Google%20GFS%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84.png" alt="Google GFS体系架构" title="Google GFS体系架构"><br></center><p>涉及如下三个角色：</p><ul><li>Client(客户端)：应用程序的访问接口</li><li>Master(主服务器)：管理节点，在逻辑上只有一个，保存数据的元数据，负责整个文件系统的管理</li><li>Chunk Server(数据块服务器)：负责具体的存储工作，数据以文件的形式存储在Chunk Server上</li></ul><p>参考资料：</p><ul><li><a href="http://www.open-open.com/lib/view/open1328763454608.html" title="The Google File System中文版" target="_blank" rel="noopener">The Google File System中文版</a></li></ul><h4 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h4><p>[IMPORTANT]<br>Hadoop体系结构：</p><ul><li>数据库：HBase</li><li>并行数据处理：MapReduce</li><li>分布式文件存储：HDFS</li></ul><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data%2Fimage%2FHDFS%E6%9E%B6%E6%9E%84.png" alt="HDFS架构" title="HDFS架构"><br></center><p><code>Hadoop Distributed File System, HDFS</code>：它是一个高度容错性的系统，适合部署在廉价的机器上。HDFS能提供高吞吐量的数据访问，适合那些有着超大数据集(large data set)的应用程序。<br>HDFS的特点：</p><ol><li>适用大数据文件</li><li>文件分块存储</li><li>流式数据访问</li><li>廉价硬件</li><li>硬件故障</li></ol><p>参考资料：</p><ul><li><a href="http://blessht.iteye.com/blog/2095675" title="Hadoop基础教程" target="_blank" rel="noopener">《Hadoop基础教程》之初始Hadoop</a></li><li><a href="http://os.51cto.com/art/201206/345249.htm" title="了解关于Hadoop的12个事实" target="_blank" rel="noopener">了解关于Hadoop的12个事实</a></li><li><a href="http://os.51cto.com/art/201207/346023.htm" title="告诉你Hadoop是什么" target="_blank" rel="noopener">告诉你Hadoop是什么</a></li><li><a href="http://baike.baidu.com/link?url=2QuNg3SZz8ejG7yZspw-jegIiUf-OabPNNM4262ft9GpTAcJqVCU3eQqzmLafSU67DCb47ziBaLECTZOU0cED_" title="hdfs-百度百科" target="_blank" rel="noopener">HDFS - 百度百科</a></li><li><a href="http://www.weixuehao.com/archives/596" title="Hadoop1.x中HDFS工作原理" target="_blank" rel="noopener">Hadoop1.x中HDFS工作原理</a></li></ul><h4 id="Map-Reduce架构"><a href="#Map-Reduce架构" class="headerlink" title="Map Reduce架构"></a>Map Reduce架构</h4><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/Map%20Reduce%E6%9E%B6%E6%9E%84.png" alt="Map Reduce架构" title="Map Reduce架构"><br></center><p>参考资料：</p><ul><li><a href="http://baike.baidu.com/link?url=DMAvH_wLyLN79jZBpTnFCI6auZSJArtxN0LhZ2PoYa5Y_mMObwO1r3IFkKcGdZlC4-JoQQXL-xLhNodwtuI8Da#9" title="百度百科" target="_blank" rel="noopener">MapReduce - 百度百科</a></li><li><a href="http://blog.csdn.net/opennaive/article/details/7514146" title="谷歌技术“三宝”之MapReduce" target="_blank" rel="noopener">谷歌技术“三宝”之MapReduce</a></li><li><a href="http://blog.jobbole.com/1321/" target="_blank" rel="noopener">我是如何向老婆解释MapReduce的？</a></li></ul><p>[IMPORTANT]<br>数据结构化管理组件不同：HBase =&gt; BigTable<br>并行计算模型：MapReduce =&gt; MapReduce<br>分布式文件系统：HDFS =&gt; GFS</p><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/Hadoop%E4%B8%8EGFS%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E6%AF%94%E8%BE%83.png" alt="Hadoop与Google的技术架构比较" title="Hadoop与GFS的技术架构比较"><br></center><p>两者不同在于：</p><ul><li>子服务器管理模式：<ul><li>GFS：Chunk Server在Chubby中获取独占锁表示其生存状态，Master通过轮询这些独占锁获知Chunk Server的生存状态；当Master宕机时，替补服务器可以快速获知Chunk Server的状态</li><li>HDFS：DataNode通过心跳的方式告知NameNode其生存状态；当NameNode宕机时，NameNode恢复后需要花费一段时间才能获悉DataNode的状态</li></ul></li><li>HDFS具备空间回收机制：<ul><li>文件删除时，仅删除目录结构，实际数据的删除在等待一段时间后实施</li><li>优点：便于恢复文件</li></ul></li></ul><h4 id="OceanBase分布式关系数据库"><a href="#OceanBase分布式关系数据库" class="headerlink" title="OceanBase分布式关系数据库"></a>OceanBase分布式关系数据库</h4><p>涉及四部分：</p><ul><li>RootServer：管理集群中的所有服务器，Tablet数据分布以及副本管理</li><li>UpdateServer：存储OceanBase系统的增量更新数据</li><li>ChunkServer：存储OceanBase系统的基准数据。基准数据一般存储两份或三份，可配置。</li><li>MergeServer：接收并解析用户的SQL请求，经过词法分析、语法分析、查询优化等一系列操作后转发给相应的ChunkServer或者UpdateServer。如果请求的数据分布在多台ChunkServer上，MergeServer 还需要对多台ChunkServer返回的结果进行合并。</li><li>Listener：一个特殊的MergeServer进程，即Listener，一般与RootServer合设。负责从集群的内部表中查询主备集群的流量分布信息和所有的其他MergeServer的地址列表。</li></ul><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/OceanBase%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="OceanBean技术架构" title="OceanBean技术架构"><br></center><p>各个部分的功能概括如下，更详细的说明参见本节的参考资料：</p><ul><li>RootServer：集群管理、数据分布以及副本管理。</li><li>MergeServer：协议解析、 SQL 解析、请求转发、结果合并、多表操作等。</li><li>ChunkServer：存储多个 Tablet、提供读取服务和执行定期合并等。</li><li>UpdateServer：集群中唯一能够接受写入的模块。</li></ul><p>参考资料：</p><ul><li><a href="http://code.taobao.org/p/OceanBase/wiki/index/" target="_blank" rel="noopener">OceanBase文档</a> or <a href="http://7xuthx.com1.z0.glb.clouddn.com/review-bigdata/pdf/OceanBase%200.5%20%E6%8F%8F%E8%BF%B0.pdf" target="_blank" rel="noopener">Download OceanBase 0.5 描述 PDF</a></li></ul><h2 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><p>虚拟化技术的出现</p><ul><li><code>1960</code> IBM退出虚拟化技术，提高了昂贵的大型机的利用率</li><li><code>1999</code> VMware公司解决了X86虚拟化问题，推出了X86平台的虚拟机软件，使虚拟发技术开始走向普通用户</li><li><code>2003</code> 开源虚拟化技术Xen推出，使得虚拟化技术的研究和应用更加普及</li><li><code>2005</code> Intel和AMD推出支持虚拟化技术的处理器和芯片组，实现了硬件辅助虚拟化技术</li><li><code>2006</code> Amazon采用虚拟化技术提供云计算平台，取得了商业上的成功，虚拟化技术成为云计算的基石</li></ul><p>虚拟化技术将物理资源转化为便于切分的资源池，符合云计算的基本条件；虚拟化给资源以动态调整的能力，符合云计算按需分配的要求</p><p>虚拟化将硬件、操作系统和应用软件一同封装在一个可迁移的虚拟机档案文件中</p><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E7%9A%84%E4%BD%9C%E7%94%A8.png" alt="虚拟化技术的作用" title="虚拟化技术的作用"><br></center><p>服务器虚拟化的三种类型：</p><ul><li>OS-Hosted</li><li>Standalone Hypervisor</li><li>Hybird</li></ul><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-bigdata/image/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B.png" alt="服务器虚拟化的三种类型" title="服务器虚拟化的三种类型"><br></center><p>[IMPORTANT]<br>虚拟化技术的四大特性：</p><ul><li>分区：在一个物理服务器上同时运行多个虚拟机</li><li>隔离：在同一服务器上的虚拟机之间相互隔离</li><li>封装：整个虚拟机保存在文件中，而且可以通过移动和复制文件的方式来移动和复制该虚拟机</li><li>相对于硬件独立：无需修改即可在任何服务器上运行虚拟机</li></ul><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7.png" alt="虚拟化技术的四大特性" title="虚拟化技术的四大特性"><br></center><p>虚拟化技术的益处：</p><ul><li>实现资源最优利用</li><li>动态负载均衡</li><li>安全隔离</li><li>系统自愈功能提升，应用可靠性提高</li><li>提升系统节能减排能力</li></ul><p>虚拟机技术的关键组件，VMM，又称Hypervisor，负责为虚拟机统一分配CPU、内存和外设，调度虚拟资源：</p><ul><li>VMware</li><li>Xen</li><li>KVM</li></ul><h2 id="重复数据删除技术"><a href="#重复数据删除技术" class="headerlink" title="重复数据删除技术"></a>重复数据删除技术</h2><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%E5%88%A0%E9%99%A4%E6%8A%80%E6%9C%AF.png" alt="重复数据删除技术" title="重复数据删除技术"><br></center><table><thead><tr><th style="text-align:center">优势</th><th style="text-align:center">劣势</th></tr></thead><tbody><tr><td style="text-align:center">控制数据增长， 提高存储利用率</td><td style="text-align:center">需要额外内存和处理资源</td></tr><tr><td style="text-align:center">提高网络带宽利用率，减少备份时间</td><td style="text-align:center">降低数据的可靠性</td></tr><tr><td style="text-align:center">降低成本和能耗</td><td style="text-align:center">增加了数据恢复的开销</td></tr></tbody></table><h2 id="新型存储技术"><a href="#新型存储技术" class="headerlink" title="新型存储技术"></a>新型存储技术</h2><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="存储器的层次结构" title="存储器的层次结构"><br></center><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.png" alt="存储技术发展历程" title="存储技术发展历程"><br></center><center><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-big-data/image/RAID%E6%8A%80%E6%9C%AF%E6%AF%94%E8%BE%83.png" alt="RAID技术比较" title="RAID技术比较"><br></center><h2 id="CPU与GPU的区别："><a href="#CPU与GPU的区别：" class="headerlink" title="CPU与GPU的区别："></a>CPU与GPU的区别：</h2><ul><li>CPU：更多资源用于<strong>缓存</strong>和<strong>逻辑控制</strong></li><li>GPU：更多资源用于<strong>计算</strong>，适用于<em>高并行性</em>、<em>大规模数据密集型</em>、<em>可预测的计算模式</em></li></ul><h2 id="NoSQL-vs-SQL"><a href="#NoSQL-vs-SQL" class="headerlink" title="NoSQL vs SQL"></a>NoSQL vs SQL</h2><table><thead><tr><th style="text-align:center">SQL</th><th style="text-align:center">NoSQL</th></tr></thead><tbody><tr><td style="text-align:center">结构化存储，固定Schema</td><td style="text-align:center">Schema不固定，可以动态改变</td></tr><tr><td style="text-align:center">标准化查询语言</td><td style="text-align:center">没有固定查询语言</td></tr><tr><td style="text-align:center">ACID</td><td style="text-align:center">BASE(Basically Available, Soft State, Eventually Consistency)</td></tr><tr><td style="text-align:center">扩展性弱</td><td style="text-align:center">可以扩展到很大规模</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Books:</p><ul><li><a href="https://book.douban.com/subject/10462720/" title="Understanding Big Data" target="_blank" rel="noopener">Understanding Big Data</a>[TODO]</li></ul><p>Reference:</p><ul><li>ACM Symposium on Clound Computing:<br><a href="https://sites.google.com/site/acm2015socc/" target="_blank" rel="noopener">https://sites.google.com/site/acm2015socc/</a><br><a href="https://sites.google.com/site/2014socc/" target="_blank" rel="noopener">https://sites.google.com/site/2014socc/</a></li><li>IEEE International Conference on Big Data:<br><a href="https://cci.drexel.edu/bigdata/bigdata2015/" target="_blank" rel="noopener">https://cci.drexel.edu/bigdata/bigdata2015/</a><br><a href="https://www.ieeebigdata.org/2014/" target="_blank" rel="noopener">https://www.ieeebigdata.org/2014/</a></li></ul><h2 id="COMMENT"><a href="#COMMENT" class="headerlink" title="COMMENT"></a>COMMENT</h2><p>内容丰富，令人感动。老师，我一定好好学习。</p><blockquote><p>Orz</p></blockquote>]]></content>
      
        <categories>
            
            <category> review </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bigdata </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中间件复习]]></title>
      <url>http://www.wrran.com/blog/2016/06/06/review/middleware/</url>
      <content type="html"><![CDATA[<blockquote><p>临阵磨枪，不快也光</p></blockquote><p>是时候，来一波学习的小高潮了 ;)</p><a id="more"></a><h2 id="复习要点"><a href="#复习要点" class="headerlink" title="复习要点"></a>复习要点</h2><ul><li>CH1：总的介绍了全书的概念，要好好梳理一遍</li><li>CH2：分布式DCE框图，有哪些服务，解决哪些问题；RPC、处理什么、解决什么问题等</li><li>CH3：ODP - 全名+理解+透明度，CORBA：处理什么问题， 定义，跨平台；RPC、RMI、Web Service与CORBA的关联；CORBA框图，对象的操作（与RPC的不同）</li><li>CH4：RPC是怎样调用，与Web Service和CORBA有何不同；RMI不用太看</li><li>CH5：COM组件：定义、特点、接口怎么做（为什么有Unknown这个接口？）</li><li>CH6：概念：反射、注解、依赖注入、AOP；J2EE模块，JMS、JPA、MVC等</li><li>CH7：消息中间件：为了解决什么问题？解耦合（怎么达到这个目标？）多种方式</li><li>CH8：数据存取中间件ODBC、JDBC及两者差异，JPA vs Hibernate 为什么需要ORM</li><li>CH9：事务概念：分布式+普通事务，两段式协议：投票机制、两阶段，JTA</li><li>CH10（重要）：与具体关系的脉络，两种方式（SOAP、RESTful），SOA（PPT上可能不够）；分布式下，如何实现互操作</li></ul><h2 id="考试题型"><a href="#考试题型" class="headerlink" title="考试题型"></a>考试题型</h2><ol><li>概念解释（4道）</li><li>简答题（8道）</li><li>综合题（2道）</li><li>开放设计题（1道）：大规模网上商城系统 类似京东淘宝 支持同时100000人在线 请分析基本功能模块 利用学到的知识给出可行的技术方案 说明模块和技术框架 可以考虑用云计算支持高并发 （负载均衡 集群）</li></ol><h2 id="REVIEW"><a href="#REVIEW" class="headerlink" title="REVIEW"></a>REVIEW</h2><h3 id="CH1-概述"><a href="#CH1-概述" class="headerlink" title="CH1 - 概述"></a>CH1 - 概述</h3><h4 id="中间件的背景及特点"><a href="#中间件的背景及特点" class="headerlink" title="中间件的背景及特点"></a>中间件的背景及特点</h4><p>中间件出现的<strong>背景</strong>：软件发展多年，没有考虑整合、兼容、互操作问题，这导致软件复用时需要考虑到不同的操作系统、程序语言、函数调用规范、编程模式；但新技术并不意味着推翻、抛弃已有的系统，而应当是集成旧系统，达到<strong>旧貌换新颜</strong>的功效。<br>现代应用系统的<strong>基本特征</strong>：</p><ol><li>分布：任务不只是在单击上运行，而是由网络中多个计算机上的相关应用共同协作完成，需要额外考虑网络传输、数据安全、数据一致性、同步等问题。</li><li>异构：计算机硬件、操作系统、网络协议、数据库系统及开发工具种类繁多，需要考虑数据表示、调用接口、处理方式等诸多问题。</li><li>动态协作：参与协作的应用允许位置透明性、迁移透明性、负载平衡性等需求。</li></ol><hr><h4 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h4><blockquote><p>A <code>Distributed System</code> is a omer in which components located on networked computers communicate and coordinate their actions by passing messages.[1] The components interact with each other in order to achieve a common goal. BY <a href="https://en.wikipedia.org/wiki/Distributed_computing" title="Wiki-Pedia" target="_blank" rel="noopener"><strong>Wikipedia</strong></a></p></blockquote><p>分布式系统设计中<strong>需要考虑的问题</strong>：</p><ol><li>透明性（对用户、程序而言）<ul><li>位置透明：用户无须知道资源位于何处</li><li>迁移透明：资源可以<strong>不改名</strong>的随意移动</li><li>复制透明：用户不知道是否存在多个备份</li><li>并发透明：多个用户可以自动的共享资源</li><li>并行透明：系统活动可以在用户没有感觉的情况下并行发生</li></ul></li><li>灵活性</li><li>可靠性: 可用性、安全性、容错性</li><li>性能：响应时间、吞吐量、系统的利用率、网络容量消耗程度、并行性（细粒度/粗粒度）</li><li>可伸缩性：避免集中式<strong>硬件</strong>，如单台服务器；避免集中式<strong>算法</strong>，如根据完整信息的网络路由；避免集中式<strong>数据结构</strong>，如单台数据库</li><li>可扩展性<ul><li>没有一台机器存放着关于系统状态的全部信息，机器只是基于本地信息作出决定</li><li>一个机器出故障不会破坏算法</li><li>不一定存在全局时钟</li></ul></li></ol><p>分布式系统常见的三层架构：</p><ul><li>客户机(Client)只负责简单的显示、捕获和验证用户数据，称为Thin Client</li><li>中间件(Middleware)支持客户机做复杂商务处理的服务器层，较为强大和灵敏</li><li>后台服务器(Server)管理持久性的业务数据，通常直接和数据库交换信息</li></ul><hr><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><blockquote><p><code>Middleware</code> is computer software that provides services to software applications beyond those available from the operating system. It can be described as “software glue”. BY <a href="https://en.wikipedia.org/wiki/Middleware" title="Wikipedia" target="_blank" rel="noopener"><strong>Wikipedia</strong></a></p></blockquote><p><strong>中间件</strong>是一种软件，处于系统软件（操作系统和网络软件）与应用软件之间，能让应用软件之间进行<em>跨网络的协同操作</em>，允许各个应用软件所涉及的系统结构、操作系统、通信协议、数据库和其他应用服务等的差异。</p><p>中间件对于应用软件之间的协作工作表现在，提供了</p><ul><li>合作对象透明设施，应用软件节点只需要说明自己需要什么样的服务，而不用关心合作方是谁、在哪</li><li>下层设备透明设施，应用软件节点只需要说明关注自己的相关环境，而不必操心与之合作的其他节点与自身环境的差异<br>中间件的优点：</li></ul><ol><li>软件开发的重心从实现功能转移到功能的组合，降低了成本、提高了质量</li><li>软件功能的扩充可以在二进制级别下进行，让软件从封闭转化为开放【开闭原则】<br>之外，因为标准接口对于可移植性、标准协议及标准协议的重要性，<strong>中间件</strong>已成为许多标准化工作的主要部分。</li></ol><hr><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>软件技术发展的<strong>四次飞跃</strong>：面向过程（Procedure-Oriented）=&gt;面向对象（Object-Oriented）=&gt;面向组件（Component-Oriented）=&gt;面向服务（Service-Oriented）<br>软件发展的源动力：最小化成本、最大化利益<br>软件发展的挑战：</p><ul><li>开发周期</li><li>开发成本</li><li>软件质量</li><li>系统可维护性</li><li>产品竞争</li><li>开发风险</li><li>资源的利用</li><li>资源的共享</li></ul><p>软件发展的机遇：</p><ul><li>Internet的普及</li><li>资源的共享 =&gt; 最大化收益、最小化成本、最快的开发速度</li></ul><p>软件危机的解决方案</p><ol><li>编程自动化：</li><li>实现程序的通用性：操作系统级，如汇编 =&gt; 与操作系统无关，如标准C =&gt; 与机器无关，如Java</li><li>实现软件之间的互操作：二进制级的软件互操作（同构软件/异构软件）=&gt; 同进程内互操作 =&gt; 不同进程间的互操作 =&gt; 不同机器间的互操作</li></ol><p>互操作</p><ol><li>组成：运行环境、开发工具、应用软件（客户软件、服务软件）</li><li>特性：分离性、透明性</li><li>范围<ul><li>同一进程，可以直接完成</li><li>不同进程</li><li>不同机器，要考虑data-encoding，需要中间翻译、事先约定传输协议</li></ul></li></ol><hr><h3 id="CH2-分布式计算环境"><a href="#CH2-分布式计算环境" class="headerlink" title="CH2 - 分布式计算环境"></a>CH2 - 分布式计算环境</h3><h4 id="DCE"><a href="#DCE" class="headerlink" title="DCE"></a>DCE</h4><blockquote><p>The <code>Distributed Computing Environment (DCE)</code> is a software system developed in the early 1990s by a consortium that included Apollo Computer (later part of Hewlett-Packard), IBM, Digital Equipment Corporation, and others. The DCE supplies a framework and toolkit for developing client/server applications. The framework includes a <em>remote procedure call (RPC)</em> mechanism known as DCE/RPC, a <em>naming (directory) service</em>, a <em>time service</em>, an <em>authentication service</em> and a <em>distributed file system (DFS)</em> known as DCE/DFS. DCE was a big step in direction to standardisation of architectures, which were manufacturer dependent before. Similar to the OSI model, DCE has not seen much success in practical implementation; however, its underlying concepts have had more substantial influence over subsequent efforts. BY <a href="https://en.wikipedia.org/wiki/Distributed_Computing_Environment" title="Wikipedia" target="_blank" rel="noopener"><strong>Wikipedia</strong></a></p></blockquote><p>DCE的<em>两类服务</em>：</p><ol start="0"><li>线程服务：客户和服务器内部可以有多个控制流，从而实现内部的<em>并行处理</em></li><li>RPC服务：提供DCE环境中所需的进程之间的通信工具，对客户访问远程服务器提供了支持，提供了统一的数据类型，屏蔽了字节顺序、相关语言的细节，从而实现了开放分布式处理中的<em>访问透明性</em>和<em>位置透明性</em>。</li><li>目录服务：允许客户在整个分布式环境中寻找自己的服务，即完成两部分任务=&gt;服务器进行服务注册；客户进行服务查找。具体来说，包括两个独立的组成部分：CDS（Cell Diretory Service）和GDS（Global Directory Service）<br>CDS在一个逻辑组内提供一个层次型的命名空间，GDS实现一个全系统的目录服务。</li><li>安全服务：保证DCE中服务器访问的<em>安全性</em>。主要包括身份认证、权限检查、数据加密等。</li><li>分布式文件服务：提供对本地系统和远程系统中文件的<em>访问透明性</em>。</li><li>时间服务：提供了一个时间同步标尺，用于确保整个系统中各个部分的<em>时间一致性</em>。</li></ol><p>DCE有<em>三个文件</em>：界面定义文件，客户程序，服务器程序</p><h3 id="CH3-ODP和CORBA介绍"><a href="#CH3-ODP和CORBA介绍" class="headerlink" title="CH3 - ODP和CORBA介绍"></a>CH3 - ODP和CORBA介绍</h3><h4 id="ODP"><a href="#ODP" class="headerlink" title="ODP"></a>ODP</h4><blockquote><p><code>Reference Model of Open Distributed Processing (RM-ODP)</code> is a reference model in computer science, which provides a co-ordinating framework for the standardization of open distributed processing (ODP). It supports distribution, interworking, platform and technology independence, and portability, together with an enterprise architecture framework for the specification of ODP systems. BY <a href="https://en.wikipedia.org/wiki/RM-ODP" title="Wikipedia" target="_blank" rel="noopener"><strong>Wikipedia</strong></a></p></blockquote><p><strong>开放分布式处理参考模型(RM-ODP, Reference Model of Open Distributed Processing)</strong>是一种标准，规定了使用于开放式分布处理领域内的其他标准必须遵循的参考模型。</p><p><code>RM-ODP Viewport</code>从不同侧面描述了分布式系统，有如下5个viewpoint：</p><ul><li>enterprise viewpoint</li><li>information viewpoint</li><li>computational viewpoint</li><li>engineering viewpoint</li><li><p>technology viewpoint</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/7/7b/RM-ODP_viewpoints.jpg" alt="RM-ODP Viewpoints" title="RM-ODP Viewpoints"><br>“By Marcel Douwe Dekker (Own work) [CC BY-SA 3.0][] or [GFDL][], via Wikimedia Commons”</p></li></ul><p>RM-ODP的<em>透明性</em>屏蔽了由系统的分布所带来的复杂性。</p><blockquote><p>While ODP transparencies provide insight into what a distributed system look like, <em>ODP functions</em> provide some building blocks to assemble ODP systems.</p></blockquote><p>ODP功能可以划分为4组: 管理功能组，协作功能组，仓库功能组，安全功能组<br>ODP与其他规范的关系：ODP独立于任何具体的网络协议；它不仅是一个一般标准，还是一个<em>标准的标准</em>，即规定了使用开放分布式处理领域内的其他标准应当遵循的标准。</p><hr><h4 id="CORBA"><a href="#CORBA" class="headerlink" title="CORBA"></a>CORBA</h4><blockquote><p>The <code>Common Object Request Broker Architecture (CORBA)</code> is a standard defined by the Object Management Group (OMG) designed to facilitate the communication of systems that are deployed on diverse platforms. CORBA enables collaboration between systems on different operating systems, programming languages, and computing hardware. CORBA uses an object-oriented model although the systems that use CORBA do not have to be object-oriented. CORBA is an example of the distributed object paradigm. BY <a href="https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture" title="Wikipedia" target="_blank" rel="noopener"><strong>Wikipedia</strong></a></p></blockquote><p><strong>公共对象请求代理体系结构(CORBA，Common Object Request Broker Architecture)</strong>是由OMG提出的<em>应用软件体系结构</em>和<em>对象技术规范</em>。其核心是一套标准的语言、接口和协议，以支持<em>异构分布应用程序间的互操作性</em>及<em>独立于平台和编程语言的对象重用</em>，它使用了<em>面向对象模型</em>实现分布式系统中的透明服务请求。</p><p>对象管理体系结构，OMA描述了面向对象技术在分布式处理中的运用，它包括两部分：</p><ul><li>对象模型(Object Model)：定义如何描述分布式异质环境中的对象。对象是一个被封装的实体，具有一个不可改变的标志；对象的访问方式是通过向对象发出请求来完成。</li><li>参考模型(Reference Model)：描述对象之间的交互。该模型中定义了一条为对象所共用的通信总线，即ORB(Object Request Broker)。通过ORB，一个Client可以透明地调用一台机器上或网络上的一个Server对象的方法。并定义了对象进出这一总线的界面，包括：<ul><li>对象服务(Object Services)：提供基础服务，与具体领域无关的界面。主要包括命名服务、持久化服务、生存周期服务、事务处理服务、事件服务、安全服务。</li><li>公共设施(Common Facilities)：面向最终用户的应用，是各种应用可以共享的一系列服务集合。</li><li>应用界面(Application Interface)：针对某一个具体应用而产生。</li><li>域界面(Domain Interface)：针对某一特殊的应用领域。</li></ul></li></ul><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-middleware%2Fimage%2FOMA%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.png" alt="OMA 参考模型" title="OMA 参考模型"></p><p>CORBA规范主要包含如下内容：</p><ul><li>ORB核心</li><li>OMG界面定义语言</li><li>界面仓库和实现仓库</li><li>语言映射</li><li>存根和框架</li><li>动态调用</li><li>对象适配器</li><li>ORB之间的互操作</li></ul><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/review-middleware%2Fimage%2FCORBA%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9.png" alt="CORBA主要内容" title="CORBA主要内容"></p><h3 id="CH4-远程过程调用RPC"><a href="#CH4-远程过程调用RPC" class="headerlink" title="CH4 - 远程过程调用RPC"></a>CH4 - 远程过程调用RPC</h3><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><blockquote><p>In distributed computing, a <code>remote procedure call (RPC)</code> is when a computer program causes a procedure (subroutine) to execute in another address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction. BY <a href="https://en.wikipedia.org/wiki/Remote_procedure_call" title="Wikipedia" target="_blank" rel="noopener"><strong>Wikipedia</strong></a></p></blockquote><p>远程过程调用协议(Remote Procedure Call, RPC)是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。<br>RPC是一个C/S架构，调用程序片称为<code>RPC Client</code>，被调用程序片称为<code>RPC Server</code>。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Freview-middleware%2FRMI%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9E%8B.png" alt="RMI实现模型" title="RMI实现模型"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Freview-middleware%2FRMI%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9E%8B.png" alt="RMI执行模型" title="RMI执行模型"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/RMI%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.png" alt="RMI 通信模型" title="RMI通信模型"></p><p>RPC编程流程：</p><ol><li>构建解决问题的常规应用程序</li><li>选择一组过程形成远程程序</li><li>为远程程序编写RPC界面</li><li>运行RPCGEN检查该界面，并生成四个代码文件，供Client/Server使用</li><li>为Client/Server编写stub接口例程</li><li>编译并链接客户程序</li><li>编译并链接服务器程序</li><li>在远程机器上启动服务器，接着在本机上运行客户程序</li></ol><p>RPC的优势：支持<em>位置透明性</em>，被调用的函数不论是在本地还是在远程都可以使用RPC实现；之外，RPC的出现可以让程序开发人员集中精力在程序功能的实现上；位置透明性此外还可以让三层系统拓展到多层；RPC还内置了对<em>安全性</em>的支持</p><hr><h4 id="RPC的Java实现"><a href="#RPC的Java实现" class="headerlink" title="RPC的Java实现"></a>RPC的Java实现</h4><p>Java RMI(Java Remote Method Invocation)是Java编程语言里面一种用于实现<em>远程过程调用</em>的应用程序编程接口，目前使用<code>JRMP(Java Remote Messaging Protocol)</code>进行通信。它是纯Java的网络分布式应用系统的核心解决方案之一。<br>RMI与CORBA的关系：因为两者都提供了对远程分布式对象的透明方格网，常被视为相互竞争的技术；但两种技术实际上是互相补充的，一者的长处正好弥补另一者的短处。<br>RMI的优点：支持面向对象；可移动属性；安全；便于编写和使用；可连接现有/原有的系统；编写一次、到处运行；分布式垃圾收集；并行计算</p><hr><h3 id="CH5-组件技术概述"><a href="#CH5-组件技术概述" class="headerlink" title="CH5 - 组件技术概述"></a>CH5 - 组件技术概述</h3><h4 id="组件的概念"><a href="#组件的概念" class="headerlink" title="组件的概念"></a>组件的概念</h4><p><em>组件</em>是一个不透明的功能实体，能够被第三方组装，且符合一个构件模型。(CMU)<br><em>组件</em>是系统中一种物理的、可替代的部件、它封装了实现并提供了一系列可用的接口。一个组件代表了一个系统中实现的物理部分，包括软件代码或者一些类似内容，如源代码、命名文件等。(OMG)<br>组件技术是一种优秀的<em>软件重用技术</em>；组件技术的思想是将一个复杂的大型系统中的基础服务分解为若干个独立的单元；利用组件之间建立的统一的严格的连接标准，实现组件间和组件与用户之间的服务连接。<br>连接是建立在<em>目标代码级</em>上的，与平台无关。<br>组件技术的好处：</p><ul><li>组件可替换，以便随时进行系统升级和定制</li><li>可以在多个应用系统中重复利用同一个组件</li><li>可以方便的将应用系统扩展到网络环境下</li><li>部分组件与平台和语言无关，所有的程序员均可参与编写</li></ul><hr><h4 id="COM组件的定义和特点"><a href="#COM组件的定义和特点" class="headerlink" title="COM组件的定义和特点"></a>COM组件的定义和特点</h4><blockquote><p>COM, Component Object Model是软件组件互相通信的一种方式， 它是一种二进制和网络标准， 允许任意两个组件互相通信， 而不管它们在什么计算机上运行（ 只要计算机是相连的）， 不管计算机运行的什么操作系统（只要该操作系统支持COM） ， 也不管该组件机是用什么语言编写的。</p></blockquote><p>COM的特点：</p><ol><li>基于C/S模型：每个COM对象的工作方式都类似于服务器，可以接收和处理来自客户程序的请求，并自动回复信息</li><li>建立在二进制层次上的标准：与编程语言和开发工具无关</li></ol><p>COM的基本概念：</p><ul><li>COM规范：平台无关；定义了大量的接口</li><li>COM实现：平台相关；Windows实现了规范及其许多功能</li><li>COM接口：客户与对象之间的协议，客户使用COM接口调用COM对象的服务</li><li>COM对象：实现COM接口；通过COM接口提供服务；可包含多个接口</li><li>COM组件：COM对象的载体，可包含多个COM对象；可独立发布的二进制组件；在Windows平台下为dll或exe文件</li></ul><p>COM接口：</p><ol><li>接口标识，即IID，是GUID的一种用法，具有全球唯一性</li><li>IUnknown：所有的COM接口都从IUnknown派生。接口IUnknown意为不用知道潜在的对象是什么，因为每个COM对象都实现了该接口。</li><li>COM接口二进制结构</li></ol><p>COM对象：</p><ol><li>客户的交互实体</li><li>包括属性和方法，或者状态和操作</li><li>能够提供服务</li></ol><p>COM对象与C++对象的比较：</p><ul><li>C++对象 = 多态性 + (部分)迟绑定 + (部分)封装 + (实现/接口)继承</li><li>COM对象 = 多态性 + (完全)迟绑定 + (完全)封装 + 接口继承 + 二进制重用性</li></ul><hr><h3 id="CH6-Web服务器技术"><a href="#CH6-Web服务器技术" class="headerlink" title="CH6 - Web服务器技术"></a>CH6 - Web服务器技术</h3><h4 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h4><p>Web服务器的工作流程可分为4个步骤：连接过程、请求过程、应答过程及关闭过程。其中，连接过程、请求过程、关闭过程都是较为标准的例行程序，关键业务多在于应答过程中。<br>Web服务器就是分离抽象出服务器的基本执行流程，例行的标准化的流程由服务器来处理，而用户更多的负责定义个性化的、非标准的流程。</p><p>MVC架构：<br>Model/View/Controller很好的抽象了客户端和服务端的访问流程范围图。<code>Model</code>是应用程序中用于处理应用程序数据逻辑的部分，通常模型对象负责在数据库中存取数据；<code>View</code>是应用程序中处理数据显示的部分，通常视图是依据模型数据所建立的；<code>Controller</code>是应用程序中处理用户交互的部分，常负责从视图中读取数据、控制用户输入、先模型发送数据。</p><hr><h4 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h4><p>Java EE(Java Platform, Enterprise Edition)是SUN公司推出的企业版应用程序版本，能够开发部署<em>可移植</em>、<em>健壮</em>、<em>可伸缩</em>且<em>安全</em>的Web应用和企业应用，具备快速响应性和适应用户需求增长的伸缩性。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/JavaEE7%E7%9A%84%E6%9E%B6%E6%9E%84.png" alt="Java EE 7的架构" title="Java EE 7的架构"></p><p>Java EE平台由一整套服务、应用程序接口和协议构成，它对开发基于Web的多层应用提供了功能支持。</p><ul><li><code>JDBC (Java Database Connectivity)</code>提供连接各种关系数据库的统一接口，可以为多种关系数据库提供统一访问。</li><li><code>EJB (Enterprise JavaBeans)</code>提供一个开发和实施分布式商务逻辑的规范，使得开发者方便地创建、部署和管理跨平台的基于组件的、具有可伸缩性和高度复杂的企业应用。</li><li><code>Java RMI (Java Remote Method Invocation)</code>用来开发分布式Java应用程序，让一个Java对象可以被远程的Java调用。</li><li><code>JMS (Java Message Service)</code>提供企业消息服务。</li><li><code>JTS (Java Transaction Service)</code>提供存取事务处理资源的开放标准，这些事务处理资源包括事务处理应用程序、事务处理管理及监控。</li><li><code>Annotation (Java Annotation)</code>提供一种机制，将程序的元素如:类，方法，属性，参数，本地变量，包和元数据联系起来。</li><li><code>JMF (Java Media Framework API)</code>为多媒体开发者提供了捕捉、回放、编解码等工具，是一个弹性的、跨平台的多媒体解决方案。</li><li><code>JMX (Java Management Extensions)</code>是一个为应用程序、设备、系统等植入管理功能的框架。</li><li><code>JPA (Java Persistence API)</code>提供了对象持久化到关系数据库的解决方案规范。</li></ul><hr><h4 id="EJB与Spring"><a href="#EJB与Spring" class="headerlink" title="EJB与Spring"></a>EJB与Spring</h4><p>EJB是sun公司的JavaEE服务器端组件模型，设计目标与核心应用是<em>部署分布式应用程序</em>。EJB运行在一个容器里，允许开发者只关注与bean中的业务逻辑而不用考虑象事务支持，安全性和远程对象访问等复杂和容易出错的事情。EJB以POJO对象形式开发，开发者可以用元数据注释来定义容器如何管理这些Bean。<br>EJB3中包含有两种类型：</p><ul><li><code>Session Bean</code>：被客户端调用用于处理某一具体的操作业务的Java对象实体。又可以根据是否维护状态，划分为无状态会话Bean和状态会话Bean。</li><li><code>Message Driven Bean, MDB</code>：提供了一个实现异步通信的方法，比直接使用JMS更加容易。对于客户机来说，MDB是一个在服务器上实现某些业务逻辑的JMS消息使用者。</li></ul><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/EJB%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6.png" alt="EJB编程框架" title="EJB编程框架 - 图片引自 Mastering EJB 3.0"></p><p>Spring框架</p><ul><li>控制反转(IoC)</li><li>面向切面(Aspect Oriented Programming, AOP)</li><li>依赖注入(Dependency Injection, DI)</li></ul><p>Spring和EJB框架结构都有一个共同核心的设计理念：<strong>将中间件服务传递给耦合松散的POJO对象(Plain Old Java Objects)</strong></p><p>与Web容器相关的技术</p><ul><li>反射(Reflection)是指程序可以访问、检测和修改它本身状态和行为的一种能力。</li><li>注解(Annotation)也称为元数据，一种代码级别的说明。与类、接口、枚举位于同义层次，可以用于包、类、字段、方法、局部变量、方法参数等，对元素进行说明注释。</li><li>依赖注入(Dependency Injection)指容器负责对象的创建、对象间的关联，并管理对象的生命周期。</li><li><p>面向切面编程(Aspect Oriented Programming)通过预编译方式和运行期动态代理的方式，实现程序功能的统一和维护的技术。<br>AOP将应用程序划分为<em>核心业务逻辑</em>和<em>横向的通用逻辑</em>。AOP主要致力于横向的通用逻辑问题的解决，如持久化管理、事务管理、日志管理等。<br>在AOP中有如下几个概念：</p><ol><li>连接点 (Joinpoint)指程序执行过程中某一个方面可以插入的点。</li><li>通知 (Advice)指在特定的连接点AOP框架执行的动作。</li><li>切入点 (Pointcut)用来指定通知(Advice)将被执行的一系列连接点的集合。</li><li>方面 (Aspect)是一个关注点的模块化，由通知(Advice)和切入点(Pointcut)组成。</li><li>目标对象 (Target Object)是包含连接点的对象，也被称作被通知或被代理对象。</li><li>引入 (Introduction)允许添加新的方法或字段到被通知的类。</li><li>AOP代理 (AOP Proxy)是AOP框架创建的对象，包含通知。</li><li><p>编织 (Weaving)把方面应用到目标对象，从而创建一个新的代理对象的过程。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/AOP%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png" alt="AOP组成部分" title="AOP组成部分"></p></li></ol></li></ul><hr><h3 id="CH7-消息中间件"><a href="#CH7-消息中间件" class="headerlink" title="CH7- 消息中间件"></a>CH7- 消息中间件</h3><h4 id="消息中间件的概念"><a href="#消息中间件的概念" class="headerlink" title="消息中间件的概念"></a>消息中间件的概念</h4><p>分布式对象调用的局限性：客户发出调用后，一般需要等待服务对象完成并返回结果后才能继续执行；客户和服务对象的生命周期紧密耦合。<br><strong>消息中间件(Message Oriented Middleware)</strong>是在分布式系统中完成消息的发送和接收的基础软件。消息中间件支持与保障分布式应用程序之间的<em>同步或异步</em>地收发消息。<br>在消息中间件中， 发送方在发送消息时不必知道接收方的状态，更无须等待接收方的回复；接收方在收到消息时不必知道发送方的目前状态，也无须进行同步的消息处理。即消息的收发双方完全是<em>松耦合</em>的，通信是非阻塞的；收发双方彼此之间不知道对方的存在，不受对方的影响。这些都提高了程序的<em>性能</em>、<em>可扩展性</em>及<em>健壮性</em>。</p><p>消息中间件分为点对点与消息代理（订阅者与发布者）两种模式。<br>传统的<em>点对点</em>消息中间件通常由消息队列服务、消息传递服务、消息队列和消息应用程序接口API组成。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/%E7%82%B9%E5%AF%B9%E7%82%B9-%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84.png" alt="点对点-消息中间件架构" title="点对点-消息中间件架构"></p><p>在基于消息代理的分布式应用系统中，消息的发送方称为出版者(Publisher)，消息的接收方称为订阅者(Subscriber)，不同的消息通过不同的主题进行区分。消息代理实现了发布者和订阅者的解耦：</p><ul><li>时间解耦，发布者和订阅者无需同时在线就能够进行消息传输，消息中间件通过存储转发提供了异步传输的能力</li><li>空间解耦，发布者和订阅者都无需知道对方的物理地址、端口等。</li><li>流程解耦，发布者和订阅者在发送和接收数据时并不阻塞各自的控制流程。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83-%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%9E%B6%E6%9E%84.png" alt="订阅发布-消息中间件架构" title="消息代理-消息中间件架构"></li></ul><hr><h4 id="Java-Message-Service"><a href="#Java-Message-Service" class="headerlink" title="Java Message Service"></a>Java Message Service</h4><p>JMS，即Java Message Service是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换，并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发。<br>JMS支持两种消息传递模型：</p><ul><li>点对点，Point-to-Point，简称为PTP</li><li>发布/订阅，Publish/Subscribe，简称为Pub/Sub<br>JMS提供两种消息投递的方式：</li><li>NON_PERSISTENT，最多投递一次</li><li>PERSISTENT，消息将暂存后再转送投递</li></ul><p>消息驱动Bean (MDB)<br>MDB, Message Driven Bean是用来转换处理基于消息请求的组件。它主要负责处理消息，让开发人员集中精力在消息处理的业务逻辑上。</p><hr><h3 id="CH8-数据存取中间件"><a href="#CH8-数据存取中间件" class="headerlink" title="CH8 - 数据存取中间件"></a>CH8 - 数据存取中间件</h3><h4 id="开放数据库连接"><a href="#开放数据库连接" class="headerlink" title="开放数据库连接"></a>开放数据库连接</h4><p>ODBC即Open Database Connectivity，是一种用来在关系或非关系型数据库管理系统（DBMS）中存取数据的标准应用程序数据接口。<br>ODBC的四个主要部分：</p><ul><li>应用程序接口，屏蔽不同的ODBC数据库驱动器之间函数调用的差别，为用户提供统一的SQL编程接口。</li><li>驱动器管理器，为应用程序装载数据库驱动器。</li><li>数据库驱动器，实现ODBC的函数调用，提供对特定数据源的SQL请求。如果需要，数据库驱动器将修改应用程序的请求，使得请求符合相关的DBMS所支持的文法。</li><li>数据源，由用户想要存取的数据以及与它相关的操作系统、DBMS和用于访问DBMS的网络平台组成。</li></ul><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/ODBC%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84.PNG" alt="ODBC体系架构" title="ODBC体系架构"></p><p>为了应对非结构化数据，微软提出了OLE DB技术(Object Link and Embed)，即对象连接与嵌入技术。OLE DB是一个非常好的构架，允许程序员存取各类数据，但太过底层，使用复杂。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/OLEDB%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84.PNG" alt="OLE DB体系结构" title="OLE DB体系结构"></p><p>为了解决上述问题，微软使用COM技术封装了OLE DB为<em>ADO对象</em>，简化了通过OLE DB数据存取的复杂性。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/ODBC_OLEDB_ADO%E5%85%B3%E7%B3%BB%E5%9B%BE.PNG" alt="ODBC、OLE DB、ADO关系" title="ODBC、OLE DB、ADO关系"></p><hr><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p>JDBC,Java Database Connectivity是Java与数据库的接口规范。JDBC定义了一个支持标准SQL功能的通用低层的API，旨在让各数据库开发商为Java程序员提供标准的数据库API。</p><p>JDBC与ODBC的异同点：ODBC以C/C++的API形式提供服务，而JDBC以Java的API形式提供服务；JDBC的设计在思想上沿袭了ODBC，同时在其主要抽象和SQL调用级接口实现上也沿袭了ODBC；相较于ODBC，JDBC配置更容易，也更具有面向对象的思想。</p><hr><h4 id="对象关系映射ORM"><a href="#对象关系映射ORM" class="headerlink" title="对象关系映射ORM"></a>对象关系映射ORM</h4><p>ORM，Object Relational Mapping，是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到关系型数据库中的一项技术。</p><p>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/review-middleware/Hibernate%E6%89%80%E6%89%AE%E6%BC%94%E7%9A%84%E8%A7%92%E8%89%B2.PNG" alt="Hibernate所扮演的角色" title="Hibernate所扮演的角色"></p><hr><h4 id="JPA介绍"><a href="#JPA介绍" class="headerlink" title="JPA介绍"></a>JPA介绍</h4><p>Java Persistence API，用于对象持久化的API，是Java EE 5.0 平台标准的ORM规范，使得应用程序以统一的方式访问持久层。提供了将POJO转化为持久化对象的机制规范。</p><p>JPA与Hibernate的关系：</p><ul><li>JPA是规范，而Hibernate是具体实现</li><li>从功能上来说，JPA是Hibernate功能的一个子集</li></ul><p>JPA的优势：标准化；对容器级特性的支持；简单易用、集成方便；可媲美JDBC的查询能力；支持面向对象的高级特性；</p><p>JPQL介绍<br>JPQL，Java Persistence Query Language，即Java持久化查询语言是一种可移植的查询语言，可以被编译成所有主流数据库的SQL。JPQL是面向对象的，通过面向对象而非面向数据库的查询语言查询数据，避免程序的SQL语句紧密耦合。</p><hr><h3 id="CH9-事务处理中间件"><a href="#CH9-事务处理中间件" class="headerlink" title="CH9 - 事务处理中间件"></a>CH9 - 事务处理中间件</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务是计算机应用中不可或缺的组件模型，它保证了用户操作的<strong>ACID</strong>，即<code>原子性(Atomicity)</code>、<code>一致性(Consistency)</code>、<code>隔离性(Isolation)</code>和<code>持久性(Durabilily)</code>。<br>JDBC的事务是基于Connection进行的，默认情况是<em>自动提交事务</em>，也可以手动提交或者回滚。<br>分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。分布式事务处理系统旨在协助在分布式环境中跨异类的事务识别资源的事务。<br>在分布式系统中，事务往往包含有多个参与者的活动，单个参与者上的活动是能够保证原子性的，而多个参与者之间原子性的保证则需要通过两阶段提交来实现，<strong>两阶段提交</strong>是分布式事务实现的关键。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Freview-middleware%2F%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%8D%8F%E8%AE%AE.PNG" alt="两阶段提交协议" title="两阶段提交协议"></p><p>在分布式事务两阶段提交协议中，有一个主事务管理器负责充当<strong>分布式事务协调器</strong>的角色。事务协调器负责整个事务，并使之与网络中的其他事务管理器(参与者)协同工作。具体来说两阶段提交协议，按照如下两步进行：</p><ol><li>协调者在自身的节点的日志中写入一条<em>日志记录</em>，然后向所有参与者发送消息<code>prepare T</code>，询问这些参与者（包括自身），是否能够提交这个事务；参与者在接受到这个<code>prepare T</code>消息以后，会根据自身的情况，进行事务的预处理：<ul><li>如果参与者能够提交该事务，则会将日志写入磁盘，并返回给协调者一个<code>ready T</code>信息，同时自身进入预提交状态状态；</li><li>如果不能提交该事务，则记录日志，并返回一个<code>not commit T</code>信息给协调者，同时撤销在自身上所做的数据库改；参与者能够推迟发送响应的时间，但最终还是需要发送的。</li></ul></li><li>协调者会收集所有参与者的意见，如果收到参与者发来的<code>not commit T</code>信息，则标识着该事务不能提交，协调者会将<code>Abort T</code>记录到日志中，并向所有参与者发送一个<code>Abort T</code>信息，让所有参与者撤销在自身上所有的预操作；如果协调者收到所有参与者发来<code>prepare T</code>信息，那么协调者会将<code>Commit T</code>日志写入磁盘，并向所有参与者发送一个<code>Commit T</code>信息，提交该事务；如果协调者迟迟未收到某个参与者发来的信息，则认为该参与者发送了一个<code>VOTE_ABORT</code>信息，从而取消该事务的执行。<br>参与者接收到协调者发来的<code>Abort T</code>信息以后，参与者会终止提交，并将<code>Abort T</code>记录到日志中；如果参与者收到的是<code>Commit T</code>信息，则会将事务进行提交，并写入记录。</li></ol><p>注意上述操作中，各个参与者在进行每一步操作时都要<em>事先写入日志</em>。<br>一般情况下，两阶段提交协议都能较好的运行，当在事务进行过程中，有参与者宕机时，它重启之后，可以通过询问其他参与者或者协调者，从而知道这个事务到底有没有提交了；而如果协调者在第二阶段前宕机，就会导致部分参与者收不到<code>Abort T</code>或者<code>Commit T</code>的命令，此时就需要数据库管理员介入，防止数据库的不一致状态。<br>另外，为了实现分布式事务必须使用一种协议在分布式事务的各个参与者之间传递事务上下文信息，<code>互联网内部对象请求代理协议(IIOP, Internet Inter-ORB Protocol)</code>便是这种协议。</p><p>再来看看分布式事务的<code>ACID</code>特性，两阶段提交协议保证了事务的<code>原子性(Atomicity)</code>；数据库的完整性约束保证了事务的<code>一致性(Consistency)</code>；数据库位置的不同及数据库自身的对事务隔离的支持保证了事务的<code>隔离性(Isolation)</code>；数据库的日志保证了事务的<code>持久性(Durability)</code>。</p><hr><h4 id="EJB事务体系结构"><a href="#EJB事务体系结构" class="headerlink" title="EJB事务体系结构"></a>EJB事务体系结构</h4><p><code>JTA, Java Transaction API</code>和<code>JTS, Java Transaction Service</code>为Java EE平台提供了分布式事务服务。<code>JTS</code>定义了一套规范，它约定了各个程序角色之间如何传递事务上下文，它源自CORBA的OTS规范，基于IIOP。<code>JTA</code>约定这些角色要进行哪些事务上下文的交互，<code>JTS</code>约定了应该怎样去进行交互。<br>EJB有两种使用事务的方式：通过容器管理的事务，叫CMT；通过Bean管理的事务，叫BMT。<br><code>JTA</code>是一种高层的、与实现无关的、与协议无关的API，应用程序和应用服务器可以使用JTA实现事务管理。与JDBC主要用于管理单个数据源的事务不同，JTA主要管理分布式情况下的事务操作。在JTA中，一个分布式事务包括一个<em>事务管理器(Transaction Manager)</em>和一个或多个<em>资源管理器(Resource Manager)</em>。资源管理器是任意类型的支持XA协议的持久化数据存储，事务管理器承担着所有事务参与单元的协调与控制。</p><p>JTA的事务管理器和资源管理器可以理解为两个方面：面向开发人员的使用接口（事务管理器）和面向服务器提供商的实现接口（资源管理器）。</p><hr><h3 id="CH10-Web服务"><a href="#CH10-Web服务" class="headerlink" title="CH10 - Web服务"></a>CH10 - Web服务</h3><h4 id="Web-Service的概念"><a href="#Web-Service的概念" class="headerlink" title="Web Service的概念"></a>Web Service的概念</h4><blockquote><p>A <code>Web Service</code> is a software system designed to support interoperable machine-to-machine interaction over a network. It has an interface described in a machine-processable format (specifically <code>WSDL</code>). Other systems interact with the Web Service in a manner prescribed by its description using <code>SOAP</code> messages, typically conveyed using HTTP with an XML serialization in conjunction with other Web-related standards.</p></blockquote><p>常见的两种Web Service处理方式包含：</p><ul><li>基于WSDL/SOAP的方式</li><li>基于RESTful风格的方式</li></ul><p>Web Service的工作原理分为两步：首先是在服务器上创造服务并将其在一台“目录服务器”上注册；然后客户端查找并调用该服务。</p><ol><li>服务器按规格生成服务的类和方法如Java Bean，使其能够接受和响应SOAP消息</li><li>撰写WSDL文件用于描述此Web Services，服务器向“目录服务器”注册自己的这些方法。</li><li>将此WSDL发布到目录服务器上，对外发布一个可调用的服务目录</li><li>客户端向“目录服务器”查找这些服务，获得这些服务的地址之后再去请求服务</li></ol><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Freview-middleware%2FWeb%20Service%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.PNG" alt="Web Service的体系架构" title="Web Service的体系架构"></p><p><code>WSDL, Web Service Description Language</code>是Web Service的描述语言，它包含一系列描述某个Web Service的定义。包括服务端ᨀ供的服务，调用方法，以及调用时所要遵循的格式，比如调用参数和返回值的格式等等。<br><code>SOAP, Simple Object Access Protocol</code>提供了标准的远程过程调用(RPC)方法来调用Web Service。SOAP规范定义了SOAP消息的格式，以及怎样通过HTTP协议来使用SOAP。客户端和服务端之间的方法调用请求和结果返回值都放在这些消息里。<br><code>UUDI, Universal Description, Discovery and Integration</code>提供了一种发布和查找服务描述的方法。 UDDI数据实体提供对定义业务和服务信息的支持。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Freview-middleware%2FUDDI%E3%80%81WSDL%E5%92%8CSOAP%E7%9A%84%E5%85%B3%E7%B3%BB.PNG" alt="UDDI、WSDL和SOAP的关系" title="UDDI、WSDL和SOAP的关系"></p><p>Web Service的主要目标是跨平台的可互操作性。为了达到这个目标，Web Service完全基于XML、XSD等独立于平台、独立于软件供应商的标准，是创建可互操作的、分布式应用程序的新平台。<br>Web Service的主要优势：</p><ol><li>异构平台的互通性</li><li>更广泛的软件复用</li><li>普通的通信要求：使用基于XML的SOAP表示数据和调用请求，通过HTTP传送这些文本信息。</li><li>迅捷的软件发行方式</li><li>方便的商务集成：企业可以把业务核心以Web Service的形式向其伙伴发布。</li></ol><p><code>JAXB, Java Architecture for XML Binding</code>是一个业界标准，是一项可以根据XML Schema产生Java类的方式，也允许将Java类映射为XML表现方式。<br>JAX-WS是Web Service的Java实现。</p><hr><h4 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h4><p><code>RESTful(REpresentation State Transfer)</code>描述了一个架构样式的网络系统，它指代一组架构约束条件和原则，满足这些约束条件和原则的应用程序或设计就是RESTful。<br>具体来说， REST是一种轻量级的Web Service架构风格，其实现和操作明显比SOAP和XML-RPC更为简洁，可以完全通过HTTP协议实现，还可以利用缓存Cache来提高响应速度，性能、效率和易用性上都很有优势。<br>REST的资源用URI描述，REST的操作遵从CRUD(Create, Read, Update, Delete)原则。<br>与Web Service一样，REST也包含了无状态性。但是这并不意味着REST不支持状态，REST可以通过将状态信息保存在客户端上，或者保存在资源中。服务器端不保持除了单次请求之外的任何与其通信的客户端的通信状态，这样做主要出于<em>可伸缩性</em>的考虑：如果服务端保存客户端的状态，就会需要大量存储空间，而影响服务器的性能；另一方面，无状态约束使得服务器的变化对客户端不可见。<br>REST的设计准则：</p><ul><li>所有事物都被抽象为资源，每个资源对应唯一标识符</li><li>通过标准的方法(CRUD)对资源进行操作</li><li>所有操作都是无状态的，对资源的各种操作不会改变资源标识符</li><li>分层的原则，组件无法了解到它与之交互的中间件之外的组件</li></ul><p>REST是对HTTP协议的全新诠释。它从资源的角度来考察整个网络，分布在各处资源由URI确定，客户端通过这些URI来获取这些资源的表征，并改变了这些资源的状态，即所谓的表征状态转移(Representational State Transfer)。REST同样实现了Web Service的平台独立、松耦合、互操作性的目标，除此之外，REST更轻量级、更简单。<br>从基本原理上来看，REST是面向资源的，而WSDL/SOAP是面向活动的。举例来说，我们想获得某个城市的天气，REST可以通过<code>GET</code>方式获取到想要的信息，而WSDL/SOAP则会通过调用远程主机的<code>getCityWeather()</code>来获取。</p><h4 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h4><p>面向服务的体系结构(SOA, Service-Oriented Architecture)是一个组件模型。它通过定义良好的<em>接口</em>和<em>契约</em>，将应用程序的不同功能单元（即服务）联系起来。<em>接口</em>是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以使用一种统一和通用的方式进行交互。<br>通过SOA，松散耦合的、粗粒度的应用组件可以根据需求进行分布式的部署、组合和使用；应用和服务之间通过简单、精确定义接口进行通讯，不涉及底层编程接口和通讯模型。</p><p>至于SOA和Web Service的两者关系，SOA是一种架构模式，Web Service是利用一组标准实现的服务。</p><h2 id="COMMENT"><a href="#COMMENT" class="headerlink" title="COMMENT"></a>COMMENT</h2><p>中间件，乱的可以。一点看不清脉络:(<br><br>[CC BY-SA 3.0]: <a href="http://creativecommons.org/licenses/by-sa/3.0" target="_blank" rel="noopener">http://creativecommons.org/licenses/by-sa/3.0</a> “CC BY-SA 3.0”<br>[GFDL]: <a href="http://www.gnu.org/copyleft/fdl.html" target="_blank" rel="noopener">http://www.gnu.org/copyleft/fdl.html</a> “GFDL”</p>]]></content>
      
        <categories>
            
            <category> review </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[IT项目管理复习]]></title>
      <url>http://www.wrran.com/blog/2016/05/31/review/it-project-management/</url>
      <content type="html"><![CDATA[<blockquote><p>书到用时方恨少</p></blockquote><p>睡睡睡，水水水，谁谁谁…<br><a id="more"></a></p><h2 id="考试题型"><a href="#考试题型" class="headerlink" title="考试题型"></a>考试题型</h2><ol><li>选择题 （10道，4选1）</li><li>判断题 （10道）</li><li>简答题 （6道）</li><li>案例分析与应用题 （4道题）</li><li>讨论题 （1道）</li></ol><h2 id="复习范围"><a href="#复习范围" class="headerlink" title="复习范围"></a>复习范围</h2><p>是否为项目（判断题？）<br>项目的特点（选择题？）<br>项目管理的定义、构成、约束因素<br>九大知识域、五大阶段<br>IT项目的特征（需求变化频繁、成本为人力成本）<br><strong>第一章 - 该项目成功的因素有哪些？</strong><br>启动阶段的任务（了解）<br><strong>投入产出分析（理解）</strong><br>可行性分析（了解）<br>范围管理中的概念及其作用（知道，简答题？）<br>项目范围、产品范围<br><strong>项目目标如何描述（SAMRT原则）</strong><br>WBS的核心思想、设计方法、原则<br>变更控制，为啥需要，了解过程<br>项目时间管理的主要活动、<strong>过程（重要）</strong><br>活动排序的相关性及依赖关系（注意理解）<br><strong>网络图（箭线图法、前导图）（掌握）</strong><br>进度计划编制的目的、方法<br><strong>关键路径法、计划评审技术及两者联系与区别</strong><br>时间控制 - 案例分析二<br>成本管理的定义和概述<br>成本管理的概念（了解）<br>成本的几种分类（理解）<br>资源计划矩阵图<br>成本估算的工具和方法（了解）<br>成本预算的分类和主要部分（了解）<br>成本控制的概念（了解）<br><strong>挣值分析（掌握）</strong><br>质量计划的概念与过程<br><strong>质量负责人不仅是项目经理</strong><br><strong>软件质量保证的方法和技术</strong><br>质量控制的方法和技术（了解）<br>软件测试的流程与顺序<br><em>提高IT项目质量的4点意见</em><br>风险管理的流程图<br>风险识别的方法<br>风险量化的方法，<br>风险应对计划的四种方法<br>风险监控（~）<br><em>风险管理的主要技术</em>（哪些技术应用在哪些步骤）<br><em>人力管理的关键（与需求、激励有关的理论）</em><br><em>组织结构图及对应的责任</em><br><strong>沟通管理的重要性、含义</strong><br>沟通计划的编制<br><em>信息传送的四个原则</em><br>采购计划包括哪些内容、工作说明书机器内容、RFP/RFQ<br>项目整体管理的含义与过程<br>项目计划的制定的过程与目的<br><em>IT项目的验收的内容、意义</em></p><h2 id="REVIEW"><a href="#REVIEW" class="headerlink" title="REVIEW"></a>REVIEW</h2><h3 id="CH1-项目管理概述"><a href="#CH1-项目管理概述" class="headerlink" title="CH1 项目管理概述"></a>CH1 项目管理概述</h3><h4 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h4><ol><li>项目的定义：项目是在一定的<strong>资源约束</strong>下，完成<strong>既定目标</strong>的<strong>一次性</strong>的系列任务。</li><li>项目的特点：目的性，具有寿命周期，一次性，项目具有固定客户，项目组织开放性和临时性，开发实施的渐进性，项目具有较强的冲突性、一定的风险性，项目活动具有整体性</li><li>项目的三重约束：成功的项目必须满足<strong>时间</strong>、<strong>费用</strong>和<strong>性能</strong>上的约束</li></ol><h4 id="项目管理及发展"><a href="#项目管理及发展" class="headerlink" title="项目管理及发展"></a>项目管理及发展</h4><ol><li><p>项目管理概念与特点<br><strong>项目管理</strong>是以项目为对象的系统管理方法，通过临时性的、专门的柔性组织，对项目进行高效率的计划、组织、指导和控制，以实现项目全过程的动态管理和项目目标达成的综合协调与优化。<br>从上可以看出项目管理的特点，见下：</p><ul><li><em>研究对象</em>是项目</li><li><em>思想</em>是系统性管理的系统方法论</li><li><em>组织</em>是临时性、柔性、扁平化的组织</li><li><em>体制</em>是基于团队管理的个人负责制</li><li><em>方式</em>是目标管理，包括进度、费用、技术与质量</li><li><em>要点</em>是创造和保持一种使项目顺利进行的环境</li><li><em>方法</em>、<em>工具</em>和<em>手段</em>具有先进性和开放性</li></ul><p>项目管理是一项<strong>复杂系统工程</strong>，具有<strong>创造性</strong>，充满权衡。</p></li><li>项目管理历史与发展<br>项目管理实践（活动）=&gt;传统项目管理（方法）=&gt;新项目管理（学科）</li><li><p>国际项目管理组织及其发展<br>管理组织有：</p><ul><li>美国的项目管理学会（Project Managemet Institute，PMI）</li><li>国际项目管理协会（International Project Management Association，IPMA）</li><li>中国项目管理研究委员会（Project Management Research Committee，PMRC）</li></ul><p>发展趋势有：全球化、多元化、专业化/学科化</p></li></ol><h4 id="项目管理知识体系概述"><a href="#项目管理知识体系概述" class="headerlink" title="项目管理知识体系概述"></a>项目管理知识体系概述</h4><ol><li>基于 PMBOK项目管理的九大知识领域<br>九大知识领域有：项目范围管理、项目时间管理、项目质量管理、项目采购管理、项目费用管理、项目风险管理、项目人力资源管理、项目沟通管理、项目整体管理<br>五个标准化过程：启动、计划、执行、控制、收尾<br>此处应该有个图 :)[TODO]</li><li>理解项目干系人<br><strong>项目当事人</strong>是指项目参与的各方。<strong>项目干系人</strong>包括当事人和其利益受该项目影响的个人和组织，也称为项目的利害关系人。<br>常见的项目干系人有项目经理、顾客、执行组织、项目发起人等。</li></ol><h4 id="IT项目管理概念与基础"><a href="#IT项目管理概念与基础" class="headerlink" title="IT项目管理概念与基础"></a>IT项目管理概念与基础</h4><ol><li>IT项目定义与特征<br><strong>IT项目</strong>是以信息技术为基础进行开发的项目，是一种特殊领域下的项目。<br>IT项目的特征：<ul><li>IT项目是<em>设计型项目</em></li><li>需求变化频繁</li><li>难以估量工作量</li><li>成本主要为人力成本</li><li>以人为本的管理</li></ul></li><li><p>IT项目主要构成和类型<br>IT项目主要构成：</p><ul><li>网络与硬件系统的设计</li><li>软件系统方案的设计</li><li>系统实施与转换</li><li>后期维护与系统升级</li></ul><p>IT项目类型： 计算机、通信及微电子技术研发；网络工程组建和网络系统集成；系统软件研发和应用软件开发；企业信息化、城市数字化、商务电子化、政务电子化等IT应用型项目；IT咨询与服务等</p></li><li>IT项目管理体系<br>这就有的说了[TODO]</li></ol><hr><h3 id="CH8-项目人力资源管理"><a href="#CH8-项目人力资源管理" class="headerlink" title="CH8 项目人力资源管理"></a>CH8 项目人力资源管理</h3><h4 id="人力资源管理的重要性"><a href="#人力资源管理的重要性" class="headerlink" title="人力资源管理的重要性"></a>人力资源管理的重要性</h4><p>人的因素决定一个企业或项目的成败；人是公司和组织最重要的资源，公司就应尽量满足自身的人才需求和公司员工的需要；如果想在IT项目上获得成功，就需要认识到项目人力资源管理的重要性，并采取实际行动来有效使用人才。<br>IT企业面临的问题：IT专业人员工作时间变长、领域持续迅速地变化等；所以需要提高工资福利、重新定义工作时间和激励，并提供更好的人才资源管理。</p><h4 id="项目人力资源管理概述"><a href="#项目人力资源管理概述" class="headerlink" title="项目人力资源管理概述"></a>项目人力资源管理概述</h4><p>项目人力资源管理，就是有效地发挥每个参与项目人员作用的过程。过程包括：1. 组织的计划编制 2. 人员获取 3. 团队建设<br>人员管理的关键包括：</p><ol><li>需求、动机和激励<ul><li>马斯洛的需要层次理论</li><li>赫茨伯格的双因素理论</li><li>佛罗姆的期望理论</li><li>亚当斯的公平理论</li></ul></li><li><p>影响和能力：<br>项目经理可使用的九条影响和能力：</p><ul><li>权利：发命令的正当等级权利</li><li>任务：感知到的项目经理影响员工后来工作分配的能力</li><li>预算：感知到的项目经理授权他人使用自由支配资金的能力</li><li>提升：提拔员工的权利</li><li>资金：给员工涨工资和增加福利的权力</li><li>处罚：感知到的项目经理实施处罚的能力</li><li>工作挑战：根据员工完成一项特定任务的喜好来安排工作的能力</li><li>专家知识：感知到的项目经理所具有的重要的一些专业技术知识</li><li>友谊：项目经理和其他人之间建立良好的人际关系</li></ul><p>当项目经理使用<strong>专家知识</strong>、<strong>工作挑战</strong>时，项目更容易成功；当项目经理使用<strong>权利</strong>、<strong>金钱</strong>、<strong>惩罚</strong>时，项目更容易失败。</p></li><li>提高效率<br>项目经理可以运用以下七种习惯来提高工作的有效性：<ul><li>保持积极态度</li><li>一开始就牢记结果（目标？）</li><li>把最重要的事放在最重要的位置上</li><li>考虑双赢</li><li>首先去理解别人，然后再被别人理解</li><li>协同</li><li>磨快锯子</li></ul></li></ol><h4 id="组织计划编制"><a href="#组织计划编制" class="headerlink" title="组织计划编制"></a>组织计划编制</h4><p>组织计划编制包括对<em>项目角色</em>、<em>职责</em>及<em>报告关系</em>进行<strong>识别</strong>、<strong>分配</strong>和<strong>归档</strong>。<br>编制的结果包括：项目组织结构图、定义和分配工作、责任分配矩阵、资源直方图<br>IT项目组织结构一般采用<strong>矩阵式</strong>，即从委托方和开发方的各部门中临时抽调人员组成，它包括开发方和委托方两方的人员，承担不同的角色；不同规模、不同性质的软件项目的组织结构都会有所不同。<br><strong>人员配置管理计划</strong>描述了项目组何时以及如何增加或减少人员，其表现形式为资源直方图，表示随着时间分配给项目的资源数量的柱状图。</p><h4 id="项目人员获取"><a href="#项目人员获取" class="headerlink" title="项目人员获取"></a>项目人员获取</h4><p>人力资源计划和招聘过程在人员获取中非常重要。人力资源计划主要包括的活动有编制人力使用计划和人力的招聘、调整、培训和解聘；描述目前组织中员工的数量和类型，以及现在或者将来活动所需要的人员的类型和数量。招聘过程保证一个组织正常运作、补充新鲜血液的主要办法，参照人事部门的招聘计划，分为内部招聘和外部招聘。<br><strong>资源负荷</strong>，指在特定时段现有进度计划所需的个体资源数量；<strong>资源超负荷</strong>，指在特定时间内某项工作所需的资源超过了可用的资源；<strong>资源平衡</strong>，指通过延迟项目任务来解决资源冲突问题的方法，目的在于更合理的分配资源，减少资源超负荷的情况。</p><h4 id="团队建设的问题"><a href="#团队建设的问题" class="headerlink" title="团队建设的问题"></a>团队建设的问题</h4><p>项目组成员形成团队，不仅是项目成功的保证、也反过来满足成员的需求。<br>好的项目团队的特征：</p><ul><li>共同认可的明确目标</li><li>合理的分工与协作</li><li>成员的积极参与</li><li>互相信任</li><li>良好的信息沟通</li><li>高度的凝聚力与民主气氛</li><li>学习是一种经常化的活动</li></ul><p>好的团队的工作氛围：开放、真诚、平等、信任<br>新的团队的建立：决定做什么=&gt;需要什么样的团队成员=&gt;招聘团队成员=&gt;通过团队成员的参与，制定项目计划<br>团队生命周期：形成期=&gt;震荡期=&gt;规范期=&gt;成熟期=&gt;重组期<br>给团队的一般建议：集中达到项目目标和产生积极地结果，只针对问题而不针对人，召开定期的有效的会议，培养团队成员、鼓励他们互相帮助，承认个人和团队的成就。</p><hr><h3 id="CH9"><a href="#CH9" class="headerlink" title="CH9"></a>CH9</h3>]]></content>
      
        <categories>
            
            <category> review </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[软件体系结构复习]]></title>
      <url>http://www.wrran.com/blog/2016/05/31/review/software-architecture/</url>
      <content type="html"><![CDATA[<blockquote><p>不快也光</p></blockquote><p>我悄悄的来…<br><a id="more"></a></p><h2 id="考试题型"><a href="#考试题型" class="headerlink" title="考试题型"></a>考试题型</h2><ol><li>名词解释（5）</li><li>填空（10）</li><li>选择（30）</li><li>简答（5）</li><li>设计题（2）</li></ol><h2 id="REVIEW"><a href="#REVIEW" class="headerlink" title="REVIEW"></a>REVIEW</h2><p>体系结构是指整个系统构成的基本和主体形态。<br>软件体系结构是软件在设计构成上的基本、可供设计选择的形态和总体结构。</p><hr><h3 id="CH1-概述"><a href="#CH1-概述" class="headerlink" title="CH1 概述"></a>CH1 概述</h3><ol><li>软件体系结构：软件体系结构定义了软件的局部和总体计算部件的构成，以及这些部件之间的互相作用关系。总的来看，体系结构是由结构和功能各异、互相作用的部件集合，按照层次构成的。</li><li>当前的软件设计：体系结构的设计选择对于软件的长远成功是至关重要的；体系结构描述的不规范性；体系结构的理论和工具</li><li>软件设计的层次：结构级、代码级、执行级</li><li>体系结构与软件工程</li><li>软件体系结构的知识体系</li></ol><hr><h3 id="CH2-软件体系结构的研究与发展"><a href="#CH2-软件体系结构的研究与发展" class="headerlink" title="CH2 软件体系结构的研究与发展"></a>CH2 软件体系结构的研究与发展</h3><ol><li>软件工程设计和软件体系结构：软件设计目标：便于维护和升级，因而应该是模块化的；设计应该是便于移植（移植比重新设计花费要小的多）;设计过程应该受到理性的控制；设计应该表现出概念的完整性</li><li>什么是软件体系结构<blockquote><p>An architecture is the set of significant decisions about the organization of a software system, the selection of the structural elements and their interfaces by which the system is composed, together with their behavior as specified in the collaborations among those elements, the composition of these structural and behavioral elements into progressively larger subsystems, and the architectural style that guides this organization—these elements and their interfaces, their collaborations, and their composition.</p></blockquote></li><li>软件体系结构的意义和目标<ul><li>软件体系结构是软甲开发过程初期的产品，对于开发进度和软件质量的一切资金和劳务投入，可以获得最好的回报</li><li>体系结构设计是形成投资高回报的重要因素</li><li>正确有效的体系结构设计会给软件开发带来极大的便利</li></ul></li><li>软件体系结构的研究范畴：体系结构描述语言与工具；产品线与标准（企业、需求、架构、系统），软件体系结构风格及风格应用，体系结构文档化</li></ol><hr><h3 id="CH3-软件体系结构的层次性"><a href="#CH3-软件体系结构的层次性" class="headerlink" title="CH3 软件体系结构的层次性"></a>CH3 软件体系结构的层次性</h3><ol><li>体系结构的基础和层次特性：基础、层次、模式、角色划分（我是傻汪）</li><li>软件体系结构的层次结构模型：6层（重要）</li><li>从层次结构看软件体系结构：体系结构是关于软件的构成部件及其连接的分层的结构框架，体系结构分析与设计涵盖并指导着从逻辑结构设计到运行实现的软件工程的全部过程</li></ol><hr><h3 id="CH4-软件体系结构的设计原理"><a href="#CH4-软件体系结构的设计原理" class="headerlink" title="CH4 软件体系结构的设计原理"></a>CH4 软件体系结构的设计原理</h3><ol><li>体系结构设计中遵循的原理：抽象，封装（数据和代码的同时切割），数据隐藏，模块化，注意点分离，耦合和内聚，充分性、完备性和原始性，策略和实现的分离，接口和实现的分离，分而治之，层次化</li><li>软件的非功能特性：可变性（为变化而设计），互操作性，效率，可靠性，可测试性，可重用性</li></ol><hr><h3 id="CH5-部件和连接器"><a href="#CH5-部件和连接器" class="headerlink" title="CH5 部件和连接器"></a>CH5 部件和连接器</h3><p>部件和连接器被公认为体系结构的两大类构成部分</p><hr><h3 id="CH6-体系结构的一般描述（了解）"><a href="#CH6-体系结构的一般描述（了解）" class="headerlink" title="CH6 体系结构的一般描述（了解）"></a>CH6 体系结构的一般描述（了解）</h3><ol><li>通用的一般的描述方法：主子程序，数据抽象和面向对象，层次结构</li><li>理论的形式化方法：Z Notation，CSP，类属理论，化学抽象机模型</li><li>软件体系结构集成环境：UniCon，Darwin，Wright，ACME</li></ol><hr><h3 id="CH7-设计模式"><a href="#CH7-设计模式" class="headerlink" title="CH7 设计模式"></a>CH7 设计模式</h3><p>设计模式的类型：</p><table><thead><tr><th style="text-align:center">创造型</th><th style="text-align:center">结构型</th><th style="text-align:center">行为型</th></tr></thead><tbody><tr><td style="text-align:center">Factory</td><td style="text-align:center"><a href="#bridge_pattern">Bridge</a></td><td style="text-align:center">Chain of Responsibility</td></tr><tr><td style="text-align:center">Abstract Factory</td><td style="text-align:center">Composite</td><td style="text-align:center">Command</td></tr><tr><td style="text-align:center">Builder</td><td style="text-align:center">Decorator</td><td style="text-align:center">Iterator</td></tr><tr><td style="text-align:center">Prototype</td><td style="text-align:center">Facade</td><td style="text-align:center">Mediator</td></tr><tr><td style="text-align:center">Singleton</td><td style="text-align:center">Flyweight</td><td style="text-align:center">Memonto</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Proxy</td><td style="text-align:center">Observer</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">State</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Strategy</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Visitor</td></tr></tbody></table><p><a id="bridge_pattern"></a></p><h4 id="Bridge-Pattern"><a href="#Bridge-Pattern" class="headerlink" title="Bridge Pattern"></a>Bridge Pattern</h4><blockquote><p><strong>Bridge Pattern</strong>: Decouple an abstraction from its implementation so that the two can vary independently.</p></blockquote><p>涉及4个角色：</p><ul><li>Abstraction：定义出该角色的行为，同时保存一个Implementor的引用，该类一般为抽象类。</li><li>Implementor：定义角色必需的行为和属性，该类一般为接口。</li><li>RefinedAbstraction：引用Implementor或ConcreteImplementor对Abstraction进行修正。</li><li>ConcreteImplementor：实现Implementor定义的方法或属性。</li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/cf/Bridge_UML_class_diagram.svg" alt="Bridge结构" title="Bridge结构"></p><p>Bridge的目的：类有两个方面的责任，一是<strong>抽象</strong>，二是<strong>行为</strong>，他们应该能够相互独立。而类继承机制将这两者的独立关系打破，绑定在一起，导致扩展困难。<br>举例来说，一杯咖啡可以是小杯加奶、大杯加奶、小杯不加奶、大杯不加奶。倘若之后变更需求，希望可以在原有的基础上选择是否加热的话，就需要新增四个类。但如果我们将之分为两个层次，一是抽象–大杯咖啡或小杯咖啡，二是行为–加奶或不加奶。如此，我们只需要再新增一类行为–加热或不加热。</p><p><strong>JAVA DEMO</strong><br>要求：使用Bridge实现星巴克咖啡制作，Mocha要先加泡再加奶。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Freview-software-architecture%2FBridge%E4%BD%9C%E4%B8%9A_Coffee_%E8%A6%81%E6%B1%821.png" alt="要求一" title="要求一"><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Freview-software-architecture%2FBridge%E4%BD%9C%E4%B8%9A_Coffee_%E8%A6%81%E6%B1%822.png" alt="要求二" title="要求二"></p><p>解决方案：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Abstraction*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> ICup cup = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> IFoam foam = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> IMilk milk = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICup <span class="title">getCup</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> cup; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCup</span><span class="params">(ICup cup)</span> </span>&#123; <span class="keyword">this</span>.cup = cup; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFoam <span class="title">getFoam</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> foam; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFoam</span><span class="params">(IFoam foam)</span> </span>&#123; <span class="keyword">this</span>.foam = foam; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IMilk <span class="title">getMilk</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> milk; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMilk</span><span class="params">(IMilk milk)</span> </span>&#123; <span class="keyword">this</span>.milk = milk; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementor One */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementor Two */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFoam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementor Three */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMilk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** ConcreteImplementor of ICup */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grande</span> <span class="keyword">implements</span> <span class="title">ICup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Grand"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Short</span> <span class="keyword">implements</span> <span class="title">ICup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Short"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tall</span> <span class="keyword">implements</span> <span class="title">ICup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Tall"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Venti</span> <span class="keyword">implements</span> <span class="title">ICup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Venti"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** ConcreteImplementor of IFoam */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extra</span> <span class="keyword">implements</span> <span class="title">IFoam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Extra"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> <span class="keyword">implements</span> <span class="title">IFoam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Light"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoFoam</span> <span class="keyword">implements</span> <span class="title">IFoam</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"No Foam"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** ConcreteImplementor of IMilk */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoMilk</span> <span class="keyword">implements</span> <span class="title">IMilk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"No Milk"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowFat</span> <span class="keyword">implements</span> <span class="title">IMilk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Low Fat"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">implements</span> <span class="title">IMilk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Soy"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Refined Abstraction One */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">American</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"American"</span>);</span><br><span class="line">        milk.sell();</span><br><span class="line">        foam.sell();</span><br><span class="line">        cup.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Refined Abstraction Two */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cappuccino</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cappuccino"</span>);</span><br><span class="line">        milk.sell();</span><br><span class="line">        foam.sell();</span><br><span class="line">        cup.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Refined Abstraction Three */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Espresso"</span>);</span><br><span class="line">        milk.sell();</span><br><span class="line">        foam.sell();</span><br><span class="line">        cup.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Refined Abstraction Four */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mocha"</span>);</span><br><span class="line">        milk.sell();</span><br><span class="line">        foam.sell();</span><br><span class="line">        cup.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>测试用例如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bridge.*; <span class="comment">// import above classes</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Coffee coffee = <span class="keyword">null</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> in = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"What kind of coffee do you want? "</span> +</span><br><span class="line">        <span class="string">"(1:Espresso 2:American 3:Cappuccino 4: Mocha)"</span>);</span><br><span class="line">        in = scanner.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (in) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: coffee = <span class="keyword">new</span> Espresso(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: coffee = <span class="keyword">new</span> American(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: coffee = <span class="keyword">new</span> Cappuccino(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: coffee = <span class="keyword">new</span> Mocha(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid input :("</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"What kind of milk do you want to add? "</span> +</span><br><span class="line">         <span class="string">"(1:No Milk 2:Low-fat 3:Soy)"</span>);</span><br><span class="line">        in = scanner.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (in) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: coffee.setMilk(<span class="keyword">new</span> NoMilk()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: coffee.setMilk(<span class="keyword">new</span> LowFat());<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: coffee.setMilk(<span class="keyword">new</span> Soy()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid input :("</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"How much foam do you want to add? "</span> +</span><br><span class="line">        <span class="string">"(1:No foam 2:Light 3:Extra)"</span>);</span><br><span class="line">        in = scanner.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (in) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: coffee.setFoam(<span class="keyword">new</span> NoFoam()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: coffee.setFoam(<span class="keyword">new</span> Light()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: coffee.setFoam(<span class="keyword">new</span> Extra()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid input :("</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Which cupsize do you prefer? "</span> +</span><br><span class="line">        <span class="string">"(1:Short 2:Tall 3:Grande 4:Venti)"</span>);</span><br><span class="line">        in = scanner.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (in) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: coffee.setCup(<span class="keyword">new</span> Short());<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                coffee.setCup(<span class="keyword">new</span> Tall());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                coffee.setCup(<span class="keyword">new</span> Grande());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                coffee.setCup(<span class="keyword">new</span> Venti());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid input :("</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        coffee.sell();</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注意，上述设计中可以看出<code>RefinedAbstraction</code>,<code>American</code>等中的<code>sell()</code>代码是相同的，那为什么不合并呢？是因为要求中明确提出<code>Mocha</code>需要先加<code>Foam</code>后加<code>Milk</code>，所以将<code>Abstraction</code>,<code>Coffee</code>中<code>sell()</code>留给子类实现，增加灵活性；而不是写在父类中。</p><hr><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ol><li>The “4+1” View Model of Software Architecture：Logical View，Process View，Development View，Physical View，Scenario</li><li>体系结构风格：数据流、调用和返回、独立构件、虚拟机、数据中心</li><li><p>一些面向对象的设计法则</p><blockquote><p>Liskov Substitution Principle, <strong>LSP</strong>: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</p></blockquote><blockquote><p>Dependence Inversion Principle, <strong>DIP</strong>: High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p></blockquote><blockquote><p>Interface Segregation Principle, <strong>ISP</strong>: The dependency of one class to another one should depend on the smallest possible interface.</p></blockquote><blockquote><p>Open Closed Principle, <strong>OCP</strong>: Software entites like classes, modules and functions should be open for extension but closed for modifications.</p></blockquote><blockquote><p>Law of Demeter, <strong>LoD</strong> or Principle of Least Knowledge: Each unit should only talk to its friends, don’t talk to strangers.</p></blockquote></li></ol>]]></content>
      
        <categories>
            
            <category> review </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Git学习记录 - 1]]></title>
      <url>http://www.wrran.com/blog/2016/05/30/learn/git/git-1/</url>
      <content type="html"><![CDATA[<blockquote><p>Git <code>--local-branching-on-the-cheap</code></p></blockquote><p>Git，广为使用的分布式版本控制系统。学习下Git，记录管理自己的代码。<br><a id="more"></a></p><h1 id="常用资源"><a href="#常用资源" class="headerlink" title="常用资源"></a>常用资源</h1><p>下为广大网友贡献的优质资源：</p><ul><li><a href="https://www.zhihu.com/question/29929269/answer/99197244" title="知乎 - Github入门方法有哪些？" target="_blank" rel="noopener">Git学习路线</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="廖雪峰的官方网站 - Git教程" target="_blank" rel="noopener">Git教程 - 廖雪峰的官方网站</a></li><li><a href="http://git.oschina.net/progit/" title="Pro Git(中文版)" target="_blank" rel="noopener">Pro Git(中文版)</a>：可以在<a href="https://git-scm.com/book/en/v2" title="Pro Git - Book" target="_blank" rel="noopener">此处</a>下载PDF、EPUB等格式</li></ul><p>下面这些资源也可以作为参考：</p><ul><li><a href="http://www.ezlippi.com/blog/2016/02/git-guide.html" target="_blank" rel="noopener">Git操作手册|命令速查表</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noopener">A Visual Git Reference</a></li></ul><p>本博文系列主要按照 <strong><a href="http://git.oschina.net/progit/" title="Pro Git(中文版)" target="_blank" rel="noopener">Pro Git</a></strong> 的章节顺序来学习Git。如果着急使用Git而不急于了解背后原理的话，可以参见 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="廖雪峰的官方网站 - Git教程" target="_blank" rel="noopener">廖雪峰老师的教程</a>。</p><hr><h1 id="CH1-起步"><a href="#CH1-起步" class="headerlink" title="CH1 - 起步"></a>CH1 - 起步</h1><h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><ol><li><a href="#ch1-point-1">版本控制的历史变化</a></li><li><a href="#ch1-point-2">Git设计目标</a></li><li><a href="#ch1-point-3">Git设计思想</a></li><li><a href="#ch1-point-4">Git的优点</a></li><li><a href="#ch1-point-5">Git中文件的三个状态</a></li><li><a href="#ch1-point-6">Git的安装与配置 [实验部分]</a></li></ol><p><a id="ch1-point-1"></a>版本控制的历史变化： 本地版本控制系统(Local Version Control Systems, LVCS) =&gt; 集中化版本控制系统(Centralized Version Control Systems, CVCS) =&gt; 分布式版本控制系统(Distributed Version Control Systems, DVCS)</p><p><a id="ch1-point-2">Git设计目标:</a></p><ul><li>速度</li><li>简单的设计</li><li>支持 <strong>非线性开发模式</strong></li><li>完全分布式</li><li>支持超大规模项目(速度和数据量)</li></ul><p><a id="ch1-point-3"></a>Git设计思想：</p><ul><li>Git保存每次更新时的文件快照，不同于其他VCS保存文件的具体差异</li><li>Git使用<strong>基于内容的校验和(checksum)</strong>作为数据的唯一标识和索引</li></ul><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Flearn-git%2F%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%B7%E4%BD%93%E5%B7%AE%E5%BC%82.png" alt="VCS跟踪文件的具体差异"><br>图1. VCS跟踪文件的具体差异</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Flearn-git%2F%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%8C%E6%95%B4%E5%86%85%E5%AE%B9.png" alt="Git跟踪文件的完整内容" title="Git跟踪文件的完整内容"><br>图2. Git跟踪文件的完整内容</p><p><a id="ch1-point-4"></a>Git特点：</p><ul><li>几乎所有操作都可以在本地执行</li><li>多数操作仅添加数据</li></ul><p><a id="ch1-point-5"></a>Git中文件的三种状态：<br>git中文件有三种状态：已修改(modified)、已暂存(staged)、已提交(committed)；与之对应的是git的三个工作区域：工作目录、暂存区域、本地仓库。具体来说，<strong>工作区域</strong>是我们进行后续工作的文件目录，<strong>本地仓库</strong>是git目录（一般为<code>.git</code>文件夹或者使用<code>git clone --bare</code>时的目录本身），<strong>暂存区域</strong>是git目录下的索引文件。</p><p><img src="http://7xuthx.com1.z0.glb.clouddn.com/image%2Flearn-git%2FGit%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png" alt="Git中的三个工作区域"><br>图3. Git中的三个工作区域</p><p>基本的git工作流程如下：</p><ol><li>在工作目录下修改文件</li><li>对文件快照，保存至暂存区域</li><li>提交修改，文件快照转储到git目录中</li></ol><p><a id="ch1-point-6"></a></p><h2 id="Git的安装与配置"><a href="#Git的安装与配置" class="headerlink" title="Git的安装与配置"></a>Git的安装与配置</h2><p>Windows下的Git安装：到<a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">Git for Windows</a>下载EXE文件，运行并安装。<br>配置文件有三个层次：</p><ol><li>系统配置，<code>/etc/gitconfig</code>文件，对所有用户都适用的配置。使用 <code>git config --system</code>可以修改该配置</li><li>全局配置，<code>~/.gitconfig</code>文件，只对该用户适用。使用<code>git config --global</code>可以修改该配置</li><li>项目配置，<code>[git-project-name]/.git/config</code>文件，只适用于当前项目</li></ol><p>在Windows下中系统配置和全局配置文件分别在 Git安装目录下的<code>/etc/gitconfig</code>文件，<code>C:\Users\$USER\.gitconfig</code>。<br>注意：上述配置中，每个层次的配置都会覆盖上层次相同的配置。</p><p>配置<code>用户名</code>、<code>电子邮件</code>用来在每次提交时标注出修改的用户，故而是必需的配置动作。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span></span><br><span class="line">git config --global user.email <span class="string">"username@example.com"</span></span><br></pre></td></tr></table></figure><p></p><p>更多的配置可以参看<a href="#git-cheat-sheet-config">git配置常用命令</a></p><hr><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><p><a id="git-cheat-sheet-config"></a>git配置常用命令<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor emacs <span class="comment"># 修改默认使用的文本编辑器(初始为VI、VIM)</span></span><br><span class="line">git config --global merge.tool vimdiff <span class="comment"># 指定差异分析工具</span></span><br><span class="line">git config --list <span class="comment"># 查看配置信息</span></span><br><span class="line">git config user.name <span class="comment"># 查看配置的用户名</span></span><br></pre></td></tr></table></figure><p></p><p>git帮助系统，以下三种方式都可以得到一些更详细的官方帮助文档<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line">man git-&lt;verb&gt; <span class="comment"># Windows下该命令无法执行</span></span><br></pre></td></tr></table></figure><p></p><hr><h1 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h1><p><a href="wrran.com/blog/2016/10/15/learn-git-2">Git学习记录 - 2</a><br></p>]]></content>
      
        <categories>
            
            <category> learn </category>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[First-Post]]></title>
      <url>http://www.wrran.com/blog/2016/05/28/miscellaneous/first-post/</url>
      <content type="html"><![CDATA[<blockquote><p>纸上得来终觉浅，绝知此事要躬行</p></blockquote>]]></content>
      
        <categories>
            
            <category> miscellaneous </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[瞎忙族 VS 高效人士]]></title>
      <url>http://www.wrran.com/blog/1995/07/04/people-say/180109-01/</url>
      <content type="html"><![CDATA[<blockquote><p>时间就像海绵里面的水</p></blockquote><a id="more"></a><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文来自于<a href="https://mp.weixin.qq.com/s?__biz=MzA4NDI3NjcyNA==&amp;mid=2649377797&amp;idx=4&amp;sn=e0876a38567ec0b5d671be5d1e9a48ec&amp;chksm=87f7489eb080c188cc2184596725ba9ee1904acb547502282fe15b827abf7dba9552e57abccb&amp;mpshare=1&amp;scene=1&amp;srcid=0109DSKWvARnKHfgybEVuQZk#rd" target="_blank" rel="noopener">新华社的文章</a>，请勿转载。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>时间是最公平的，每个人一天都是24小时，一年都是365天。但是不同的人的产出却是天差地别，在某种程度上，我们对时间的掌控，影响着我们的生活与工作。下面就把这9张图分享给大家，让我们一起做个高效的人。</p><h1 id="疲于奔命-VS-善于规划"><a href="#疲于奔命-VS-善于规划" class="headerlink" title="疲于奔命 VS 善于规划"></a>疲于奔命 VS 善于规划</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSWsVPorVE70GucBu4ibmsfvQ5ZUckgmXc5O7RMEhpbDHX2QYCdYj2BicwA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt><br>瞎忙族和高效人士的时间都安排得很满，但是却有本质的区别。瞎忙族是没有目标和方向的忙碌，整天被外部力量推着赶着，永远有忙不完的活，永远在救火，但是却说不上来忙了些啥，为了啥。<br>而高效人士的一个共同特点，就是<strong>对自己的人生有清晰的规划，永远知道自己的目标是什么，每一个阶段的奋斗有什么意义</strong>。他们的忙碌是充实，而不是庸碌。</p><h1 id="杂乱无序-VS-要事优先"><a href="#杂乱无序-VS-要事优先" class="headerlink" title="杂乱无序 VS 要事优先"></a>杂乱无序 VS 要事优先</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSW4egx8yaTKfjliapnD0fNJkr0EWI8pzzK5wViaLUAI33p3d5MJl84wWXA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt><br>瞎忙族的眼里，所有的工作都是差不多的。什么时候做什么事，完全随机无序。对信息、邮件、通知一点抵抗力都没有，经常手头的工作做到一半又切换到另一件事。结果越忙越乱，一天下来，真正完成的事一件也没有。</p><p>而高效人士<strong>非常注重计划和优先级排序，每天把状态最佳的时间段安排给最重要的三件事</strong>。遇到临时出现的工作，先放到“收件箱”里，而不是打断当前任务。关于这点，推荐大家学习GTD（Getting Things Done）理论。</p><h1 id="埋头干活-VS-抬头看路"><a href="#埋头干活-VS-抬头看路" class="headerlink" title="埋头干活 VS 抬头看路"></a>埋头干活 VS 抬头看路</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSWYJ5kCNuZHBdzczbIiaG7RCtGdZEe7O3uMOeMwJHEs5MYIxJ6ibEwbGIA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt></p><p>瞎忙族经常看起来好像很有执行力，接到任务说干就干，风风火火的。但是经常干到一半，发现方向错了！一切又得推倒重来，反反复复，效率低不说，还浪费公司资源。</p><p>而高效人士不仅能埋头干活，也非常注重抬头看路。行动之前，花必要的时间想清楚问题的本质是什么，怎么做最合理，有没有更优的方案？低效率和无用功是他们极力避免的。</p><h1 id="来者不拒-VS-敢于说不"><a href="#来者不拒-VS-敢于说不" class="headerlink" title="来者不拒 VS 敢于说不"></a>来者不拒 VS 敢于说不</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSWMVnK0Nv2g5Dkgkx3Eg3ibuUP4icYCvumos9EhcETCfdcFGHR3g3wECEQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt><br>很多瞎忙族都是老好人，不懂得或者不敢拒绝别人，各种事情都往自己头上揽。结果忙得焦头烂额，连自己的份内工作都没做好，别人的事也做得马马虎虎，两头不讨好。</p><p>高效人士<strong>并非不热心助人，但是能分清主次</strong>，明白份内工作都没做好的情况下，其他事情做得再多也没意义。条件不允许的时候懂得合情合理地拒绝别人。</p><h1 id="以忙为荣-VS-结果导向"><a href="#以忙为荣-VS-结果导向" class="headerlink" title="以忙为荣 VS 结果导向"></a>以忙为荣 VS 结果导向</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSWj9biay6yA2mic6PedHCziaCwBUKib7Sc4yw4qKLGqHFRxmcEgXefrHJBNA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt><br>瞎忙族的口头禅是“我很忙”“ 我没时间”，经常发朋友圈晒加班，把忙碌当成炫耀的资本，殊不知恰恰暴露自己的效率低下。</p><p>而高效人士<strong>从来不觉得忙碌有什么值得吹嘘的，永远只用结果来证明自己</strong>。轻轻松松把任务搞定，才是他们追求的终极目标！</p><h1 id="撒胡椒面-VS-懂得取舍"><a href="#撒胡椒面-VS-懂得取舍" class="headerlink" title="撒胡椒面 VS 懂得取舍"></a>撒胡椒面 VS 懂得取舍</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSW9daQ56XvguWicjdicGq1836XIEl9MHs3wf4jkTXnLxKskN99b1SUXKVA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt><br>瞎忙族的时间分配是“撒胡椒面”型，每项任务都安排一点时间，每件事都做得一般般，然后总是抱怨时间不够用。</p><p>而高效人士<strong>懂得取舍的艺术，明白一个人的时间和精力都是有限的，不可能什么都做好。他们会果断地舍弃低价值的工作，把宝贵的时间花在最重要的事情上</strong>。</p><h1 id="多任务处理-VS-专注再专注"><a href="#多任务处理-VS-专注再专注" class="headerlink" title="多任务处理 VS 专注再专注"></a>多任务处理 VS 专注再专注</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSWmSoHr7WlJQ8L0WzEBnPNfhgicdyb9tX678tAQQ4NJ6CBY1VFNtcoOlQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt><br>瞎忙族经常高估自己的能力，总想实现传说中的“多任务处理”。但是现实情况却是各种事情乱成一团麻，效率反而大大降低。</p><p><strong>高效人士相信专注的力量，一次只求做好一件事。</strong>遇到重要的任务，他们会给自己安排整块的不被打扰的时间，给自己找一个安静的封闭空间，以最高的效率攻克一个堡垒，然后再下一个。</p><h1 id="总在焦虑-VS-拥抱变化"><a href="#总在焦虑-VS-拥抱变化" class="headerlink" title="总在焦虑 VS 拥抱变化"></a>总在焦虑 VS 拥抱变化</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSWq7pmNhP3a7wG0kxgdfI32473eiaR07ynickzialVC9C0njCfkBc2VTzwg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt><br>瞎忙族经常处于无意义的焦虑状态，总在担心可能存在的变数，总害怕工作没保障、行业没前途、选择有风险。任由焦虑消耗宝贵的时间和精力，却很少做出点实际行动。</p><p>高效人士明白，世界上唯一不变的就是变化。变化带来挑战，也带来机遇。<strong>与其无谓地焦虑，不如主动拥抱变化。</strong>所以，他们经常会利用业余时间了解前沿信息，主动学习新技能，永远让自己保持在成长进步的状态。</p><h1 id="众口难调-VS-快速行动"><a href="#众口难调-VS-快速行动" class="headerlink" title="众口难调 VS 快速行动"></a>众口难调 VS 快速行动</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Iia2PwP9IhHQU49VtsV37zhvln7VZShSW8E29iaialuTde3qtXMuHtAEOshjPFiciba38bic3y8C6KKCvCEYKRkSBhOg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt><br>缺乏决断力是瞎忙族的通病，做事害怕犯错，行动时畏首畏尾。为了让所有人满意，过于广泛地甚至是毫无必要地征求意见，结果必然是众口难调，导致更加难以决策。</p><p>而<strong>高效人士明白，行动力才是决定成败的关键，没有行动，一切都是零。</strong>他们会适当听取意见，但是更相信自己的判断，下定决心之后，快速地行动起来！用行动赢得成功和梦想。</p>]]></content>
      
        <categories>
            
            <category> people-say </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[健康作息时间表]]></title>
      <url>http://www.wrran.com/blog/1995/07/03/miscellaneous/healthy-work-rest-schedule/</url>
      <content type="html"><![CDATA[<blockquote><p>不会休息的人就不会工作<br>@ 列宁</p></blockquote><a id="more"></a><h1 id="作息时间表"><a href="#作息时间表" class="headerlink" title="作息时间表"></a>作息时间表</h1><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:left">活动内容</th></tr></thead><tbody><tr><td style="text-align:center">7:00</td><td style="text-align:left">起床</td></tr><tr><td style="text-align:center">7:20-8:00</td><td style="text-align:left">吃早饭</td></tr><tr><td style="text-align:center">8:30-9:00</td><td style="text-align:left">避免运动</td></tr><tr><td style="text-align:center">9:00-10:30</td><td style="text-align:left">安排最困难的工作</td></tr><tr><td style="text-align:center">11:00</td><td style="text-align:left">吃点水果</td></tr><tr><td style="text-align:center">12:00-12:30</td><td style="text-align:left">午餐</td></tr><tr><td style="text-align:center">13:00-14:00</td><td style="text-align:left">午睡</td></tr><tr><td style="text-align:center">16:00</td><td style="text-align:left">一杯酸奶</td></tr><tr><td style="text-align:center">19:00</td><td style="text-align:left">最佳锻炼时间</td></tr><tr><td style="text-align:center">20:00</td><td style="text-align:left">看电视或看书</td></tr><tr><td style="text-align:center">22:00</td><td style="text-align:left">洗个热水澡</td></tr><tr><td style="text-align:center">22:30</td><td style="text-align:left">上床睡觉</td></tr></tbody></table><h1 id="说法"><a href="#说法" class="headerlink" title="说法"></a>说法</h1><p>要清醒认识到时间的重要性和秩序性。有效的时间作息，不仅会带来高质量的生活品质，还有可贵的工作状态，焕然一新的自己。</p><p>下面是《每日邮报》跟足美国作家的著作《每日惯例：艺术家是如何工作的？》刊登出了历史上各个领域的伟人的作息时间表。<br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/healthy-work-rest-schedule/%E8%BE%BE%E5%B0%94%E6%96%87.webp" alt><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/healthy-work-rest-schedule/%E5%BA%B7%E5%BE%B7.webp" alt><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/healthy-work-rest-schedule/%E8%8E%AB%E6%89%8E%E7%89%B9.webp" alt><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/healthy-work-rest-schedule/%E7%8B%84%E6%9B%B4%E6%96%AF.webp" alt><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/healthy-work-rest-schedule/%E8%B4%9D%E5%A4%9A%E8%8A%AC.webp" alt><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/healthy-work-rest-schedule/%E5%AF%8C%E5%85%B0%E5%85%8B%E6%9E%97.webp" alt><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/healthy-work-rest-schedule/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7.webp" alt><br><img src="http://7xuthx.com1.z0.glb.clouddn.com/image/healthy-work-rest-schedule/%E6%9F%B4%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA.webp" alt></p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p><a href="https://mp.weixin.qq.com/s/HjIaVBmFvDoll0D4pGb9ig" target="_blank" rel="noopener">【健康】全球公认最健康的作息时间表，你应该拥有~</a></p>]]></content>
      
        <categories>
            
            <category> miscellaneous </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[备忘录]]></title>
      <url>http://www.wrran.com/blog/1995/07/03/miscellaneous/zzz-memorandum/</url>
      <content type="html"><![CDATA[<blockquote><p>好记性不如烂笔头</p></blockquote><a id="more"></a><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">jQuery - API</a><br><a href="https://lodash.com/docs/4.16.6" target="_blank" rel="noopener">lodash - API</a><br><a href="http://www.jeasyuicn.com/api/docTtml/index.htm" target="_blank" rel="noopener">easyui - API</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">JavaScript Reference - MDN</a><br><a href="http://bluebirdjs.com/docs/getting-started.html" target="_blank" rel="noopener">Bluebird - Reference</a><br><a href="https://redis.io/commands" target="_blank" rel="noopener">Redis-commands - Reference</a><br><a href="https://github.com/nomiddlename/log4js-node" target="_blank" rel="noopener">log4js - Reference</a></p><h1 id="Boost"><a href="#Boost" class="headerlink" title="Boost"></a>Boost</h1><p><a href="http://www.boost.org/doc/libs/1_62_0/" target="_blank" rel="noopener">Boost 1.62.0 Library Documents</a></p><h1 id="Sails开发文档"><a href="#Sails开发文档" class="headerlink" title="Sails开发文档"></a>Sails开发文档</h1><p><a href="https://www.zybuluo.com/mdeditor#578471" target="_blank" rel="noopener">Sails tests</a><br><a href="https://www.zybuluo.com/mdeditor#578489" target="_blank" rel="noopener">Unit test</a><br><a href="https://www.zybuluo.com/mdeditor#578502" target="_blank" rel="noopener">Integration tests</a></p><h1 id="Vue-js学习资源"><a href="#Vue-js学习资源" class="headerlink" title="Vue.js学习资源"></a>Vue.js学习资源</h1><p><a href="http://vuejs.org.cn/guide/comparison.html" target="_blank" rel="noopener">对比其它框架 - Vue.js</a></p><h1 id="node-oracledb-API-文档"><a href="#node-oracledb-API-文档" class="headerlink" title="node-oracledb API 文档"></a>node-oracledb API 文档</h1><p><a href="https://github.com/oracle/node-oracledb/blob/master/doc/api.md" target="_blank" rel="noopener">node-oracledb API - 官方文档</a><br><a href="https://www.zybuluo.com/WrRan/note/570634" target="_blank" rel="noopener">Introduction</a><br><a href="https://www.zybuluo.com/WrRan/note/570640" target="_blank" rel="noopener">Errors</a><br><a href="https://www.zybuluo.com/WrRan/note/570646" target="_blank" rel="noopener">Oracledb Class</a><br><a href="https://www.zybuluo.com/WrRan/note/570661" target="_blank" rel="noopener">Connection Class</a><br><a href="https://www.zybuluo.com/WrRan/note/570671" target="_blank" rel="noopener">Lob Class</a><br><a href="https://www.zybuluo.com/WrRan/note/570675" target="_blank" rel="noopener">Pool Class</a><br><a href="https://www.zybuluo.com/WrRan/note/570683" target="_blank" rel="noopener">ResultSet Class</a><br><a href="https://www.zybuluo.com/WrRan/note/570687" target="_blank" rel="noopener">Connection Handling</a><br><a href="https://www.zybuluo.com/WrRan/note/570696" target="_blank" rel="noopener">SQL Execution</a><br><a href="https://www.zybuluo.com/WrRan/note/570699" target="_blank" rel="noopener">PL/SQL Execution</a><br><a href="https://www.zybuluo.com/WrRan/note/570702" target="_blank" rel="noopener">Working with CLOB and BLOB Data</a><br><a href="https://www.zybuluo.com/WrRan/note/570706" target="_blank" rel="noopener">Oracle Database 12.1 JSON Datatype</a><br><a href="https://www.zybuluo.com/WrRan/note/570707" target="_blank" rel="noopener">Bind Parameters for Prepared Statements</a><br><a href="https://www.zybuluo.com/WrRan/note/570710" target="_blank" rel="noopener">Transaction Management</a><br><a href="https://www.zybuluo.com/WrRan/note/570713" target="_blank" rel="noopener">Statement Caching</a><br><a href="https://www.zybuluo.com/WrRan/note/570715" target="_blank" rel="noopener">External Configuration</a><br><a href="https://www.zybuluo.com/WrRan/note/570717" target="_blank" rel="noopener">Globalization and National Language Support (NLS)</a><br><a href="https://www.zybuluo.com/WrRan/note/570719" target="_blank" rel="noopener">End-to-end Tracing, Mid-tier Authentication, and Auditing</a><br><a href="https://www.zybuluo.com/WrRan/note/570721" target="_blank" rel="noopener">Promises in node-oracledb</a></p><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="Python学习资料总结"><a href="#Python学习资料总结" class="headerlink" title="Python学习资料总结"></a>Python学习资料总结</h2><p><a href="https://zhuanlan.zhihu.com/p/22333205" target="_blank" rel="noopener">Python学习资料总结</a><br><a href="http://www.dongwm.com/archives/pythonjin-jie-bi-du-hui-zong/" target="_blank" rel="noopener">Python进阶必读汇总</a><br><a href="http://www.dongwm.com/archives/wo-li-jie-de-pythonzui-jia-shi-jian/" target="_blank" rel="noopener">我理解的python最佳实践</a><br><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">Python教程 - 廖雪峰</a><br><a href="https://www.zhihu.com/question/34907211" target="_blank" rel="noopener">Python 有哪些好的学习资料或者博客？</a><br><a href="https://www.zhihu.com/question/24590883" target="_blank" rel="noopener">哪些 Python 库让你相见恨晚？</a><br><a href="https://www.zhihu.com/question/29138020" target="_blank" rel="noopener">如何系统地自学 Python？</a></p><h2 id="C-amp-Python"><a href="#C-amp-Python" class="headerlink" title="C++ &amp; Python"></a>C++ &amp; Python</h2><p><a href="https://zhuanlan.zhihu.com/p/24059497" target="_blank" rel="noopener">基于Boost库实现的Python调用C++接口 - 知乎专栏</a><br><a href="http://www.boost.org/doc/libs/1_62_0/libs/python/doc/html/index.html" target="_blank" rel="noopener">Boost.Python</a></p><h2 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h2><p><a href="http://blog.sina.com.cn/s/blog_574a437f01019poo.html" target="_blank" rel="noopener">初学者如何查阅自然语言处理（NLP）领域学术资料</a></p><h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><p><a href="http://open.163.com/special/opencourse/paradigms.html" target="_blank" rel="noopener">斯坦福大学公开课：编程范式</a></p><h2 id="开源深度学习项目"><a href="#开源深度学习项目" class="headerlink" title="开源深度学习项目"></a>开源深度学习项目</h2><p><a href="https://www.oschina.net/news/79500/57-most-popular-deep-learning-project-at-github" target="_blank" rel="noopener">GitHub上57款最流行的开源深度学习项目</a></p><h2 id="CEF"><a href="#CEF" class="headerlink" title="CEF"></a>CEF</h2><p><a href="https://bitbucket.org/chromiumembedded/cef" target="_blank" rel="noopener">CEF Overview</a><br><a href="http://opensource.spotify.com/cefbuilds/index.html#windows64_builds" target="_blank" rel="noopener">CEF Download</a><br><a href="https://bitbucket.org/chromiumembedded/cef/wiki/Tutorial" target="_blank" rel="noopener">CEF Tutorial</a><br><a href="http://stackoverflow.com/questions/21169995/chromium-embedded-framework-cef-dependencies" target="_blank" rel="noopener">CEF dependencies - StackOverflow</a><br><a href="https://crosswalk-project.org/" target="_blank" rel="noopener">build world class hybrid apps</a><br><a href="http://blog.csdn.net/luoshengyang/article/details/48947685" target="_blank" rel="noopener">Chromium硬件加速渲染的OpenGL上下文绘图表面创建过程分析</a></p><h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a></p><h1 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h1><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAyNDUyMA==&amp;mid=2650491796&amp;idx=1&amp;sn=c220c90625750cc2785b8fcfd90b069a" target="_blank" rel="noopener">你迟早用得上的 9 款免费职场英文工具</a><br><a href="http://face3d.ssquaresystem.com/index.php" target="_blank" rel="noopener">Face 3D</a><br><a href="https://segmentfault.com/a/1190000006124164" target="_blank" rel="noopener">使用Visual Studio Code + Node.js搭建TypeScript开发环境</a><br><a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript - 官网</a><br><a href="http://cordova.apache.org/" target="_blank" rel="noopener">Cordova</a><br><a href="http://blog.csdn.net/banterise/article/details/51604274" target="_blank" rel="noopener">使用node-oracledb创建连接池，外部建立连接</a><br><a href="http://www.sogou.com/labs/resource/r.php" target="_blank" rel="noopener">搜狗实验室</a><br><a href="http://wap.sciencenet.cn/blogview.aspx?id=1018759&amp;from=singlemessage&amp;isappinstalled=0" target="_blank" rel="noopener">研究生第一篇学术论文常犯问题总结</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="http://www.cnblogs.com/xxey/p/4277181.html" target="_blank" rel="noopener">Beam Search （集束搜索/束搜索）</a><br><a href="https://msdn.microsoft.com/en-us/library/aa187916.aspx" target="_blank" rel="noopener">Development Tools and Languages - Microsoft</a></p>]]></content>
      
        <categories>
            
            <category> miscellaneous </category>
            
        </categories>
        
        
        <tags>
            
            <tag> memorandum </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
